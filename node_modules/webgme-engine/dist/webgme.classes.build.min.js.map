{
  "version": 3,
  "sources": [
    "../utils/build/webgme.classes/start.frag",
    "../node_modules/requirejs/require.js",
    "common/lib/debug/debug.js",
    "client/logger.js",
    "common/lib/q/q.js",
    "common/lib/webgme-ot/webgme-ot.js",
    "common/storage/constants.js",
    "common/util/guid.js",
    "common/EventDispatcher.js",
    "common/storage/storageclasses/watchers.js",
    "common/storage/storageclasses/simpleapi.js",
    "common/storage/storageclasses/objectloaders.js",
    "common/util/assert.js",
    "common/util/canon.js",
    "common/lib/chance/chance.js",
    "common/core/constants.js",
    "common/Constants.js",
    "common/util/random.js",
    "common/regexp.js",
    "common/util/jsonPatcher.js",
    "common/util/sha1.js",
    "common/util/key.js",
    "common/storage/util.js",
    "common/storage/project/cache.js",
    "common/storage/project/interface.js",
    "common/storage/project/branch.js",
    "common/storage/project/project.js",
    "common/storage/storageclasses/editorstorage.js",
    "common/util/url.js",
    "common/storage/socketio/browserclient.js",
    "common/storage/socketio/websocket.js",
    "common/storage/browserstorage.js",
    "common/core/CoreInternalError.js",
    "common/core/CoreAssert.js",
    "common/core/tasync.js",
    "common/core/corerel.js",
    "common/core/setcore.js",
    "common/core/guidcore.js",
    "common/core/nullpointercore.js",
    "common/core/coreunwrap.js",
    "common/core/CoreIllegalOperationError.js",
    "common/core/coretype.js",
    "common/core/constraintcore.js",
    "common/core/convertData.js",
    "common/core/CoreIllegalArgumentError.js",
    "common/util/util.js",
    "common/core/coretree.js",
    "common/core/metacore.js",
    "common/core/coretreeloader.js",
    "common/util/diff.js",
    "common/core/corediff.js",
    "common/core/metacachecore.js",
    "common/core/mixincore.js",
    "common/core/metaquerycore.js",
    "common/core/librarycore.js",
    "common/core/core.js",
    "common/core/coreQ.js",
    "client/constants.js",
    "common/core/users/metarules.js",
    "client/gmeNodeGetter.js",
    "client/gmeNodeSetter.js",
    "client/libraries.js",
    "client/gmeServerRequests.js",
    "common/blob/BlobConfig.js",
    "common/blob/BlobMetadata.js",
    "common/blob/Artifact.js",
    "common/lib/superagent/superagent.js",
    "common/util/uint.js",
    "common/blob/BlobClient.js",
    "client/SaveToDisk.js",
    "client/stateloghelpers.js",
    "plugin/PluginNodeDescription.js",
    "plugin/PluginMessage.js",
    "plugin/PluginResultBase.js",
    "plugin/PluginResult.js",
    "plugin/util.js",
    "common/util/tarjan.js",
    "plugin/managerbase.js",
    "client/pluginmanager.js",
    "client/websocketRouterAccess.js",
    "client/client.js",
    "common/executor/ExecutorClient.js",
    "../utils/build/webgme.classes/webgme.classes.js",
    "../../../../../module-insertRequire.js",
    "../utils/build/webgme.classes/end.frag"
  ],
  "names": [],
  "mappingspmt4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5yytfhvTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrhzBA;AACA;AACA;AACA;AACA;AACA;AACA,ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjxczLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACn9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/gBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACznvphxrvlxnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxllprlttzngCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvxljrSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClnpxqtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACraA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClpphgqrrlnbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACldhg
  "file": "webgme.classes.build.min.js",
  "sourcesContent": [
    "// define global GME variable\r\nvar GME = GME || {};\r\n\r\n// property to access GME class definitions\r\nGME.classes = GME.classes || {};\r\n\r\n// property to access build in dependencies\r\nGME.utils = GME.utils || {};\r\n\r\n(function(){\n",
    "/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global, setTimeout) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.3.6',\n        commentRegExp = /\\/\\*[\\s\\S]*?\\*\\/|([^:\"'=]|^)\\/\\/.*$/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    //Could match something like ')//comment', do not lose the prefix to comment.\n    function commentReplace(match, singlePrefix) {\n        return singlePrefix || '';\n    }\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttps://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (isNormalized) {\n                        normalizedName = name;\n                    } else if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                each(globalDefQueue, function(queueItem) {\n                    var id = queueItem[0];\n                    if (typeof id === 'string') {\n                        context.defQueueMap[id] = true;\n                    }\n                    defQueue.push(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    // Only fetch if not already in the defQueue.\n                    if (!hasProp(context.defQueueMap, id)) {\n                        this.fetch();\n                    }\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                var resLoadMaps = [];\n                                each(this.depMaps, function (depMap) {\n                                    resLoadMaps.push(depMap.normalizedMap || depMap);\n                                });\n                                req.onResourceLoad(context, this.map, resLoadMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.map.normalizedMap = normalizedMap;\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n            context.defQueueMap = {};\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            defQueueMap: {},\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                // Convert old style urlArgs string to a function.\n                if (typeof cfg.urlArgs === 'string') {\n                    var urlArgs = cfg.urlArgs;\n                    cfg.urlArgs = function(id, url) {\n                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;\n                    };\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n                        delete context.defQueueMap[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n                context.defQueueMap = {};\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|^blob\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs && !/^blob\\:/.test(url) ?\n                       url + config.urlArgs(moduleName, url) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    var parents = [];\n                    eachProp(registry, function(value, key) {\n                        if (key.indexOf('_@r') !== 0) {\n                            each(value.depMaps, function(depMap) {\n                                if (depMap.id === data.id) {\n                                    parents.push(key);\n                                    return true;\n                                }\n                            });\n                        }\n                    });\n                    return onError(makeError('scripterror', 'Script error for \"' + data.id +\n                                             (parents.length ?\n                                             '\", needed by: ' + parents.join(', ') :\n                                             '\"'), evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/requirejs/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/requirejs/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //Calling onNodeCreated after all properties on the node have been\n            //set, but before it is placed in the DOM.\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation is that a build has been done so\n                //that only one script needs to be loaded anyway. This may need\n                //to be reevaluated if other use cases become common.\n\n                // Post a task to the event loop to work around a bug in WebKit\n                // where the worker gets garbage-collected after calling\n                // importScripts(): https://webkit.org/b/153317\n                setTimeout(function() {}, 0);\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one,\n                //but only do so if the data-main value is not a loader plugin\n                //module ID.\n                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, commentReplace)\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        if (context) {\n            context.defQueue.push([name, deps, callback]);\n            context.defQueueMap[name] = true;\n        } else {\n            globalDefQueue.push([name, deps, callback]);\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));\n\ndefine(\"../node_modules/requirejs/require\", function(){});\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('debug',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.debug = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n},{}],2:[function(require,module,exports){\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n},{\"ms\":1}],3:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],\"debug\":[function(require,module,exports){\n(function (process){(function (){\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n}).call(this)}).call(this,require('_process'))\n},{\"./common\":2,\"_process\":3}]},{},[])(\"debug\")\n});\n\n",
    "/*globals define, debug*/\r\n/*eslint-env node*/\r\n/*eslint no-console: 0*/\r\n\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/logger',['debug'], function (_debug) {\r\n    'use strict';\r\n    // Separate namespaces using ',' a leading '-' will disable the namespace.\r\n    // Each part takes a regex.\r\n    //      ex: localStorage.debug = '*,-socket\\.io*,-engine\\.io*'\r\n    //      will log all but socket.io and engine.io\r\n    function createLogger(name, options) {\r\n        var log = typeof debug === 'undefined' ? _debug(name) : debug(name),\r\n            level,\r\n            levels = {\r\n                silly: 0,\r\n                input: 1,\r\n                verbose: 2,\r\n                prompt: 3,\r\n                debug: 4,\r\n                info: 5,\r\n                data: 6,\r\n                help: 7,\r\n                warn: 8,\r\n                error: 9\r\n            };\r\n        if (!options) {\r\n            throw new Error('options required in logger');\r\n        }\r\n        if (Object.hasOwn(options, 'level') === false) {\r\n            throw new Error('options.level required in logger');\r\n        }\r\n        level = levels[options.level];\r\n        if (typeof level === 'undefined') {\r\n            level = levels.info;\r\n        }\r\n\r\n        log.debug = function () {\r\n            if (log.enabled && level <= levels.debug) {\r\n                if (console.debug) {\r\n                    log.log = console.debug.bind(console);\r\n                } else {\r\n                    log.log = console.log.bind(console);\r\n                }\r\n                log.apply(this, arguments);\r\n            }\r\n        };\r\n        log.info = function () {\r\n            if (log.enabled && level <= levels.info) {\r\n                log.log = console.info.bind(console);\r\n                log.apply(this, arguments);\r\n            }\r\n        };\r\n        log.warn = function () {\r\n            if (log.enabled && level <= levels.warn) {\r\n                log.log = console.warn.bind(console);\r\n                log.apply(this, arguments);\r\n            }\r\n        };\r\n        log.error = function () {\r\n            if (log.enabled && level <= levels.error) {\r\n                log.log = console.error.bind(console);\r\n                log.apply(this, arguments);\r\n            } else {\r\n                console.error.apply(console, arguments);\r\n            }\r\n        };\r\n\r\n        log.fork = function (forkName, useForkName) {\r\n            forkName = useForkName ? forkName : name + ':' + forkName;\r\n            return createLogger(forkName, options);\r\n        };\r\n\r\n        log.forkWithOptions = function (_name, _options) {\r\n            return createLogger(_name, _options);\r\n        };\r\n\r\n        return log;\r\n    }\r\n\r\n    function createWithGmeConfig(name, gmeConfig) {\r\n        return createLogger(name, gmeConfig.client.log);\r\n    }\r\n\r\n    return {\r\n        create: createLogger,\r\n        createWithGmeConfig: createWithGmeConfig\r\n    };\r\n});\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('q',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.q = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\n(function (setImmediate,clearImmediate){(function (){\nvar nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n}).call(this)}).call(this,require(\"timers\").setImmediate,require(\"timers\").clearImmediate)\n},{\"process/browser.js\":1,\"timers\":2}],\"q\":[function(require,module,exports){\n(function (process,setImmediate){(function (){\n// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n}).call(this)}).call(this,require('_process'),require(\"timers\").setImmediate)\n},{\"_process\":1,\"timers\":2}]},{},[])(\"q\")\n});\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('webgme-ot',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.webgmeOt = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n// translation of https://github.com/djspiewak/cccp/blob/master/agent/src/main/scala/com/codecommit/cccp/agent/state.scala\r\nvar log = function (){};\r\n\r\nfunction Client(revision) {\r\n    this.revision = revision; // the next expected revision number\r\n    this.state = synchronized_; // start state\r\n}\r\n\r\nClient.prototype.setState = function (state) {\r\n    this.state = state;\r\n    this.state.logState(this);\r\n};\r\n\r\n// Call this method when the user changes the document.\r\nClient.prototype.applyClient = function (operation) {\r\n    this.setState(this.state.applyClient(this, operation));\r\n};\r\n\r\n// Call this method with a new operation from the server\r\nClient.prototype.applyServer = function (operation) {\r\n    this.revision++;\r\n    this.setState(this.state.applyServer(this, operation));\r\n};\r\n\r\nClient.prototype.serverAck = function () {\r\n    this.revision++;\r\n    this.setState(this.state.serverAck(this));\r\n};\r\n\r\nClient.prototype.serverReconnect = function () {\r\n    if (typeof this.state.resend === 'function') {\r\n        this.state.resend(this);\r\n    }\r\n};\r\n\r\n// Transforms a selection from the latest known server state to the current\r\n// client state. For example, if we get from the server the information that\r\n// another user's cursor is at position 3, but the server hasn't yet received\r\n// our newest operation, an insertion of 5 characters at the beginning of the\r\n// document, the correct position of the other user's cursor in our current\r\n// document is 8.\r\nClient.prototype.transformSelection = function (selection) {\r\n    return this.state.transformSelection(selection);\r\n};\r\n\r\n// Override this method.\r\nClient.prototype.sendOperation = function (revision, operation) {\r\n    throw new Error(\"sendOperation must be defined in child class\");\r\n};\r\n\r\n// Override this method.\r\nClient.prototype.applyOperation = function (operation) {\r\n    throw new Error(\"applyOperation must be defined in child class\");\r\n};\r\n\r\n\r\n// In the 'Synchronized' state, there is no pending operation that the client\r\n// has sent to the server.\r\nfunction Synchronized() {\r\n}\r\n\r\nClient.Synchronized = Synchronized;\r\n\r\nSynchronized.prototype.applyClient = function (client, operation) {\r\n    // When the user makes an edit, send the operation to the server and\r\n    // switch to the 'AwaitingConfirm' state\r\n    client.sendOperation(client.revision, operation);\r\n    return new AwaitingConfirm(operation);\r\n};\r\n\r\nSynchronized.prototype.applyServer = function (client, operation) {\r\n    // When we receive a new operation from the server, the operation can be\r\n    // simply applied to the current document\r\n    client.applyOperation(operation);\r\n    return this;\r\n};\r\n\r\nSynchronized.prototype.serverAck = function (client) {\r\n    throw new Error(\"There is no pending operation.\");\r\n};\r\n\r\n// Nothing to do because the latest server state and client state are the same.\r\nSynchronized.prototype.transformSelection = function (x) {\r\n    return x;\r\n};\r\n\r\nSynchronized.prototype.logState = function (client) {\r\n    log('Synchronized at revision', client.revision);\r\n};\r\n\r\n// Singleton\r\nvar synchronized_ = new Synchronized();\r\n\r\n\r\n// In the 'AwaitingConfirm' state, there's one operation the client has sent\r\n// to the server and is still waiting for an acknowledgement.\r\nfunction AwaitingConfirm(outstanding) {\r\n    // Save the pending operation\r\n    this.outstanding = outstanding;\r\n}\r\n\r\nClient.AwaitingConfirm = AwaitingConfirm;\r\n\r\nAwaitingConfirm.prototype.applyClient = function (client, operation) {\r\n    // When the user makes an edit, don't send the operation immediately,\r\n    // instead switch to 'AwaitingWithBuffer' state\r\n    return new AwaitingWithBuffer(this.outstanding, operation);\r\n};\r\n\r\nAwaitingConfirm.prototype.applyServer = function (client, operation) {\r\n    // This is another client's operation. Visualization:\r\n    //\r\n    //                   /\\\r\n    // this.outstanding /  \\ operation\r\n    //                 /    \\\r\n    //                 \\    /\r\n    //  pair[1]         \\  / pair[0] (new outstanding)\r\n    //  (can be applied  \\/\r\n    //  to the client's\r\n    //  current document)\r\n    var pair = operation.constructor.transform(this.outstanding, operation);\r\n    client.applyOperation(pair[1]);\r\n    return new AwaitingConfirm(pair[0]);\r\n};\r\n\r\nAwaitingConfirm.prototype.serverAck = function (client) {\r\n    // The client's operation has been acknowledged\r\n    // => switch to synchronized state\r\n    return synchronized_;\r\n};\r\n\r\nAwaitingConfirm.prototype.transformSelection = function (selection) {\r\n    return selection.transform(this.outstanding);\r\n};\r\n\r\nAwaitingConfirm.prototype.resend = function (client) {\r\n    // The confirm didn't come because the client was disconnected.\r\n    // Now that it has reconnected, we resend the outstanding operation.\r\n    client.sendOperation(client.revision, this.outstanding);\r\n};\r\n\r\nAwaitingConfirm.prototype.logState = function (client) {\r\n    log('AwaitingConfirm at revision', client.revision, '\\noperation:', this.outstanding);\r\n};\r\n\r\n\r\n// In the 'AwaitingWithBuffer' state, the client is waiting for an operation\r\n// to be acknowledged by the server while buffering the edits the user makes\r\nfunction AwaitingWithBuffer(outstanding, buffer) {\r\n    // Save the pending operation and the user's edits since then\r\n    this.outstanding = outstanding;\r\n    this.buffer = buffer;\r\n}\r\n\r\nClient.AwaitingWithBuffer = AwaitingWithBuffer;\r\n\r\nAwaitingWithBuffer.prototype.applyClient = function (client, operation) {\r\n    // Compose the user's changes onto the buffer\r\n    var newBuffer = this.buffer.compose(operation);\r\n    return new AwaitingWithBuffer(this.outstanding, newBuffer);\r\n};\r\n\r\nAwaitingWithBuffer.prototype.applyServer = function (client, operation) {\r\n    // Operation comes from another client\r\n    //\r\n    //                       /\\\r\n    //     this.outstanding /  \\ operation\r\n    //                     /    \\\r\n    //                    /\\    /\r\n    //       this.buffer /  \\* / pair1[0] (new outstanding)\r\n    //                  /    \\/\r\n    //                  \\    /\r\n    //          pair2[1] \\  / pair2[0] (new buffer)\r\n    // the transformed    \\/\r\n    // operation -- can\r\n    // be applied to the\r\n    // client's current\r\n    // document\r\n    //\r\n    // * pair1[1]\r\n    var transform = operation.constructor.transform;\r\n    var pair1 = transform(this.outstanding, operation);\r\n    var pair2 = transform(this.buffer, pair1[1]);\r\n    client.applyOperation(pair2[1]);\r\n    return new AwaitingWithBuffer(pair1[0], pair2[0]);\r\n};\r\n\r\nAwaitingWithBuffer.prototype.serverAck = function (client) {\r\n    // The pending operation has been acknowledged\r\n    // => send buffer\r\n    client.sendOperation(client.revision, this.buffer);\r\n    return new AwaitingConfirm(this.buffer);\r\n};\r\n\r\nAwaitingWithBuffer.prototype.transformSelection = function (selection) {\r\n    return selection.transform(this.outstanding).transform(this.buffer);\r\n};\r\n\r\nAwaitingWithBuffer.prototype.resend = function (client) {\r\n    // The confirm didn't come because the client was disconnected.\r\n    // Now that it has reconnected, we resend the outstanding operation.\r\n    client.sendOperation(client.revision, this.outstanding);\r\n};\r\n\r\nAwaitingWithBuffer.prototype.logState = function (client) {\r\n    log('AwaitingWithBuffer at revision', client.revision, '\\noperation:', this.outstanding);\r\n};\r\n\r\n\r\nmodule.exports = Client;\r\n\r\n\n},{}],2:[function(require,module,exports){\nvar TextOperation = require('./text-operation'),\r\n    Selection = require('./selection'),\r\n    added,\r\n    styleSheet;\r\n\r\nfunction CodeMirrorAdapter(cm) {\r\n    this.cm = cm;\r\n    this.ignoreNextChange = false;\r\n    this.changeInProgress = false;\r\n    this.selectionChanged = false;\r\n\r\n    bind(this, 'onChanges');\r\n    bind(this, 'onChange');\r\n    bind(this, 'onCursorActivity');\r\n    bind(this, 'onFocus');\r\n    bind(this, 'onBlur');\r\n\r\n    cm.on('changes', this.onChanges);\r\n    cm.on('change', this.onChange);\r\n    cm.on('cursorActivity', this.onCursorActivity);\r\n    cm.on('focus', this.onFocus);\r\n    cm.on('blur', this.onBlur);\r\n}\r\n\r\n// Removes all event listeners from the CodeMirror instance.\r\nCodeMirrorAdapter.prototype.detach = function () {\r\n    this.cm.off('changes', this.onChanges);\r\n    this.cm.off('change', this.onChange);\r\n    this.cm.off('cursorActivity', this.onCursorActivity);\r\n    this.cm.off('focus', this.onFocus);\r\n    this.cm.off('blur', this.onBlur);\r\n};\r\n\r\nfunction cmpPos(a, b) {\r\n    if (a.line < b.line) {\r\n        return -1;\r\n    }\r\n    if (a.line > b.line) {\r\n        return 1;\r\n    }\r\n    if (a.ch < b.ch) {\r\n        return -1;\r\n    }\r\n    if (a.ch > b.ch) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction posEq(a, b) {\r\n    return cmpPos(a, b) === 0;\r\n}\r\nfunction posLe(a, b) {\r\n    return cmpPos(a, b) <= 0;\r\n}\r\n\r\nfunction minPos(a, b) {\r\n    return posLe(a, b) ? a : b;\r\n}\r\nfunction maxPos(a, b) {\r\n    return posLe(a, b) ? b : a;\r\n}\r\n\r\nfunction codemirrorDocLength(doc) {\r\n    return doc.indexFromPos({line: doc.lastLine(), ch: 0}) +\r\n        doc.getLine(doc.lastLine()).length;\r\n}\r\n\r\n// Converts a CodeMirror change array (as obtained from the 'changes' event\r\n// in CodeMirror v4) or single change or linked list of changes (as returned\r\n// by the 'change' event in CodeMirror prior to version 4) into a\r\n// TextOperation and its inverse and returns them as a two-element array.\r\nCodeMirrorAdapter.operationFromCodeMirrorChanges = function (changes, doc) {\r\n    // Approach: Replay the changes, beginning with the most recent one, and\r\n    // construct the operation and its inverse. We have to convert the position\r\n    // in the pre-change coordinate system to an index. We have a method to\r\n    // convert a position in the coordinate system after all changes to an index,\r\n    // namely CodeMirror's `indexFromPos` method. We can use the information of\r\n    // a single change object to convert a post-change coordinate system to a\r\n    // pre-change coordinate system. We can now proceed inductively to get a\r\n    // pre-change coordinate system for all changes in the linked list.\r\n    // A disadvantage of this approach is its complexity `O(n^2)` in the length\r\n    // of the linked list of changes.\r\n\r\n    var docEndLength = codemirrorDocLength(doc);\r\n    var operation = new TextOperation().retain(docEndLength);\r\n    var inverse = new TextOperation().retain(docEndLength);\r\n\r\n    var indexFromPos = function (pos) {\r\n        return doc.indexFromPos(pos);\r\n    };\r\n\r\n    function last(arr) {\r\n        return arr[arr.length - 1];\r\n    }\r\n\r\n    function sumLengths(strArr) {\r\n        if (strArr.length === 0) {\r\n            return 0;\r\n        }\r\n        var sum = 0;\r\n        for (var i = 0; i < strArr.length; i++) {\r\n            sum += strArr[i].length;\r\n        }\r\n        return sum + strArr.length - 1;\r\n    }\r\n\r\n    function updateIndexFromPos(indexFromPos, change) {\r\n        return function (pos) {\r\n            if (posLe(pos, change.from)) {\r\n                return indexFromPos(pos);\r\n            }\r\n            if (posLe(change.to, pos)) {\r\n                return indexFromPos({\r\n                        line: pos.line + change.text.length - 1 - (change.to.line - change.from.line),\r\n                        ch: (change.to.line < pos.line) ?\r\n                            pos.ch :\r\n                            (change.text.length <= 1) ?\r\n                            pos.ch - (change.to.ch - change.from.ch) + sumLengths(change.text) :\r\n                            pos.ch - change.to.ch + last(change.text).length\r\n                    }) + sumLengths(change.removed) - sumLengths(change.text);\r\n            }\r\n            if (change.from.line === pos.line) {\r\n                return indexFromPos(change.from) + pos.ch - change.from.ch;\r\n            }\r\n            return indexFromPos(change.from) +\r\n                sumLengths(change.removed.slice(0, pos.line - change.from.line)) +\r\n                1 + pos.ch;\r\n        };\r\n    }\r\n\r\n    for (var i = changes.length - 1; i >= 0; i--) {\r\n        var change = changes[i];\r\n        indexFromPos = updateIndexFromPos(indexFromPos, change);\r\n\r\n        var fromIndex = indexFromPos(change.from);\r\n        var restLength = docEndLength - fromIndex - sumLengths(change.text);\r\n\r\n        operation = new TextOperation()\r\n            .retain(fromIndex)\r\n            ['delete'](sumLengths(change.removed))\r\n            .insert(change.text.join('\\n'))\r\n            .retain(restLength)\r\n            .compose(operation);\r\n\r\n        inverse = inverse.compose(new TextOperation()\r\n            .retain(fromIndex)\r\n            ['delete'](sumLengths(change.text))\r\n            .insert(change.removed.join('\\n'))\r\n            .retain(restLength)\r\n        );\r\n\r\n        docEndLength += sumLengths(change.removed) - sumLengths(change.text);\r\n    }\r\n\r\n    return [operation, inverse];\r\n};\r\n\r\n// Singular form for backwards compatibility.\r\nCodeMirrorAdapter.operationFromCodeMirrorChange =\r\n    CodeMirrorAdapter.operationFromCodeMirrorChanges;\r\n\r\n// Apply an operation to a CodeMirror instance.\r\nCodeMirrorAdapter.applyOperationToCodeMirror = function (operation, cm) {\r\n    cm.operation(function () {\r\n        var ops = operation.ops;\r\n        var index = 0; // holds the current index into CodeMirror's content\r\n        for (var i = 0, l = ops.length; i < l; i++) {\r\n            var op = ops[i];\r\n            if (TextOperation.isRetain(op)) {\r\n                index += op;\r\n            } else if (TextOperation.isInsert(op)) {\r\n                cm.replaceRange(op, cm.posFromIndex(index));\r\n                index += op.length;\r\n            } else if (TextOperation.isDelete(op)) {\r\n                var from = cm.posFromIndex(index);\r\n                var to = cm.posFromIndex(index - op);\r\n                cm.replaceRange('', from, to);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nCodeMirrorAdapter.prototype.registerCallbacks = function (cb) {\r\n    this.callbacks = cb;\r\n};\r\n\r\nCodeMirrorAdapter.prototype.onChange = function () {\r\n    // By default, CodeMirror's event order is the following:\r\n    // 1. 'change', 2. 'cursorActivity', 3. 'changes'.\r\n    // We want to fire the 'selectionChange' event after the 'change' event,\r\n    // but need the information from the 'changes' event. Therefore, we detect\r\n    // when a change is in progress by listening to the change event, setting\r\n    // a flag that makes this adapter defer all 'cursorActivity' events.\r\n    this.changeInProgress = true;\r\n};\r\n\r\nCodeMirrorAdapter.prototype.onChanges = function (_, changes) {\r\n    if (!this.ignoreNextChange) {\r\n        var pair = CodeMirrorAdapter.operationFromCodeMirrorChanges(changes, this.cm);\r\n        this.trigger('change', pair[0], pair[1]);\r\n    }\r\n    if (this.selectionChanged) {\r\n        this.trigger('selectionChange');\r\n    }\r\n    this.changeInProgress = false;\r\n    this.ignoreNextChange = false;\r\n};\r\n\r\nCodeMirrorAdapter.prototype.onCursorActivity =\r\n    CodeMirrorAdapter.prototype.onFocus = function () {\r\n        if (this.changeInProgress) {\r\n            this.selectionChanged = true;\r\n        } else {\r\n            this.trigger('selectionChange');\r\n        }\r\n    };\r\n\r\nCodeMirrorAdapter.prototype.onBlur = function () {\r\n    if (!this.cm.somethingSelected()) {\r\n        this.trigger('blur');\r\n    }\r\n};\r\n\r\nCodeMirrorAdapter.prototype.getValue = function () {\r\n    return this.cm.getValue();\r\n};\r\n\r\nCodeMirrorAdapter.prototype.getSelection = function () {\r\n    var cm = this.cm;\r\n\r\n    var selectionList = cm.listSelections();\r\n    var ranges = [];\r\n    for (var i = 0; i < selectionList.length; i++) {\r\n        ranges[i] = new Selection.Range(\r\n            cm.indexFromPos(selectionList[i].anchor),\r\n            cm.indexFromPos(selectionList[i].head)\r\n        );\r\n    }\r\n\r\n    return new Selection(ranges);\r\n};\r\n\r\nCodeMirrorAdapter.prototype.setSelection = function (selection) {\r\n    var ranges = [];\r\n    for (var i = 0; i < selection.ranges.length; i++) {\r\n        var range = selection.ranges[i];\r\n        ranges[i] = {\r\n            anchor: this.cm.posFromIndex(range.anchor),\r\n            head: this.cm.posFromIndex(range.head)\r\n        };\r\n    }\r\n    this.cm.setSelections(ranges);\r\n};\r\n\r\nCodeMirrorAdapter.addStyleRule = function (css) {\r\n    var styleElement;\r\n\r\n    if (!added) {\r\n        added = {};\r\n        styleElement = document.createElement('style');\r\n        document.documentElement.getElementsByTagName('head')[0].appendChild(styleElement);\r\n        styleSheet = styleElement.sheet;\r\n    }\r\n\r\n    if (!added[css]) {\r\n        added[css] = true;\r\n        styleSheet.insertRule(css, (styleSheet.cssRules || styleSheet.rules).length);\r\n    }\r\n};\r\n\r\nCodeMirrorAdapter.prototype.setOtherCursor = function (position, color, clientId) {\r\n    var cursorPos = this.cm.posFromIndex(position);\r\n    //var cursorCoords = this.cm.cursorCoords(cursorPos);\r\n    var cursorEl = document.createElement('span');\r\n    cursorEl.title = clientId;\r\n    cursorEl.className = 'other-client';\r\n    cursorEl.style.display = 'inline-block';\r\n    cursorEl.style.padding = '0';\r\n    cursorEl.style.marginLeft = cursorEl.style.marginRight = '-1px';\r\n    cursorEl.style.borderLeftWidth = '2px';\r\n    cursorEl.style.borderLeftStyle = 'solid';\r\n    cursorEl.style.borderLeftColor = color;\r\n    cursorEl.style.height = 16 + 'px';\r\n    cursorEl.style['margin-bottom'] = -4 + 'px';\r\n    cursorEl.style.zIndex = 0;\r\n    cursorEl.setAttribute('data-clientid', clientId);\r\n    return this.cm.setBookmark(cursorPos, {widget: cursorEl, insertLeft: true});\r\n};\r\n\r\nCodeMirrorAdapter.prototype.setOtherSelectionRange = function (range, color, clientId) {\r\n    var match = /^#([0-9a-fA-F]{6})$/.exec(color);\r\n    if (!match) {\r\n        throw new Error(\"only six-digit hex colors are allowed.\");\r\n    }\r\n    var selectionClassName = 'selection-' + match[1];\r\n    var rule = '.' + selectionClassName + ' { background: ' + color + '; }';\r\n\r\n    CodeMirrorAdapter.addStyleRule(rule);\r\n\r\n    var anchorPos = this.cm.posFromIndex(range.anchor);\r\n    var headPos = this.cm.posFromIndex(range.head);\r\n\r\n    return this.cm.markText(\r\n        minPos(anchorPos, headPos),\r\n        maxPos(anchorPos, headPos),\r\n        {className: selectionClassName}\r\n    );\r\n};\r\n\r\nCodeMirrorAdapter.prototype.setOtherSelection = function (selection, color, clientId) {\r\n    var selectionObjects = [],\r\n        cursorColor,\r\n        rangeColor;\r\n\r\n    if (typeof color === 'string') {\r\n        cursorColor = rangeColor = color;\r\n    } else {\r\n        cursorColor = color.cursor;\r\n        rangeColor = color.range;\r\n    }\r\n\r\n    for (var i = 0; i < selection.ranges.length; i++) {\r\n        var range = selection.ranges[i];\r\n        if (range.isEmpty()) {\r\n            selectionObjects[i] = this.setOtherCursor(range.head, cursorColor, clientId);\r\n        } else {\r\n            selectionObjects[i] = this.setOtherSelectionRange(range, rangeColor, clientId);\r\n        }\r\n    }\r\n    return {\r\n        clear: function () {\r\n            for (var i = 0; i < selectionObjects.length; i++) {\r\n                selectionObjects[i].clear();\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nCodeMirrorAdapter.prototype.trigger = function (event) {\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    var action = this.callbacks && this.callbacks[event];\r\n    if (action) {\r\n        action.apply(this, args);\r\n    }\r\n};\r\n\r\nCodeMirrorAdapter.prototype.applyOperation = function (operation) {\r\n    this.ignoreNextChange = true;\r\n    CodeMirrorAdapter.applyOperationToCodeMirror(operation, this.cm);\r\n};\r\n\r\nCodeMirrorAdapter.prototype.registerUndo = function (undoFn) {\r\n    this.cm.undo = undoFn;\r\n};\r\n\r\nCodeMirrorAdapter.prototype.registerRedo = function (redoFn) {\r\n    this.cm.redo = redoFn;\r\n};\r\n\r\n// Throws an error if the first argument is falsy. Useful for debugging.\r\nfunction assert(b, msg) {\r\n    if (!b) {\r\n        throw new Error(msg || \"assertion error\");\r\n    }\r\n}\r\n\r\n// Bind a method to an object, so it doesn't matter whether you call\r\n// object.method() directly or pass object.method as a reference to another\r\n// function.\r\nfunction bind(obj, method) {\r\n    var fn = obj[method];\r\n    obj[method] = function () {\r\n        fn.apply(obj, arguments);\r\n    };\r\n}\r\n\r\nmodule.exports = CodeMirrorAdapter;\r\n\n},{\"./selection\":3,\"./text-operation\":4}],3:[function(require,module,exports){\nvar TextOperation = require('./text-operation');\r\n\r\n// Range has `anchor` and `head` properties, which are zero-based indices into\r\n// the document. The `anchor` is the side of the selection that stays fixed,\r\n// `head` is the side of the selection where the cursor is. When both are\r\n// equal, the range represents a cursor.\r\nfunction Range(anchor, head) {\r\n    this.anchor = anchor;\r\n    this.head = head;\r\n}\r\n\r\nRange.fromJSON = function (obj) {\r\n    return new Range(obj.anchor, obj.head);\r\n};\r\n\r\nRange.prototype.equals = function (other) {\r\n    return this.anchor === other.anchor && this.head === other.head;\r\n};\r\n\r\nRange.prototype.isEmpty = function () {\r\n    return this.anchor === this.head;\r\n};\r\n\r\nRange.prototype.transform = function (other) {\r\n    function transformIndex(index) {\r\n        var newIndex = index;\r\n        var ops = other.ops;\r\n        for (var i = 0, l = other.ops.length; i < l; i++) {\r\n            if (TextOperation.isRetain(ops[i])) {\r\n                index -= ops[i];\r\n            } else if (TextOperation.isInsert(ops[i])) {\r\n                newIndex += ops[i].length;\r\n            } else {\r\n                newIndex -= Math.min(index, -ops[i]);\r\n                index += ops[i];\r\n            }\r\n            if (index < 0) {\r\n                break;\r\n            }\r\n        }\r\n        return newIndex;\r\n    }\r\n\r\n    var newAnchor = transformIndex(this.anchor);\r\n    if (this.anchor === this.head) {\r\n        return new Range(newAnchor, newAnchor);\r\n    }\r\n    return new Range(newAnchor, transformIndex(this.head));\r\n};\r\n\r\n// A selection is basically an array of ranges. Every range represents a real\r\n// selection or a cursor in the document (when the start position equals the\r\n// end position of the range). The array must not be empty.\r\nfunction Selection(ranges) {\r\n    ranges = ranges || [];\r\n    ranges = ranges instanceof Array ? ranges : [ranges];\r\n\r\n    this.ranges = ranges.map(function (range) {\r\n        return range instanceof Range ? range : Range.fromJSON(range);\r\n    });\r\n}\r\n\r\nSelection.Range = Range;\r\n\r\n// Convenience method for creating selections only containing a single cursor\r\n// and no real selection range.\r\nSelection.createCursor = function (position) {\r\n    return new Selection([new Range(position, position)]);\r\n};\r\n\r\nSelection.fromJSON = function (obj) {\r\n    var objRanges = obj.ranges || obj;\r\n    for (var i = 0, ranges = []; i < objRanges.length; i++) {\r\n        ranges[i] = Range.fromJSON(objRanges[i]);\r\n    }\r\n    return new Selection(ranges);\r\n};\r\n\r\nSelection.prototype.equals = function (other) {\r\n    if (this.position !== other.position) {\r\n        return false;\r\n    }\r\n    if (this.ranges.length !== other.ranges.length) {\r\n        return false;\r\n    }\r\n    // FIXME: Sort ranges before comparing them?\r\n    for (var i = 0; i < this.ranges.length; i++) {\r\n        if (!this.ranges[i].equals(other.ranges[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nSelection.prototype.somethingSelected = function () {\r\n    for (var i = 0; i < this.ranges.length; i++) {\r\n        if (!this.ranges[i].isEmpty()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\n// Return the more current selection information.\r\nSelection.prototype.compose = function (other) {\r\n    return other;\r\n};\r\n\r\n// Update the selection with respect to an operation.\r\nSelection.prototype.transform = function (other) {\r\n    for (var i = 0, newRanges = []; i < this.ranges.length; i++) {\r\n        newRanges[i] = this.ranges[i].transform(other);\r\n    }\r\n    return new Selection(newRanges);\r\n};\r\n\r\n\r\nmodule.exports = Selection;\r\n\n},{\"./text-operation\":4}],4:[function(require,module,exports){\nif (typeof ot === 'undefined') {\r\n  // Export for browsers\r\n  var ot = {};\r\n}\r\n\r\not.TextOperation = (function () {\r\n  'use strict';\r\n\r\n  // Constructor for new operations.\r\n  function TextOperation () {\r\n    if (!this || this.constructor !== TextOperation) {\r\n      // => function was called without 'new'\r\n      return new TextOperation();\r\n    }\r\n\r\n    // When an operation is applied to an input string, you can think of this as\r\n    // if an imaginary cursor runs over the entire string and skips over some\r\n    // parts, deletes some parts and inserts characters at some positions. These\r\n    // actions (skip/delete/insert) are stored as an array in the \"ops\" property.\r\n    this.ops = [];\r\n    // An operation's baseLength is the length of every string the operation\r\n    // can be applied to.\r\n    this.baseLength = 0;\r\n    // The targetLength is the length of every string that results from applying\r\n    // the operation on a valid input string.\r\n    this.targetLength = 0;\r\n  }\r\n\r\n  TextOperation.prototype.equals = function (other) {\r\n    if (this.baseLength !== other.baseLength) { return false; }\r\n    if (this.targetLength !== other.targetLength) { return false; }\r\n    if (this.ops.length !== other.ops.length) { return false; }\r\n    for (var i = 0; i < this.ops.length; i++) {\r\n      if (this.ops[i] !== other.ops[i]) { return false; }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Operation are essentially lists of ops. There are three types of ops:\r\n  //\r\n  // * Retain ops: Advance the cursor position by a given number of characters.\r\n  //   Represented by positive ints.\r\n  // * Insert ops: Insert a given string at the current cursor position.\r\n  //   Represented by strings.\r\n  // * Delete ops: Delete the next n characters. Represented by negative ints.\r\n\r\n  var isRetain = TextOperation.isRetain = function (op) {\r\n    return typeof op === 'number' && op > 0;\r\n  };\r\n\r\n  var isInsert = TextOperation.isInsert = function (op) {\r\n    return typeof op === 'string';\r\n  };\r\n\r\n  var isDelete = TextOperation.isDelete = function (op) {\r\n    return typeof op === 'number' && op < 0;\r\n  };\r\n\r\n\r\n  // After an operation is constructed, the user of the library can specify the\r\n  // actions of an operation (skip/insert/delete) with these three builder\r\n  // methods. They all return the operation for convenient chaining.\r\n\r\n  // Skip over a given number of characters.\r\n  TextOperation.prototype.retain = function (n) {\r\n    if (typeof n !== 'number') {\r\n      throw new Error(\"retain expects an integer\");\r\n    }\r\n    if (n === 0) { return this; }\r\n    this.baseLength += n;\r\n    this.targetLength += n;\r\n    if (isRetain(this.ops[this.ops.length-1])) {\r\n      // The last op is a retain op => we can merge them into one op.\r\n      this.ops[this.ops.length-1] += n;\r\n    } else {\r\n      // Create a new op.\r\n      this.ops.push(n);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // Insert a string at the current position.\r\n  TextOperation.prototype.insert = function (str) {\r\n    if (typeof str !== 'string') {\r\n      throw new Error(\"insert expects a string\");\r\n    }\r\n    if (str === '') { return this; }\r\n    this.targetLength += str.length;\r\n    var ops = this.ops;\r\n    if (isInsert(ops[ops.length-1])) {\r\n      // Merge insert op.\r\n      ops[ops.length-1] += str;\r\n    } else if (isDelete(ops[ops.length-1])) {\r\n      // It doesn't matter when an operation is applied whether the operation\r\n      // is delete(3), insert(\"something\") or insert(\"something\"), delete(3).\r\n      // Here we enforce that in this case, the insert op always comes first.\r\n      // This makes all operations that have the same effect when applied to\r\n      // a document of the right length equal in respect to the `equals` method.\r\n      if (isInsert(ops[ops.length-2])) {\r\n        ops[ops.length-2] += str;\r\n      } else {\r\n        ops[ops.length] = ops[ops.length-1];\r\n        ops[ops.length-2] = str;\r\n      }\r\n    } else {\r\n      ops.push(str);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // Delete a string at the current position.\r\n  TextOperation.prototype['delete'] = function (n) {\r\n    if (typeof n === 'string') { n = n.length; }\r\n    if (typeof n !== 'number') {\r\n      throw new Error(\"delete expects an integer or a string\");\r\n    }\r\n    if (n === 0) { return this; }\r\n    if (n > 0) { n = -n; }\r\n    this.baseLength -= n;\r\n    if (isDelete(this.ops[this.ops.length-1])) {\r\n      this.ops[this.ops.length-1] += n;\r\n    } else {\r\n      this.ops.push(n);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // Tests whether this operation has no effect.\r\n  TextOperation.prototype.isNoop = function () {\r\n    return this.ops.length === 0 || (this.ops.length === 1 && isRetain(this.ops[0]));\r\n  };\r\n\r\n  // Pretty printing.\r\n  TextOperation.prototype.toString = function () {\r\n    // map: build a new array by applying a function to every element in an old\r\n    // array.\r\n    var map = Array.prototype.map || function (fn) {\r\n      var arr = this;\r\n      var newArr = [];\r\n      for (var i = 0, l = arr.length; i < l; i++) {\r\n        newArr[i] = fn(arr[i]);\r\n      }\r\n      return newArr;\r\n    };\r\n    return map.call(this.ops, function (op) {\r\n      if (isRetain(op)) {\r\n        return \"retain \" + op;\r\n      } else if (isInsert(op)) {\r\n        return \"insert '\" + op + \"'\";\r\n      } else {\r\n        return \"delete \" + (-op);\r\n      }\r\n    }).join(', ');\r\n  };\r\n\r\n  // Converts operation into a JSON value.\r\n  TextOperation.prototype.toJSON = function () {\r\n    return this.ops;\r\n  };\r\n\r\n  // Converts a plain JS object into an operation and validates it.\r\n  TextOperation.fromJSON = function (ops) {\r\n    var o = new TextOperation();\r\n    for (var i = 0, l = ops.length; i < l; i++) {\r\n      var op = ops[i];\r\n      if (isRetain(op)) {\r\n        o.retain(op);\r\n      } else if (isInsert(op)) {\r\n        o.insert(op);\r\n      } else if (isDelete(op)) {\r\n        o['delete'](op);\r\n      } else {\r\n        throw new Error(\"unknown operation: \" + JSON.stringify(op));\r\n      }\r\n    }\r\n    return o;\r\n  };\r\n\r\n  // Apply an operation to a string, returning a new string. Throws an error if\r\n  // there's a mismatch between the input string and the operation.\r\n  TextOperation.prototype.apply = function (str) {\r\n    var operation = this;\r\n    if (str.length !== operation.baseLength) {\r\n      throw new Error(\"The operation's base length must be equal to the string's length.\");\r\n    }\r\n    var newStr = [], j = 0;\r\n    var strIndex = 0;\r\n    var ops = this.ops;\r\n    for (var i = 0, l = ops.length; i < l; i++) {\r\n      var op = ops[i];\r\n      if (isRetain(op)) {\r\n        if (strIndex + op > str.length) {\r\n          throw new Error(\"Operation can't retain more characters than are left in the string.\");\r\n        }\r\n        // Copy skipped part of the old string.\r\n        newStr[j++] = str.slice(strIndex, strIndex + op);\r\n        strIndex += op;\r\n      } else if (isInsert(op)) {\r\n        // Insert string.\r\n        newStr[j++] = op;\r\n      } else { // delete op\r\n        strIndex -= op;\r\n      }\r\n    }\r\n    if (strIndex !== str.length) {\r\n      throw new Error(\"The operation didn't operate on the whole string.\");\r\n    }\r\n    return newStr.join('');\r\n  };\r\n\r\n  // Computes the inverse of an operation. The inverse of an operation is the\r\n  // operation that reverts the effects of the operation, e.g. when you have an\r\n  // operation 'insert(\"hello \"); skip(6);' then the inverse is 'delete(\"hello \");\r\n  // skip(6);'. The inverse should be used for implementing undo.\r\n  TextOperation.prototype.invert = function (str) {\r\n    var strIndex = 0;\r\n    var inverse = new TextOperation();\r\n    var ops = this.ops;\r\n    for (var i = 0, l = ops.length; i < l; i++) {\r\n      var op = ops[i];\r\n      if (isRetain(op)) {\r\n        inverse.retain(op);\r\n        strIndex += op;\r\n      } else if (isInsert(op)) {\r\n        inverse['delete'](op.length);\r\n      } else { // delete op\r\n        inverse.insert(str.slice(strIndex, strIndex - op));\r\n        strIndex -= op;\r\n      }\r\n    }\r\n    return inverse;\r\n  };\r\n\r\n  // Compose merges two consecutive operations into one operation, that\r\n  // preserves the changes of both. Or, in other words, for each input string S\r\n  // and a pair of consecutive operations A and B,\r\n  // apply(apply(S, A), B) = apply(S, compose(A, B)) must hold.\r\n  TextOperation.prototype.compose = function (operation2) {\r\n    var operation1 = this;\r\n    if (operation1.targetLength !== operation2.baseLength) {\r\n      throw new Error(\"The base length of the second operation has to be the target length of the first operation\");\r\n    }\r\n\r\n    var operation = new TextOperation(); // the combined operation\r\n    var ops1 = operation1.ops, ops2 = operation2.ops; // for fast access\r\n    var i1 = 0, i2 = 0; // current index into ops1 respectively ops2\r\n    var op1 = ops1[i1++], op2 = ops2[i2++]; // current ops\r\n    while (true) {\r\n      // Dispatch on the type of op1 and op2\r\n      if (typeof op1 === 'undefined' && typeof op2 === 'undefined') {\r\n        // end condition: both ops1 and ops2 have been processed\r\n        break;\r\n      }\r\n\r\n      if (isDelete(op1)) {\r\n        operation['delete'](op1);\r\n        op1 = ops1[i1++];\r\n        continue;\r\n      }\r\n      if (isInsert(op2)) {\r\n        operation.insert(op2);\r\n        op2 = ops2[i2++];\r\n        continue;\r\n      }\r\n\r\n      if (typeof op1 === 'undefined') {\r\n        throw new Error(\"Cannot compose operations: first operation is too short.\");\r\n      }\r\n      if (typeof op2 === 'undefined') {\r\n        throw new Error(\"Cannot compose operations: first operation is too long.\");\r\n      }\r\n\r\n      if (isRetain(op1) && isRetain(op2)) {\r\n        if (op1 > op2) {\r\n          operation.retain(op2);\r\n          op1 = op1 - op2;\r\n          op2 = ops2[i2++];\r\n        } else if (op1 === op2) {\r\n          operation.retain(op1);\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          operation.retain(op1);\r\n          op2 = op2 - op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n      } else if (isInsert(op1) && isDelete(op2)) {\r\n        if (op1.length > -op2) {\r\n          op1 = op1.slice(-op2);\r\n          op2 = ops2[i2++];\r\n        } else if (op1.length === -op2) {\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          op2 = op2 + op1.length;\r\n          op1 = ops1[i1++];\r\n        }\r\n      } else if (isInsert(op1) && isRetain(op2)) {\r\n        if (op1.length > op2) {\r\n          operation.insert(op1.slice(0, op2));\r\n          op1 = op1.slice(op2);\r\n          op2 = ops2[i2++];\r\n        } else if (op1.length === op2) {\r\n          operation.insert(op1);\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          operation.insert(op1);\r\n          op2 = op2 - op1.length;\r\n          op1 = ops1[i1++];\r\n        }\r\n      } else if (isRetain(op1) && isDelete(op2)) {\r\n        if (op1 > -op2) {\r\n          operation['delete'](op2);\r\n          op1 = op1 + op2;\r\n          op2 = ops2[i2++];\r\n        } else if (op1 === -op2) {\r\n          operation['delete'](op2);\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          operation['delete'](op1);\r\n          op2 = op2 + op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          \"This shouldn't happen: op1: \" +\r\n          JSON.stringify(op1) + \", op2: \" +\r\n          JSON.stringify(op2)\r\n        );\r\n      }\r\n    }\r\n    return operation;\r\n  };\r\n\r\n  function getSimpleOp (operation, fn) {\r\n    var ops = operation.ops;\r\n    var isRetain = TextOperation.isRetain;\r\n    switch (ops.length) {\r\n    case 1:\r\n      return ops[0];\r\n    case 2:\r\n      return isRetain(ops[0]) ? ops[1] : (isRetain(ops[1]) ? ops[0] : null);\r\n    case 3:\r\n      if (isRetain(ops[0]) && isRetain(ops[2])) { return ops[1]; }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function getStartIndex (operation) {\r\n    if (isRetain(operation.ops[0])) { return operation.ops[0]; }\r\n    return 0;\r\n  }\r\n\r\n  // When you use ctrl-z to undo your latest changes, you expect the program not\r\n  // to undo every single keystroke but to undo your last sentence you wrote at\r\n  // a stretch or the deletion you did by holding the backspace key down. This\r\n  // This can be implemented by composing operations on the undo stack. This\r\n  // method can help decide whether two operations should be composed. It\r\n  // returns true if the operations are consecutive insert operations or both\r\n  // operations delete text at the same position. You may want to include other\r\n  // factors like the time since the last change in your decision.\r\n  TextOperation.prototype.shouldBeComposedWith = function (other) {\r\n    if (this.isNoop() || other.isNoop()) { return true; }\r\n\r\n    var startA = getStartIndex(this), startB = getStartIndex(other);\r\n    var simpleA = getSimpleOp(this), simpleB = getSimpleOp(other);\r\n    if (!simpleA || !simpleB) { return false; }\r\n\r\n    if (isInsert(simpleA) && isInsert(simpleB)) {\r\n      return startA + simpleA.length === startB;\r\n    }\r\n\r\n    if (isDelete(simpleA) && isDelete(simpleB)) {\r\n      // there are two possibilities to delete: with backspace and with the\r\n      // delete key.\r\n      return (startB - simpleB === startA) || startA === startB;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Decides whether two operations should be composed with each other\r\n  // if they were inverted, that is\r\n  // `shouldBeComposedWith(a, b) = shouldBeComposedWithInverted(b^{-1}, a^{-1})`.\r\n  TextOperation.prototype.shouldBeComposedWithInverted = function (other) {\r\n    if (this.isNoop() || other.isNoop()) { return true; }\r\n\r\n    var startA = getStartIndex(this), startB = getStartIndex(other);\r\n    var simpleA = getSimpleOp(this), simpleB = getSimpleOp(other);\r\n    if (!simpleA || !simpleB) { return false; }\r\n\r\n    if (isInsert(simpleA) && isInsert(simpleB)) {\r\n      return startA + simpleA.length === startB || startA === startB;\r\n    }\r\n\r\n    if (isDelete(simpleA) && isDelete(simpleB)) {\r\n      return startB - simpleB === startA;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Transform takes two operations A and B that happened concurrently and\r\n  // produces two operations A' and B' (in an array) such that\r\n  // `apply(apply(S, A), B') = apply(apply(S, B), A')`. This function is the\r\n  // heart of OT.\r\n  TextOperation.transform = function (operation1, operation2) {\r\n    if (operation1.baseLength !== operation2.baseLength) {\r\n      throw new Error(\"Both operations have to have the same base length\");\r\n    }\r\n\r\n    var operation1prime = new TextOperation();\r\n    var operation2prime = new TextOperation();\r\n    var ops1 = operation1.ops, ops2 = operation2.ops;\r\n    var i1 = 0, i2 = 0;\r\n    var op1 = ops1[i1++], op2 = ops2[i2++];\r\n    while (true) {\r\n      // At every iteration of the loop, the imaginary cursor that both\r\n      // operation1 and operation2 have that operates on the input string must\r\n      // have the same position in the input string.\r\n\r\n      if (typeof op1 === 'undefined' && typeof op2 === 'undefined') {\r\n        // end condition: both ops1 and ops2 have been processed\r\n        break;\r\n      }\r\n\r\n      // next two cases: one or both ops are insert ops\r\n      // => insert the string in the corresponding prime operation, skip it in\r\n      // the other one. If both op1 and op2 are insert ops, prefer op1.\r\n      if (isInsert(op1)) {\r\n        operation1prime.insert(op1);\r\n        operation2prime.retain(op1.length);\r\n        op1 = ops1[i1++];\r\n        continue;\r\n      }\r\n      if (isInsert(op2)) {\r\n        operation1prime.retain(op2.length);\r\n        operation2prime.insert(op2);\r\n        op2 = ops2[i2++];\r\n        continue;\r\n      }\r\n\r\n      if (typeof op1 === 'undefined') {\r\n        throw new Error(\"Cannot compose operations: first operation is too short.\");\r\n      }\r\n      if (typeof op2 === 'undefined') {\r\n        throw new Error(\"Cannot compose operations: first operation is too long.\");\r\n      }\r\n\r\n      var minl;\r\n      if (isRetain(op1) && isRetain(op2)) {\r\n        // Simple case: retain/retain\r\n        if (op1 > op2) {\r\n          minl = op2;\r\n          op1 = op1 - op2;\r\n          op2 = ops2[i2++];\r\n        } else if (op1 === op2) {\r\n          minl = op2;\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          minl = op1;\r\n          op2 = op2 - op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n        operation1prime.retain(minl);\r\n        operation2prime.retain(minl);\r\n      } else if (isDelete(op1) && isDelete(op2)) {\r\n        // Both operations delete the same string at the same position. We don't\r\n        // need to produce any operations, we just skip over the delete ops and\r\n        // handle the case that one operation deletes more than the other.\r\n        if (-op1 > -op2) {\r\n          op1 = op1 - op2;\r\n          op2 = ops2[i2++];\r\n        } else if (op1 === op2) {\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          op2 = op2 - op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n      // next two cases: delete/retain and retain/delete\r\n      } else if (isDelete(op1) && isRetain(op2)) {\r\n        if (-op1 > op2) {\r\n          minl = op2;\r\n          op1 = op1 + op2;\r\n          op2 = ops2[i2++];\r\n        } else if (-op1 === op2) {\r\n          minl = op2;\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          minl = -op1;\r\n          op2 = op2 + op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n        operation1prime['delete'](minl);\r\n      } else if (isRetain(op1) && isDelete(op2)) {\r\n        if (op1 > -op2) {\r\n          minl = -op2;\r\n          op1 = op1 + op2;\r\n          op2 = ops2[i2++];\r\n        } else if (op1 === -op2) {\r\n          minl = op1;\r\n          op1 = ops1[i1++];\r\n          op2 = ops2[i2++];\r\n        } else {\r\n          minl = op1;\r\n          op2 = op2 + op1;\r\n          op1 = ops1[i1++];\r\n        }\r\n        operation2prime['delete'](minl);\r\n      } else {\r\n        throw new Error(\"The two operations aren't compatible\");\r\n      }\r\n    }\r\n\r\n    return [operation1prime, operation2prime];\r\n  };\r\n\r\n  return TextOperation;\r\n\r\n}());\r\n\r\n// Export for CommonJS\r\nif (typeof module === 'object') {\r\n  module.exports = ot.TextOperation;\r\n}\n},{}],5:[function(require,module,exports){\n  'use strict';\r\n\r\n  // A WrappedOperation contains an operation, selection and metadata.\r\n  function WrappedOperation (operation, selection, metadata) {\r\n    this.wrapped = operation;\r\n    this.selection = selection;\r\n    this.metadata = metadata;\r\n  }\r\n\r\n  WrappedOperation.prototype.apply = function () {\r\n    return this.wrapped.apply.apply(this.wrapped, arguments);\r\n  };\r\n\r\n  WrappedOperation.prototype.invert = function () {\r\n    var selection = this.selection;\r\n    return new WrappedOperation(\r\n      this.wrapped.invert.apply(this.wrapped, arguments),\r\n      selection && typeof selection === 'object' && typeof selection.invert === 'function' ?\r\n        selection.invert.apply(selection, arguments) : selection\r\n    );\r\n  };\r\n\r\n  // Copy all properties from source to target.\r\n  function copy (source, target) {\r\n    for (var key in source) {\r\n      if (source.hasOwnProperty(key)) {\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  function composeSelection (a, b) {\r\n    if (a && typeof a === 'object') {\r\n      if (typeof a.compose === 'function') { return a.compose(b); }\r\n      var selection = {};\r\n      copy(a, selection);\r\n      copy(b, selection);\r\n      return selection;\r\n    }\r\n    return b;\r\n  }\r\n\r\n  WrappedOperation.prototype.compose = function (other) {\r\n    return new WrappedOperation(\r\n      this.wrapped.compose(other.wrapped),\r\n      composeSelection(this.selection, other.selection)\r\n    );\r\n  };\r\n\r\n  function transformSelection (selection, operation) {\r\n    if (selection && typeof selection === 'object') {\r\n      if (typeof selection.transform === 'function') {\r\n        return selection.transform(operation);\r\n      }\r\n    }\r\n    return selection;\r\n  }\r\n\r\n  WrappedOperation.transform = function (a, b) {\r\n    var transform = a.wrapped.constructor.transform;\r\n    var pair = transform(a.wrapped, b.wrapped);\r\n    return [\r\n      new WrappedOperation(pair[0], transformSelection(a.selection, b.wrapped)),\r\n      new WrappedOperation(pair[1], transformSelection(b.selection, a.wrapped))\r\n    ];\r\n  };\r\n\r\nmodule.exports = WrappedOperation;\n},{}],\"webgme-ot\":[function(require,module,exports){\nexports.version = '0.0.15';\r\n\r\nexports.TextOperation        = require('./text-operation');\r\nexports.WrappedOperation     = require('./wrapped-operation');\r\nexports.Client               = require('./client');\r\nexports.Selection            = require('./selection');\r\nexports.CodeMirrorAdapter    = require('./codemirror-adapter');\r\n\n},{\"./client\":1,\"./codemirror-adapter\":2,\"./selection\":3,\"./text-operation\":4,\"./wrapped-operation\":5}]},{},[])(\"webgme-ot\")\n});\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n * @module Storage\r\n */\r\n\r\n/**\r\n * @typedef {string} CommitHash - Unique SHA-1 hash for commit object.\r\n * @example\r\n * '#5496cf226542fcceccf89056f0d27564abc88c99'\r\n */\r\n\r\n/**\r\n * @typedef {object} CommitResult\r\n * @prop {module:Storage~CommitHash} hash - The commitHash for the commit.\r\n * @prop {string} status - 'SYNCED', 'FORKED', 'CANCELED', undefined\r\n *\r\n * @example\r\n * {\r\n *   status: 'SYNCED',\r\n *   hash: '#someHash'\r\n * }\r\n * @example\r\n * {\r\n *   hash: '<hash from makeCommit with no branch provided>'\r\n * }\r\n */\r\n\r\n/**\r\n * @typedef {object} CommitObject\r\n * @prop {module:Storage~CommitHash} _id - Hash of the commit object, a.k.a commitHash.\r\n * @prop {module:Core~ObjectHash} root - Hash of the associated root object, a.k.a. rootHash.\r\n * @prop {module:Storage~CommitHash[]} parents - Commits from where this commit evolved.\r\n * @prop {number} time - When the commit object was created Date.now().\r\n * @prop {string} message - Commit message.\r\n * @prop {string[]} updater - Commit message.\r\n * @prop {string} type - 'commit'\r\n *\r\n * @example\r\n * {\r\n *   _id: '#5496cf226542fcceccf89056f0d27564abc88c99',\r\n *   root: '#04009ecd1e68117cd3e9d39c87aadd9ed1ee5cb3',\r\n *   parents: ['#87d9fd309ec6a5d84776d7731ce1f1ab2790aac2']\r\n *   updater: ['guest'],\r\n *   time: 1430169614741,\r\n *   message: \"createChildren({\\\"/1008889918/1998840078\\\":\\\"/1182870936/737997118/1736829087/1966323860\\\"})\",\r\n *   type: 'commit'\r\n * }\r\n */\r\n\r\n/**\r\n * @typedef {object} PatchObject\r\n * @prop {module:Core~ObjectHash} _id - Hash of the expected result object.\r\n * @prop {module:Core~ObjectHash} base - Hash of the base object where the patch should be applied.\r\n * @prop {string} type - 'patch'.\r\n * @prop {object} patch - The patch instructions (based on [RFC6902]{@link http://tools.ietf.org/html/rfc6902}).\r\n *\r\n * @example\r\n * {\r\n *   _id: '#5496cf226542fcceccf89056f0d27564abc88c99',\r\n *   base: '#04009ecd1e68117cd3e9d39c87aadd9ed1ee5cb3',\r\n *   type: 'patch',\r\n *   patch: [{op: 'add', path: '/atr/new', value: 'value'}]\r\n * }\r\n */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('common/storage/constants',[], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory();\r\n    }\r\n}(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        //Version\r\n        VERSION: '1.2.0',\r\n        // Database related\r\n        MONGO_ID: '_id',\r\n        COMMIT_TYPE: 'commit',\r\n        OVERLAY_SHARD_TYPE: 'shard',\r\n        PROJECT_INFO_KEYS: [\r\n            'createdAt',\r\n            'creator',\r\n            'viewedAt',\r\n            'viewer',\r\n            'modifiedAt',\r\n            'modifier',\r\n            'kind',\r\n            'description',\r\n            'icon'\r\n        ],\r\n        EMPTY_PROJECT_DATA: 'empty',\r\n        PROJECT_ID_SEP: '+',\r\n        PROJECT_DISPLAYED_NAME_SEP: '/',\r\n\r\n        // Socket IO\r\n        DATABASE_ROOM: 'database',\r\n        ROOM_DIVIDER: '%',\r\n\r\n        NETWORK_STATUS_CHANGED: 'NETWORK_STATUS_CHANGED',\r\n\r\n        CONNECTED: 'CONNECTED',\r\n        DISCONNECTED: 'DISCONNECTED',\r\n        RECONNECTED: 'RECONNECTED',\r\n        INCOMPATIBLE_CONNECTION: 'INCOMPATIBLE_CONNECTION',\r\n        CONNECTION_ERROR: 'CONNECTION_ERROR',\r\n\r\n        JWT_ABOUT_TO_EXPIRE: 'JWT_ABOUT_TO_EXPIRE',\r\n        JWT_EXPIRED: 'JWT_EXPIRED',\r\n\r\n        RECONNECTING: 'RECONNECTING', // Internal storage state where the websocket connection has been established,\r\n        // but work is still be done to join branch and document rooms correctly.\r\n\r\n        // Branch commit status - this is the status returned after setting the hash of a branch\r\n        SYNCED: 'SYNCED', // The commitData was inserted in the database and the branchHash updated.\r\n        FORKED: 'FORKED', // The commitData was inserted in the database, but the branchHash NOT updated.\r\n        CANCELED: 'CANCELED', // The commitData was never inserted to the database.\r\n        MERGED: 'MERGED', // The commit was initially forked, but successfully merged.\r\n\r\n        BRANCH_STATUS: {\r\n            SYNC: 'SYNC',\r\n            AHEAD_SYNC: 'AHEAD_SYNC',\r\n            AHEAD_NOT_SYNC: 'AHEAD_NOT_SYNC',\r\n            PULLING: 'PULLING',\r\n            MERGING: 'MERGING',\r\n            ERROR: 'ERROR'\r\n        },\r\n\r\n        // Events\r\n\r\n        PROJECT_DELETED: 'PROJECT_DELETED',\r\n        PROJECT_CREATED: 'PROJECT_CREATED',\r\n\r\n        BRANCH_DELETED: 'BRANCH_DELETED',\r\n        BRANCH_CREATED: 'BRANCH_CREATED',\r\n        BRANCH_HASH_UPDATED: 'BRANCH_HASH_UPDATED',\r\n        TAG_DELETED: 'TAG_DELETED',\r\n        TAG_CREATED: 'TAG_CREATED',\r\n        COMMIT: 'COMMIT',\r\n\r\n        BRANCH_UPDATED: 'BRANCH_UPDATED',\r\n\r\n        BRANCH_JOINED: 'BRANCH_JOINED',\r\n        BRANCH_LEFT: 'BRANCH_LEFT',\r\n\r\n        NOTIFICATION: 'NOTIFICATION',\r\n\r\n        DOCUMENT_OPERATION: 'DOCUMENT_OPERATION',\r\n        DOCUMENT_SELECTION: 'DOCUMENT_SELECTION',\r\n        // Types of notifications\r\n        BRANCH_ROOM_SOCKETS: 'BRANCH_ROOM_SOCKETS',\r\n        PLUGIN_NOTIFICATION: 'PLUGIN_NOTIFICATION',\r\n        ADD_ON_NOTIFICATION: 'ADD_ON_NOTIFICATION',\r\n        CLIENT_STATE_NOTIFICATION: 'CLIENT_STATE_NOTIFICATION',\r\n        // Additional sub types for plugin notification\r\n        PLUGIN_NOTIFICATION_TYPE: {\r\n            INITIATED: 'INITIATED',\r\n            ABORT: 'ABORT',\r\n            MESSAGE: 'MESSAGE'\r\n        },\r\n        WEBSOCKET_ROUTER_ROOM_ID_PREFIX: 'wsr-room-',\r\n        WEBSOCKET_ROUTER_MESSAGE_TYPES: {\r\n            CONNECT: 'wsm-connect',\r\n            DISCONNECT: 'wsm-disconnect',\r\n            MESSAGE: 'wsm-message'\r\n        }\r\n    };\r\n}));\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint no-bitwise: 0*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/util/guid',[],function () {\r\n    'use strict';\r\n\r\n    var guid = function () {\r\n        var s4 = function () {\r\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        };\r\n\r\n        //return GUID\r\n        return s4() + [s4(), s4(), s4(), s4(), s4()].join('-') + s4() + s4();\r\n    };\r\n\r\n    return guid;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author rkereskenyi / https://github.com/rkereskenyi\r\n */\r\n\r\ndefine('common/EventDispatcher',[], function () {\r\n    'use strict';\r\n\r\n    var EventDispatcher = function () {\r\n        this._eventList = {};\r\n    };\r\n\r\n    EventDispatcher.prototype = {\r\n        _eventList: null,\r\n        _getEvent: function (eventName, create) {\r\n            // Check if Array of Event Handlers has been created\r\n            if (!this._eventList[eventName]) {\r\n\r\n                // Check if the calling method wants to create the Array\r\n                // if not created. This reduces unneeded memory usage.\r\n                if (!create) {\r\n                    return null;\r\n                }\r\n\r\n                // Create the Array of Event Handlers\r\n                this._eventList[eventName] = [];\r\n                // new Array\r\n            }\r\n\r\n            // return the Array of Event Handlers already added\r\n            return this._eventList[eventName];\r\n        },\r\n        addEventListener: function (eventName, handler) {\r\n            // Get the Array of Event Handlers\r\n            var evt = this._getEvent(eventName, true);\r\n\r\n            // Add the new Event Handler to the Array\r\n            evt.push(handler);\r\n        },\r\n        removeEventListener: function (eventName, handler) {\r\n            // Get the Array of Event Handlers\r\n            var evt = this._getEvent(eventName);\r\n\r\n            if (!evt) {\r\n                return;\r\n            }\r\n\r\n            // Helper Method - an Array.indexOf equivalent\r\n            var getArrayIndex = function (array, item) {\r\n                for (var i = 0; i < array.length; i++) {\r\n                    if (array[i] === item) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            };\r\n\r\n            // Get the Array index of the Event Handler\r\n            var index = getArrayIndex(evt, handler);\r\n\r\n            if (index > -1) {\r\n                // Remove Event Handler from Array\r\n                evt.splice(index, 1);\r\n            }\r\n        },\r\n        removeAllEventListeners: function (eventName) {\r\n            // Get the Array of Event Handlers\r\n            var evt = this._getEvent(eventName);\r\n\r\n            if (!evt) {\r\n                return;\r\n            }\r\n\r\n            evt.splice(0, evt.length);\r\n        },\r\n        dispatchEvent: function (eventName, eventArgs) {\r\n            // Get a function that will call all the Event Handlers internally\r\n            var handler = this._getEventHandler(eventName);\r\n            if (handler) {\r\n                // call the handler function\r\n                // Pass in \"sender\" and \"eventArgs\" parameters\r\n                handler(this, eventArgs);\r\n            }\r\n        },\r\n        clearAllEvents: function () {\r\n            this._eventList = {};\r\n        },\r\n        _getEventHandler: function (eventName) {\r\n            // Get Event Handler Array for this Event\r\n            var evt = this._getEvent(eventName, false);\r\n            if (!evt || evt.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            // Create the Handler method that will use currying to\r\n            // call all the Events Handlers internally\r\n            var h = function (sender, args) {\r\n                for (var i = 0; i < evt.length; i++) {\r\n                    evt[i](sender, args);\r\n                }\r\n            };\r\n\r\n            // Return this new Handler method\r\n            return h;\r\n        }\r\n    };\r\n\r\n    return EventDispatcher;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * Provides watching-functionality of the database and specific projects.\r\n * Keeps a state of the registered watchers.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/storageclasses/watchers',[\r\n    'q',\r\n    'webgme-ot',\r\n    'common/storage/constants',\r\n    'common/util/guid',\r\n    'common/EventDispatcher'\r\n], function (Q, ot, CONSTANTS, GUID, EventDispatcher) {\r\n    'use strict';\r\n\r\n    function StorageWatcher(webSocket, logger, gmeConfig) {\r\n        EventDispatcher.call(this);\r\n        // watcher counters determining when to join/leave a room on the sever\r\n        this.watchers = {\r\n            sessionId: GUID(), // Need at reconnect since socket.id changes.\r\n            database: 0,\r\n            projects: {},\r\n            documents: {}\r\n        };\r\n        this.webSocket = webSocket;\r\n        this.logger = this.logger || logger.fork('storage');\r\n        this.gmeConfig = gmeConfig;\r\n        this.logger.debug('StorageWatcher ctor');\r\n        this.connected = false;\r\n    }\r\n\r\n    // Inherit from the EventDispatcher\r\n    StorageWatcher.prototype = Object.create(EventDispatcher.prototype);\r\n    StorageWatcher.prototype.constructor = StorageWatcher;\r\n\r\n    function _splitDocId(docId) {\r\n        var pieces = docId.split(CONSTANTS.ROOM_DIVIDER);\r\n\r\n        return {\r\n            projectId: pieces[0],\r\n            branchName: pieces[1],\r\n            nodeId: pieces[2],\r\n            attrName: pieces[3]\r\n        };\r\n    }\r\n\r\n    StorageWatcher.prototype.watchDatabase = function (eventHandler, callback) {\r\n        this.logger.debug('watchDatabase - handler added');\r\n        this.webSocket.addEventListener(CONSTANTS.PROJECT_DELETED, eventHandler);\r\n        this.webSocket.addEventListener(CONSTANTS.PROJECT_CREATED, eventHandler);\r\n        this.watchers.database += 1;\r\n        this.logger.debug('Nbr of database watchers:', this.watchers.database);\r\n\r\n        if (this.watchers.database === 1) {\r\n            this.logger.debug('First watcher will enter database room.');\r\n            return this.webSocket.watchDatabase({join: true}).nodeify(callback);\r\n        } else {\r\n            return Q().nodeify(callback);\r\n        }\r\n    };\r\n\r\n    StorageWatcher.prototype.unwatchDatabase = function (eventHandler, callback) {\r\n        var deferred = Q.defer();\r\n\r\n        this.logger.debug('unwatchDatabase - handler will be removed');\r\n        this.logger.debug('Nbr of database watchers (before removal):', this.watchers.database);\r\n        this.webSocket.removeEventListener(CONSTANTS.PROJECT_DELETED, eventHandler);\r\n        this.webSocket.removeEventListener(CONSTANTS.PROJECT_CREATED, eventHandler);\r\n        this.watchers.database -= 1;\r\n\r\n        if (this.watchers.database === 0) {\r\n            this.logger.debug('No more watchers will exit database room.');\r\n            if (this.connected) {\r\n                this.webSocket.watchDatabase({join: false})\r\n                    .then(deferred.resolve)\r\n                    .catch(deferred.reject);\r\n            } else {\r\n                deferred.resolve();\r\n            }\r\n        } else if (this.watchers.database < 0) {\r\n            this.logger.error('Number of database watchers became negative!');\r\n            deferred.reject(new Error('Number of database watchers became negative!'));\r\n        } else {\r\n            deferred.resolve();\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    StorageWatcher.prototype.watchProject = function (projectId, eventHandler, callback) {\r\n        this.logger.debug('watchProject - handler added for project', projectId);\r\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_DELETED + projectId, eventHandler);\r\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_CREATED + projectId, eventHandler);\r\n        this.webSocket.addEventListener(CONSTANTS.BRANCH_HASH_UPDATED + projectId, eventHandler);\r\n\r\n        this.watchers.projects[projectId] = Object.hasOwn(this.watchers.projects, projectId) ?\r\n            this.watchers.projects[projectId] + 1 : 1;\r\n        this.logger.debug('Nbr of watchers for project:', projectId, this.watchers.projects[projectId]);\r\n        if (this.watchers.projects[projectId] === 1) {\r\n            this.logger.debug('First watcher will enter project room:', projectId);\r\n            this.webSocket.watchProject({projectId: projectId, join: true})\r\n                .nodeify(callback);\r\n        } else {\r\n            return Q().nodeify(callback);\r\n        }\r\n    };\r\n\r\n    StorageWatcher.prototype.unwatchProject = function (projectId, eventHandler, callback) {\r\n        var deferred = Q.defer();\r\n\r\n        this.logger.debug('unwatchProject - handler will be removed', projectId);\r\n        this.logger.debug('Nbr of database watchers (before removal):', projectId,\r\n            this.watchers.projects[projectId]);\r\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_DELETED + projectId, eventHandler);\r\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_CREATED + projectId, eventHandler);\r\n        this.webSocket.removeEventListener(CONSTANTS.BRANCH_HASH_UPDATED + projectId, eventHandler);\r\n\r\n        this.watchers.projects[projectId] = Object.hasOwn(this.watchers.projects, projectId) ?\r\n            this.watchers.projects[projectId] - 1 : -1;\r\n        if (this.watchers.projects[projectId] === 0) {\r\n            this.logger.debug('No more watchers will exit project room:', projectId);\r\n            delete this.watchers.projects[projectId];\r\n            if (this.connected) {\r\n                this.webSocket.watchProject({projectId: projectId, join: false})\r\n                    .then(deferred.resolve)\r\n                    .catch(deferred.reject);\r\n            } else {\r\n                deferred.resolve();\r\n            }\r\n        } else if (this.watchers.projects[projectId] < 0) {\r\n            this.logger.error('Number of project watchers became negative!:', projectId);\r\n            deferred.reject(new Error('Number of project watchers became negative!'));\r\n        } else {\r\n            deferred.resolve();\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Start watching the document at the provided context.\r\n     * @param {object} data\r\n     * @param {string} data.projectId\r\n     * @param {string} data.branchName\r\n     * @param {string} data.nodeId\r\n     * @param {string} data.attrName\r\n     * @param {string} data.attrValue - If the first client entering the document the value will be used\r\n     * @param {function} atOperation - Triggered when other clients made changes\r\n     * @param {ot.Operation} atOperation.operation - Triggered when other clients' operations were applied\r\n     * @param {function} atSelection - Triggered when other clients send their selection info\r\n     * @param {object} atSelection.data\r\n     * @param {ot.Selection | null} atSelection.data.selection - null is passed when other client leaves\r\n     * @param {string} atSelection.data.userId - name/id of other user\r\n     * @param {string} atSelection.data.socketId - unique id of other user\r\n     * @param {function} [callback]\r\n     * @param {Error | null} callback.err - If failed to watch the document\r\n     * @param {object} callback.data\r\n     * @param {string} callback.data.docId - Id of document\r\n     * @param {string} callback.data.document - Current document on server\r\n     * @param {number} callback.data.revision - Revision at server when connecting\r\n     * @param {object} callback.data.users - Users that were connected when connecting\r\n     * @returns {Promise}\r\n     */\r\n    StorageWatcher.prototype.watchDocument = function (data, atOperation, atSelection, callback) {\r\n        var self = this,\r\n            docUpdateEventName = this.webSocket.getDocumentUpdatedEventName(data),\r\n            docSelectionEventName = this.webSocket.getDocumentSelectionEventName(data),\r\n            docId = docUpdateEventName.substring(CONSTANTS.DOCUMENT_OPERATION.length),\r\n            watcherId = GUID();\r\n\r\n        data = JSON.parse(JSON.stringify(data));\r\n        this.logger.debug('watchDocument - handler added for project', data);\r\n        this.watchers.documents[docId] = this.watchers.documents[docId] || {};\r\n        this.watchers.documents[docId][watcherId] = {\r\n            eventHandler: function (_ws, eData) {\r\n                var otClient = self.watchers.documents[eData.docId][watcherId].otClient;\r\n                self.logger.debug('eventHandler for document', {metadata: eData});\r\n\r\n                if (eData.watcherId === watcherId) {\r\n                    self.logger.info('event from same watcher, skipping...');\r\n                    return;\r\n                }\r\n\r\n                if (eData.operation) {\r\n                    if (self.reconnecting) {\r\n                        // We are reconnecting.. Put these on the queue.\r\n                        self.watchers.documents[docId][watcherId].applyBuffer.push(eData);\r\n                    } else {\r\n                        otClient.applyServer(ot.TextOperation.fromJSON(eData.operation));\r\n                    }\r\n                }\r\n\r\n                if (Object.hasOwn(eData, 'selection') && !self.reconnecting) {\r\n                    atSelection({\r\n                        selection: eData.selection ?\r\n                            otClient.transformSelection(ot.Selection.fromJSON(eData.selection)) : null,\r\n                        socketId: eData.socketId,\r\n                        userId: eData.userId\r\n                    });\r\n                }\r\n            },\r\n            applyBuffer: [],\r\n            awaitingAck: null\r\n        };\r\n\r\n        this.webSocket.addEventListener(docUpdateEventName, this.watchers.documents[docId][watcherId].eventHandler);\r\n        this.webSocket.addEventListener(docSelectionEventName, this.watchers.documents[docId][watcherId].eventHandler);\r\n\r\n        data.join = true;\r\n        data.sessionId = this.watchers.sessionId;\r\n        data.watcherId = watcherId;\r\n\r\n        return this.webSocket.watchDocument(data)\r\n            .then(function (initData) {\r\n                self.watchers.documents[initData.docId][watcherId].otClient = new ot.Client(initData.revision);\r\n\r\n                self.watchers.documents[initData.docId][watcherId].otClient.sendOperation =\r\n                    function (revision, operation) {\r\n                        var sendData = {\r\n                            docId: initData.docId,\r\n                            projectId: initData.projectId,\r\n                            branchName: initData.branchName,\r\n                            revision: revision,\r\n                            operation: operation,\r\n                            selection: self.watchers.documents[initData.docId][watcherId].selection,\r\n                            sessionId: self.watchers.sessionId,\r\n                            watcherId: watcherId\r\n                        };\r\n\r\n                        self.watchers.documents[initData.docId][watcherId].awaitingAck = {\r\n                            revision: revision,\r\n                            operation: operation\r\n                        };\r\n\r\n                        self.webSocket.sendDocumentOperation(sendData, function (err) {\r\n                            if (err) {\r\n                                self.logger.error('Failed to sendDocument', err);\r\n                                return;\r\n                            }\r\n\r\n                            if (Object.hasOwn(self.watchers.documents, initData.docId) &&\r\n                                Object.hasOwn(self.watchers.documents[initData.docId], watcherId)) {\r\n                                self.watchers.documents[initData.docId][watcherId].awaitingAck = null;\r\n                                self.watchers.documents[initData.docId][watcherId].otClient.serverAck(revision);\r\n                            } else {\r\n                                self.logger.error(new Error('Received document acknowledgement ' +\r\n                                    'after watcher left document ' + initData.docId));\r\n                            }\r\n                        });\r\n                    };\r\n\r\n                self.watchers.documents[initData.docId][watcherId].otClient.applyOperation = atOperation;\r\n\r\n                return initData;\r\n            })\r\n            .nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Stop watching the document.\r\n     * @param {object} data\r\n     * @param {string} data.docId - document id, if not provided projectId, branchName, nodeId, attrName must be.\r\n     * @param {string} data.watcherId\r\n     * @param {string} [data.projectId]\r\n     * @param {string} [data.branchName]\r\n     * @param {string} [data.nodeId]\r\n     * @param {string} [data.attrName]\r\n     * @param {function} [callback]\r\n     * @param {Error | null} callback.err - If failed to unwatch the document\r\n     * @returns {Promise}\r\n     */\r\n    StorageWatcher.prototype.unwatchDocument = function (data, callback) {\r\n        var deferred = Q.defer(),\r\n            docUpdateEventName = this.webSocket.getDocumentUpdatedEventName(data),\r\n            docSelectionEventName = this.webSocket.getDocumentSelectionEventName(data),\r\n            pieces;\r\n\r\n        if (typeof data.docId === 'string') {\r\n            pieces = _splitDocId(data.docId);\r\n            Object.keys(pieces)\r\n                .forEach(function (key) {\r\n                    data[key] = pieces[key];\r\n                });\r\n        } else {\r\n            data.docId = docUpdateEventName.substring(CONSTANTS.DOCUMENT_OPERATION.length);\r\n        }\r\n\r\n        if (typeof data.watcherId !== 'string') {\r\n            deferred.reject(new Error('data.watcherId not provided - use the one given at watchDocument.'));\r\n        } else if (Object.hasOwn(this.watchers.documents, data.docId) === false ||\r\n            Object.hasOwn(this.watchers.documents[data.docId], data.watcherId) === false) {\r\n            deferred.reject(new Error('Document is not being watched ' + data.docId +\r\n                ' by watcherId [' + data.watcherId + ']'));\r\n        } else {\r\n            // Remove handler from web-socket module.\r\n            this.webSocket.removeEventListener(docUpdateEventName,\r\n                this.watchers.documents[data.docId][data.watcherId].eventHandler);\r\n            this.webSocket.removeEventListener(docSelectionEventName,\r\n                this.watchers.documents[data.docId][data.watcherId].eventHandler);\r\n\r\n            // \"Remove\" handlers attached to the otClient.\r\n            this.watchers.documents[data.docId][data.watcherId].otClient.sendOperation =\r\n                this.watchers.documents[data.docId][data.watcherId].otClient.applyOperation = function () {\r\n                };\r\n\r\n            delete this.watchers.documents[data.docId][data.watcherId];\r\n\r\n            if (Object.keys(this.watchers.documents[data.docId]).length === 0) {\r\n                delete this.watchers.documents[data.docId];\r\n            }\r\n\r\n            // Finally exit socket.io room on server if connected.\r\n            if (this.connected) {\r\n                data.join = false;\r\n                this.webSocket.watchDocument(data)\r\n                    .then(deferred.resolve)\r\n                    .catch(deferred.reject);\r\n            } else {\r\n                deferred.resolve();\r\n            }\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Send operation made, and optionally selection, on document at docId.\r\n     * @param {object} data\r\n     * @param {string} data.docId\r\n     * @param {string} data.watcherId\r\n     * @param {ot.TextOperation} data.operation\r\n     * @param {ot.Selection} [data.selection]\r\n     */\r\n    StorageWatcher.prototype.sendDocumentOperation = function (data) {\r\n        // TODO: Do we need to add a callback for confirmation here?\r\n        if (typeof data.watcherId !== 'string') {\r\n            throw new Error('data.watcherId not provided - use the one given at watchDocument.');\r\n        } else if (Object.hasOwn(this.watchers.documents, data.docId) &&\r\n            Object.hasOwn(this.watchers.documents[data.docId], data.watcherId) &&\r\n            this.watchers.documents[data.docId][data.watcherId].otClient instanceof ot.Client) {\r\n\r\n            this.watchers.documents[data.docId][data.watcherId].selection = data.selection;\r\n            this.watchers.documents[data.docId][data.watcherId].otClient.applyClient(data.operation);\r\n        } else {\r\n            throw new Error('Document not being watched ' + data.docId +\r\n                '. (If \"watchDocument\" was initiated make sure to wait for the callback.)');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Send selection on document at docId. (Will only be transmitted if client is Synchronized.)\r\n     * @param {object} data\r\n     * @param {string} data.docId\r\n     * @param {string} data.watcherId\r\n     * @param {ot.Selection} data.selection\r\n     */\r\n    StorageWatcher.prototype.sendDocumentSelection = function (data) {\r\n        var self = this,\r\n            otClient;\r\n\r\n        if (typeof data.watcherId !== 'string') {\r\n            throw new Error('data.watcherId not provided - use the one given at watchDocument.');\r\n        } else if (Object.hasOwn(this.watchers.documents, data.docId) &&\r\n            Object.hasOwn(this.watchers.documents[data.docId], data.watcherId) &&\r\n            this.watchers.documents[data.docId][data.watcherId].otClient instanceof ot.Client) {\r\n\r\n            otClient = this.watchers.documents[data.docId][data.watcherId].otClient;\r\n\r\n            if (otClient.state instanceof ot.Client.Synchronized) {\r\n                // Only broadcast the selection when synchronized\r\n                this.webSocket.sendDocumentSelection({\r\n                    docId: data.docId,\r\n                    watcherId: data.watcherId,\r\n                    revision: otClient.revision,\r\n                    selection: data.selection\r\n                }, function (err) {\r\n                    if (err) {\r\n                        self.logger.error(err);\r\n                    }\r\n                });\r\n            }\r\n\r\n        } else {\r\n            throw new Error('Document not being watched ' + data.docId +\r\n                '. (If \"watchDocument\" was initiated make sure to wait for the callback.)');\r\n        }\r\n    };\r\n\r\n    StorageWatcher.prototype._rejoinWatcherRooms = function (callback) {\r\n        var self = this,\r\n            promises = [],\r\n            projectId;\r\n\r\n        // When this is called were are in the self.reconnecting === true state until callback resolved.\r\n\r\n        this.logger.debug('rejoinWatcherRooms');\r\n        if (this.watchers.database > 0) {\r\n            this.logger.debug('Rejoining database room.');\r\n            promises.push(Q.ninvoke(this.webSocket, 'watchDatabase', {join: true}));\r\n        }\r\n\r\n        for (projectId in this.watchers.projects) {\r\n            if (Object.hasOwn(this.watchers.projects, projectId) && this.watchers.projects[projectId] > 0) {\r\n                this.logger.debug('Rejoining project room', projectId, this.watchers.projects[projectId]);\r\n                promises.push(this.webSocket.watchProject({projectId: projectId, join: true}));\r\n            }\r\n        }\r\n\r\n        function rejoinWatchers(docId, watcherIds) {\r\n            var rejoinData = _splitDocId(docId),\r\n                watcherId = watcherIds.pop();\r\n\r\n            rejoinData.docId = docId;\r\n            rejoinData.rejoin = true;\r\n            rejoinData.revision = self.watchers.documents[docId][watcherId].otClient.revision;\r\n            rejoinData.sessionId = self.watchers.sessionId;\r\n            rejoinData.watcherId = watcherId;\r\n\r\n            return self.webSocket.watchDocument(rejoinData)\r\n                .then(function (joinData) {\r\n                    var deferred = Q.defer(),\r\n                        awaiting = self.watchers.documents[docId][watcherId].awaitingAck,\r\n                        sendData;\r\n\r\n                    function applyFromServer() {\r\n                        joinData.operations.forEach(function (op) {\r\n                            self.watchers.documents[docId][watcherId].otClient.applyServer(op.wrapped);\r\n                        });\r\n\r\n                        self.watchers.documents[docId][watcherId].applyBuffer.forEach(function (op) {\r\n                            self.watchers.documents[docId][watcherId].otClient.applyServer(op);\r\n                        });\r\n\r\n                        self.watchers.documents[docId][watcherId].applyBuffer = [];\r\n                    }\r\n\r\n                    if (awaiting === null) {\r\n                        // We had no outstanding operations - apply all from the server.\r\n                        applyFromServer();\r\n                        deferred.resolve();\r\n                    } else {\r\n                        // We were awaiting an acknowledgement, did it make it to the server?\r\n                        if (joinData.operations.length > 0 &&\r\n                            joinData.operations[0].metadata.sessionId === self.watchers.sessionId &&\r\n                            joinData.operations[0].metadata.watcherId === watcherId) {\r\n                            // It made it to the server - so send the acknowledgement to the otClient.\r\n                            self.watchers.documents[docId][watcherId].awaitingAck = null;\r\n                            self.watchers.documents[docId][watcherId].otClient.serverAck(awaiting.revision);\r\n\r\n                            // Remove it from the operations and apply the other\r\n                            joinData.operations.shift();\r\n                            applyFromServer();\r\n                            deferred.resolve();\r\n                        } else {\r\n                            applyFromServer();\r\n                            sendData = {\r\n                                docId: docId,\r\n                                projectId: rejoinData.projectId,\r\n                                branchName: rejoinData.branchName,\r\n                                revision: awaiting.revision,\r\n                                operation: awaiting.operation,\r\n                                sessionId: self.watchers.sessionId,\r\n                                watcherId: watcherId\r\n                            };\r\n\r\n                            self.webSocket.sendDocumentOperation(sendData, function (err) {\r\n                                if (err) {\r\n                                    deferred.reject(err);\r\n                                    return;\r\n                                }\r\n\r\n                                if (Object.hasOwn(self.watchers.documents, docId) &&\r\n                                    Object.hasOwn(self.watchers.documents[docId], watcherId)) {\r\n                                    self.watchers.documents[docId][watcherId].awaitingAck = null;\r\n                                    self.watchers.documents[docId][watcherId].otClient.serverAck(sendData.revision);\r\n                                } else {\r\n                                    self.logger.error(new Error('Received document acknowledgement ' +\r\n                                        'after leaving document ' + docId));\r\n                                }\r\n\r\n                                deferred.resolve();\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return deferred.promise;\r\n                })\r\n                .then(function () {\r\n                    if (watcherIds.length > 0) {\r\n                        rejoinWatchers(docId, watcherIds);\r\n                    }\r\n                });\r\n        }\r\n\r\n        Object.keys(this.watchers.documents).forEach(function (docId) {\r\n            promises.push(rejoinWatchers(docId, Object.keys(self.watchers.documents[docId])));\r\n        });\r\n\r\n        return Q.all(promises).nodeify(callback);\r\n    };\r\n\r\n    return StorageWatcher;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * TODO: Come up with an appropriate name for this.\r\n * TODO: Proper implementation needed, e.g. error handling.\r\n *\r\n * Provides REST-like functionality of the database.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/storageclasses/simpleapi',['common/storage/storageclasses/watchers'], function (StorageWatcher) {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param webSocket\r\n     * @param logger\r\n     * @param gmeConfig\r\n     * @constructor\r\n     * @class\r\n     */\r\n    function StorageSimpleAPI(webSocket, logger, gmeConfig) {\r\n        // watcher counters determining when to join/leave a room on the sever\r\n        this.logger = this.logger || logger.fork('storage');\r\n        StorageWatcher.call(this, webSocket, logger, gmeConfig);\r\n        this.webSocket = webSocket;\r\n        this.gmeConfig = gmeConfig;\r\n        this.logger.debug('StorageSimpleAPI ctor');\r\n    }\r\n\r\n    StorageSimpleAPI.prototype = Object.create(StorageWatcher.prototype);\r\n    StorageSimpleAPI.prototype.constructor = StorageSimpleAPI;\r\n\r\n    StorageSimpleAPI.prototype.getProjects = function (options, callback) {\r\n        this.logger.debug('invoking getProjects', {metadata: options});\r\n        return this.webSocket.getProjects(options).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getProjectInfo = function (projectId, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branches: true,\r\n            info: true,\r\n            hooks: true,\r\n            rights: true\r\n        };\r\n\r\n        this.logger.debug('invoking getProjectInfo', {metadata: data});\r\n        return this.webSocket.getProjects(data)\r\n            .then(function (result) {\r\n                return result[0];\r\n            })\r\n            .nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getBranches = function (projectId, callback) {\r\n        var data = {\r\n            projectId: projectId\r\n        };\r\n        this.logger.debug('invoking getBranches', {metadata: data});\r\n        return this.webSocket.getBranches(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getCommits = function (projectId, before, number, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            before: before,\r\n            number: number\r\n        };\r\n        this.logger.debug('invoking getCommits', {metadata: data});\r\n        return this.webSocket.getCommits(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getHistory = function (projectId, start, number, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            start: start,\r\n            number: number\r\n        };\r\n        this.logger.debug('invoking getHistory', {metadata: data});\r\n        return this.webSocket.getHistory(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.squashCommits = function (projectId, fromCommit, toCommitOrBranch, msg, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            fromCommit: fromCommit,\r\n            toCommitOrBranch: toCommitOrBranch,\r\n            message: msg\r\n        };\r\n        this.logger.debug('invoking squashCommits', {metadata: data});\r\n        return this.webSocket.squashCommits(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getTags = function (projectId, callback) {\r\n        var data = {\r\n            projectId: projectId\r\n        };\r\n        this.logger.debug('invoking getTags', {metadata: data});\r\n        return this.webSocket.getTags(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getBranchHash = function (projectId, branchName, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branchName: branchName\r\n        };\r\n        this.logger.debug('invoking getBranchHash', {metadata: data});\r\n        return this.webSocket.getBranchHash(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getLatestCommitData = function (projectId, branchName, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branchName: branchName\r\n        };\r\n        this.logger.debug('invoking getLatestCommitData', {metadata: data});\r\n        return this.webSocket.getLatestCommitData(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.getCommonAncestorCommit = function (projectId, commitA, commitB, callback) {\r\n        var data = {\r\n            commitA: commitA,\r\n            commitB: commitB,\r\n            projectId: projectId\r\n        };\r\n        this.logger.debug('invoking getCommonAncestorCommit', {metadata: data});\r\n        return this.webSocket.getCommonAncestorCommit(data).nodeify(callback);\r\n    };\r\n\r\n    // Setters\r\n    StorageSimpleAPI.prototype.createProject = function (projectName, ownerId, kind, callback) {\r\n        var data = {\r\n            projectName: projectName\r\n        };\r\n\r\n        if (callback === undefined) {\r\n            if (typeof ownerId === 'function') {\r\n                callback = ownerId;\r\n            } else if (typeof kind === 'function') {\r\n                data.ownerId = ownerId;\r\n                callback = kind;\r\n            } else {\r\n                data.ownerId = ownerId;\r\n                data.kind = kind;\r\n            }\r\n        } else {\r\n            data.ownerId = ownerId;\r\n            data.kind = kind;\r\n        }\r\n\r\n        this.logger.debug('invoking createProject', {metadata: data});\r\n\r\n        return this.webSocket.createProject(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.deleteProject = function (projectId, callback) {\r\n        var data = {\r\n            projectId: projectId\r\n        };\r\n        this.logger.debug('invoking deleteProject', {metadata: data});\r\n        return this.webSocket.deleteProject(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.transferProject = function (projectId, newOwnerId, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            newOwnerId: newOwnerId\r\n        };\r\n        this.logger.debug('invoking transferProject', {metadata: data});\r\n        return this.webSocket.transferProject(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.duplicateProject = function (projectId, projectName, ownerId, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            projectName: projectName,\r\n            ownerId: ownerId\r\n        };\r\n\r\n        if (callback === undefined && typeof ownerId === 'function') {\r\n            callback = ownerId;\r\n            data.ownerId = undefined;\r\n        }\r\n\r\n        this.logger.debug('invoking duplicateProject', {metadata: data});\r\n        return this.webSocket.duplicateProject(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.setBranchHash = function (projectId, branchName, newHash, oldHash, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branchName: branchName,\r\n            newHash: newHash,\r\n            oldHash: oldHash\r\n        };\r\n\r\n        this.logger.debug('invoking setBranchHash', {metadata: data});\r\n        return this.webSocket.setBranchHash(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.createBranch = function (projectId, branchName, newHash, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branchName: branchName,\r\n            newHash: newHash,\r\n            oldHash: ''\r\n        };\r\n\r\n        this.logger.debug('invoking createBranch', {metadata: data});\r\n        return this.webSocket.setBranchHash(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.deleteBranch = function (projectId, branchName, oldHash, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            branchName: branchName,\r\n            newHash: '',\r\n            oldHash: oldHash\r\n        };\r\n        this.logger.debug('invoking deleteBranch', {metadata: data});\r\n        return this.webSocket.setBranchHash(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.createTag = function (projectId, tagName, commitHash, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            tagName: tagName,\r\n            commitHash: commitHash\r\n        };\r\n        this.logger.debug('invoking createTag', {metadata: data});\r\n        return this.webSocket.createTag(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.deleteTag = function (projectId, tagName, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            tagName: tagName\r\n        };\r\n        this.logger.debug('invoking deleteTag', {metadata: data});\r\n        return this.webSocket.deleteTag(data).nodeify(callback);\r\n    };\r\n\r\n    //temporary simple request and result functions\r\n    StorageSimpleAPI.prototype.simpleRequest = function (parameters, callback) {\r\n        this.logger.debug('invoking simpleRequest', {metadata: parameters});\r\n        return this.webSocket.simpleRequest(parameters).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.simpleQuery = function (workerId, parameters, callback) {\r\n        this.logger.debug('invoking simpleQuery; workerId, parameters', workerId, {metadata: parameters});\r\n        return this.webSocket.simpleQuery(workerId, parameters).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.sendNotification = function (data, callback) {\r\n        this.logger.debug('invoking sendNotification; ', {metadata: data});\r\n        return this.webSocket.sendNotification(data).nodeify(callback);\r\n    };\r\n\r\n    StorageSimpleAPI.prototype.sendWsRouterMessage = function (routerId, messageType, payload, callback) {\r\n        this.logger.debug('invoking sendWsRouterMessage', \r\n            {metadata: {routerId: routerId, messageType: messageType, payload: payload}});\r\n        return this.webSocket.simpleRequest(routerId, messageType, payload).nodeify(callback);\r\n    };\r\n\r\n    return StorageSimpleAPI;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * Provides functionality (used by the project-cache) for loading objects.\r\n *\r\n * To avoid multiple round-trips to the server the loadObject requests are put in a bucket\r\n * that is loaded when the bucket is full (gmeConfig.storage.loadBucketSize) or when a\r\n * timeout is triggered (gmeConfig.storage.loadBucketTimer).\r\n *\r\n * N.B. when used directly, the user need to make sure that the same object (by hash) is not loaded within in the\r\n * same bucket, (see the project-cache for example).\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/storageclasses/objectloaders',['common/storage/storageclasses/simpleapi'], function (SimpleAPI) {\r\n    'use strict';\r\n\r\n    function StorageObjectLoaders(webSocket, logger, gmeConfig) {\r\n        // watcher counters determining when to join/leave a room on the sever\r\n        this.logger = this.logger || logger.fork('storage');\r\n        SimpleAPI.call(this, webSocket, logger, gmeConfig);\r\n        this.webSocket = webSocket;\r\n        this.gmeConfig = gmeConfig;\r\n        // Bucket for loading objects\r\n        this.loadBucket = [];\r\n        this.loadBucketSize = 0;\r\n        this.loadBucketTimer = null;\r\n        this.logger.debug('StorageObjectLoaders ctor');\r\n    }\r\n\r\n    StorageObjectLoaders.prototype = Object.create(SimpleAPI.prototype);\r\n    StorageObjectLoaders.prototype.constructor = StorageObjectLoaders;\r\n\r\n    // Getters\r\n    StorageObjectLoaders.prototype.loadObject = function (projectId, hash, callback) {\r\n        var self = this;\r\n        this.logger.debug('loadObject', projectId, hash);\r\n\r\n        self.loadBucket.push({projectId: projectId, hash: hash, cb: callback});\r\n        self.loadBucketSize += 1;\r\n\r\n        function resetBucketAndLoadObjects() {\r\n            var myBucket = self.loadBucket;\r\n            self.loadBucket = [];\r\n            self.loadBucketTimer = null;\r\n            self.loadBucketSize = 0;\r\n            self.loadObjects(projectId, myBucket);\r\n        }\r\n\r\n        if (self.loadBucketSize === 1) {\r\n            self.logger.debug('loadBucket was empty starting timer [ms]', self.gmeConfig.storage.loadBucketTimer);\r\n            self.loadBucketTimer = setTimeout(function () {\r\n                self.logger.debug('loadBucketTimer triggered, bucketSize:', self.loadBucketSize);\r\n                resetBucketAndLoadObjects();\r\n            }, self.gmeConfig.storage.loadBucketTimer);\r\n        }\r\n\r\n        if (self.loadBucketSize === self.gmeConfig.storage.loadBucketSize) {\r\n            self.logger.debug('loadBuckSize reached will loadObjects, bucketSize:', self.loadBucketSize);\r\n            clearTimeout(self.loadBucketTimer);\r\n            resetBucketAndLoadObjects();\r\n        }\r\n    };\r\n\r\n    StorageObjectLoaders.prototype.loadObjects = function (projectId, hashedObjects) {\r\n        var self = this,\r\n            hashes = {},\r\n            data,\r\n            i;\r\n        for (i = 0; i < hashedObjects.length; i++) {\r\n            hashes[hashedObjects[i].hash] = true;\r\n        }\r\n        hashes = Object.keys(hashes);\r\n        data = {\r\n            hashes: hashes,\r\n            projectId: projectId\r\n        };\r\n\r\n        this.webSocket.loadObjects(data, function (err, result) {\r\n            //if (err) {\r\n            //    throw new Error(err);\r\n            //}\r\n            self.logger.debug('loadObjects returned', {metadata: result});\r\n            for (i = 0; i < hashedObjects.length; i++) {\r\n                if (err) {\r\n                    hashedObjects[i].cb(err);\r\n                } else if (typeof result[hashedObjects[i].hash] === 'string') {\r\n                    self.logger.error(result[hashedObjects[i].hash]);\r\n                    hashedObjects[i].cb(new Error(result[hashedObjects[i].hash]));\r\n                } else {\r\n                    hashedObjects[i].cb(err, result[hashedObjects[i].hash]);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    StorageObjectLoaders.prototype.loadPaths = function (projectId, pathsInfo, excludes, callback) {\r\n        var data = {\r\n            projectId: projectId,\r\n            pathsInfo: pathsInfo,\r\n            excludes: excludes\r\n        };\r\n\r\n        this.webSocket.loadPaths(data, callback);\r\n    };\r\n\r\n    return StorageObjectLoaders;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint no-console: 0*/\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\n\r\ndefine('common/util/assert',[],function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks given condition and throws new Error if \"falsy\".\r\n     * @param {boolean|*} cond\r\n     * @param {string} [msg='ASSERT failed']\r\n     */\r\n    var assert = function (cond, msg) {\r\n        if (!cond) {\r\n            var error = new Error(msg || 'ASSERT failed');\r\n\r\n            if (typeof TESTING === 'undefined') {\r\n                console.log('Throwing', error.stack);\r\n                console.log();\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return assert;\r\n});\r\n\n",
    "/*eslint-disable*/\r\n/* 2012 David Chambers <dc@hashify.me>  */\r\ndefine('common/util/canon',[], function() {\r\n    var CANON = {},\r\n        keys, map, nativeMap, pad,\r\n        __slice = [].slice,\r\n        __hasProp = {}.hasOwnProperty;\r\n\r\n\r\n    CANON.stringify = (function() {\r\n        var canonicalize;\r\n        canonicalize = function(value) {\r\n            var pair, _ref;\r\n            switch (Object.prototype.toString.call(value)) {\r\n                case '[object Array]':\r\n                    return ['Array'].concat(__slice.call(map(value, canonicalize)));\r\n                case '[object Date]':\r\n                    return ['Date'].concat(isFinite(+value) ? value.getUTCFullYear() + '-' + pad(value.getUTCMonth() + 1) + '-' + pad(value.getUTCDate()) + 'T' + pad(value.getUTCHours()) + ':' + pad(value.getUTCMinutes()) + ':' + pad(value.getUTCSeconds()) + '.' + pad(value.getUTCMilliseconds(), 3) + 'Z' : null);\r\n                case '[object Function]':\r\n                    throw new TypeError('functions cannot be serialized');\r\n                    break;\r\n                case '[object Number]':\r\n                    if (isFinite(value)) {\r\n                        return value;\r\n                    } else {\r\n                        return ['Number', \"\" + value];\r\n                    }\r\n                    break;\r\n                case '[object Object]':\r\n                    pair = function(key) {\r\n                        return [key, canonicalize(value[key])];\r\n                    };\r\n                    return (_ref = ['Object']).concat.apply(_ref, map(keys(value).sort(), pair));\r\n                case '[object RegExp]':\r\n                    return ['RegExp', \"\" + value];\r\n                case '[object Undefined]':\r\n                    return ['Undefined'];\r\n                default:\r\n                    return value;\r\n            }\r\n        };\r\n        return function(value) {\r\n            return JSON.stringify(canonicalize(value));\r\n        };\r\n    })();\r\n\r\n    CANON.parse = (function() {\r\n        var canonicalize;\r\n        canonicalize = function(value) {\r\n            var element, elements, idx, object, what, _i, _ref;\r\n            if (Object.prototype.toString.call(value) !== '[object Array]') {\r\n                return value;\r\n            }\r\n            what = value[0], elements = 2 <= value.length ? __slice.call(value, 1) : [];\r\n            element = elements[0];\r\n            switch (what) {\r\n                case 'Array':\r\n                    return map(elements, canonicalize);\r\n                case 'Date':\r\n                    return new Date(element);\r\n                case 'Number':\r\n                    return +element;\r\n                case 'Object':\r\n                    object = {};\r\n                    for (idx = _i = 0, _ref = elements.length; _i < _ref; idx = _i += 2) {\r\n                        object[elements[idx]] = canonicalize(elements[idx + 1]);\r\n                    }\r\n                    return object;\r\n                case 'RegExp':\r\n                    return (function(func, args, ctor) {\r\n                        ctor.prototype = func.prototype;\r\n                        var child = new ctor, result = func.apply(child, args);\r\n                        return Object(result) === result ? result : child;\r\n                    })(RegExp, /^[/](.+)[/]([gimy]*)$/.exec(element).slice(1), function(){});\r\n                case 'Undefined':\r\n                    return void 0;\r\n                default:\r\n                    throw new Error('invalid input');\r\n            }\r\n        };\r\n        return function(string) {\r\n            return canonicalize(JSON.parse(string));\r\n        };\r\n    })();\r\n\r\n    nativeMap = Array.prototype.map;\r\n\r\n    map = function(array, iterator) {\r\n        var el, _i, _len, _results;\r\n        if (nativeMap && array.map === nativeMap) {\r\n            return array.map(iterator);\r\n        } else {\r\n            _results = [];\r\n            for (_i = 0, _len = array.length; _i < _len; _i++) {\r\n                el = array[_i];\r\n                _results.push(iterator(el));\r\n            }\r\n            return _results;\r\n        }\r\n    };\r\n\r\n    keys = Object.keys || function(object) {\r\n        var key, _results;\r\n        _results = [];\r\n        for (key in object) {\r\n            if (!__hasProp.call(object, key)) continue;\r\n            _results.push(key);\r\n        }\r\n        return _results;\r\n    };\r\n\r\n    pad = function(n, min) {\r\n        if (min == null) {\r\n            min = 2;\r\n        }\r\n        return (\"\" + (1000 + n)).substr(4 - min);\r\n    };\r\n\r\n    return CANON;\r\n\r\n});\r\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('chance',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.chance = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n},{}],2:[function(require,module,exports){\n(function (Buffer){(function (){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n}).call(this)}).call(this,require(\"buffer\").Buffer)\n},{\"base64-js\":1,\"buffer\":2,\"ieee754\":3}],3:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],\"chance\":[function(require,module,exports){\n(function (Buffer){(function (){\n//  Chance.js 1.1.11\n//  https://chancejs.com\n//  (c) 2013 Victor Quinn\n//  Chance may be freely distributed or modified under the MIT license.\n\n(function () {\n\n    // Constants\n    var MAX_INT = 9007199254740992;\n    var MIN_INT = -MAX_INT;\n    var NUMBERS = '0123456789';\n    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';\n    var CHARS_UPPER = CHARS_LOWER.toUpperCase();\n    var HEX_POOL  = NUMBERS + \"abcdef\";\n\n    // Errors\n    function UnsupportedError(message) {\n        this.name = 'UnsupportedError';\n        this.message = message || 'This feature is not supported on this platform';\n    }\n\n    UnsupportedError.prototype = new Error();\n    UnsupportedError.prototype.constructor = UnsupportedError;\n\n    // Cached array helpers\n    var slice = Array.prototype.slice;\n\n    // Constructor\n    function Chance (seed) {\n        if (!(this instanceof Chance)) {\n            if (!seed) { seed = null; } // handle other non-truthy seeds, as described in issue #322\n            return seed === null ? new Chance() : new Chance(seed);\n        }\n\n        // if user has provided a function, use that as the generator\n        if (typeof seed === 'function') {\n            this.random = seed;\n            return this;\n        }\n\n        if (arguments.length) {\n            // set a starting value of zero so we can add to it\n            this.seed = 0;\n        }\n\n        // otherwise, leave this.seed blank so that MT will receive a blank\n\n        for (var i = 0; i < arguments.length; i++) {\n            var seedling = 0;\n            if (Object.prototype.toString.call(arguments[i]) === '[object String]') {\n                for (var j = 0; j < arguments[i].length; j++) {\n                    // create a numeric hash for each argument, add to seedling\n                    var hash = 0;\n                    for (var k = 0; k < arguments[i].length; k++) {\n                        hash = arguments[i].charCodeAt(k) + (hash << 6) + (hash << 16) - hash;\n                    }\n                    seedling += hash;\n                }\n            } else {\n                seedling = arguments[i];\n            }\n            this.seed += (arguments.length - i) * seedling;\n        }\n\n        // If no generator function was provided, use our MT\n        this.mt = this.mersenne_twister(this.seed);\n        this.bimd5 = this.blueimp_md5();\n        this.random = function () {\n            return this.mt.random(this.seed);\n        };\n\n        return this;\n    }\n\n    Chance.prototype.VERSION = \"1.1.11\";\n\n    // Random helper functions\n    function initOptions(options, defaults) {\n        options = options || {};\n\n        if (defaults) {\n            for (var i in defaults) {\n                if (typeof options[i] === 'undefined') {\n                    options[i] = defaults[i];\n                }\n            }\n        }\n\n        return options;\n    }\n\n    function range(size) {\n        return Array.apply(null, Array(size)).map(function (_, i) {return i;});\n    }\n\n    function testRange(test, errorMessage) {\n        if (test) {\n            throw new RangeError(errorMessage);\n        }\n    }\n\n    /**\n     * Encode the input string with Base64.\n     */\n    var base64 = function() {\n        throw new Error('No Base64 encoder available.');\n    };\n\n    // Select proper Base64 encoder.\n    (function determineBase64Encoder() {\n        if (typeof btoa === 'function') {\n            base64 = btoa;\n        } else if (typeof Buffer === 'function') {\n            base64 = function(input) {\n                return new Buffer(input).toString('base64');\n            };\n        }\n    })();\n\n    // -- Basics --\n\n    /**\n     *  Return a random bool, either true or false\n     *\n     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of\n     *    receiving a true or false value back.\n     *  @throws {RangeError} if the likelihood is out of bounds\n     *  @returns {Bool} either true or false\n     */\n    Chance.prototype.bool = function (options) {\n        // likelihood of success (true)\n        options = initOptions(options, {likelihood : 50});\n\n        // Note, we could get some minor perf optimizations by checking range\n        // prior to initializing defaults, but that makes code a bit messier\n        // and the check more complicated as we have to check existence of\n        // the object then existence of the key before checking constraints.\n        // Since the options initialization should be minor computationally,\n        // decision made for code cleanliness intentionally. This is mentioned\n        // here as it's the first occurrence, will not be mentioned again.\n        testRange(\n            options.likelihood < 0 || options.likelihood > 100,\n            \"Chance: Likelihood accepts values from 0 to 100.\"\n        );\n\n        return this.random() * 100 < options.likelihood;\n    };\n\n    Chance.prototype.falsy = function (options) {\n        // return a random falsy value\n        options = initOptions(options, {pool: [false, null, 0, NaN, '', undefined]})\n        var pool = options.pool,\n            index = this.integer({min: 0, max: pool.length - 1}),\n            value = pool[index];\n\n        return value;\n    }\n\n    Chance.prototype.animal = function (options){\n      //returns a random animal\n      options = initOptions(options);\n\n      if(typeof options.type !== 'undefined'){\n        //if user does not put in a valid animal type, user will get an error\n        testRange(\n           !this.get(\"animals\")[options.type.toLowerCase()],\n           \"Please pick from desert, ocean, grassland, forest, zoo, pets, farm.\"\n         );\n         //if user does put in valid animal type, will return a random animal of that type\n          return this.pick(this.get(\"animals\")[options.type.toLowerCase()]);\n      }\n       //if user does not put in any animal type, will return a random animal regardless\n      var animalTypeArray = [\"desert\",\"forest\",\"ocean\",\"zoo\",\"farm\",\"pet\",\"grassland\"];\n      return this.pick(this.get(\"animals\")[this.pick(animalTypeArray)]);\n    };\n\n    /**\n     *  Return a random character.\n     *\n     *  @param {Object} [options={}] can specify a character pool or alpha,\n     *    numeric, symbols and casing (lower or upper)\n     *  @returns {String} a single random character\n     */\n    Chance.prototype.character = function (options) {\n        options = initOptions(options);\n\n        var symbols = \"!@#$%^&*()[]\",\n            letters, pool;\n\n        if (options.casing === 'lower') {\n            letters = CHARS_LOWER;\n        } else if (options.casing === 'upper') {\n            letters = CHARS_UPPER;\n        } else {\n            letters = CHARS_LOWER + CHARS_UPPER;\n        }\n\n        if (options.pool) {\n            pool = options.pool;\n        } else {\n            pool = '';\n            if (options.alpha) {\n                pool += letters;\n            }\n            if (options.numeric) {\n                pool += NUMBERS;\n            }\n            if (options.symbols) {\n                pool += symbols;\n            }\n            if (!pool) {\n                pool = letters + NUMBERS + symbols;\n            }\n        }\n\n        return pool.charAt(this.natural({max: (pool.length - 1)}));\n    };\n\n    // Note, wanted to use \"float\" or \"double\" but those are both JS reserved words.\n\n    // Note, fixed means N OR LESS digits after the decimal. This because\n    // It could be 14.9000 but in JavaScript, when this is cast as a number,\n    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are\n    // needed\n    /**\n     *  Return a random floating point number\n     *\n     *  @param {Object} [options={}] can specify a fixed precision, min, max\n     *  @returns {Number} a single floating point number\n     *  @throws {RangeError} Can only specify fixed or precision, not both. Also\n     *    min cannot be greater than max\n     */\n    Chance.prototype.floating = function (options) {\n        options = initOptions(options, {fixed : 4});\n        testRange(\n            options.fixed && options.precision,\n            \"Chance: Cannot specify both fixed and precision.\"\n        );\n\n        var num;\n        var fixed = Math.pow(10, options.fixed);\n\n        var max = MAX_INT / fixed;\n        var min = -max;\n\n        testRange(\n            options.min && options.fixed && options.min < min,\n            \"Chance: Min specified is out of range with fixed. Min should be, at least, \" + min\n        );\n        testRange(\n            options.max && options.fixed && options.max > max,\n            \"Chance: Max specified is out of range with fixed. Max should be, at most, \" + max\n        );\n\n        options = initOptions(options, { min : min, max : max });\n\n        // Todo - Make this work!\n        // options.precision = (typeof options.precision !== \"undefined\") ? options.precision : false;\n\n        num = this.integer({min: options.min * fixed, max: options.max * fixed});\n        var num_fixed = (num / fixed).toFixed(options.fixed);\n\n        return parseFloat(num_fixed);\n    };\n\n    /**\n     *  Return a random integer\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.integer({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    Chance.prototype.integer = function (options) {\n        // 9007199254740992 (2^53) is the max integer number in JavaScript\n        // See: http://vq.io/132sa2j\n        options = initOptions(options, {min: MIN_INT, max: MAX_INT});\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);\n    };\n\n    /**\n     *  Return a random natural\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.natural({min: 1, max: 3});\n     *  would return either 1, 2, or 3.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max or a numerals count.\n     *  @returns {Number} a single random integer number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    Chance.prototype.natural = function (options) {\n        options = initOptions(options, {min: 0, max: MAX_INT});\n        if (typeof options.numerals === 'number'){\n          testRange(options.numerals < 1, \"Chance: Numerals cannot be less than one.\");\n          options.min = Math.pow(10, options.numerals - 1);\n          options.max = Math.pow(10, options.numerals) - 1;\n        }\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\n\n        if (options.exclude) {\n            testRange(!Array.isArray(options.exclude), \"Chance: exclude must be an array.\")\n\n            for (var exclusionIndex in options.exclude) {\n                testRange(!Number.isInteger(options.exclude[exclusionIndex]), \"Chance: exclude must be numbers.\")\n            }\n\n            var random = options.min + this.natural({max: options.max - options.min - options.exclude.length})\n            var sortedExclusions = options.exclude.sort();\n            for (var sortedExclusionIndex in sortedExclusions) {\n                if (random < sortedExclusions[sortedExclusionIndex]) {\n                    break\n                }\n                random++\n            }\n            return random\n        }\n        return this.integer(options);\n    };\n\n    /**\n     *  Return a random prime number\n     *\n     *  NOTE the max and min are INCLUDED in the range.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max\n     *  @returns {Number} a single random prime number\n     *  @throws {RangeError} min cannot be greater than max nor negative\n     */\n    Chance.prototype.prime = function (options) {\n        options = initOptions(options, {min: 0, max: 10000});\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        var lastPrime = data.primes[data.primes.length - 1];\n        if (options.max > lastPrime) {\n            for (var i = lastPrime + 2; i <= options.max; ++i) {\n                if (this.is_prime(i)) {\n                    data.primes.push(i);\n                }\n            }\n        }\n        var targetPrimes = data.primes.filter(function (prime) {\n            return prime >= options.min && prime <= options.max;\n        });\n        return this.pick(targetPrimes);\n    };\n\n    /**\n     * Determine whether a given number is prime or not.\n     */\n    Chance.prototype.is_prime = function (n) {\n        if (n % 1 || n < 2) {\n            return false;\n        }\n        if (n % 2 === 0) {\n            return n === 2;\n        }\n        if (n % 3 === 0) {\n            return n === 3;\n        }\n        var m = Math.sqrt(n);\n        for (var i = 5; i <= m; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     *  Return a random hex number as string\n     *\n     *  NOTE the max and min are INCLUDED in the range. So:\n     *  chance.hex({min: '9', max: 'B'});\n     *  would return either '9', 'A' or 'B'.\n     *\n     *  @param {Object} [options={}] can specify a min and/or max and/or casing\n     *  @returns {String} a single random string hex number\n     *  @throws {RangeError} min cannot be greater than max\n     */\n    Chance.prototype.hex = function (options) {\n        options = initOptions(options, {min: 0, max: MAX_INT, casing: 'lower'});\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\n\t\tvar integer = this.natural({min: options.min, max: options.max});\n\t\tif (options.casing === 'upper') {\n\t\t\treturn integer.toString(16).toUpperCase();\n\t\t}\n\t\treturn integer.toString(16);\n    };\n\n    Chance.prototype.letter = function(options) {\n        options = initOptions(options, {casing: 'lower'});\n        var pool = \"abcdefghijklmnopqrstuvwxyz\";\n        var letter = this.character({pool: pool});\n        if (options.casing === 'upper') {\n            letter = letter.toUpperCase();\n        }\n        return letter;\n    }\n\n    /**\n     *  Return a random string\n     *\n     *  @param {Object} [options={}] can specify a length or min and max\n     *  @returns {String} a string of random length\n     *  @throws {RangeError} length cannot be less than zero\n     */\n    Chance.prototype.string = function (options) {\n        options = initOptions(options, { min: 5, max: 20 });\n\n        if (options.length !== 0 && !options.length) {\n            options.length = this.natural({ min: options.min, max: options.max })\n        }\n\n        testRange(options.length < 0, \"Chance: Length cannot be less than zero.\");\n        var length = options.length,\n            text = this.n(this.character, length, options);\n\n        return text.join(\"\");\n    };\n\n    function CopyToken(c) {\n        this.c = c\n    }\n\n    CopyToken.prototype = {\n        substitute: function () {\n            return this.c\n        }\n    }\n\n    function EscapeToken(c) {\n        this.c = c\n    }\n\n    EscapeToken.prototype = {\n        substitute: function () {\n            if (!/[{}\\\\]/.test(this.c)) {\n                throw new Error('Invalid escape sequence: \"\\\\' + this.c + '\".')\n            }\n            return this.c\n        }\n    }\n\n    function ReplaceToken(c) {\n        this.c = c\n    }\n\n    ReplaceToken.prototype = {\n        replacers: {\n            '#': function (chance) { return chance.character({ pool: NUMBERS }) },\n            'A': function (chance) { return chance.character({ pool: CHARS_UPPER }) },\n            'a': function (chance) { return chance.character({ pool: CHARS_LOWER }) },\n        },\n\n        substitute: function (chance) {\n            var replacer = this.replacers[this.c]\n            if (!replacer) {\n                throw new Error('Invalid replacement character: \"' + this.c + '\".')\n            }\n            return replacer(chance)\n        }\n    }\n\n    function parseTemplate(template) {\n        var tokens = []\n        var mode = 'identity'\n        for (var i = 0; i<template.length; i++) {\n            var c = template[i]\n            switch (mode) {\n                case 'escape':\n                    tokens.push(new EscapeToken(c))\n                    mode = 'identity'\n                    break\n                case 'identity':\n                    if (c === '{') {\n                        mode = 'replace'\n                    } else if (c === '\\\\') {\n                        mode = 'escape'\n                    } else {\n                        tokens.push(new CopyToken(c))\n                    }\n                    break\n                case 'replace':\n                    if (c === '}') {\n                        mode = 'identity'\n                    } else {\n                        tokens.push(new ReplaceToken(c))\n                    }\n                    break\n            }\n        }\n        return tokens\n    }\n\n    /**\n     *  Return a random string matching the given template.\n     *\n     *  The template consists of any number of \"character replacement\" and\n     *  \"character literal\" sequences. A \"character replacement\" sequence\n     *  starts with a left brace, has any number of special replacement\n     *  characters, and ends with a right brace. A character literal can be any\n     *  character except a brace or a backslash. A literal brace or backslash\n     *  character can be included in the output by escaping with a backslash.\n     *\n     *  The following replacement characters can be used in a replacement\n     *  sequence:\n     *\n     *      \"#\": a random digit\n     *      \"a\": a random lower case letter\n     *      \"A\": a random upper case letter\n     *\n     *  Example: chance.template('{AA###}-{##}')\n     *\n     *  @param {String} template string.\n     *  @returns {String} a random string matching the template.\n     */\n    Chance.prototype.template = function (template) {\n        if (!template) {\n            throw new Error('Template string is required')\n        }\n        var self = this\n        return parseTemplate(template)\n            .map(function (token) { return token.substitute(self) })\n            .join('');\n    };\n\n\n    /**\n     *  Return a random buffer\n     *\n     *  @param {Object} [options={}] can specify a length\n     *  @returns {Buffer} a buffer of random length\n     *  @throws {RangeError} length cannot be less than zero\n     */\n    Chance.prototype.buffer = function (options) {\n        if (typeof Buffer === 'undefined') {\n            throw new UnsupportedError('Sorry, the buffer() function is not supported on your platform');\n        }\n        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });\n        testRange(options.length < 0, \"Chance: Length cannot be less than zero.\");\n        var length = options.length;\n        var content = this.n(this.character, length, options);\n\n        return Buffer.from(content);\n    };\n\n    // -- End Basics --\n\n    // -- Helpers --\n\n    Chance.prototype.capitalize = function (word) {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n    };\n\n    Chance.prototype.mixin = function (obj) {\n        for (var func_name in obj) {\n            this[func_name] = obj[func_name];\n        }\n        return this;\n    };\n\n    /**\n     *  Given a function that generates something random and a number of items to generate,\n     *    return an array of items where none repeat.\n     *\n     *  @param {Function} fn the function that generates something random\n     *  @param {Number} num number of terms to generate\n     *  @param {Object} options any options to pass on to the generator function\n     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique\n     *\n     *  There can be more parameters after these. All additional parameters are provided to the given function\n     */\n    Chance.prototype.unique = function(fn, num, options) {\n        testRange(\n            typeof fn !== \"function\",\n            \"Chance: The first argument must be a function.\"\n        );\n\n        var comparator = function(arr, val) { return arr.indexOf(val) !== -1; };\n\n        if (options) {\n            comparator = options.comparator || comparator;\n        }\n\n        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);\n\n        while (arr.length < num) {\n            var clonedParams = JSON.parse(JSON.stringify(params));\n            result = fn.apply(this, clonedParams);\n            if (!comparator(arr, result)) {\n                arr.push(result);\n                // reset count when unique found\n                count = 0;\n            }\n\n            if (++count > MAX_DUPLICATES) {\n                throw new RangeError(\"Chance: num is likely too large for sample set\");\n            }\n        }\n        return arr;\n    };\n\n    /**\n     *  Gives an array of n random terms\n     *\n     *  @param {Function} fn the function that generates something random\n     *  @param {Number} n number of terms to generate\n     *  @returns {Array} an array of length `n` with items generated by `fn`\n     *\n     *  There can be more parameters after these. All additional parameters are provided to the given function\n     */\n    Chance.prototype.n = function(fn, n) {\n        testRange(\n            typeof fn !== \"function\",\n            \"Chance: The first argument must be a function.\"\n        );\n\n        if (typeof n === 'undefined') {\n            n = 1;\n        }\n        var i = n, arr = [], params = slice.call(arguments, 2);\n\n        // Providing a negative count should result in a noop.\n        i = Math.max( 0, i );\n\n        for (null; i--; null) {\n            arr.push(fn.apply(this, params));\n        }\n\n        return arr;\n    };\n\n    // H/T to SO for this one: http://vq.io/OtUrZ5\n    Chance.prototype.pad = function (number, width, pad) {\n        // Default pad to 0 if none provided\n        pad = pad || '0';\n        // Convert number to a string\n        number = number + '';\n        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;\n    };\n\n    // DEPRECATED on 2015-10-01\n    Chance.prototype.pick = function (arr, count) {\n        if (arr.length === 0) {\n            throw new RangeError(\"Chance: Cannot pick() from an empty array\");\n        }\n        if (!count || count === 1) {\n            return arr[this.natural({max: arr.length - 1})];\n        } else {\n            return this.shuffle(arr).slice(0, count);\n        }\n    };\n\n    // Given an array, returns a single random element\n    Chance.prototype.pickone = function (arr) {\n        if (arr.length === 0) {\n          throw new RangeError(\"Chance: Cannot pickone() from an empty array\");\n        }\n        return arr[this.natural({max: arr.length - 1})];\n    };\n\n    // Given an array, returns a random set with 'count' elements\n    Chance.prototype.pickset = function (arr, count) {\n        if (count === 0) {\n            return [];\n        }\n        if (arr.length === 0) {\n            throw new RangeError(\"Chance: Cannot pickset() from an empty array\");\n        }\n        if (count < 0) {\n            throw new RangeError(\"Chance: Count must be a positive number\");\n        }\n        if (!count || count === 1) {\n            return [ this.pickone(arr) ];\n        } else {\n            var array = arr.slice(0);\n            var end = array.length;\n\n            return this.n(function () {\n                var index = this.natural({max: --end});\n                var value = array[index];\n                array[index] = array[end];\n                return value;\n            }, Math.min(end, count));\n        }\n    };\n\n    Chance.prototype.shuffle = function (arr) {\n        var new_array = [],\n            j = 0,\n            length = Number(arr.length),\n            source_indexes = range(length),\n            last_source_index = length - 1,\n            selected_source_index;\n\n        for (var i = 0; i < length; i++) {\n            // Pick a random index from the array\n            selected_source_index = this.natural({max: last_source_index});\n            j = source_indexes[selected_source_index];\n\n            // Add it to the new array\n            new_array[i] = arr[j];\n\n            // Mark the source index as used\n            source_indexes[selected_source_index] = source_indexes[last_source_index];\n            last_source_index -= 1;\n        }\n\n        return new_array;\n    };\n\n    // Returns a single item from an array with relative weighting of odds\n    Chance.prototype.weighted = function (arr, weights, trim) {\n        if (arr.length !== weights.length) {\n            throw new RangeError(\"Chance: Length of array and weights must match\");\n        }\n\n        // scan weights array and sum valid entries\n        var sum = 0;\n        var val;\n        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n            val = weights[weightIndex];\n            if (isNaN(val)) {\n                throw new RangeError(\"Chance: All weights must be numbers\");\n            }\n\n            if (val > 0) {\n                sum += val;\n            }\n        }\n\n        if (sum === 0) {\n            throw new RangeError(\"Chance: No valid entries in array weights\");\n        }\n\n        // select a value within range\n        var selected = this.random() * sum;\n\n        // find array entry corresponding to selected value\n        var total = 0;\n        var lastGoodIdx = -1;\n        var chosenIdx;\n        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n            val = weights[weightIndex];\n            total += val;\n            if (val > 0) {\n                if (selected <= total) {\n                    chosenIdx = weightIndex;\n                    break;\n                }\n                lastGoodIdx = weightIndex;\n            }\n\n            // handle any possible rounding error comparison to ensure something is picked\n            if (weightIndex === (weights.length - 1)) {\n                chosenIdx = lastGoodIdx;\n            }\n        }\n\n        var chosen = arr[chosenIdx];\n        trim = (typeof trim === 'undefined') ? false : trim;\n        if (trim) {\n            arr.splice(chosenIdx, 1);\n            weights.splice(chosenIdx, 1);\n        }\n\n        return chosen;\n    };\n\n    // -- End Helpers --\n\n    // -- Text --\n\n    Chance.prototype.paragraph = function (options) {\n        options = initOptions(options);\n\n        var sentences = options.sentences || this.natural({min: 3, max: 7}),\n            sentence_array = this.n(this.sentence, sentences),\n            separator = options.linebreak === true ? '\\n' : ' ';\n\n        return sentence_array.join(separator);\n    };\n\n    // Could get smarter about this than generating random words and\n    // chaining them together. Such as: http://vq.io/1a5ceOh\n    Chance.prototype.sentence = function (options) {\n        options = initOptions(options);\n\n        var words = options.words || this.natural({min: 12, max: 18}),\n            punctuation = options.punctuation,\n            text, word_array = this.n(this.word, words);\n\n        text = word_array.join(' ');\n\n        // Capitalize first letter of sentence\n        text = this.capitalize(text);\n\n        // Make sure punctuation has a usable value\n        if (punctuation !== false && !/^[.?;!:]$/.test(punctuation)) {\n            punctuation = '.';\n        }\n\n        // Add punctuation mark\n        if (punctuation) {\n            text += punctuation;\n        }\n\n        return text;\n    };\n\n    Chance.prototype.syllable = function (options) {\n        options = initOptions(options);\n\n        var length = options.length || this.natural({min: 2, max: 3}),\n            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones\n            vowels = 'aeiou', // vowels\n            all = consonants + vowels, // all\n            text = '',\n            chr;\n\n        // I'm sure there's a more elegant way to do this, but this works\n        // decently well.\n        for (var i = 0; i < length; i++) {\n            if (i === 0) {\n                // First character can be anything\n                chr = this.character({pool: all});\n            } else if (consonants.indexOf(chr) === -1) {\n                // Last character was a vowel, now we want a consonant\n                chr = this.character({pool: consonants});\n            } else {\n                // Last character was a consonant, now we want a vowel\n                chr = this.character({pool: vowels});\n            }\n\n            text += chr;\n        }\n\n        if (options.capitalize) {\n            text = this.capitalize(text);\n        }\n\n        return text;\n    };\n\n    Chance.prototype.word = function (options) {\n        options = initOptions(options);\n\n        testRange(\n            options.syllables && options.length,\n            \"Chance: Cannot specify both syllables AND length.\"\n        );\n\n        var syllables = options.syllables || this.natural({min: 1, max: 3}),\n            text = '';\n\n        if (options.length) {\n            // Either bound word by length\n            do {\n                text += this.syllable();\n            } while (text.length < options.length);\n            text = text.substring(0, options.length);\n        } else {\n            // Or by number of syllables\n            for (var i = 0; i < syllables; i++) {\n                text += this.syllable();\n            }\n        }\n\n        if (options.capitalize) {\n            text = this.capitalize(text);\n        }\n\n        return text;\n    };\n\n    // -- End Text --\n\n    // -- Person --\n\n    Chance.prototype.age = function (options) {\n        options = initOptions(options);\n        var ageRange;\n\n        switch (options.type) {\n            case 'child':\n                ageRange = {min: 0, max: 12};\n                break;\n            case 'teen':\n                ageRange = {min: 13, max: 19};\n                break;\n            case 'adult':\n                ageRange = {min: 18, max: 65};\n                break;\n            case 'senior':\n                ageRange = {min: 65, max: 100};\n                break;\n            case 'all':\n                ageRange = {min: 0, max: 100};\n                break;\n            default:\n                ageRange = {min: 18, max: 65};\n                break;\n        }\n\n        return this.natural(ageRange);\n    };\n\n    Chance.prototype.birthday = function (options) {\n        var age = this.age(options);\n        var now = new Date()\n        var currentYear = now.getFullYear();\n\n        if (options && options.type) {\n            var min = new Date();\n            var max = new Date();\n            min.setFullYear(currentYear - age - 1);\n            max.setFullYear(currentYear - age);\n\n            options = initOptions(options, {\n                min: min,\n                max: max\n            });\n        } else if (options && ((options.minAge !== undefined) || (options.maxAge !== undefined))) {\n            testRange(options.minAge < 0, \"Chance: MinAge cannot be less than zero.\");\n            testRange(options.minAge > options.maxAge, \"Chance: MinAge cannot be greater than MaxAge.\");\n\n            var minAge = options.minAge !== undefined ? options.minAge : 0;\n            var maxAge = options.maxAge !== undefined ? options.maxAge : 100;\n\n            var minDate = new Date(currentYear - maxAge - 1, now.getMonth(), now.getDate());\n            var maxDate = new Date(currentYear - minAge, now.getMonth(), now.getDate());\n\n            minDate.setDate(minDate.getDate() +1);\n\n            maxDate.setDate(maxDate.getDate() +1);\n            maxDate.setMilliseconds(maxDate.getMilliseconds() -1);\n\n            options = initOptions(options, {\n                min: minDate,\n                max: maxDate\n          });\n        } else {\n            options = initOptions(options, {\n                year: currentYear - age\n            });\n        }\n\n        return this.date(options);\n    };\n\n    // CPF; ID to identify taxpayers in Brazil\n    Chance.prototype.cpf = function (options) {\n        options = initOptions(options, {\n            formatted: true\n        });\n\n        var n = this.n(this.natural, 9, { max: 9 });\n        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;\n        d1 = 11 - (d1 % 11);\n        if (d1>=10) {\n            d1 = 0;\n        }\n        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;\n        d2 = 11 - (d2 % 11);\n        if (d2>=10) {\n            d2 = 0;\n        }\n        var cpf = ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;\n        return options.formatted ? cpf : cpf.replace(/\\D/g,'');\n    };\n\n    // CNPJ: ID to identify companies in Brazil\n    Chance.prototype.cnpj = function (options) {\n        options = initOptions(options, {\n            formatted: true\n        });\n\n        var n = this.n(this.natural, 12, { max: 12 });\n        var d1 = n[11]*2+n[10]*3+n[9]*4+n[8]*5+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\n        d1 = 11 - (d1 % 11);\n        if (d1<2) {\n            d1 = 0;\n        }\n        var d2 = d1*2+n[11]*3+n[10]*4+n[9]*5+n[8]*6+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\n        d2 = 11 - (d2 % 11);\n        if (d2<2) {\n            d2 = 0;\n        }\n        var cnpj = ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/'+n[8]+n[9]+n[10]+n[11]+'-'+d1+d2;\n        return options.formatted ? cnpj : cnpj.replace(/\\D/g,'');\n    };\n\n    Chance.prototype.first = function (options) {\n        options = initOptions(options, {gender: this.gender(), nationality: 'en'});\n        return this.pick(this.get(\"firstNames\")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);\n    };\n\n    Chance.prototype.profession = function (options) {\n        options = initOptions(options);\n        if(options.rank){\n            return this.pick(['Apprentice ', 'Junior ', 'Senior ', 'Lead ']) + this.pick(this.get(\"profession\"));\n        } else{\n            return this.pick(this.get(\"profession\"));\n        }\n    };\n\n    Chance.prototype.company = function (){\n        return this.pick(this.get(\"company\"));\n    };\n\n    Chance.prototype.gender = function (options) {\n        options = initOptions(options, {extraGenders: []});\n        return this.pick(['Male', 'Female'].concat(options.extraGenders));\n    };\n\n    Chance.prototype.last = function (options) {\n      options = initOptions(options, {nationality: '*'});\n      if (options.nationality === \"*\") {\n        var allLastNames = []\n        var lastNames = this.get(\"lastNames\")\n        Object.keys(lastNames).forEach(function(key){\n          allLastNames = allLastNames.concat(lastNames[key])\n        })\n        return this.pick(allLastNames)\n      }\n      else {\n        return this.pick(this.get(\"lastNames\")[options.nationality.toLowerCase()]);\n      }\n\n    };\n\n    Chance.prototype.israelId=function(){\n        var x=this.string({pool: '0123456789',length:8});\n        var y=0;\n        for (var i=0;i<x.length;i++){\n            var thisDigit=  x[i] *  (i/2===parseInt(i/2) ? 1 : 2);\n            thisDigit=this.pad(thisDigit,2).toString();\n            thisDigit=parseInt(thisDigit[0]) + parseInt(thisDigit[1]);\n            y=y+thisDigit;\n        }\n        x=x+(10-parseInt(y.toString().slice(-1))).toString().slice(-1);\n        return x;\n    };\n\n    Chance.prototype.mrz = function (options) {\n        var checkDigit = function (input) {\n            var alpha = \"<ABCDEFGHIJKLMNOPQRSTUVWXYXZ\".split(''),\n                multipliers = [ 7, 3, 1 ],\n                runningTotal = 0;\n\n            if (typeof input !== 'string') {\n                input = input.toString();\n            }\n\n            input.split('').forEach(function(character, idx) {\n                var pos = alpha.indexOf(character);\n\n                if(pos !== -1) {\n                    character = pos === 0 ? 0 : pos + 9;\n                } else {\n                    character = parseInt(character, 10);\n                }\n                character *= multipliers[idx % multipliers.length];\n                runningTotal += character;\n            });\n            return runningTotal % 10;\n        };\n        var generate = function (opts) {\n            var pad = function (length) {\n                return new Array(length + 1).join('<');\n            };\n            var number = [ 'P<',\n                           opts.issuer,\n                           opts.last.toUpperCase(),\n                           '<<',\n                           opts.first.toUpperCase(),\n                           pad(39 - (opts.last.length + opts.first.length + 2)),\n                           opts.passportNumber,\n                           checkDigit(opts.passportNumber),\n                           opts.nationality,\n                           opts.dob,\n                           checkDigit(opts.dob),\n                           opts.gender,\n                           opts.expiry,\n                           checkDigit(opts.expiry),\n                           pad(14),\n                           checkDigit(pad(14)) ].join('');\n\n            return number +\n                (checkDigit(number.substr(44, 10) +\n                            number.substr(57, 7) +\n                            number.substr(65, 7)));\n        };\n\n        var that = this;\n\n        options = initOptions(options, {\n            first: this.first(),\n            last: this.last(),\n            passportNumber: this.integer({min: 100000000, max: 999999999}),\n            dob: (function () {\n                var date = that.birthday({type: 'adult'});\n                return [date.getFullYear().toString().substr(2),\n                        that.pad(date.getMonth() + 1, 2),\n                        that.pad(date.getDate(), 2)].join('');\n            }()),\n            expiry: (function () {\n                var date = new Date();\n                return [(date.getFullYear() + 5).toString().substr(2),\n                        that.pad(date.getMonth() + 1, 2),\n                        that.pad(date.getDate(), 2)].join('');\n            }()),\n            gender: this.gender() === 'Female' ? 'F': 'M',\n            issuer: 'GBR',\n            nationality: 'GBR'\n        });\n        return generate (options);\n    };\n\n    Chance.prototype.name = function (options) {\n        options = initOptions(options);\n\n        var first = this.first(options),\n            last = this.last(options),\n            name;\n\n        if (options.middle) {\n            name = first + ' ' + this.first(options) + ' ' + last;\n        } else if (options.middle_initial) {\n            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;\n        } else {\n            name = first + ' ' + last;\n        }\n\n        if (options.prefix) {\n            name = this.prefix(options) + ' ' + name;\n        }\n\n        if (options.suffix) {\n            name = name + ' ' + this.suffix(options);\n        }\n\n        return name;\n    };\n\n    // Return the list of available name prefixes based on supplied gender.\n    // @todo introduce internationalization\n    Chance.prototype.name_prefixes = function (gender) {\n        gender = gender || \"all\";\n        gender = gender.toLowerCase();\n\n        var prefixes = [\n            { name: 'Doctor', abbreviation: 'Dr.' }\n        ];\n\n        if (gender === \"male\" || gender === \"all\") {\n            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });\n        }\n\n        if (gender === \"female\" || gender === \"all\") {\n            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });\n            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });\n        }\n\n        return prefixes;\n    };\n\n    // Alias for name_prefix\n    Chance.prototype.prefix = function (options) {\n        return this.name_prefix(options);\n    };\n\n    Chance.prototype.name_prefix = function (options) {\n        options = initOptions(options, { gender: \"all\" });\n        return options.full ?\n            this.pick(this.name_prefixes(options.gender)).name :\n            this.pick(this.name_prefixes(options.gender)).abbreviation;\n    };\n    //Hungarian ID number\n    Chance.prototype.HIDN= function(){\n     //Hungarian ID nuber structure: XXXXXXYY (X=number,Y=Capital Latin letter)\n      var idn_pool=\"0123456789\";\n      var idn_chrs=\"ABCDEFGHIJKLMNOPQRSTUVWXYXZ\";\n      var idn=\"\";\n        idn+=this.string({pool:idn_pool,length:6});\n        idn+=this.string({pool:idn_chrs,length:2});\n        return idn;\n    };\n\n\n    Chance.prototype.ssn = function (options) {\n        options = initOptions(options, {ssnFour: false, dashes: true});\n        var ssn_pool = \"1234567890\",\n            ssn,\n            dash = options.dashes ? '-' : '';\n\n        if(!options.ssnFour) {\n            ssn = this.string({pool: ssn_pool, length: 3}) + dash +\n            this.string({pool: ssn_pool, length: 2}) + dash +\n            this.string({pool: ssn_pool, length: 4});\n        } else {\n            ssn = this.string({pool: ssn_pool, length: 4});\n        }\n        return ssn;\n    };\n\n    // Aadhar is similar to ssn, used in India to uniquely identify a person\n    Chance.prototype.aadhar = function (options) {\n        options = initOptions(options, {onlyLastFour: false, separatedByWhiteSpace: true});\n        var aadhar_pool = \"1234567890\",\n            aadhar,\n            whiteSpace = options.separatedByWhiteSpace ? ' ' : '';\n\n        if(!options.onlyLastFour) {\n            aadhar = this.string({pool: aadhar_pool, length: 4}) + whiteSpace +\n            this.string({pool: aadhar_pool, length: 4}) + whiteSpace +\n            this.string({pool: aadhar_pool, length: 4});\n        } else {\n            aadhar = this.string({pool: aadhar_pool, length: 4});\n        }\n        return aadhar;\n    };\n\n    // Return the list of available name suffixes\n    // @todo introduce internationalization\n    Chance.prototype.name_suffixes = function () {\n        var suffixes = [\n            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },\n            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },\n            { name: 'Esquire', abbreviation: 'Esq.' },\n            { name: 'Junior', abbreviation: 'Jr.' },\n            { name: 'Juris Doctor', abbreviation: 'J.D.' },\n            { name: 'Master of Arts', abbreviation: 'M.A.' },\n            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },\n            { name: 'Master of Science', abbreviation: 'M.S.' },\n            { name: 'Medical Doctor', abbreviation: 'M.D.' },\n            { name: 'Senior', abbreviation: 'Sr.' },\n            { name: 'The Third', abbreviation: 'III' },\n            { name: 'The Fourth', abbreviation: 'IV' },\n            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },\n            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }\n        ];\n        return suffixes;\n    };\n\n    // Alias for name_suffix\n    Chance.prototype.suffix = function (options) {\n        return this.name_suffix(options);\n    };\n\n    Chance.prototype.name_suffix = function (options) {\n        options = initOptions(options);\n        return options.full ?\n            this.pick(this.name_suffixes()).name :\n            this.pick(this.name_suffixes()).abbreviation;\n    };\n\n    Chance.prototype.nationalities = function () {\n        return this.get(\"nationalities\");\n    };\n\n    // Generate random nationality based on json list\n    Chance.prototype.nationality = function () {\n        var nationality = this.pick(this.nationalities());\n        return nationality.name;\n    };\n\n     // Generate random zodiac sign\n     Chance.prototype.zodiac = function () {\n        const zodiacSymbols = [\"Aries\",\"Taurus\",\"Gemini\",\"Cancer\",\"Leo\",\"Virgo\",\"Libra\",\"Scorpio\",\"Sagittarius\",\"Capricorn\",\"Aquarius\",\"Pisces\"];\n        return this.pickone(zodiacSymbols);\n    };\n\n\n    // -- End Person --\n\n    // -- Mobile --\n    // Android GCM Registration ID\n    Chance.prototype.android_id = function () {\n        return \"APA91\" + this.string({ pool: \"0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\", length: 178 });\n    };\n\n    // Apple Push Token\n    Chance.prototype.apple_token = function () {\n        return this.string({ pool: \"abcdef1234567890\", length: 64 });\n    };\n\n    // Windows Phone 8 ANID2\n    Chance.prototype.wp8_anid2 = function () {\n        return base64( this.hash( { length : 32 } ) );\n    };\n\n    // Windows Phone 7 ANID\n    Chance.prototype.wp7_anid = function () {\n        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });\n    };\n\n    // BlackBerry Device PIN\n    Chance.prototype.bb_pin = function () {\n        return this.hash({ length: 8 });\n    };\n\n    // -- End Mobile --\n\n    // -- Web --\n    Chance.prototype.avatar = function (options) {\n        var url = null;\n        var URL_BASE = '//www.gravatar.com/avatar/';\n        var PROTOCOLS = {\n            http: 'http',\n            https: 'https'\n        };\n        var FILE_TYPES = {\n            bmp: 'bmp',\n            gif: 'gif',\n            jpg: 'jpg',\n            png: 'png'\n        };\n        var FALLBACKS = {\n            '404': '404', // Return 404 if not found\n            mm: 'mm', // Mystery man\n            identicon: 'identicon', // Geometric pattern based on hash\n            monsterid: 'monsterid', // A generated monster icon\n            wavatar: 'wavatar', // A generated face\n            retro: 'retro', // 8-bit icon\n            blank: 'blank' // A transparent png\n        };\n        var RATINGS = {\n            g: 'g',\n            pg: 'pg',\n            r: 'r',\n            x: 'x'\n        };\n        var opts = {\n            protocol: null,\n            email: null,\n            fileExtension: null,\n            size: null,\n            fallback: null,\n            rating: null\n        };\n\n        if (!options) {\n            // Set to a random email\n            opts.email = this.email();\n            options = {};\n        }\n        else if (typeof options === 'string') {\n            opts.email = options;\n            options = {};\n        }\n        else if (typeof options !== 'object') {\n            return null;\n        }\n        else if (options.constructor === 'Array') {\n            return null;\n        }\n\n        opts = initOptions(options, opts);\n\n        if (!opts.email) {\n            // Set to a random email\n            opts.email = this.email();\n        }\n\n        // Safe checking for params\n        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';\n        opts.size = parseInt(opts.size, 0) ? opts.size : '';\n        opts.rating = RATINGS[opts.rating] ? opts.rating : '';\n        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';\n        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';\n\n        url =\n            opts.protocol +\n            URL_BASE +\n            this.bimd5.md5(opts.email) +\n            (opts.fileExtension ? '.' + opts.fileExtension : '') +\n            (opts.size || opts.rating || opts.fallback ? '?' : '') +\n            (opts.size ? '&s=' + opts.size.toString() : '') +\n            (opts.rating ? '&r=' + opts.rating : '') +\n            (opts.fallback ? '&d=' + opts.fallback : '')\n            ;\n\n        return url;\n    };\n\n    /**\n     * #Description:\n     * ===============================================\n     * Generate random color value base on color type:\n     * -> hex\n     * -> rgb\n     * -> rgba\n     * -> 0x\n     * -> named color\n     *\n     * #Examples:\n     * ===============================================\n     * * Geerate random hex color\n     * chance.color() => '#79c157' / 'rgb(110,52,164)' / '0x67ae0b' / '#e2e2e2' / '#29CFA7'\n     *\n     * * Generate Hex based color value\n     * chance.color({format: 'hex'})    => '#d67118'\n     *\n     * * Generate simple rgb value\n     * chance.color({format: 'rgb'})    => 'rgb(110,52,164)'\n     *\n     * * Generate Ox based color value\n     * chance.color({format: '0x'})     => '0x67ae0b'\n     *\n     * * Generate graiscale based value\n     * chance.color({grayscale: true})  => '#e2e2e2'\n     *\n     * * Return valide color name\n     * chance.color({format: 'name'})   => 'red'\n     *\n     * * Make color uppercase\n     * chance.color({casing: 'upper'})  => '#29CFA7'\n     *\n     * * Min Max values for RGBA\n     * var light_red = chance.color({format: 'hex', min_red: 200, max_red: 255, max_green: 0, max_blue: 0, min_alpha: .2, max_alpha: .3});\n     *\n     * @param  [object] options\n     * @return [string] color value\n     */\n    Chance.prototype.color = function (options) {\n        function gray(value, delimiter) {\n            return [value, value, value].join(delimiter || '');\n        }\n\n        function rgb(hasAlpha) {\n            var rgbValue     = (hasAlpha)    ? 'rgba' : 'rgb';\n            var alphaChannel = (hasAlpha)    ? (',' + this.floating({min:min_alpha, max:max_alpha})) : \"\";\n            var colorValue   = (isGrayscale) ? (gray(this.natural({min: min_rgb, max: max_rgb}), ',')) : (this.natural({min: min_green, max: max_green}) + ',' + this.natural({min: min_blue, max: max_blue}) + ',' + this.natural({max: 255}));\n            return rgbValue + '(' + colorValue + alphaChannel + ')';\n        }\n\n        function hex(start, end, withHash) {\n            var symbol = (withHash) ? \"#\" : \"\";\n            var hexstring = \"\";\n\n            if (isGrayscale) {\n                hexstring = gray(this.pad(this.hex({min: min_rgb, max: max_rgb}), 2));\n                if (options.format === \"shorthex\") {\n                    hexstring = gray(this.hex({min: 0, max: 15}));\n                }\n            }\n            else {\n                if (options.format === \"shorthex\") {\n                    hexstring = this.pad(this.hex({min: Math.floor(min_red / 16), max: Math.floor(max_red / 16)}), 1) + this.pad(this.hex({min: Math.floor(min_green / 16), max: Math.floor(max_green / 16)}), 1) + this.pad(this.hex({min: Math.floor(min_blue / 16), max: Math.floor(max_blue / 16)}), 1);\n                }\n                else if (min_red !== undefined || max_red !== undefined || min_green !== undefined || max_green !== undefined || min_blue !== undefined || max_blue !== undefined) {\n                    hexstring = this.pad(this.hex({min: min_red, max: max_red}), 2) + this.pad(this.hex({min: min_green, max: max_green}), 2) + this.pad(this.hex({min: min_blue, max: max_blue}), 2);\n                }\n                else {\n                    hexstring = this.pad(this.hex({min: min_rgb, max: max_rgb}), 2) + this.pad(this.hex({min: min_rgb, max: max_rgb}), 2) + this.pad(this.hex({min: min_rgb, max: max_rgb}), 2);\n                }\n            }\n\n            return symbol + hexstring;\n        }\n\n        options = initOptions(options, {\n            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x', 'name']),\n            grayscale: false,\n            casing: 'lower',\n            min: 0,\n            max: 255,\n            min_red: undefined,\n            max_red: undefined,\n            min_green: undefined,\n            max_green: undefined,\n            min_blue: undefined,\n            max_blue: undefined,\n            min_alpha: 0,\n            max_alpha: 1\n        });\n\n        var isGrayscale = options.grayscale;\n        var min_rgb = options.min;\n        var max_rgb = options.max;\n        var min_red = options.min_red;\n        var max_red = options.max_red;\n        var min_green = options.min_green;\n        var max_green = options.max_green;\n        var min_blue = options.min_blue;\n        var max_blue = options.max_blue;\n        var min_alpha = options.min_alpha;\n        var max_alpha = options.max_alpha;\n        if (options.min_red === undefined) { min_red = min_rgb; }\n        if (options.max_red === undefined) { max_red = max_rgb; }\n        if (options.min_green === undefined) { min_green = min_rgb; }\n        if (options.max_green === undefined) { max_green = max_rgb; }\n        if (options.min_blue === undefined) { min_blue = min_rgb; }\n        if (options.max_blue === undefined) { max_blue = max_rgb; }\n        if (options.min_alpha === undefined) { min_alpha = 0; }\n        if (options.max_alpha === undefined) { max_alpha = 1; }\n        if (isGrayscale && min_rgb === 0 && max_rgb === 255 && min_red !== undefined && max_red !== undefined) {\n            min_rgb = ((min_red + min_green + min_blue) / 3);\n            max_rgb = ((max_red + max_green + max_blue) / 3);\n        }\n        var colorValue;\n\n        if (options.format === 'hex') {\n            colorValue = hex.call(this, 2, 6, true);\n        }\n        else if (options.format === 'shorthex') {\n            colorValue = hex.call(this, 1, 3, true);\n        }\n        else if (options.format === 'rgb') {\n            colorValue = rgb.call(this, false);\n        }\n        else if (options.format === 'rgba') {\n            colorValue = rgb.call(this, true);\n        }\n        else if (options.format === '0x') {\n            colorValue = '0x' + hex.call(this, 2, 6);\n        }\n        else if(options.format === 'name') {\n            return this.pick(this.get(\"colorNames\"));\n        }\n        else {\n            throw new RangeError('Invalid format provided. Please provide one of \"hex\", \"shorthex\", \"rgb\", \"rgba\", \"0x\" or \"name\".');\n        }\n\n        if (options.casing === 'upper' ) {\n            colorValue = colorValue.toUpperCase();\n        }\n\n        return colorValue;\n    };\n\n    Chance.prototype.domain = function (options) {\n        options = initOptions(options);\n        return this.word() + '.' + (options.tld || this.tld());\n    };\n\n    Chance.prototype.email = function (options) {\n        options = initOptions(options);\n        return this.word({length: options.length}) + '@' + (options.domain || this.domain());\n    };\n\n    /**\n     * #Description:\n     * ===============================================\n     * Generate a random Facebook id, aka fbid.\n     *\n     * NOTE: At the moment (Sep 2017), Facebook ids are\n     * \"numeric strings\" of length 16.\n     * However, Facebook Graph API documentation states that\n     * \"it is extremely likely to change over time\".\n     * @see https://developers.facebook.com/docs/graph-api/overview/\n     *\n     * #Examples:\n     * ===============================================\n     * chance.fbid() => '1000035231661304'\n     *\n     * @return [string] facebook id\n     */\n    Chance.prototype.fbid = function () {\n        return '10000' + this.string({pool: \"1234567890\", length: 11});\n    };\n\n    Chance.prototype.google_analytics = function () {\n        var account = this.pad(this.natural({max: 999999}), 6);\n        var property = this.pad(this.natural({max: 99}), 2);\n\n        return 'UA-' + account + '-' + property;\n    };\n\n    Chance.prototype.hashtag = function () {\n        return '#' + this.word();\n    };\n\n    Chance.prototype.ip = function () {\n        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy\n        // this should probably be updated to account for that rare as it may be\n        return this.natural({min: 1, max: 254}) + '.' +\n               this.natural({max: 255}) + '.' +\n               this.natural({max: 255}) + '.' +\n               this.natural({min: 1, max: 254});\n    };\n\n    Chance.prototype.ipv6 = function () {\n        var ip_addr = this.n(this.hash, 8, {length: 4});\n\n        return ip_addr.join(\":\");\n    };\n\n    Chance.prototype.klout = function () {\n        return this.natural({min: 1, max: 99});\n    };\n\n    Chance.prototype.mac = function (options) {\n        // Todo: This could also be extended to EUI-64 based MACs\n        // (https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml#ethernet-numbers-4)\n        // Todo: This can return some reserved MACs (similar to IP function)\n        // this should probably be updated to account for that rare as it may be\n        options = initOptions(options, { delimiter: ':' });\n        return this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +\n               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +\n               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +\n               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +\n               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +\n               this.pad(this.natural({max: 255}).toString(16),2);\n    };\n\n    Chance.prototype.semver = function (options) {\n        options = initOptions(options, { include_prerelease: true });\n\n        var range = this.pickone([\"^\", \"~\", \"<\", \">\", \"<=\", \">=\", \"=\"]);\n        if (options.range) {\n            range = options.range;\n        }\n\n        var prerelease = \"\";\n        if (options.include_prerelease) {\n            prerelease = this.weighted([\"\", \"-dev\", \"-beta\", \"-alpha\"], [50, 10, 5, 1]);\n        }\n        return range + this.rpg('3d10').join('.') + prerelease;\n    };\n\n    Chance.prototype.tlds = function () {\n        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sx', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'];\n    };\n\n    Chance.prototype.tld = function () {\n        return this.pick(this.tlds());\n    };\n\n    Chance.prototype.twitter = function () {\n        return '@' + this.word();\n    };\n\n    Chance.prototype.url = function (options) {\n        options = initOptions(options, { protocol: \"http\", domain: this.domain(options), domain_prefix: \"\", path: this.word(), extensions: []});\n\n        var extension = options.extensions.length > 0 ? \".\" + this.pick(options.extensions) : \"\";\n        var domain = options.domain_prefix ? options.domain_prefix + \".\" + options.domain : options.domain;\n\n        return options.protocol + \"://\" + domain + \"/\" + options.path + extension;\n    };\n\n    Chance.prototype.port = function() {\n        return this.integer({min: 0, max: 65535});\n    };\n\n    Chance.prototype.locale = function (options) {\n        options = initOptions(options);\n        if (options.region){\n          return this.pick(this.get(\"locale_regions\"));\n        } else {\n          return this.pick(this.get(\"locale_languages\"));\n        }\n    };\n\n    Chance.prototype.locales = function (options) {\n      options = initOptions(options);\n      if (options.region){\n        return this.get(\"locale_regions\");\n      } else {\n        return this.get(\"locale_languages\");\n      }\n    };\n\n    Chance.prototype.loremPicsum = function (options) {\n        options = initOptions(options, { width: 500, height: 500, greyscale: false, blurred: false });\n\n        var greyscale = options.greyscale ? 'g/' : '';\n        var query = options.blurred ? '/?blur' : '/?random';\n\n        return 'https://picsum.photos/' + greyscale + options.width + '/' + options.height + query;\n    }\n\n    // -- End Web --\n\n    // -- Location --\n\n    Chance.prototype.address = function (options) {\n        options = initOptions(options);\n        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);\n    };\n\n    Chance.prototype.altitude = function (options) {\n        options = initOptions(options, {fixed: 5, min: 0, max: 8848});\n        return this.floating({\n            min: options.min,\n            max: options.max,\n            fixed: options.fixed\n        });\n    };\n\n    Chance.prototype.areacode = function (options) {\n        options = initOptions(options, {parens : true});\n        // Don't want area codes to start with 1, or have a 9 as the second digit\n        var areacode = options.exampleNumber ?\n        \"555\" :\n        this.natural({min: 2, max: 9}).toString() +\n                this.natural({min: 0, max: 8}).toString() +\n                this.natural({min: 0, max: 9}).toString();\n\n        return options.parens ? '(' + areacode + ')' : areacode;\n    };\n\n    Chance.prototype.city = function () {\n        return this.capitalize(this.word({syllables: 3}));\n    };\n\n    Chance.prototype.coordinates = function (options) {\n        return this.latitude(options) + ', ' + this.longitude(options);\n    };\n\n    Chance.prototype.countries = function () {\n        return this.get(\"countries\");\n    };\n\n    Chance.prototype.country = function (options) {\n        options = initOptions(options);\n        var country = this.pick(this.countries());\n        return options.raw ? country : options.full ? country.name : country.abbreviation;\n    };\n\n    Chance.prototype.depth = function (options) {\n        options = initOptions(options, {fixed: 5, min: -10994, max: 0});\n        return this.floating({\n            min: options.min,\n            max: options.max,\n            fixed: options.fixed\n        });\n    };\n\n    Chance.prototype.geohash = function (options) {\n        options = initOptions(options, { length: 7 });\n        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });\n    };\n\n    Chance.prototype.geojson = function (options) {\n        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);\n    };\n\n    Chance.prototype.latitude = function (options) {\n        // Constants - Formats\n        var [DDM, DMS, DD] = ['ddm', 'dms', 'dd'];\n\n        options = initOptions(\noptions,\n            options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ?\n            {min: 0, max: 89, fixed: 4} :\n            {fixed: 5, min: -90, max: 90, format: DD}\n);\n\n        var format = options.format.toLowerCase();\n\n        if (format === DDM || format === DMS) {\n            testRange(options.min < 0 || options.min > 89, \"Chance: Min specified is out of range. Should be between 0 - 89\");\n            testRange(options.max < 0 || options.max > 89, \"Chance: Max specified is out of range. Should be between 0 - 89\");\n            testRange(options.fixed > 4, 'Chance: Fixed specified should be below or equal to 4');\n        }\n\n        switch (format) {\n            case DDM: {\n                return  this.integer({min: options.min, max: options.max}) + '°' +\n                        this.floating({min: 0, max: 59, fixed: options.fixed});\n            }\n            case DMS: {\n                return  this.integer({min: options.min, max: options.max}) + '°' +\n                        this.integer({min: 0, max: 59}) + '’' +\n                        this.floating({min: 0, max: 59, fixed: options.fixed}) + '”';\n            }\n            case DD:\n            default: {\n                return this.floating({min: options.min, max: options.max, fixed: options.fixed});\n            }\n        }\n    };\n\n    Chance.prototype.longitude = function (options) {\n        // Constants - Formats\n        var [DDM, DMS, DD] = ['ddm', 'dms', 'dd'];\n\n        options = initOptions(\noptions,\n            options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ?\n            {min: 0, max: 179, fixed: 4} :\n            {fixed: 5, min: -180, max: 180, format: DD}\n);\n\n        var format = options.format.toLowerCase();\n\n        if (format === DDM || format === DMS) {\n            testRange(options.min < 0 || options.min > 179, \"Chance: Min specified is out of range. Should be between 0 - 179\");\n            testRange(options.max < 0 || options.max > 179, \"Chance: Max specified is out of range. Should be between 0 - 179\");\n            testRange(options.fixed > 4, 'Chance: Fixed specified should be below or equal to 4');\n        }\n\n        switch (format) {\n            case DDM: {\n                return  this.integer({min: options.min, max: options.max}) + '°' +\n                        this.floating({min: 0, max: 59.9999, fixed: options.fixed})\n            }\n            case DMS: {\n                return  this.integer({min: options.min, max: options.max}) + '°' +\n                        this.integer({min: 0, max: 59}) + '’' +\n                        this.floating({min: 0, max: 59.9999, fixed: options.fixed}) + '”';\n            }\n            case DD:\n            default: {\n                return this.floating({min: options.min, max: options.max, fixed: options.fixed});\n            }\n        }\n    };\n\n    Chance.prototype.phone = function (options) {\n        var self = this,\n            numPick,\n            ukNum = function (parts) {\n                var section = [];\n                //fills the section part of the phone number with random numbers.\n                parts.sections.forEach(function(n) {\n                    section.push(self.string({ pool: '0123456789', length: n}));\n                });\n                return parts.area + section.join(' ');\n            };\n        options = initOptions(options, {\n            formatted: true,\n            country: 'us',\n            mobile: false,\n            exampleNumber: false,\n        });\n        if (!options.formatted) {\n            options.parens = false;\n        }\n        var phone;\n        switch (options.country) {\n            case 'fr':\n                if (!options.mobile) {\n                    numPick = this.pick([\n                        // Valid zone and département codes.\n                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),\n                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),\n                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),\n                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),\n                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),\n                        '09' + self.string({ pool: '0123456789', length: 8}),\n                    ]);\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\n                } else {\n                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\n                }\n                break;\n            case 'uk':\n                if (!options.mobile) {\n                    numPick = this.pick([\n                        //valid area codes of major cities/counties followed by random numbers in required format.\n\n                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },\n                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },\n                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },\n                        { area: '024 7', sections: [3,4] },\n                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },\n                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [6] },\n                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [6] },\n                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [6] },\n                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [6] },\n                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [6] },\n                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [6] },\n                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [6] },\n                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [6] }\n                    ]);\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');\n                } else {\n                    numPick = this.pick([\n                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },\n                        { area: '07624 ', sections: [6] }\n                    ]);\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');\n                }\n                break;\n            case 'za':\n                if (!options.mobile) {\n                    numPick = this.pick([\n                       '01' + this.pick(['0', '1', '2', '3', '4', '5', '6', '7', '8']) + self.string({ pool: '0123456789', length: 7}),\n                       '02' + this.pick(['1', '2', '3', '4', '7', '8']) + self.string({ pool: '0123456789', length: 7}),\n                       '03' + this.pick(['1', '2', '3', '5', '6', '9']) + self.string({ pool: '0123456789', length: 7}),\n                       '04' + this.pick(['1', '2', '3', '4', '5','6','7', '8','9']) + self.string({ pool: '0123456789', length: 7}),\n                       '05' + this.pick(['1', '3', '4', '6', '7', '8']) + self.string({ pool: '0123456789', length: 7}),\n                    ]);\n                    phone = options.formatted || numPick;\n                } else {\n                    numPick = this.pick([\n                        '060' + this.pick(['3','4','5','6','7','8','9']) + self.string({ pool: '0123456789', length: 6}),\n                        '061' + this.pick(['0','1','2','3','4','5','8']) + self.string({ pool: '0123456789', length: 6}),\n                        '06'  + self.string({ pool: '0123456789', length: 7}),\n                        '071' + this.pick(['0','1','2','3','4','5','6','7','8','9']) + self.string({ pool: '0123456789', length: 6}),\n                        '07'  + this.pick(['2','3','4','6','7','8','9']) + self.string({ pool: '0123456789', length: 7}),\n                        '08'  + this.pick(['0','1','2','3','4','5']) + self.string({ pool: '0123456789', length: 7}),\n                    ]);\n                    phone = options.formatted || numPick;\n                }\n                break;\n            case 'us':\n                var areacode = this.areacode(options).toString();\n                var exchange = this.natural({ min: 2, max: 9 }).toString() +\n                    this.natural({ min: 0, max: 9 }).toString() +\n                    this.natural({ min: 0, max: 9 }).toString();\n                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}\n                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;\n                break;\n            case 'br':\n                var areaCode = this.pick([\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"21\", \"22\", \"24\", \"27\", \"28\", \"31\", \"32\", \"33\", \"34\", \"35\", \"37\", \"38\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"51\", \"53\", \"54\", \"55\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"71\", \"73\", \"74\", \"75\", \"77\", \"79\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"]);\n                var prefix;\n                if (options.mobile) {\n                    // Brasilian official reference (mobile): http://www.anatel.gov.br/setorregulado/plano-de-numeracao-brasileiro?id=330\n                    prefix = '9' + self.string({ pool: '0123456789', length: 4});\n                } else {\n                    // Brasilian official reference: http://www.anatel.gov.br/setorregulado/plano-de-numeracao-brasileiro?id=331\n                    prefix = this.natural({ min: 2000, max: 5999 }).toString();\n                }\n                var mcdu = self.string({ pool: '0123456789', length: 4});\n                phone = options.formatted ? '(' + areaCode + ') ' + prefix + '-' + mcdu : areaCode + prefix + mcdu;\n                break;\n        }\n        return phone;\n    };\n\n    Chance.prototype.postal = function () {\n        // Postal District\n        var pd = this.character({pool: \"XVTSRPNKLMHJGECBA\"});\n        // Forward Sortation Area (FSA)\n        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"});\n        // Local Delivery Unut (LDU)\n        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"}) + this.natural({max: 9});\n\n        return fsa + \" \" + ldu;\n    };\n\n    Chance.prototype.postcode = function () {\n        // Area\n        var area = this.pick(this.get(\"postcodeAreas\")).code;\n        // District\n        var district = this.natural({max: 9});\n        // Sub-District\n        var subDistrict = this.bool() ? this.character({alpha: true, casing: \"upper\"}) : \"\";\n        // Outward Code\n        var outward = area + district + subDistrict;\n        // Sector\n        var sector = this.natural({max: 9});\n        // Unit\n        var unit = this.character({alpha: true, casing: \"upper\"}) + this.character({alpha: true, casing: \"upper\"});\n        // Inward Code\n        var inward = sector + unit;\n\n        return outward + \" \" + inward;\n    };\n\n    Chance.prototype.counties = function (options) {\n        options = initOptions(options, { country: 'uk' });\n        return this.get(\"counties\")[options.country.toLowerCase()];\n    };\n\n    Chance.prototype.county = function (options) {\n        return this.pick(this.counties(options)).name;\n    };\n\n    Chance.prototype.provinces = function (options) {\n        options = initOptions(options, { country: 'ca' });\n        return this.get(\"provinces\")[options.country.toLowerCase()];\n    };\n\n    Chance.prototype.province = function (options) {\n        return (options && options.full) ?\n            this.pick(this.provinces(options)).name :\n            this.pick(this.provinces(options)).abbreviation;\n    };\n\n    Chance.prototype.state = function (options) {\n        return (options && options.full) ?\n            this.pick(this.states(options)).name :\n            this.pick(this.states(options)).abbreviation;\n    };\n\n    Chance.prototype.states = function (options) {\n        options = initOptions(options, { country: 'us', us_states_and_dc: true } );\n\n        var states;\n\n        switch (options.country.toLowerCase()) {\n            case 'us':\n                var us_states_and_dc = this.get(\"us_states_and_dc\"),\n                    territories = this.get(\"territories\"),\n                    armed_forces = this.get(\"armed_forces\");\n\n                states = [];\n\n                if (options.us_states_and_dc) {\n                    states = states.concat(us_states_and_dc);\n                }\n                if (options.territories) {\n                    states = states.concat(territories);\n                }\n                if (options.armed_forces) {\n                    states = states.concat(armed_forces);\n                }\n                break;\n            case 'it':\n            case 'mx':\n                states = this.get(\"country_regions\")[options.country.toLowerCase()];\n                break;\n            case 'uk':\n                states = this.get(\"counties\")[options.country.toLowerCase()];\n                break;\n        }\n\n        return states;\n    };\n\n    Chance.prototype.street = function (options) {\n        options = initOptions(options, { country: 'us', syllables: 2 });\n        var     street;\n\n        switch (options.country.toLowerCase()) {\n            case 'us':\n                street = this.word({ syllables: options.syllables });\n                street = this.capitalize(street);\n                street += ' ';\n                street += options.short_suffix ?\n                    this.street_suffix(options).abbreviation :\n                    this.street_suffix(options).name;\n                break;\n            case 'it':\n                street = this.word({ syllables: options.syllables });\n                street = this.capitalize(street);\n                street = (options.short_suffix ?\n                    this.street_suffix(options).abbreviation :\n                    this.street_suffix(options).name) + \" \" + street;\n                break;\n        }\n        return street;\n    };\n\n    Chance.prototype.street_suffix = function (options) {\n        options = initOptions(options, { country: 'us' });\n        return this.pick(this.street_suffixes(options));\n    };\n\n    Chance.prototype.street_suffixes = function (options) {\n        options = initOptions(options, { country: 'us' });\n        // These are the most common suffixes.\n        return this.get(\"street_suffixes\")[options.country.toLowerCase()];\n    };\n\n    // Note: only returning US zip codes, internationalization will be a whole\n    // other beast to tackle at some point.\n    Chance.prototype.zip = function (options) {\n        var zip = this.n(this.natural, 5, {max: 9});\n\n        if (options && options.plusfour === true) {\n            zip.push('-');\n            zip = zip.concat(this.n(this.natural, 4, {max: 9}));\n        }\n\n        return zip.join(\"\");\n    };\n\n    // -- End Location --\n\n    // -- Time\n\n    Chance.prototype.ampm = function () {\n        return this.bool() ? 'am' : 'pm';\n    };\n\n    Chance.prototype.date = function (options) {\n        var date_string, date;\n\n        // If interval is specified we ignore preset\n        if(options && (options.min || options.max)) {\n            options = initOptions(options, {\n                american: true,\n                string: false\n            });\n            var min = typeof options.min !== \"undefined\" ? options.min.getTime() : 1;\n            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1\n            var max = typeof options.max !== \"undefined\" ? options.max.getTime() : 8640000000000000;\n\n            date = new Date(this.integer({min: min, max: max}));\n        } else {\n            var m = this.month({raw: true});\n            var daysInMonth = m.days;\n\n            if(options && options.month) {\n                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).\n                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;\n            }\n\n            options = initOptions(options, {\n                year: parseInt(this.year(), 10),\n                // Necessary to subtract 1 because Date() 0-indexes month but not day or year\n                // for some reason.\n                month: m.numeric - 1,\n                day: this.natural({min: 1, max: daysInMonth}),\n                hour: this.hour({twentyfour: true}),\n                minute: this.minute(),\n                second: this.second(),\n                millisecond: this.millisecond(),\n                american: true,\n                string: false\n            });\n\n            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);\n        }\n\n        if (options.american) {\n            // Adding 1 to the month is necessary because Date() 0-indexes\n            // months but not day for some odd reason.\n            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\n        } else {\n            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n        }\n\n        return options.string ? date_string : date;\n    };\n\n    Chance.prototype.hammertime = function (options) {\n        return this.date(options).getTime();\n    };\n\n    Chance.prototype.hour = function (options) {\n        options = initOptions(options, {\n            min: options && options.twentyfour ? 0 : 1,\n            max: options && options.twentyfour ? 23 : 12\n        });\n\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\n        testRange(options.twentyfour && options.max > 23, \"Chance: Max cannot be greater than 23 for twentyfour option.\");\n        testRange(!options.twentyfour && options.max > 12, \"Chance: Max cannot be greater than 12.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return this.natural({min: options.min, max: options.max});\n    };\n\n    Chance.prototype.millisecond = function () {\n        return this.natural({max: 999});\n    };\n\n    Chance.prototype.minute = Chance.prototype.second = function (options) {\n        options = initOptions(options, {min: 0, max: 59});\n\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\n        testRange(options.max > 59, \"Chance: Max cannot be greater than 59.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        return this.natural({min: options.min, max: options.max});\n    };\n\n    Chance.prototype.month = function (options) {\n        options = initOptions(options, {min: 1, max: 12});\n\n        testRange(options.min < 1, \"Chance: Min cannot be less than 1.\");\n        testRange(options.max > 12, \"Chance: Max cannot be greater than 12.\");\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\n\n        var month = this.pick(this.months().slice(options.min - 1, options.max));\n        return options.raw ? month : month.name;\n    };\n\n    Chance.prototype.months = function () {\n        return this.get(\"months\");\n    };\n\n    Chance.prototype.second = function () {\n        return this.natural({max: 59});\n    };\n\n    Chance.prototype.timestamp = function () {\n        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});\n    };\n\n    Chance.prototype.weekday = function (options) {\n        options = initOptions(options, {weekday_only: false});\n        var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n        if (!options.weekday_only) {\n            weekdays.push(\"Saturday\");\n            weekdays.push(\"Sunday\");\n        }\n        return this.pickone(weekdays);\n    };\n\n    Chance.prototype.year = function (options) {\n        // Default to current year as min if none specified\n        options = initOptions(options, {min: new Date().getFullYear()});\n\n        // Default to one century after current year as max if none specified\n        options.max = (typeof options.max !== \"undefined\") ? options.max : options.min + 100;\n\n        return this.natural(options).toString();\n    };\n\n    // -- End Time\n\n    // -- Finance --\n\n    Chance.prototype.cc = function (options) {\n        options = initOptions(options);\n\n        var type, number, to_generate;\n\n        type = (options.type) ?\n                    this.cc_type({ name: options.type, raw: true }) :\n                    this.cc_type({ raw: true });\n\n        number = type.prefix.split(\"\");\n        to_generate = type.length - type.prefix.length - 1;\n\n        // Generates n - 1 digits\n        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));\n\n        // Generates the last digit according to Luhn algorithm\n        number.push(this.luhn_calculate(number.join(\"\")));\n\n        return number.join(\"\");\n    };\n\n    Chance.prototype.cc_types = function () {\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n        return this.get(\"cc_types\");\n    };\n\n    Chance.prototype.cc_type = function (options) {\n        options = initOptions(options);\n        var types = this.cc_types(),\n            type = null;\n\n        if (options.name) {\n            for (var i = 0; i < types.length; i++) {\n                // Accept either name or short_name to specify card type\n                if (types[i].name === options.name || types[i].short_name === options.name) {\n                    type = types[i];\n                    break;\n                }\n            }\n            if (type === null) {\n                throw new RangeError(\"Chance: Credit card type '\" + options.name + \"' is not supported\");\n            }\n        } else {\n            type = this.pick(types);\n        }\n\n        return options.raw ? type : type.name;\n    };\n\n    // return all world currency by ISO 4217\n    Chance.prototype.currency_types = function () {\n        return this.get(\"currency_types\");\n    };\n\n    // return random world currency by ISO 4217\n    Chance.prototype.currency = function () {\n        return this.pick(this.currency_types());\n    };\n\n    // return all timezones available\n    Chance.prototype.timezones = function () {\n        return this.get(\"timezones\");\n    };\n\n    // return random timezone\n    Chance.prototype.timezone = function () {\n        return this.pick(this.timezones());\n    };\n\n    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code\n    Chance.prototype.currency_pair = function (returnAsString) {\n        var currencies = this.unique(this.currency, 2, {\n            comparator: function(arr, val) {\n\n                return arr.reduce(function(acc, item) {\n                    // If a match has been found, short circuit check and just return\n                    return acc || (item.code === val.code);\n                }, false);\n            }\n        });\n\n        if (returnAsString) {\n            return currencies[0].code + '/' + currencies[1].code;\n        } else {\n            return currencies;\n        }\n    };\n\n    Chance.prototype.dollar = function (options) {\n        // By default, a somewhat more sane max for dollar than all available numbers\n        options = initOptions(options, {max : 10000, min : 0});\n\n        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),\n            cents = dollar.split('.')[1];\n\n        if (cents === undefined) {\n            dollar += '.00';\n        } else if (cents.length < 2) {\n            dollar = dollar + '0';\n        }\n\n        if (dollar < 0) {\n            return '-$' + dollar.replace('-', '');\n        } else {\n            return '$' + dollar;\n        }\n    };\n\n    Chance.prototype.euro = function (options) {\n        return Number(this.dollar(options).replace(\"$\", \"\")).toLocaleString() + \"€\";\n    };\n\n    Chance.prototype.exp = function (options) {\n        options = initOptions(options);\n        var exp = {};\n\n        exp.year = this.exp_year();\n\n        // If the year is this year, need to ensure month is greater than the\n        // current month or this expiration will not be valid\n        if (exp.year === (new Date().getFullYear()).toString()) {\n            exp.month = this.exp_month({future: true});\n        } else {\n            exp.month = this.exp_month();\n        }\n\n        return options.raw ? exp : exp.month + '/' + exp.year;\n    };\n\n    Chance.prototype.exp_month = function (options) {\n        options = initOptions(options);\n        var month, month_int,\n            // Date object months are 0 indexed\n            curMonth = new Date().getMonth() + 1;\n\n        if (options.future && (curMonth !== 12)) {\n            do {\n                month = this.month({raw: true}).numeric;\n                month_int = parseInt(month, 10);\n            } while (month_int <= curMonth);\n        } else {\n            month = this.month({raw: true}).numeric;\n        }\n\n        return month;\n    };\n\n    Chance.prototype.exp_year = function () {\n        var curMonth = new Date().getMonth() + 1,\n            curYear = new Date().getFullYear();\n\n        return this.year({min: ((curMonth === 12) ? (curYear + 1) : curYear), max: (curYear + 10)});\n    };\n\n    Chance.prototype.vat = function (options) {\n        options = initOptions(options, { country: 'it' });\n        switch (options.country.toLowerCase()) {\n            case 'it':\n                return this.it_vat();\n        }\n    };\n\n    /**\n     * Generate a string matching IBAN pattern (https://en.wikipedia.org/wiki/International_Bank_Account_Number).\n     * No country-specific formats support (yet)\n     */\n    Chance.prototype.iban = function () {\n        var alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        var alphanum = alpha + '0123456789';\n        var iban =\n            this.string({ length: 2, pool: alpha }) +\n            this.pad(this.integer({ min: 0, max: 99 }), 2) +\n            this.string({ length: 4, pool: alphanum }) +\n            this.pad(this.natural(), this.natural({ min: 6, max: 26 }));\n        return iban;\n    };\n\n    // -- End Finance\n\n    // -- Regional\n\n    Chance.prototype.it_vat = function () {\n        var it_vat = this.natural({min: 1, max: 1800000});\n\n        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: 'it' })).code, 3);\n        return it_vat + this.luhn_calculate(it_vat);\n    };\n\n    /*\n     * this generator is written following the official algorithm\n     * all data can be passed explicitely or randomized by calling chance.cf() without options\n     * the code does not check that the input data is valid (it goes beyond the scope of the generator)\n     *\n     * @param  [Object] options = { first: first name,\n     *                              last: last name,\n     *                              gender: female|male,\n                                    birthday: JavaScript date object,\n                                    city: string(4), 1 letter + 3 numbers\n                                   }\n     * @return [string] codice fiscale\n     *\n    */\n    Chance.prototype.cf = function (options) {\n        options = options || {};\n        var gender = !!options.gender ? options.gender : this.gender(),\n            first = !!options.first ? options.first : this.first( { gender: gender, nationality: 'it'} ),\n            last = !!options.last ? options.last : this.last( { nationality: 'it'} ),\n            birthday = !!options.birthday ? options.birthday : this.birthday(),\n            city = !!options.city ? options.city : this.pickone(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'Z']) + this.pad(this.natural({max:999}), 3),\n            cf = [],\n            name_generator = function(name, isLast) {\n                var temp,\n                    return_value = [];\n\n                if (name.length < 3) {\n                    return_value = name.split(\"\").concat(\"XXX\".split(\"\")).splice(0,3);\n                }\n                else {\n                    temp = name.toUpperCase().split('').map(function(c){\n                        return (\"BCDFGHJKLMNPRSTVWZ\".indexOf(c) !== -1) ? c : undefined;\n                    }).join('');\n                    if (temp.length > 3) {\n                        if (isLast) {\n                            temp = temp.substr(0,3);\n                        } else {\n                            temp = temp[0] + temp.substr(2,2);\n                        }\n                    }\n                    if (temp.length < 3) {\n                        return_value = temp;\n                        temp = name.toUpperCase().split('').map(function(c){\n                            return (\"AEIOU\".indexOf(c) !== -1) ? c : undefined;\n                        }).join('').substr(0, 3 - return_value.length);\n                    }\n                    return_value = return_value + temp;\n                }\n\n                return return_value;\n            },\n            date_generator = function(birthday, gender, that) {\n                var lettermonths = ['A', 'B', 'C', 'D', 'E', 'H', 'L', 'M', 'P', 'R', 'S', 'T'];\n\n                return  birthday.getFullYear().toString().substr(2) +\n                        lettermonths[birthday.getMonth()] +\n                        that.pad(birthday.getDate() + ((gender.toLowerCase() === \"female\") ? 40 : 0), 2);\n            },\n            checkdigit_generator = function(cf) {\n                var range1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    range2 = \"ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    evens  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                    odds   = \"BAKPLCQDREVOSFTGUHMINJWZYX\",\n                    digit  = 0;\n\n\n                for(var i = 0; i < 15; i++) {\n                    if (i % 2 !== 0) {\n                        digit += evens.indexOf(range2[range1.indexOf(cf[i])]);\n                    }\n                    else {\n                        digit +=  odds.indexOf(range2[range1.indexOf(cf[i])]);\n                    }\n                }\n                return evens[digit % 26];\n            };\n\n        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split(\"\")).join(\"\");\n        cf += checkdigit_generator(cf.toUpperCase(), this);\n\n        return cf.toUpperCase();\n    };\n\n    Chance.prototype.pl_pesel = function () {\n        var number = this.natural({min: 1, max: 9999999999});\n        var arr = this.pad(number, 10).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;\n        if(controlNumber !== 0) {\n            controlNumber = 10 - controlNumber;\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    Chance.prototype.pl_nip = function () {\n        var number = this.natural({min: 1, max: 999999999});\n        var arr = this.pad(number, 9).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;\n        if(controlNumber === 10) {\n            return this.pl_nip();\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    Chance.prototype.pl_regon = function () {\n        var number = this.natural({min: 1, max: 99999999});\n        var arr = this.pad(number, 8).split('');\n        for (var i = 0; i < arr.length; i++) {\n            arr[i] = parseInt(arr[i]);\n        }\n\n        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;\n        if(controlNumber === 10) {\n            controlNumber = 0;\n        }\n\n        return arr.join('') + controlNumber;\n    };\n\n    // -- End Regional\n\n    // -- Music --\n\n    Chance.prototype.note = function(options) {\n      // choices for 'notes' option:\n      // flatKey - chromatic scale with flat notes (default)\n      // sharpKey - chromatic scale with sharp notes\n      // flats - just flat notes\n      // sharps - just sharp notes\n      // naturals - just natural notes\n      // all - naturals, sharps and flats\n      options = initOptions(options, { notes : 'flatKey'});\n      var scales = {\n        naturals: ['C', 'D', 'E', 'F', 'G', 'A', 'B'],\n        flats: ['D♭', 'E♭', 'G♭', 'A♭', 'B♭'],\n        sharps: ['C♯', 'D♯', 'F♯', 'G♯', 'A♯']\n      };\n      scales.all = scales.naturals.concat(scales.flats.concat(scales.sharps))\n      scales.flatKey = scales.naturals.concat(scales.flats)\n      scales.sharpKey = scales.naturals.concat(scales.sharps)\n      return this.pickone(scales[options.notes]);\n    }\n\n    Chance.prototype.midi_note = function(options) {\n      var min = 0;\n      var max = 127;\n      options = initOptions(options, { min : min, max : max });\n      return this.integer({min: options.min, max: options.max});\n    }\n\n    Chance.prototype.chord_quality = function(options) {\n      options = initOptions(options, { jazz: true });\n      var chord_qualities = ['maj', 'min', 'aug', 'dim'];\n      if (options.jazz){\n        chord_qualities = [\n          'maj7',\n          'min7',\n          '7',\n          'sus',\n          'dim',\n          'ø'\n        ];\n      }\n      return this.pickone(chord_qualities);\n    }\n\n    Chance.prototype.chord = function (options) {\n      options = initOptions(options);\n      return this.note(options) + this.chord_quality(options);\n    }\n\n    Chance.prototype.tempo = function (options) {\n      var min = 40;\n      var max = 320;\n      options = initOptions(options, {min: min, max: max});\n      return this.integer({min: options.min, max: options.max});\n    }\n\n    // -- End Music\n\n    // -- Miscellaneous --\n\n    // Coin - Flip, flip, flipadelphia\n    Chance.prototype.coin = function() {\n      return this.bool() ? \"heads\" : \"tails\";\n    }\n\n    // Dice - For all the board game geeks out there, myself included ;)\n    function diceFn (range) {\n        return function () {\n            return this.natural(range);\n        };\n    }\n    Chance.prototype.d4 = diceFn({min: 1, max: 4});\n    Chance.prototype.d6 = diceFn({min: 1, max: 6});\n    Chance.prototype.d8 = diceFn({min: 1, max: 8});\n    Chance.prototype.d10 = diceFn({min: 1, max: 10});\n    Chance.prototype.d12 = diceFn({min: 1, max: 12});\n    Chance.prototype.d20 = diceFn({min: 1, max: 20});\n    Chance.prototype.d30 = diceFn({min: 1, max: 30});\n    Chance.prototype.d100 = diceFn({min: 1, max: 100});\n\n    Chance.prototype.rpg = function (thrown, options) {\n        options = initOptions(options);\n        if (!thrown) {\n            throw new RangeError(\"Chance: A type of die roll must be included\");\n        } else {\n            var bits = thrown.toLowerCase().split(\"d\"),\n                rolls = [];\n\n            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {\n                throw new Error(\"Chance: Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die\");\n            }\n            for (var i = bits[0]; i > 0; i--) {\n                rolls[i - 1] = this.natural({min: 1, max: bits[1]});\n            }\n            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;\n        }\n    };\n\n    // Guid\n    Chance.prototype.guid = function (options) {\n        options = initOptions(options, { version: 5 });\n\n        var guid_pool = \"abcdef1234567890\",\n            variant_pool = \"ab89\",\n            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +\n                   this.string({ pool: guid_pool, length: 4 }) + '-' +\n                   // The Version\n                   options.version +\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\n                   // The Variant\n                   this.string({ pool: variant_pool, length: 1 }) +\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\n                   this.string({ pool: guid_pool, length: 12 });\n        return guid;\n    };\n\n    // Hash\n    Chance.prototype.hash = function (options) {\n        options = initOptions(options, {length : 40, casing: 'lower'});\n        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;\n        return this.string({pool: pool, length: options.length});\n    };\n\n    Chance.prototype.luhn_check = function (num) {\n        var str = num.toString();\n        var checkDigit = +str.substring(str.length - 1);\n        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));\n    };\n\n    Chance.prototype.luhn_calculate = function (num) {\n        var digits = num.toString().split(\"\").reverse();\n        var sum = 0;\n        var digit;\n\n        for (var i = 0, l = digits.length; l > i; ++i) {\n            digit = +digits[i];\n            if (i % 2 === 0) {\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            sum += digit;\n        }\n        return (sum * 9) % 10;\n    };\n\n    // MD5 Hash\n    Chance.prototype.md5 = function(options) {\n        var opts = { str: '', key: null, raw: false };\n\n        if (!options) {\n            opts.str = this.string();\n            options = {};\n        }\n        else if (typeof options === 'string') {\n            opts.str = options;\n            options = {};\n        }\n        else if (typeof options !== 'object') {\n            return null;\n        }\n        else if(options.constructor === 'Array') {\n            return null;\n        }\n\n        opts = initOptions(options, opts);\n\n        if(!opts.str){\n            throw new Error('A parameter is required to return an md5 hash.');\n        }\n\n        return this.bimd5.md5(opts.str, opts.key, opts.raw);\n    };\n\n    /**\n     * #Description:\n     * =====================================================\n     * Generate random file name with extension\n     *\n     * The argument provide extension type\n     * -> raster\n     * -> vector\n     * -> 3d\n     * -> document\n     *\n     * If nothing is provided the function return random file name with random\n     * extension type of any kind\n     *\n     * The user can validate the file name length range\n     * If nothing provided the generated file name is random\n     *\n     * #Extension Pool :\n     * * Currently the supported extensions are\n     *  -> some of the most popular raster image extensions\n     *  -> some of the most popular vector image extensions\n     *  -> some of the most popular 3d image extensions\n     *  -> some of the most popular document extensions\n     *\n     * #Examples :\n     * =====================================================\n     *\n     * Return random file name with random extension. The file extension\n     * is provided by a predefined collection of extensions. More about the extension\n     * pool can be found in #Extension Pool section\n     *\n     * chance.file()\n     * => dsfsdhjf.xml\n     *\n     * In order to generate a file name with specific length, specify the\n     * length property and integer value. The extension is going to be random\n     *\n     * chance.file({length : 10})\n     * => asrtineqos.pdf\n     *\n     * In order to generate file with extension from some of the predefined groups\n     * of the extension pool just specify the extension pool category in fileType property\n     *\n     * chance.file({fileType : 'raster'})\n     * => dshgssds.psd\n     *\n     * You can provide specific extension for your files\n     * chance.file({extension : 'html'})\n     * => djfsd.html\n     *\n     * Or you could pass custom collection of extensions by array or by object\n     * chance.file({extensions : [...]})\n     * => dhgsdsd.psd\n     *\n     * chance.file({extensions : { key : [...], key : [...]}})\n     * => djsfksdjsd.xml\n     *\n     * @param  [collection] options\n     * @return [string]\n     *\n     */\n    Chance.prototype.file = function(options) {\n\n        var fileOptions = options || {};\n        var poolCollectionKey = \"fileExtension\";\n        var typeRange   = Object.keys(this.get(\"fileExtension\"));//['raster', 'vector', '3d', 'document'];\n        var fileName;\n        var fileExtension;\n\n        // Generate random file name\n        fileName = this.word({length : fileOptions.length});\n\n        // Generate file by specific extension provided by the user\n        if(fileOptions.extension) {\n\n            fileExtension = fileOptions.extension;\n            return (fileName + '.' + fileExtension);\n        }\n\n        // Generate file by specific extension collection\n        if(fileOptions.extensions) {\n\n            if(Array.isArray(fileOptions.extensions)) {\n\n                fileExtension = this.pickone(fileOptions.extensions);\n                return (fileName + '.' + fileExtension);\n            }\n            else if(fileOptions.extensions.constructor === Object) {\n\n                var extensionObjectCollection = fileOptions.extensions;\n                var keys = Object.keys(extensionObjectCollection);\n\n                fileExtension = this.pickone(extensionObjectCollection[this.pickone(keys)]);\n                return (fileName + '.' + fileExtension);\n            }\n\n            throw new Error(\"Chance: Extensions must be an Array or Object\");\n        }\n\n        // Generate file extension based on specific file type\n        if(fileOptions.fileType) {\n\n            var fileType = fileOptions.fileType;\n            if(typeRange.indexOf(fileType) !== -1) {\n\n                fileExtension = this.pickone(this.get(poolCollectionKey)[fileType]);\n                return (fileName + '.' + fileExtension);\n            }\n\n            throw new RangeError(\"Chance: Expect file type value to be 'raster', 'vector', '3d' or 'document'\");\n        }\n\n        // Generate random file name if no extension options are passed\n        fileExtension = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);\n        return (fileName + '.' + fileExtension);\n    };\n\n    /**\n     * Generates file data of random bytes using the chance.file method for the file name\n     *\n     * @param {object}\n     * fileName: String\n     * fileExtention: String\n     * fileSize: Number      <- in bytes\n     * @returns {object} fileName: String, fileData: Buffer\n     */\n    Chance.prototype.fileWithContent = function (options){\n            var fileOptions = options || {};\n            var fileName = 'fileName' in fileOptions ? fileOptions.fileName : this.file().split(\".\")[0];\n            fileName += \".\" + ('fileExtension' in fileOptions ? fileOptions.fileExtension : this.file().split(\".\")[1]);\n\n\n            if (typeof fileOptions.fileSize !== \"number\") {\n                throw new Error('File size must be an integer')\n            }\n            var file = {\n              fileData: this.buffer({length: fileOptions.fileSize}),\n              fileName: fileName,\n            };\n        return file;\n   }\n\n    var data = {\n\n        firstNames: {\n            \"male\": {\n                \"en\": [\"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\", \"Christopher\", \"Daniel\", \"Matthew\", \"George\", \"Donald\", \"Anthony\", \"Paul\", \"Mark\", \"Edward\", \"Steven\", \"Kenneth\", \"Andrew\", \"Brian\", \"Joshua\", \"Kevin\", \"Ronald\", \"Timothy\", \"Jason\", \"Jeffrey\", \"Frank\", \"Gary\", \"Ryan\", \"Nicholas\", \"Eric\", \"Stephen\", \"Jacob\", \"Larry\", \"Jonathan\", \"Scott\", \"Raymond\", \"Justin\", \"Brandon\", \"Gregory\", \"Samuel\", \"Benjamin\", \"Patrick\", \"Jack\", \"Henry\", \"Walter\", \"Dennis\", \"Jerry\", \"Alexander\", \"Peter\", \"Tyler\", \"Douglas\", \"Harold\", \"Aaron\", \"Jose\", \"Adam\", \"Arthur\", \"Zachary\", \"Carl\", \"Nathan\", \"Albert\", \"Kyle\", \"Lawrence\", \"Joe\", \"Willie\", \"Gerald\", \"Roger\", \"Keith\", \"Jeremy\", \"Terry\", \"Harry\", \"Ralph\", \"Sean\", \"Jesse\", \"Roy\", \"Louis\", \"Billy\", \"Austin\", \"Bruce\", \"Eugene\", \"Christian\", \"Bryan\", \"Wayne\", \"Russell\", \"Howard\", \"Fred\", \"Ethan\", \"Jordan\", \"Philip\", \"Alan\", \"Juan\", \"Randy\", \"Vincent\", \"Bobby\", \"Dylan\", \"Johnny\", \"Phillip\", \"Victor\", \"Clarence\", \"Ernest\", \"Martin\", \"Craig\", \"Stanley\", \"Shawn\", \"Travis\", \"Bradley\", \"Leonard\", \"Earl\", \"Gabriel\", \"Jimmy\", \"Francis\", \"Todd\", \"Noah\", \"Danny\", \"Dale\", \"Cody\", \"Carlos\", \"Allen\", \"Frederick\", \"Logan\", \"Curtis\", \"Alex\", \"Joel\", \"Luis\", \"Norman\", \"Marvin\", \"Glenn\", \"Tony\", \"Nathaniel\", \"Rodney\", \"Melvin\", \"Alfred\", \"Steve\", \"Cameron\", \"Chad\", \"Edwin\", \"Caleb\", \"Evan\", \"Antonio\", \"Lee\", \"Herbert\", \"Jeffery\", \"Isaac\", \"Derek\", \"Ricky\", \"Marcus\", \"Theodore\", \"Elijah\", \"Luke\", \"Jesus\", \"Eddie\", \"Troy\", \"Mike\", \"Dustin\", \"Ray\", \"Adrian\", \"Bernard\", \"Leroy\", \"Angel\", \"Randall\", \"Wesley\", \"Ian\", \"Jared\", \"Mason\", \"Hunter\", \"Calvin\", \"Oscar\", \"Clifford\", \"Jay\", \"Shane\", \"Ronnie\", \"Barry\", \"Lucas\", \"Corey\", \"Manuel\", \"Leo\", \"Tommy\", \"Warren\", \"Jackson\", \"Isaiah\", \"Connor\", \"Don\", \"Dean\", \"Jon\", \"Julian\", \"Miguel\", \"Bill\", \"Lloyd\", \"Charlie\", \"Mitchell\", \"Leon\", \"Jerome\", \"Darrell\", \"Jeremiah\", \"Alvin\", \"Brett\", \"Seth\", \"Floyd\", \"Jim\", \"Blake\", \"Micheal\", \"Gordon\", \"Trevor\", \"Lewis\", \"Erik\", \"Edgar\", \"Vernon\", \"Devin\", \"Gavin\", \"Jayden\", \"Chris\", \"Clyde\", \"Tom\", \"Derrick\", \"Mario\", \"Brent\", \"Marc\", \"Herman\", \"Chase\", \"Dominic\", \"Ricardo\", \"Franklin\", \"Maurice\", \"Max\", \"Aiden\", \"Owen\", \"Lester\", \"Gilbert\", \"Elmer\", \"Gene\", \"Francisco\", \"Glen\", \"Cory\", \"Garrett\", \"Clayton\", \"Sam\", \"Jorge\", \"Chester\", \"Alejandro\", \"Jeff\", \"Harvey\", \"Milton\", \"Cole\", \"Ivan\", \"Andre\", \"Duane\", \"Landon\"],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163\n                \"it\": [\"Adolfo\", \"Alberto\", \"Aldo\", \"Alessandro\", \"Alessio\", \"Alfredo\", \"Alvaro\", \"Andrea\", \"Angelo\", \"Angiolo\", \"Antonino\", \"Antonio\", \"Attilio\", \"Benito\", \"Bernardo\", \"Bruno\", \"Carlo\", \"Cesare\", \"Christian\", \"Claudio\", \"Corrado\", \"Cosimo\", \"Cristian\", \"Cristiano\", \"Daniele\", \"Dario\", \"David\", \"Davide\", \"Diego\", \"Dino\", \"Domenico\", \"Duccio\", \"Edoardo\", \"Elia\", \"Elio\", \"Emanuele\", \"Emiliano\", \"Emilio\", \"Enrico\", \"Enzo\", \"Ettore\", \"Fabio\", \"Fabrizio\", \"Federico\", \"Ferdinando\", \"Fernando\", \"Filippo\", \"Francesco\", \"Franco\", \"Gabriele\", \"Giacomo\", \"Giampaolo\", \"Giampiero\", \"Giancarlo\", \"Gianfranco\", \"Gianluca\", \"Gianmarco\", \"Gianni\", \"Gino\", \"Giorgio\", \"Giovanni\", \"Giuliano\", \"Giulio\", \"Giuseppe\", \"Graziano\", \"Gregorio\", \"Guido\", \"Iacopo\", \"Jacopo\", \"Lapo\", \"Leonardo\", \"Lorenzo\", \"Luca\", \"Luciano\", \"Luigi\", \"Manuel\", \"Marcello\", \"Marco\", \"Marino\", \"Mario\", \"Massimiliano\", \"Massimo\", \"Matteo\", \"Mattia\", \"Maurizio\", \"Mauro\", \"Michele\", \"Mirko\", \"Mohamed\", \"Nello\", \"Neri\", \"Niccolò\", \"Nicola\", \"Osvaldo\", \"Otello\", \"Paolo\", \"Pier Luigi\", \"Piero\", \"Pietro\", \"Raffaele\", \"Remo\", \"Renato\", \"Renzo\", \"Riccardo\", \"Roberto\", \"Rolando\", \"Romano\", \"Salvatore\", \"Samuele\", \"Sandro\", \"Sergio\", \"Silvano\", \"Simone\", \"Stefano\", \"Thomas\", \"Tommaso\", \"Ubaldo\", \"Ugo\", \"Umberto\", \"Valerio\", \"Valter\", \"Vasco\", \"Vincenzo\", \"Vittorio\"],\n                // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html\n                \"nl\": [\"Aaron\",\"Abel\",\"Adam\",\"Adriaan\",\"Albert\",\"Alexander\",\"Ali\",\"Arjen\",\"Arno\",\"Bart\",\"Bas\",\"Bastiaan\",\"Benjamin\",\"Bob\", \"Boris\",\"Bram\",\"Brent\",\"Cas\",\"Casper\",\"Chris\",\"Christiaan\",\"Cornelis\",\"Daan\",\"Daley\",\"Damian\",\"Dani\",\"Daniel\",\"Daniël\",\"David\",\"Dean\",\"Dirk\",\"Dylan\",\"Egbert\",\"Elijah\",\"Erik\",\"Erwin\",\"Evert\",\"Ezra\",\"Fabian\",\"Fedde\",\"Finn\",\"Florian\",\"Floris\",\"Frank\",\"Frans\",\"Frederik\",\"Freek\",\"Geert\",\"Gerard\",\"Gerben\",\"Gerrit\",\"Gijs\",\"Guus\",\"Hans\",\"Hendrik\",\"Henk\",\"Herman\",\"Hidde\",\"Hugo\",\"Jaap\",\"Jan Jaap\",\"Jan-Willem\",\"Jack\",\"Jacob\",\"Jan\",\"Jason\",\"Jasper\",\"Jayden\",\"Jelle\",\"Jelte\",\"Jens\",\"Jeroen\",\"Jesse\",\"Jim\",\"Job\",\"Joep\",\"Johannes\",\"John\",\"Jonathan\",\"Joris\",\"Joshua\",\"Joël\",\"Julian\",\"Kees\",\"Kevin\",\"Koen\",\"Lars\",\"Laurens\",\"Leendert\",\"Lennard\",\"Lodewijk\",\"Luc\",\"Luca\",\"Lucas\",\"Lukas\",\"Luuk\",\"Maarten\",\"Marcus\",\"Martijn\",\"Martin\",\"Matthijs\",\"Maurits\",\"Max\",\"Mees\",\"Melle\",\"Mick\",\"Mika\",\"Milan\",\"Mohamed\",\"Mohammed\",\"Morris\",\"Muhammed\",\"Nathan\",\"Nick\",\"Nico\",\"Niek\",\"Niels\",\"Noah\",\"Noud\",\"Olivier\",\"Oscar\",\"Owen\",\"Paul\",\"Pepijn\",\"Peter\",\"Pieter\",\"Pim\",\"Quinten\",\"Reinier\",\"Rens\",\"Robin\",\"Ruben\",\"Sam\",\"Samuel\",\"Sander\",\"Sebastiaan\",\"Sem\",\"Sep\",\"Sepp\",\"Siem\",\"Simon\",\"Stan\",\"Stef\",\"Steven\",\"Stijn\",\"Sven\",\"Teun\",\"Thijmen\",\"Thijs\",\"Thomas\",\"Tijn\",\"Tim\",\"Timo\",\"Tobias\",\"Tom\",\"Victor\",\"Vince\",\"Willem\",\"Wim\",\"Wouter\",\"Yusuf\"],\n                // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie\n                \"fr\": [\"Aaron\",\"Abdon\",\"Abel\",\"Abélard\",\"Abelin\",\"Abondance\",\"Abraham\",\"Absalon\",\"Acace\",\"Achaire\",\"Achille\",\"Adalard\",\"Adalbald\",\"Adalbéron\",\"Adalbert\",\"Adalric\",\"Adam\",\"Adegrin\",\"Adel\",\"Adelin\",\"Andelin\",\"Adelphe\",\"Adam\",\"Adéodat\",\"Adhémar\",\"Adjutor\",\"Adolphe\",\"Adonis\",\"Adon\",\"Adrien\",\"Agapet\",\"Agathange\",\"Agathon\",\"Agilbert\",\"Agénor\",\"Agnan\",\"Aignan\",\"Agrippin\",\"Aimable\",\"Aimé\",\"Alain\",\"Alban\",\"Albin\",\"Aubin\",\"Albéric\",\"Albert\",\"Albertet\",\"Alcibiade\",\"Alcide\",\"Alcée\",\"Alcime\",\"Aldonce\",\"Aldric\",\"Aldéric\",\"Aleaume\",\"Alexandre\",\"Alexis\",\"Alix\",\"Alliaume\",\"Aleaume\",\"Almine\",\"Almire\",\"Aloïs\",\"Alphée\",\"Alphonse\",\"Alpinien\",\"Alverède\",\"Amalric\",\"Amaury\",\"Amandin\",\"Amant\",\"Ambroise\",\"Amédée\",\"Amélien\",\"Amiel\",\"Amour\",\"Anaël\",\"Anastase\",\"Anatole\",\"Ancelin\",\"Andéol\",\"Andoche\",\"André\",\"Andoche\",\"Ange\",\"Angelin\",\"Angilbe\",\"Anglebert\",\"Angoustan\",\"Anicet\",\"Anne\",\"Annibal\",\"Ansbert\",\"Anselme\",\"Anthelme\",\"Antheaume\",\"Anthime\",\"Antide\",\"Antoine\",\"Antonius\",\"Antonin\",\"Apollinaire\",\"Apollon\",\"Aquilin\",\"Arcade\",\"Archambaud\",\"Archambeau\",\"Archange\",\"Archibald\",\"Arian\",\"Ariel\",\"Ariste\",\"Aristide\",\"Armand\",\"Armel\",\"Armin\",\"Arnould\",\"Arnaud\",\"Arolde\",\"Arsène\",\"Arsinoé\",\"Arthaud\",\"Arthème\",\"Arthur\",\"Ascelin\",\"Athanase\",\"Aubry\",\"Audebert\",\"Audouin\",\"Audran\",\"Audric\",\"Auguste\",\"Augustin\",\"Aurèle\",\"Aurélien\",\"Aurian\",\"Auxence\",\"Axel\",\"Aymard\",\"Aymeric\",\"Aymon\",\"Aymond\",\"Balthazar\",\"Baptiste\",\"Barnabé\",\"Barthélemy\",\"Bartimée\",\"Basile\",\"Bastien\",\"Baudouin\",\"Bénigne\",\"Benjamin\",\"Benoît\",\"Bérenger\",\"Bérard\",\"Bernard\",\"Bertrand\",\"Blaise\",\"Bon\",\"Boniface\",\"Bouchard\",\"Brice\",\"Brieuc\",\"Bruno\",\"Brunon\",\"Calixte\",\"Calliste\",\"Camélien\",\"Camille\",\"Camillien\",\"Candide\",\"Caribert\",\"Carloman\",\"Cassandre\",\"Cassien\",\"Cédric\",\"Céleste\",\"Célestin\",\"Célien\",\"Césaire\",\"César\",\"Charles\",\"Charlemagne\",\"Childebert\",\"Chilpéric\",\"Chrétien\",\"Christian\",\"Christodule\",\"Christophe\",\"Chrysostome\",\"Clarence\",\"Claude\",\"Claudien\",\"Cléandre\",\"Clément\",\"Clotaire\",\"Côme\",\"Constance\",\"Constant\",\"Constantin\",\"Corentin\",\"Cyprien\",\"Cyriaque\",\"Cyrille\",\"Cyril\",\"Damien\",\"Daniel\",\"David\",\"Delphin\",\"Denis\",\"Désiré\",\"Didier\",\"Dieudonné\",\"Dimitri\",\"Dominique\",\"Dorian\",\"Dorothée\",\"Edgard\",\"Edmond\",\"Édouard\",\"Éleuthère\",\"Élie\",\"Élisée\",\"Émeric\",\"Émile\",\"Émilien\",\"Emmanuel\",\"Enguerrand\",\"Épiphane\",\"Éric\",\"Esprit\",\"Ernest\",\"Étienne\",\"Eubert\",\"Eudes\",\"Eudoxe\",\"Eugène\",\"Eusèbe\",\"Eustache\",\"Évariste\",\"Évrard\",\"Fabien\",\"Fabrice\",\"Falba\",\"Félicité\",\"Félix\",\"Ferdinand\",\"Fiacre\",\"Fidèle\",\"Firmin\",\"Flavien\",\"Flodoard\",\"Florent\",\"Florentin\",\"Florestan\",\"Florian\",\"Fortuné\",\"Foulques\",\"Francisque\",\"François\",\"Français\",\"Franciscus\",\"Francs\",\"Frédéric\",\"Fulbert\",\"Fulcran\",\"Fulgence\",\"Gabin\",\"Gabriel\",\"Gaël\",\"Garnier\",\"Gaston\",\"Gaspard\",\"Gatien\",\"Gaud\",\"Gautier\",\"Gédéon\",\"Geoffroy\",\"Georges\",\"Géraud\",\"Gérard\",\"Gerbert\",\"Germain\",\"Gervais\",\"Ghislain\",\"Gilbert\",\"Gilles\",\"Girart\",\"Gislebert\",\"Gondebaud\",\"Gonthier\",\"Gontran\",\"Gonzague\",\"Grégoire\",\"Guérin\",\"Gui\",\"Guillaume\",\"Gustave\",\"Guy\",\"Guyot\",\"Hardouin\",\"Hector\",\"Hédelin\",\"Hélier\",\"Henri\",\"Herbert\",\"Herluin\",\"Hervé\",\"Hilaire\",\"Hildebert\",\"Hincmar\",\"Hippolyte\",\"Honoré\",\"Hubert\",\"Hugues\",\"Innocent\",\"Isabeau\",\"Isidore\",\"Jacques\",\"Japhet\",\"Jason\",\"Jean\",\"Jeannel\",\"Jeannot\",\"Jérémie\",\"Jérôme\",\"Joachim\",\"Joanny\",\"Job\",\"Jocelyn\",\"Joël\",\"Johan\",\"Jonas\",\"Jonathan\",\"Joseph\",\"Josse\",\"Josselin\",\"Jourdain\",\"Jude\",\"Judicaël\",\"Jules\",\"Julien\",\"Juste\",\"Justin\",\"Lambert\",\"Landry\",\"Laurent\",\"Lazare\",\"Léandre\",\"Léon\",\"Léonard\",\"Léopold\",\"Leu\",\"Loup\",\"Leufroy\",\"Libère\",\"Liétald\",\"Lionel\",\"Loïc\",\"Longin\",\"Lorrain\",\"Lorraine\",\"Lothaire\",\"Louis\",\"Loup\",\"Luc\",\"Lucas\",\"Lucien\",\"Ludolphe\",\"Ludovic\",\"Macaire\",\"Malo\",\"Mamert\",\"Manassé\",\"Marc\",\"Marceau\",\"Marcel\",\"Marcelin\",\"Marius\",\"Marseille\",\"Martial\",\"Martin\",\"Mathurin\",\"Matthias\",\"Mathias\",\"Matthieu\",\"Maugis\",\"Maurice\",\"Mauricet\",\"Maxence\",\"Maxime\",\"Maximilien\",\"Mayeul\",\"Médéric\",\"Melchior\",\"Mence\",\"Merlin\",\"Mérovée\",\"Michaël\",\"Michel\",\"Moïse\",\"Morgan\",\"Nathan\",\"Nathanaël\",\"Narcisse\",\"Néhémie\",\"Nestor\",\"Nestor\",\"Nicéphore\",\"Nicolas\",\"Noé\",\"Noël\",\"Norbert\",\"Normand\",\"Normands\",\"Octave\",\"Odilon\",\"Odon\",\"Oger\",\"Olivier\",\"Oury\",\"Pacôme\",\"Palémon\",\"Parfait\",\"Pascal\",\"Paterne\",\"Patrice\",\"Paul\",\"Pépin\",\"Perceval\",\"Philémon\",\"Philibert\",\"Philippe\",\"Philothée\",\"Pie\",\"Pierre\",\"Pierrick\",\"Prosper\",\"Quentin\",\"Raoul\",\"Raphaël\",\"Raymond\",\"Régis\",\"Réjean\",\"Rémi\",\"Renaud\",\"René\",\"Reybaud\",\"Richard\",\"Robert\",\"Roch\",\"Rodolphe\",\"Rodrigue\",\"Roger\",\"Roland\",\"Romain\",\"Romuald\",\"Roméo\",\"Rome\",\"Ronan\",\"Roselin\",\"Salomon\",\"Samuel\",\"Savin\",\"Savinien\",\"Scholastique\",\"Sébastien\",\"Séraphin\",\"Serge\",\"Séverin\",\"Sidoine\",\"Sigebert\",\"Sigismond\",\"Silvère\",\"Simon\",\"Siméon\",\"Sixte\",\"Stanislas\",\"Stéphane\",\"Stephan\",\"Sylvain\",\"Sylvestre\",\"Tancrède\",\"Tanguy\",\"Taurin\",\"Théodore\",\"Théodose\",\"Théophile\",\"Théophraste\",\"Thibault\",\"Thibert\",\"Thierry\",\"Thomas\",\"Timoléon\",\"Timothée\",\"Titien\",\"Tonnin\",\"Toussaint\",\"Trajan\",\"Tristan\",\"Turold\",\"Tim\",\"Ulysse\",\"Urbain\",\"Valentin\",\"Valère\",\"Valéry\",\"Venance\",\"Venant\",\"Venceslas\",\"Vianney\",\"Victor\",\"Victorien\",\"Victorin\",\"Vigile\",\"Vincent\",\"Vital\",\"Vitalien\",\"Vivien\",\"Waleran\",\"Wandrille\",\"Xavier\",\"Xénophon\",\"Yves\",\"Zacharie\",\"Zaché\",\"Zéphirin\"]\n            },\n\n            \"female\": {\n                \"en\": [\"Mary\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\", \"Ida\", \"Alice\", \"Bertha\", \"Sarah\", \"Annie\", \"Clara\", \"Ella\", \"Florence\", \"Cora\", \"Martha\", \"Laura\", \"Nellie\", \"Grace\", \"Carrie\", \"Maude\", \"Mabel\", \"Bessie\", \"Jennie\", \"Gertrude\", \"Julia\", \"Hattie\", \"Edith\", \"Mattie\", \"Rose\", \"Catherine\", \"Lillian\", \"Ada\", \"Lillie\", \"Helen\", \"Jessie\", \"Louise\", \"Ethel\", \"Lula\", \"Myrtle\", \"Eva\", \"Frances\", \"Lena\", \"Lucy\", \"Edna\", \"Maggie\", \"Pearl\", \"Daisy\", \"Fannie\", \"Josephine\", \"Dora\", \"Rosa\", \"Katherine\", \"Agnes\", \"Marie\", \"Nora\", \"May\", \"Mamie\", \"Blanche\", \"Stella\", \"Ellen\", \"Nancy\", \"Effie\", \"Sallie\", \"Nettie\", \"Della\", \"Lizzie\", \"Flora\", \"Susie\", \"Maud\", \"Mae\", \"Etta\", \"Harriet\", \"Sadie\", \"Caroline\", \"Katie\", \"Lydia\", \"Elsie\", \"Kate\", \"Susan\", \"Mollie\", \"Alma\", \"Addie\", \"Georgia\", \"Eliza\", \"Lulu\", \"Nannie\", \"Lottie\", \"Amanda\", \"Belle\", \"Charlotte\", \"Rebecca\", \"Ruth\", \"Viola\", \"Olive\", \"Amelia\", \"Hannah\", \"Jane\", \"Virginia\", \"Emily\", \"Matilda\", \"Irene\", \"Kathryn\", \"Esther\", \"Willie\", \"Henrietta\", \"Ollie\", \"Amy\", \"Rachel\", \"Sara\", \"Estella\", \"Theresa\", \"Augusta\", \"Ora\", \"Pauline\", \"Josie\", \"Lola\", \"Sophia\", \"Leona\", \"Anne\", \"Mildred\", \"Ann\", \"Beulah\", \"Callie\", \"Lou\", \"Delia\", \"Eleanor\", \"Barbara\", \"Iva\", \"Louisa\", \"Maria\", \"Mayme\", \"Evelyn\", \"Estelle\", \"Nina\", \"Betty\", \"Marion\", \"Bettie\", \"Dorothy\", \"Luella\", \"Inez\", \"Lela\", \"Rosie\", \"Allie\", \"Millie\", \"Janie\", \"Cornelia\", \"Victoria\", \"Ruby\", \"Winifred\", \"Alta\", \"Celia\", \"Christine\", \"Beatrice\", \"Birdie\", \"Harriett\", \"Mable\", \"Myra\", \"Sophie\", \"Tillie\", \"Isabel\", \"Sylvia\", \"Carolyn\", \"Isabelle\", \"Leila\", \"Sally\", \"Ina\", \"Essie\", \"Bertie\", \"Nell\", \"Alberta\", \"Katharine\", \"Lora\", \"Rena\", \"Mina\", \"Rhoda\", \"Mathilda\", \"Abbie\", \"Eula\", \"Dollie\", \"Hettie\", \"Eunice\", \"Fanny\", \"Ola\", \"Lenora\", \"Adelaide\", \"Christina\", \"Lelia\", \"Nelle\", \"Sue\", \"Johanna\", \"Lilly\", \"Lucinda\", \"Minerva\", \"Lettie\", \"Roxie\", \"Cynthia\", \"Helena\", \"Hilda\", \"Hulda\", \"Bernice\", \"Genevieve\", \"Jean\", \"Cordelia\", \"Marian\", \"Francis\", \"Jeanette\", \"Adeline\", \"Gussie\", \"Leah\", \"Lois\", \"Lura\", \"Mittie\", \"Hallie\", \"Isabella\", \"Olga\", \"Phoebe\", \"Teresa\", \"Hester\", \"Lida\", \"Lina\", \"Winnie\", \"Claudia\", \"Marguerite\", \"Vera\", \"Cecelia\", \"Bess\", \"Emilie\", \"Rosetta\", \"Verna\", \"Myrtie\", \"Cecilia\", \"Elva\", \"Olivia\", \"Ophelia\", \"Georgie\", \"Elnora\", \"Violet\", \"Adele\", \"Lily\", \"Linnie\", \"Loretta\", \"Madge\", \"Polly\", \"Virgie\", \"Eugenia\", \"Lucile\", \"Lucille\", \"Mabelle\", \"Rosalie\"],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162\n                \"it\": [\"Ada\", \"Adriana\", \"Alessandra\", \"Alessia\", \"Alice\", \"Angela\", \"Anna\", \"Anna Maria\", \"Annalisa\", \"Annita\", \"Annunziata\", \"Antonella\", \"Arianna\", \"Asia\", \"Assunta\", \"Aurora\", \"Barbara\", \"Beatrice\", \"Benedetta\", \"Bianca\", \"Bruna\", \"Camilla\", \"Carla\", \"Carlotta\", \"Carmela\", \"Carolina\", \"Caterina\", \"Catia\", \"Cecilia\", \"Chiara\", \"Cinzia\", \"Clara\", \"Claudia\", \"Costanza\", \"Cristina\", \"Daniela\", \"Debora\", \"Diletta\", \"Dina\", \"Donatella\", \"Elena\", \"Eleonora\", \"Elisa\", \"Elisabetta\", \"Emanuela\", \"Emma\", \"Eva\", \"Federica\", \"Fernanda\", \"Fiorella\", \"Fiorenza\", \"Flora\", \"Franca\", \"Francesca\", \"Gabriella\", \"Gaia\", \"Gemma\", \"Giada\", \"Gianna\", \"Gina\", \"Ginevra\", \"Giorgia\", \"Giovanna\", \"Giulia\", \"Giuliana\", \"Giuseppa\", \"Giuseppina\", \"Grazia\", \"Graziella\", \"Greta\", \"Ida\", \"Ilaria\", \"Ines\", \"Iolanda\", \"Irene\", \"Irma\", \"Isabella\", \"Jessica\", \"Laura\", \"Lea\", \"Letizia\", \"Licia\", \"Lidia\", \"Liliana\", \"Lina\", \"Linda\", \"Lisa\", \"Livia\", \"Loretta\", \"Luana\", \"Lucia\", \"Luciana\", \"Lucrezia\", \"Luisa\", \"Manuela\", \"Mara\", \"Marcella\", \"Margherita\", \"Maria\", \"Maria Cristina\", \"Maria Grazia\", \"Maria Luisa\", \"Maria Pia\", \"Maria Teresa\", \"Marina\", \"Marisa\", \"Marta\", \"Martina\", \"Marzia\", \"Matilde\", \"Melissa\", \"Michela\", \"Milena\", \"Mirella\", \"Monica\", \"Natalina\", \"Nella\", \"Nicoletta\", \"Noemi\", \"Olga\", \"Paola\", \"Patrizia\", \"Piera\", \"Pierina\", \"Raffaella\", \"Rebecca\", \"Renata\", \"Rina\", \"Rita\", \"Roberta\", \"Rosa\", \"Rosanna\", \"Rossana\", \"Rossella\", \"Sabrina\", \"Sandra\", \"Sara\", \"Serena\", \"Silvana\", \"Silvia\", \"Simona\", \"Simonetta\", \"Sofia\", \"Sonia\", \"Stefania\", \"Susanna\", \"Teresa\", \"Tina\", \"Tiziana\", \"Tosca\", \"Valentina\", \"Valeria\", \"Vanda\", \"Vanessa\", \"Vanna\", \"Vera\", \"Veronica\", \"Vilma\", \"Viola\", \"Virginia\", \"Vittoria\"],\n                // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html\n                \"nl\": [\"Ada\", \"Arianne\", \"Afke\", \"Amanda\", \"Amber\", \"Amy\", \"Aniek\", \"Anita\", \"Anja\", \"Anna\", \"Anne\", \"Annelies\", \"Annemarie\", \"Annette\", \"Anouk\", \"Astrid\", \"Aukje\", \"Barbara\", \"Bianca\", \"Carla\", \"Carlijn\", \"Carolien\", \"Chantal\", \"Charlotte\", \"Claudia\", \"Daniëlle\", \"Debora\", \"Diane\", \"Dora\", \"Eline\", \"Elise\", \"Ella\", \"Ellen\", \"Emma\", \"Esmee\", \"Evelien\", \"Esther\", \"Erica\", \"Eva\", \"Femke\", \"Fleur\", \"Floor\", \"Froukje\", \"Gea\", \"Gerda\", \"Hanna\", \"Hanneke\", \"Heleen\", \"Hilde\", \"Ilona\", \"Ina\", \"Inge\", \"Ingrid\", \"Iris\", \"Isabel\", \"Isabelle\", \"Janneke\", \"Jasmijn\", \"Jeanine\", \"Jennifer\", \"Jessica\", \"Johanna\", \"Joke\", \"Julia\", \"Julie\", \"Karen\", \"Karin\", \"Katja\", \"Kim\", \"Lara\", \"Laura\", \"Lena\", \"Lianne\", \"Lieke\", \"Lilian\", \"Linda\", \"Lisa\", \"Lisanne\", \"Lotte\", \"Louise\", \"Maaike\", \"Manon\", \"Marga\", \"Maria\", \"Marissa\", \"Marit\", \"Marjolein\", \"Martine\", \"Marleen\", \"Melissa\", \"Merel\", \"Miranda\", \"Michelle\", \"Mirjam\", \"Mirthe\", \"Naomi\", \"Natalie\", 'Nienke', \"Nina\", \"Noortje\", \"Olivia\", \"Patricia\", \"Paula\", \"Paulien\", \"Ramona\", \"Ria\", \"Rianne\", \"Roos\", \"Rosanne\", \"Ruth\", \"Sabrina\", \"Sandra\", \"Sanne\", \"Sara\", \"Saskia\", \"Silvia\", \"Sofia\", \"Sophie\", \"Sonja\", \"Suzanne\", \"Tamara\", \"Tess\", \"Tessa\", \"Tineke\", \"Valerie\", \"Vanessa\", \"Veerle\", \"Vera\", \"Victoria\", \"Wendy\", \"Willeke\", \"Yvonne\", \"Zoë\"],\n                // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie\n                \"fr\": [\"Abdon\",\"Abel\",\"Abigaëlle\",\"Abigaïl\",\"Acacius\",\"Acanthe\",\"Adalbert\",\"Adalsinde\",\"Adegrine\",\"Adélaïde\",\"Adèle\",\"Adélie\",\"Adeline\",\"Adeltrude\",\"Adolphe\",\"Adonis\",\"Adrastée\",\"Adrehilde\",\"Adrienne\",\"Agathe\",\"Agilbert\",\"Aglaé\",\"Aignan\",\"Agneflète\",\"Agnès\",\"Agrippine\",\"Aimé\",\"Alaine\",\"Alaïs\",\"Albane\",\"Albérade\",\"Alberte\",\"Alcide\",\"Alcine\",\"Alcyone\",\"Aldegonde\",\"Aleth\",\"Alexandrine\",\"Alexine\",\"Alice\",\"Aliénor\",\"Aliette\",\"Aline\",\"Alix\",\"Alizé\",\"Aloïse\",\"Aloyse\",\"Alphonsine\",\"Althée\",\"Amaliane\",\"Amalthée\",\"Amande\",\"Amandine\",\"Amant\",\"Amarande\",\"Amaranthe\",\"Amaryllis\",\"Ambre\",\"Ambroisie\",\"Amélie\",\"Améthyste\",\"Aminte\",\"Anaël\",\"Anaïs\",\"Anastasie\",\"Anatole\",\"Ancelin\",\"Andrée\",\"Anémone\",\"Angadrême\",\"Angèle\",\"Angeline\",\"Angélique\",\"Angilbert\",\"Anicet\",\"Annabelle\",\"Anne\",\"Annette\",\"Annick\",\"Annie\",\"Annonciade\",\"Ansbert\",\"Anstrudie\",\"Anthelme\",\"Antigone\",\"Antoinette\",\"Antonine\",\"Aphélie\",\"Apolline\",\"Apollonie\",\"Aquiline\",\"Arabelle\",\"Arcadie\",\"Archange\",\"Argine\",\"Ariane\",\"Aricie\",\"Ariel\",\"Arielle\",\"Arlette\",\"Armance\",\"Armande\",\"Armandine\",\"Armelle\",\"Armide\",\"Armelle\",\"Armin\",\"Arnaud\",\"Arsène\",\"Arsinoé\",\"Artémis\",\"Arthur\",\"Ascelin\",\"Ascension\",\"Assomption\",\"Astarté\",\"Astérie\",\"Astrée\",\"Astrid\",\"Athalie\",\"Athanasie\",\"Athina\",\"Aube\",\"Albert\",\"Aude\",\"Audrey\",\"Augustine\",\"Aure\",\"Aurélie\",\"Aurélien\",\"Aurèle\",\"Aurore\",\"Auxence\",\"Aveline\",\"Abigaëlle\",\"Avoye\",\"Axelle\",\"Aymard\",\"Azalée\",\"Adèle\",\"Adeline\",\"Barbe\",\"Basilisse\",\"Bathilde\",\"Béatrice\",\"Béatrix\",\"Bénédicte\",\"Bérengère\",\"Bernadette\",\"Berthe\",\"Bertille\",\"Beuve\",\"Blanche\",\"Blanc\",\"Blandine\",\"Brigitte\",\"Brune\",\"Brunehilde\",\"Callista\",\"Camille\",\"Capucine\",\"Carine\",\"Caroline\",\"Cassandre\",\"Catherine\",\"Cécile\",\"Céleste\",\"Célestine\",\"Céline\",\"Chantal\",\"Charlène\",\"Charline\",\"Charlotte\",\"Chloé\",\"Christelle\",\"Christiane\",\"Christine\",\"Claire\",\"Clara\",\"Claude\",\"Claudine\",\"Clarisse\",\"Clémence\",\"Clémentine\",\"Cléo\",\"Clio\",\"Clotilde\",\"Coline\",\"Conception\",\"Constance\",\"Coralie\",\"Coraline\",\"Corentine\",\"Corinne\",\"Cyrielle\",\"Daniel\",\"Daniel\",\"Daphné\",\"Débora\",\"Delphine\",\"Denise\",\"Diane\",\"Dieudonné\",\"Dominique\",\"Doriane\",\"Dorothée\",\"Douce\",\"Édith\",\"Edmée\",\"Éléonore\",\"Éliane\",\"Élia\",\"Éliette\",\"Élisabeth\",\"Élise\",\"Ella\",\"Élodie\",\"Éloïse\",\"Elsa\",\"Émeline\",\"Émérance\",\"Émérentienne\",\"Émérencie\",\"Émilie\",\"Emma\",\"Emmanuelle\",\"Emmelie\",\"Ernestine\",\"Esther\",\"Estelle\",\"Eudoxie\",\"Eugénie\",\"Eulalie\",\"Euphrasie\",\"Eusébie\",\"Évangéline\",\"Eva\",\"Ève\",\"Évelyne\",\"Fanny\",\"Fantine\",\"Faustine\",\"Félicie\",\"Fernande\",\"Flavie\",\"Fleur\",\"Flore\",\"Florence\",\"Florie\",\"Fortuné\",\"France\",\"Francia\",\"Françoise\",\"Francine\",\"Gabrielle\",\"Gaëlle\",\"Garance\",\"Geneviève\",\"Georgette\",\"Gerberge\",\"Germaine\",\"Gertrude\",\"Gisèle\",\"Guenièvre\",\"Guilhemine\",\"Guillemette\",\"Gustave\",\"Gwenael\",\"Hélène\",\"Héloïse\",\"Henriette\",\"Hermine\",\"Hermione\",\"Hippolyte\",\"Honorine\",\"Hortense\",\"Huguette\",\"Ines\",\"Irène\",\"Irina\",\"Iris\",\"Isabeau\",\"Isabelle\",\"Iseult\",\"Isolde\",\"Ismérie\",\"Jacinthe\",\"Jacqueline\",\"Jade\",\"Janine\",\"Jeanne\",\"Jocelyne\",\"Joëlle\",\"Joséphine\",\"Judith\",\"Julia\",\"Julie\",\"Jules\",\"Juliette\",\"Justine\",\"Katy\",\"Kathy\",\"Katie\",\"Laura\",\"Laure\",\"Laureline\",\"Laurence\",\"Laurene\",\"Lauriane\",\"Laurianne\",\"Laurine\",\"Léa\",\"Léna\",\"Léonie\",\"Léon\",\"Léontine\",\"Lorraine\",\"Lucie\",\"Lucienne\",\"Lucille\",\"Ludivine\",\"Lydie\",\"Lydie\",\"Megane\",\"Madeleine\",\"Magali\",\"Maguelone\",\"Mallaury\",\"Manon\",\"Marceline\",\"Margot\",\"Marguerite\",\"Marianne\",\"Marie\",\"Myriam\",\"Marie\",\"Marine\",\"Marion\",\"Marlène\",\"Marthe\",\"Martine\",\"Mathilde\",\"Maud\",\"Maureen\",\"Mauricette\",\"Maxime\",\"Mélanie\",\"Melissa\",\"Mélissandre\",\"Mélisande\",\"Mélodie\",\"Michel\",\"Micheline\",\"Mireille\",\"Miriam\",\"Moïse\",\"Monique\",\"Morgane\",\"Muriel\",\"Mylène\",\"Nadège\",\"Nadine\",\"Nathalie\",\"Nicole\",\"Nicolette\",\"Nine\",\"Noël\",\"Noémie\",\"Océane\",\"Odette\",\"Odile\",\"Olive\",\"Olivia\",\"Olympe\",\"Ombline\",\"Ombeline\",\"Ophélie\",\"Oriande\",\"Oriane\",\"Ozanne\",\"Pascale\",\"Pascaline\",\"Paule\",\"Paulette\",\"Pauline\",\"Priscille\",\"Prisca\",\"Prisque\",\"Pécine\",\"Pélagie\",\"Pénélope\",\"Perrine\",\"Pétronille\",\"Philippine\",\"Philomène\",\"Philothée\",\"Primerose\",\"Prudence\",\"Pulchérie\",\"Quentine\",\"Quiéta\",\"Quintia\",\"Quintilla\",\"Rachel\",\"Raphaëlle\",\"Raymonde\",\"Rebecca\",\"Régine\",\"Réjeanne\",\"René\",\"Rita\",\"Rita\",\"Rolande\",\"Romane\",\"Rosalie\",\"Rose\",\"Roseline\",\"Sabine\",\"Salomé\",\"Sandra\",\"Sandrine\",\"Sarah\",\"Ségolène\",\"Séverine\",\"Sibylle\",\"Simone\",\"Sixt\",\"Solange\",\"Soline\",\"Solène\",\"Sophie\",\"Stéphanie\",\"Suzanne\",\"Sylvain\",\"Sylvie\",\"Tatiana\",\"Thaïs\",\"Théodora\",\"Thérèse\",\"Tiphaine\",\"Ursule\",\"Valentine\",\"Valérie\",\"Véronique\",\"Victoire\",\"Victorine\",\"Vinciane\",\"Violette\",\"Virginie\",\"Viviane\",\"Xavière\",\"Yolande\",\"Ysaline\",\"Yvette\",\"Yvonne\",\"Zélie\",\"Zita\",\"Zoé\"]\n            }\n        },\n\n        lastNames: {\n            \"en\": ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)\n            \"it\": [\"Acciai\", \"Aglietti\", \"Agostini\", \"Agresti\", \"Ahmed\", \"Aiazzi\", \"Albanese\", \"Alberti\", \"Alessi\", \"Alfani\", \"Alinari\", \"Alterini\", \"Amato\", \"Ammannati\", \"Ancillotti\", \"Andrei\", \"Andreini\", \"Andreoni\", \"Angeli\", \"Anichini\", \"Antonelli\", \"Antonini\", \"Arena\", \"Ariani\", \"Arnetoli\", \"Arrighi\", \"Baccani\", \"Baccetti\", \"Bacci\", \"Bacherini\", \"Badii\", \"Baggiani\", \"Baglioni\", \"Bagni\", \"Bagnoli\", \"Baldassini\", \"Baldi\", \"Baldini\", \"Ballerini\", \"Balli\", \"Ballini\", \"Balloni\", \"Bambi\", \"Banchi\", \"Bandinelli\", \"Bandini\", \"Bani\", \"Barbetti\", \"Barbieri\", \"Barchielli\", \"Bardazzi\", \"Bardelli\", \"Bardi\", \"Barducci\", \"Bargellini\", \"Bargiacchi\", \"Barni\", \"Baroncelli\", \"Baroncini\", \"Barone\", \"Baroni\", \"Baronti\", \"Bartalesi\", \"Bartoletti\", \"Bartoli\", \"Bartolini\", \"Bartoloni\", \"Bartolozzi\", \"Basagni\", \"Basile\", \"Bassi\", \"Batacchi\", \"Battaglia\", \"Battaglini\", \"Bausi\", \"Becagli\", \"Becattini\", \"Becchi\", \"Becucci\", \"Bellandi\", \"Bellesi\", \"Belli\", \"Bellini\", \"Bellucci\", \"Bencini\", \"Benedetti\", \"Benelli\", \"Beni\", \"Benini\", \"Bensi\", \"Benucci\", \"Benvenuti\", \"Berlincioni\", \"Bernacchioni\", \"Bernardi\", \"Bernardini\", \"Berni\", \"Bernini\", \"Bertelli\", \"Berti\", \"Bertini\", \"Bessi\", \"Betti\", \"Bettini\", \"Biagi\", \"Biagini\", \"Biagioni\", \"Biagiotti\", \"Biancalani\", \"Bianchi\", \"Bianchini\", \"Bianco\", \"Biffoli\", \"Bigazzi\", \"Bigi\", \"Biliotti\", \"Billi\", \"Binazzi\", \"Bindi\", \"Bini\", \"Biondi\", \"Bizzarri\", \"Bocci\", \"Bogani\", \"Bolognesi\", \"Bonaiuti\", \"Bonanni\", \"Bonciani\", \"Boncinelli\", \"Bondi\", \"Bonechi\", \"Bongini\", \"Boni\", \"Bonini\", \"Borchi\", \"Boretti\", \"Borghi\", \"Borghini\", \"Borgioli\", \"Borri\", \"Borselli\", \"Boschi\", \"Bottai\", \"Bracci\", \"Braccini\", \"Brandi\", \"Braschi\", \"Bravi\", \"Brazzini\", \"Breschi\", \"Brilli\", \"Brizzi\", \"Brogelli\", \"Brogi\", \"Brogioni\", \"Brunelli\", \"Brunetti\", \"Bruni\", \"Bruno\", \"Brunori\", \"Bruschi\", \"Bucci\", \"Bucciarelli\", \"Buccioni\", \"Bucelli\", \"Bulli\", \"Burberi\", \"Burchi\", \"Burgassi\", \"Burroni\", \"Bussotti\", \"Buti\", \"Caciolli\", \"Caiani\", \"Calabrese\", \"Calamai\", \"Calamandrei\", \"Caldini\", \"Calo'\", \"Calonaci\", \"Calosi\", \"Calvelli\", \"Cambi\", \"Camiciottoli\", \"Cammelli\", \"Cammilli\", \"Campolmi\", \"Cantini\", \"Capanni\", \"Capecchi\", \"Caponi\", \"Cappelletti\", \"Cappelli\", \"Cappellini\", \"Cappugi\", \"Capretti\", \"Caputo\", \"Carbone\", \"Carboni\", \"Cardini\", \"Carlesi\", \"Carletti\", \"Carli\", \"Caroti\", \"Carotti\", \"Carrai\", \"Carraresi\", \"Carta\", \"Caruso\", \"Casalini\", \"Casati\", \"Caselli\", \"Casini\", \"Castagnoli\", \"Castellani\", \"Castelli\", \"Castellucci\", \"Catalano\", \"Catarzi\", \"Catelani\", \"Cavaciocchi\", \"Cavallaro\", \"Cavallini\", \"Cavicchi\", \"Cavini\", \"Ceccarelli\", \"Ceccatelli\", \"Ceccherelli\", \"Ceccherini\", \"Cecchi\", \"Cecchini\", \"Cecconi\", \"Cei\", \"Cellai\", \"Celli\", \"Cellini\", \"Cencetti\", \"Ceni\", \"Cenni\", \"Cerbai\", \"Cesari\", \"Ceseri\", \"Checcacci\", \"Checchi\", \"Checcucci\", \"Cheli\", \"Chellini\", \"Chen\", \"Cheng\", \"Cherici\", \"Cherubini\", \"Chiaramonti\", \"Chiarantini\", \"Chiarelli\", \"Chiari\", \"Chiarini\", \"Chiarugi\", \"Chiavacci\", \"Chiesi\", \"Chimenti\", \"Chini\", \"Chirici\", \"Chiti\", \"Ciabatti\", \"Ciampi\", \"Cianchi\", \"Cianfanelli\", \"Cianferoni\", \"Ciani\", \"Ciapetti\", \"Ciappi\", \"Ciardi\", \"Ciatti\", \"Cicali\", \"Ciccone\", \"Cinelli\", \"Cini\", \"Ciobanu\", \"Ciolli\", \"Cioni\", \"Cipriani\", \"Cirillo\", \"Cirri\", \"Ciucchi\", \"Ciuffi\", \"Ciulli\", \"Ciullini\", \"Clemente\", \"Cocchi\", \"Cognome\", \"Coli\", \"Collini\", \"Colombo\", \"Colzi\", \"Comparini\", \"Conforti\", \"Consigli\", \"Conte\", \"Conti\", \"Contini\", \"Coppini\", \"Coppola\", \"Corsi\", \"Corsini\", \"Corti\", \"Cortini\", \"Cosi\", \"Costa\", \"Costantini\", \"Costantino\", \"Cozzi\", \"Cresci\", \"Crescioli\", \"Cresti\", \"Crini\", \"Curradi\", \"D'Agostino\", \"D'Alessandro\", \"D'Amico\", \"D'Angelo\", \"Daddi\", \"Dainelli\", \"Dallai\", \"Danti\", \"Davitti\", \"De Angelis\", \"De Luca\", \"De Marco\", \"De Rosa\", \"De Santis\", \"De Simone\", \"De Vita\", \"Degl'Innocenti\", \"Degli Innocenti\", \"Dei\", \"Del Lungo\", \"Del Re\", \"Di Marco\", \"Di Stefano\", \"Dini\", \"Diop\", \"Dobre\", \"Dolfi\", \"Donati\", \"Dondoli\", \"Dong\", \"Donnini\", \"Ducci\", \"Dumitru\", \"Ermini\", \"Esposito\", \"Evangelisti\", \"Fabbri\", \"Fabbrini\", \"Fabbrizzi\", \"Fabbroni\", \"Fabbrucci\", \"Fabiani\", \"Facchini\", \"Faggi\", \"Fagioli\", \"Failli\", \"Faini\", \"Falciani\", \"Falcini\", \"Falcone\", \"Fallani\", \"Falorni\", \"Falsini\", \"Falugiani\", \"Fancelli\", \"Fanelli\", \"Fanetti\", \"Fanfani\", \"Fani\", \"Fantappie'\", \"Fantechi\", \"Fanti\", \"Fantini\", \"Fantoni\", \"Farina\", \"Fattori\", \"Favilli\", \"Fedi\", \"Fei\", \"Ferrante\", \"Ferrara\", \"Ferrari\", \"Ferraro\", \"Ferretti\", \"Ferri\", \"Ferrini\", \"Ferroni\", \"Fiaschi\", \"Fibbi\", \"Fiesoli\", \"Filippi\", \"Filippini\", \"Fini\", \"Fioravanti\", \"Fiore\", \"Fiorentini\", \"Fiorini\", \"Fissi\", \"Focardi\", \"Foggi\", \"Fontana\", \"Fontanelli\", \"Fontani\", \"Forconi\", \"Formigli\", \"Forte\", \"Forti\", \"Fortini\", \"Fossati\", \"Fossi\", \"Francalanci\", \"Franceschi\", \"Franceschini\", \"Franchi\", \"Franchini\", \"Franci\", \"Francini\", \"Francioni\", \"Franco\", \"Frassineti\", \"Frati\", \"Fratini\", \"Frilli\", \"Frizzi\", \"Frosali\", \"Frosini\", \"Frullini\", \"Fusco\", \"Fusi\", \"Gabbrielli\", \"Gabellini\", \"Gagliardi\", \"Galanti\", \"Galardi\", \"Galeotti\", \"Galletti\", \"Galli\", \"Gallo\", \"Gallori\", \"Gambacciani\", \"Gargani\", \"Garofalo\", \"Garuglieri\", \"Gashi\", \"Gasperini\", \"Gatti\", \"Gelli\", \"Gensini\", \"Gentile\", \"Gentili\", \"Geri\", \"Gerini\", \"Gheri\", \"Ghini\", \"Giachetti\", \"Giachi\", \"Giacomelli\", \"Gianassi\", \"Giani\", \"Giannelli\", \"Giannetti\", \"Gianni\", \"Giannini\", \"Giannoni\", \"Giannotti\", \"Giannozzi\", \"Gigli\", \"Giordano\", \"Giorgetti\", \"Giorgi\", \"Giovacchini\", \"Giovannelli\", \"Giovannetti\", \"Giovannini\", \"Giovannoni\", \"Giuliani\", \"Giunti\", \"Giuntini\", \"Giusti\", \"Gonnelli\", \"Goretti\", \"Gori\", \"Gradi\", \"Gramigni\", \"Grassi\", \"Grasso\", \"Graziani\", \"Grazzini\", \"Greco\", \"Grifoni\", \"Grillo\", \"Grimaldi\", \"Grossi\", \"Gualtieri\", \"Guarducci\", \"Guarino\", \"Guarnieri\", \"Guasti\", \"Guerra\", \"Guerri\", \"Guerrini\", \"Guidi\", \"Guidotti\", \"He\", \"Hoxha\", \"Hu\", \"Huang\", \"Iandelli\", \"Ignesti\", \"Innocenti\", \"Jin\", \"La Rosa\", \"Lai\", \"Landi\", \"Landini\", \"Lanini\", \"Lapi\", \"Lapini\", \"Lari\", \"Lascialfari\", \"Lastrucci\", \"Latini\", \"Lazzeri\", \"Lazzerini\", \"Lelli\", \"Lenzi\", \"Leonardi\", \"Leoncini\", \"Leone\", \"Leoni\", \"Lepri\", \"Li\", \"Liao\", \"Lin\", \"Linari\", \"Lippi\", \"Lisi\", \"Livi\", \"Lombardi\", \"Lombardini\", \"Lombardo\", \"Longo\", \"Lopez\", \"Lorenzi\", \"Lorenzini\", \"Lorini\", \"Lotti\", \"Lu\", \"Lucchesi\", \"Lucherini\", \"Lunghi\", \"Lupi\", \"Madiai\", \"Maestrini\", \"Maffei\", \"Maggi\", \"Maggini\", \"Magherini\", \"Magini\", \"Magnani\", \"Magnelli\", \"Magni\", \"Magnolfi\", \"Magrini\", \"Malavolti\", \"Malevolti\", \"Manca\", \"Mancini\", \"Manetti\", \"Manfredi\", \"Mangani\", \"Mannelli\", \"Manni\", \"Mannini\", \"Mannucci\", \"Manuelli\", \"Manzini\", \"Marcelli\", \"Marchese\", \"Marchetti\", \"Marchi\", \"Marchiani\", \"Marchionni\", \"Marconi\", \"Marcucci\", \"Margheri\", \"Mari\", \"Mariani\", \"Marilli\", \"Marinai\", \"Marinari\", \"Marinelli\", \"Marini\", \"Marino\", \"Mariotti\", \"Marsili\", \"Martelli\", \"Martinelli\", \"Martini\", \"Martino\", \"Marzi\", \"Masi\", \"Masini\", \"Masoni\", \"Massai\", \"Materassi\", \"Mattei\", \"Matteini\", \"Matteucci\", \"Matteuzzi\", \"Mattioli\", \"Mattolini\", \"Matucci\", \"Mauro\", \"Mazzanti\", \"Mazzei\", \"Mazzetti\", \"Mazzi\", \"Mazzini\", \"Mazzocchi\", \"Mazzoli\", \"Mazzoni\", \"Mazzuoli\", \"Meacci\", \"Mecocci\", \"Meini\", \"Melani\", \"Mele\", \"Meli\", \"Mengoni\", \"Menichetti\", \"Meoni\", \"Merlini\", \"Messeri\", \"Messina\", \"Meucci\", \"Miccinesi\", \"Miceli\", \"Micheli\", \"Michelini\", \"Michelozzi\", \"Migliori\", \"Migliorini\", \"Milani\", \"Miniati\", \"Misuri\", \"Monaco\", \"Montagnani\", \"Montagni\", \"Montanari\", \"Montelatici\", \"Monti\", \"Montigiani\", \"Montini\", \"Morandi\", \"Morandini\", \"Morelli\", \"Moretti\", \"Morganti\", \"Mori\", \"Morini\", \"Moroni\", \"Morozzi\", \"Mugnai\", \"Mugnaini\", \"Mustafa\", \"Naldi\", \"Naldini\", \"Nannelli\", \"Nanni\", \"Nannini\", \"Nannucci\", \"Nardi\", \"Nardini\", \"Nardoni\", \"Natali\", \"Ndiaye\", \"Nencetti\", \"Nencini\", \"Nencioni\", \"Neri\", \"Nesi\", \"Nesti\", \"Niccolai\", \"Niccoli\", \"Niccolini\", \"Nigi\", \"Nistri\", \"Nocentini\", \"Noferini\", \"Novelli\", \"Nucci\", \"Nuti\", \"Nutini\", \"Oliva\", \"Olivieri\", \"Olmi\", \"Orlandi\", \"Orlandini\", \"Orlando\", \"Orsini\", \"Ortolani\", \"Ottanelli\", \"Pacciani\", \"Pace\", \"Paci\", \"Pacini\", \"Pagani\", \"Pagano\", \"Paggetti\", \"Pagliai\", \"Pagni\", \"Pagnini\", \"Paladini\", \"Palagi\", \"Palchetti\", \"Palloni\", \"Palmieri\", \"Palumbo\", \"Pampaloni\", \"Pancani\", \"Pandolfi\", \"Pandolfini\", \"Panerai\", \"Panichi\", \"Paoletti\", \"Paoli\", \"Paolini\", \"Papi\", \"Papini\", \"Papucci\", \"Parenti\", \"Parigi\", \"Parisi\", \"Parri\", \"Parrini\", \"Pasquini\", \"Passeri\", \"Pecchioli\", \"Pecorini\", \"Pellegrini\", \"Pepi\", \"Perini\", \"Perrone\", \"Peruzzi\", \"Pesci\", \"Pestelli\", \"Petri\", \"Petrini\", \"Petrucci\", \"Pettini\", \"Pezzati\", \"Pezzatini\", \"Piani\", \"Piazza\", \"Piazzesi\", \"Piazzini\", \"Piccardi\", \"Picchi\", \"Piccini\", \"Piccioli\", \"Pieraccini\", \"Pieraccioni\", \"Pieralli\", \"Pierattini\", \"Pieri\", \"Pierini\", \"Pieroni\", \"Pietrini\", \"Pini\", \"Pinna\", \"Pinto\", \"Pinzani\", \"Pinzauti\", \"Piras\", \"Pisani\", \"Pistolesi\", \"Poggesi\", \"Poggi\", \"Poggiali\", \"Poggiolini\", \"Poli\", \"Pollastri\", \"Porciani\", \"Pozzi\", \"Pratellesi\", \"Pratesi\", \"Prosperi\", \"Pruneti\", \"Pucci\", \"Puccini\", \"Puccioni\", \"Pugi\", \"Pugliese\", \"Puliti\", \"Querci\", \"Quercioli\", \"Raddi\", \"Radu\", \"Raffaelli\", \"Ragazzini\", \"Ranfagni\", \"Ranieri\", \"Rastrelli\", \"Raugei\", \"Raveggi\", \"Renai\", \"Renzi\", \"Rettori\", \"Ricci\", \"Ricciardi\", \"Ridi\", \"Ridolfi\", \"Rigacci\", \"Righi\", \"Righini\", \"Rinaldi\", \"Risaliti\", \"Ristori\", \"Rizzo\", \"Rocchi\", \"Rocchini\", \"Rogai\", \"Romagnoli\", \"Romanelli\", \"Romani\", \"Romano\", \"Romei\", \"Romeo\", \"Romiti\", \"Romoli\", \"Romolini\", \"Rontini\", \"Rosati\", \"Roselli\", \"Rosi\", \"Rossetti\", \"Rossi\", \"Rossini\", \"Rovai\", \"Ruggeri\", \"Ruggiero\", \"Russo\", \"Sabatini\", \"Saccardi\", \"Sacchetti\", \"Sacchi\", \"Sacco\", \"Salerno\", \"Salimbeni\", \"Salucci\", \"Salvadori\", \"Salvestrini\", \"Salvi\", \"Salvini\", \"Sanesi\", \"Sani\", \"Sanna\", \"Santi\", \"Santini\", \"Santoni\", \"Santoro\", \"Santucci\", \"Sardi\", \"Sarri\", \"Sarti\", \"Sassi\", \"Sbolci\", \"Scali\", \"Scarpelli\", \"Scarselli\", \"Scopetani\", \"Secci\", \"Selvi\", \"Senatori\", \"Senesi\", \"Serafini\", \"Sereni\", \"Serra\", \"Sestini\", \"Sguanci\", \"Sieni\", \"Signorini\", \"Silvestri\", \"Simoncini\", \"Simonetti\", \"Simoni\", \"Singh\", \"Sodi\", \"Soldi\", \"Somigli\", \"Sorbi\", \"Sorelli\", \"Sorrentino\", \"Sottili\", \"Spina\", \"Spinelli\", \"Staccioli\", \"Staderini\", \"Stefanelli\", \"Stefani\", \"Stefanini\", \"Stella\", \"Susini\", \"Tacchi\", \"Tacconi\", \"Taddei\", \"Tagliaferri\", \"Tamburini\", \"Tanganelli\", \"Tani\", \"Tanini\", \"Tapinassi\", \"Tarchi\", \"Tarchiani\", \"Targioni\", \"Tassi\", \"Tassini\", \"Tempesti\", \"Terzani\", \"Tesi\", \"Testa\", \"Testi\", \"Tilli\", \"Tinti\", \"Tirinnanzi\", \"Toccafondi\", \"Tofanari\", \"Tofani\", \"Tognaccini\", \"Tonelli\", \"Tonini\", \"Torelli\", \"Torrini\", \"Tosi\", \"Toti\", \"Tozzi\", \"Trambusti\", \"Trapani\", \"Tucci\", \"Turchi\", \"Ugolini\", \"Ulivi\", \"Valente\", \"Valenti\", \"Valentini\", \"Vangelisti\", \"Vanni\", \"Vannini\", \"Vannoni\", \"Vannozzi\", \"Vannucchi\", \"Vannucci\", \"Ventura\", \"Venturi\", \"Venturini\", \"Vestri\", \"Vettori\", \"Vichi\", \"Viciani\", \"Vieri\", \"Vigiani\", \"Vignoli\", \"Vignolini\", \"Vignozzi\", \"Villani\", \"Vinci\", \"Visani\", \"Vitale\", \"Vitali\", \"Viti\", \"Viviani\", \"Vivoli\", \"Volpe\", \"Volpi\", \"Wang\", \"Wu\", \"Xu\", \"Yang\", \"Ye\", \"Zagli\", \"Zani\", \"Zanieri\", \"Zanobini\", \"Zecchi\", \"Zetti\", \"Zhang\", \"Zheng\", \"Zhou\", \"Zhu\", \"Zingoni\", \"Zini\", \"Zoppi\"],\n            // http://www.voornamelijk.nl/meest-voorkomende-achternamen-in-nederland-en-amsterdam/\n            \"nl\":[\"Albers\", \"Alblas\", \"Appelman\", \"Baars\", \"Baas\", \"Bakker\", \"Blank\", \"Bleeker\", \"Blok\", \"Blom\", \"Boer\", \"Boers\", \"Boldewijn\", \"Boon\", \"Boot\", \"Bos\", \"Bosch\", \"Bosma\", \"Bosman\", \"Bouma\", \"Bouman\", \"Bouwman\", \"Brands\", \"Brouwer\", \"Burger\", \"Buijs\", \"Buitenhuis\", \"Ceder\", \"Cohen\", \"Dekker\", \"Dekkers\", \"Dijkman\", \"Dijkstra\", \"Driessen\", \"Drost\", \"Engel\", \"Evers\", \"Faber\", \"Franke\", \"Gerritsen\", \"Goedhart\", \"Goossens\", \"Groen\", \"Groenenberg\", \"Groot\", \"Haan\", \"Hart\", \"Heemskerk\", \"Hendriks\", \"Hermans\", \"Hoekstra\", \"Hofman\", \"Hopman\", \"Huisman\", \"Jacobs\", \"Jansen\", \"Janssen\", \"Jonker\", \"Jaspers\", \"Keijzer\", \"Klaassen\", \"Klein\", \"Koek\", \"Koenders\", \"Kok\", \"Kool\", \"Koopman\", \"Koopmans\", \"Koning\", \"Koster\", \"Kramer\", \"Kroon\", \"Kuijpers\", \"Kuiper\", \"Kuipers\", \"Kurt\", \"Koster\", \"Kwakman\", \"Los\", \"Lubbers\", \"Maas\", \"Markus\", \"Martens\", \"Meijer\", \"Mol\", \"Molenaar\", \"Mulder\", \"Nieuwenhuis\", \"Peeters\", \"Peters\", \"Pengel\", \"Pieters\", \"Pool\", \"Post\", \"Postma\", \"Prins\", \"Pronk\", \"Reijnders\", \"Rietveld\", \"Roest\", \"Roos\", \"Sanders\", \"Schaap\", \"Scheffer\", \"Schenk\", \"Schilder\", \"Schipper\", \"Schmidt\", \"Scholten\", \"Schouten\", \"Schut\", \"Schutte\", \"Schuurman\", \"Simons\", \"Smeets\", \"Smit\", \"Smits\", \"Snel\", \"Swinkels\", \"Tas\", \"Terpstra\", \"Timmermans\", \"Tol\", \"Tromp\", \"Troost\", \"Valk\", \"Veenstra\", \"Veldkamp\", \"Verbeek\", \"Verheul\", \"Verhoeven\", \"Vermeer\", \"Vermeulen\", \"Verweij\", \"Vink\", \"Visser\", \"Voorn\", \"Vos\", \"Wagenaar\", \"Wiersema\", \"Willems\", \"Willemsen\", \"Witteveen\", \"Wolff\", \"Wolters\", \"Zijlstra\", \"Zwart\", \"de Beer\", \"de Boer\", \"de Bruijn\", \"de Bruin\", \"de Graaf\", \"de Groot\", \"de Haan\", \"de Haas\", \"de Jager\", \"de Jong\", \"de Jonge\", \"de Koning\", \"de Lange\", \"de Leeuw\", \"de Ridder\", \"de Rooij\", \"de Ruiter\", \"de Vos\", \"de Vries\", \"de Waal\", \"de Wit\", \"de Zwart\", \"van Beek\", \"van Boven\", \"van Dam\", \"van Dijk\", \"van Dongen\", \"van Doorn\", \"van Egmond\", \"van Eijk\", \"van Es\", \"van Gelder\", \"van Gelderen\", \"van Houten\", \"van Hulst\", \"van Kempen\", \"van Kesteren\", \"van Leeuwen\", \"van Loon\", \"van Mill\", \"van Noord\", \"van Ommen\", \"van Ommeren\", \"van Oosten\", \"van Oostveen\", \"van Rijn\", \"van Schaik\", \"van Veen\", \"van Vliet\", \"van Wijk\", \"van Wijngaarden\", \"van den Poel\", \"van de Pol\", \"van den Ploeg\", \"van de Ven\", \"van den Berg\", \"van den Bosch\", \"van den Brink\", \"van den Broek\", \"van den Heuvel\", \"van der Heijden\", \"van der Horst\", \"van der Hulst\", \"van der Kroon\", \"van der Laan\", \"van der Linden\", \"van der Meer\", \"van der Meij\", \"van der Meulen\", \"van der Molen\", \"van der Sluis\", \"van der Spek\", \"van der Veen\", \"van der Velde\", \"van der Velden\", \"van der Vliet\", \"van der Wal\"],\n            // https://surnames.behindthename.com/top/lists/england-wales/1991\n            \"uk\":[\"Smith\",\"Jones\",\"Williams\",\"Taylor\",\"Brown\",\"Davies\",\"Evans\",\"Wilson\",\"Thomas\",\"Johnson\",\"Roberts\",\"Robinson\",\"Thompson\",\"Wright\",\"Walker\",\"White\",\"Edwards\",\"Hughes\",\"Green\",\"Hall\",\"Lewis\",\"Harris\",\"Clarke\",\"Patel\",\"Jackson\",\"Wood\",\"Turner\",\"Martin\",\"Cooper\",\"Hill\",\"Ward\",\"Morris\",\"Moore\",\"Clark\",\"Lee\",\"King\",\"Baker\",\"Harrison\",\"Morgan\",\"Allen\",\"James\",\"Scott\",\"Phillips\",\"Watson\",\"Davis\",\"Parker\",\"Price\",\"Bennett\",\"Young\",\"Griffiths\",\"Mitchell\",\"Kelly\",\"Cook\",\"Carter\",\"Richardson\",\"Bailey\",\"Collins\",\"Bell\",\"Shaw\",\"Murphy\",\"Miller\",\"Cox\",\"Richards\",\"Khan\",\"Marshall\",\"Anderson\",\"Simpson\",\"Ellis\",\"Adams\",\"Singh\",\"Begum\",\"Wilkinson\",\"Foster\",\"Chapman\",\"Powell\",\"Webb\",\"Rogers\",\"Gray\",\"Mason\",\"Ali\",\"Hunt\",\"Hussain\",\"Campbell\",\"Matthews\",\"Owen\",\"Palmer\",\"Holmes\",\"Mills\",\"Barnes\",\"Knight\",\"Lloyd\",\"Butler\",\"Russell\",\"Barker\",\"Fisher\",\"Stevens\",\"Jenkins\",\"Murray\",\"Dixon\",\"Harvey\",\"Graham\",\"Pearson\",\"Ahmed\",\"Fletcher\",\"Walsh\",\"Kaur\",\"Gibson\",\"Howard\",\"Andrews\",\"Stewart\",\"Elliott\",\"Reynolds\",\"Saunders\",\"Payne\",\"Fox\",\"Ford\",\"Pearce\",\"Day\",\"Brooks\",\"West\",\"Lawrence\",\"Cole\",\"Atkinson\",\"Bradley\",\"Spencer\",\"Gill\",\"Dawson\",\"Ball\",\"Burton\",\"O'brien\",\"Watts\",\"Rose\",\"Booth\",\"Perry\",\"Ryan\",\"Grant\",\"Wells\",\"Armstrong\",\"Francis\",\"Rees\",\"Hayes\",\"Hart\",\"Hudson\",\"Newman\",\"Barrett\",\"Webster\",\"Hunter\",\"Gregory\",\"Carr\",\"Lowe\",\"Page\",\"Marsh\",\"Riley\",\"Dunn\",\"Woods\",\"Parsons\",\"Berry\",\"Stone\",\"Reid\",\"Holland\",\"Hawkins\",\"Harding\",\"Porter\",\"Robertson\",\"Newton\",\"Oliver\",\"Reed\",\"Kennedy\",\"Williamson\",\"Bird\",\"Gardner\",\"Shah\",\"Dean\",\"Lane\",\"Cooke\",\"Bates\",\"Henderson\",\"Parry\",\"Burgess\",\"Bishop\",\"Walton\",\"Burns\",\"Nicholson\",\"Shepherd\",\"Ross\",\"Cross\",\"Long\",\"Freeman\",\"Warren\",\"Nicholls\",\"Hamilton\",\"Byrne\",\"Sutton\",\"Mcdonald\",\"Yates\",\"Hodgson\",\"Robson\",\"Curtis\",\"Hopkins\",\"O'connor\",\"Harper\",\"Coleman\",\"Watkins\",\"Moss\",\"Mccarthy\",\"Chambers\",\"O'neill\",\"Griffin\",\"Sharp\",\"Hardy\",\"Wheeler\",\"Potter\",\"Osborne\",\"Johnston\",\"Gordon\",\"Doyle\",\"Wallace\",\"George\",\"Jordan\",\"Hutchinson\",\"Rowe\",\"Burke\",\"May\",\"Pritchard\",\"Gilbert\",\"Willis\",\"Higgins\",\"Read\",\"Miles\",\"Stevenson\",\"Stephenson\",\"Hammond\",\"Arnold\",\"Buckley\",\"Walters\",\"Hewitt\",\"Barber\",\"Nelson\",\"Slater\",\"Austin\",\"Sullivan\",\"Whitehead\",\"Mann\",\"Frost\",\"Lambert\",\"Stephens\",\"Blake\",\"Akhtar\",\"Lynch\",\"Goodwin\",\"Barton\",\"Woodward\",\"Thomson\",\"Cunningham\",\"Quinn\",\"Barnett\",\"Baxter\",\"Bibi\",\"Clayton\",\"Nash\",\"Greenwood\",\"Jennings\",\"Holt\",\"Kemp\",\"Poole\",\"Gallagher\",\"Bond\",\"Stokes\",\"Tucker\",\"Davidson\",\"Fowler\",\"Heath\",\"Norman\",\"Middleton\",\"Lawson\",\"Banks\",\"French\",\"Stanley\",\"Jarvis\",\"Gibbs\",\"Ferguson\",\"Hayward\",\"Carroll\",\"Douglas\",\"Dickinson\",\"Todd\",\"Barlow\",\"Peters\",\"Lucas\",\"Knowles\",\"Hartley\",\"Miah\",\"Simmons\",\"Morton\",\"Alexander\",\"Field\",\"Morrison\",\"Norris\",\"Townsend\",\"Preston\",\"Hancock\",\"Thornton\",\"Baldwin\",\"Burrows\",\"Briggs\",\"Parkinson\",\"Reeves\",\"Macdonald\",\"Lamb\",\"Black\",\"Abbott\",\"Sanders\",\"Thorpe\",\"Holden\",\"Tomlinson\",\"Perkins\",\"Ashton\",\"Rhodes\",\"Fuller\",\"Howe\",\"Bryant\",\"Vaughan\",\"Dale\",\"Davey\",\"Weston\",\"Bartlett\",\"Whittaker\",\"Davison\",\"Kent\",\"Skinner\",\"Birch\",\"Morley\",\"Daniels\",\"Glover\",\"Howell\",\"Cartwright\",\"Pugh\",\"Humphreys\",\"Goddard\",\"Brennan\",\"Wall\",\"Kirby\",\"Bowen\",\"Savage\",\"Bull\",\"Wong\",\"Dobson\",\"Smart\",\"Wilkins\",\"Kirk\",\"Fraser\",\"Duffy\",\"Hicks\",\"Patterson\",\"Bradshaw\",\"Little\",\"Archer\",\"Warner\",\"Waters\",\"O'sullivan\",\"Farrell\",\"Brookes\",\"Atkins\",\"Kay\",\"Dodd\",\"Bentley\",\"Flynn\",\"John\",\"Schofield\",\"Short\",\"Haynes\",\"Wade\",\"Butcher\",\"Henry\",\"Sanderson\",\"Crawford\",\"Sheppard\",\"Bolton\",\"Coates\",\"Giles\",\"Gould\",\"Houghton\",\"Gibbons\",\"Pratt\",\"Manning\",\"Law\",\"Hooper\",\"Noble\",\"Dyer\",\"Rahman\",\"Clements\",\"Moran\",\"Sykes\",\"Chan\",\"Doherty\",\"Connolly\",\"Joyce\",\"Franklin\",\"Hobbs\",\"Coles\",\"Herbert\",\"Steele\",\"Kerr\",\"Leach\",\"Winter\",\"Owens\",\"Duncan\",\"Naylor\",\"Fleming\",\"Horton\",\"Finch\",\"Fitzgerald\",\"Randall\",\"Carpenter\",\"Marsden\",\"Browne\",\"Garner\",\"Pickering\",\"Hale\",\"Dennis\",\"Vincent\",\"Chadwick\",\"Chandler\",\"Sharpe\",\"Nolan\",\"Lyons\",\"Hurst\",\"Collier\",\"Peacock\",\"Howarth\",\"Faulkner\",\"Rice\",\"Pollard\",\"Welch\",\"Norton\",\"Gough\",\"Sinclair\",\"Blackburn\",\"Bryan\",\"Conway\",\"Power\",\"Cameron\",\"Daly\",\"Allan\",\"Hanson\",\"Gardiner\",\"Boyle\",\"Myers\",\"Turnbull\",\"Wallis\",\"Mahmood\",\"Sims\",\"Swift\",\"Iqbal\",\"Pope\",\"Brady\",\"Chamberlain\",\"Rowley\",\"Tyler\",\"Farmer\",\"Metcalfe\",\"Hilton\",\"Godfrey\",\"Holloway\",\"Parkin\",\"Bray\",\"Talbot\",\"Donnelly\",\"Nixon\",\"Charlton\",\"Benson\",\"Whitehouse\",\"Barry\",\"Hope\",\"Lord\",\"North\",\"Storey\",\"Connor\",\"Potts\",\"Bevan\",\"Hargreaves\",\"Mclean\",\"Mistry\",\"Bruce\",\"Howells\",\"Hyde\",\"Parkes\",\"Wyatt\",\"Fry\",\"Lees\",\"O'donnell\",\"Craig\",\"Forster\",\"Mckenzie\",\"Humphries\",\"Mellor\",\"Carey\",\"Ingram\",\"Summers\",\"Leonard\"],\n            // https://surnames.behindthename.com/top/lists/germany/2017\n            \"de\": [\"Müller\",\"Schmidt\",\"Schneider\",\"Fischer\",\"Weber\",\"Meyer\",\"Wagner\",\"Becker\",\"Schulz\",\"Hoffmann\",\"Schäfer\",\"Koch\",\"Bauer\",\"Richter\",\"Klein\",\"Wolf\",\"Schröder\",\"Neumann\",\"Schwarz\",\"Zimmermann\",\"Braun\",\"Krüger\",\"Hofmann\",\"Hartmann\",\"Lange\",\"Schmitt\",\"Werner\",\"Schmitz\",\"Krause\",\"Meier\",\"Lehmann\",\"Schmid\",\"Schulze\",\"Maier\",\"Köhler\",\"Herrmann\",\"König\",\"Walter\",\"Mayer\",\"Huber\",\"Kaiser\",\"Fuchs\",\"Peters\",\"Lang\",\"Scholz\",\"Möller\",\"Weiß\",\"Jung\",\"Hahn\",\"Schubert\",\"Vogel\",\"Friedrich\",\"Keller\",\"Günther\",\"Frank\",\"Berger\",\"Winkler\",\"Roth\",\"Beck\",\"Lorenz\",\"Baumann\",\"Franke\",\"Albrecht\",\"Schuster\",\"Simon\",\"Ludwig\",\"Böhm\",\"Winter\",\"Kraus\",\"Martin\",\"Schumacher\",\"Krämer\",\"Vogt\",\"Stein\",\"Jäger\",\"Otto\",\"Sommer\",\"Groß\",\"Seidel\",\"Heinrich\",\"Brandt\",\"Haas\",\"Schreiber\",\"Graf\",\"Schulte\",\"Dietrich\",\"Ziegler\",\"Kuhn\",\"Kühn\",\"Pohl\",\"Engel\",\"Horn\",\"Busch\",\"Bergmann\",\"Thomas\",\"Voigt\",\"Sauer\",\"Arnold\",\"Wolff\",\"Pfeiffer\"],\n            // http://www.japantimes.co.jp/life/2009/10/11/lifestyle/japans-top-100-most-common-family-names/\n            \"jp\": [\"Sato\",\"Suzuki\",\"Takahashi\",\"Tanaka\",\"Watanabe\",\"Ito\",\"Yamamoto\",\"Nakamura\",\"Kobayashi\",\"Kato\",\"Yoshida\",\"Yamada\",\"Sasaki\",\"Yamaguchi\",\"Saito\",\"Matsumoto\",\"Inoue\",\"Kimura\",\"Hayashi\",\"Shimizu\",\"Yamazaki\",\"Mori\",\"Abe\",\"Ikeda\",\"Hashimoto\",\"Yamashita\",\"Ishikawa\",\"Nakajima\",\"Maeda\",\"Fujita\",\"Ogawa\",\"Goto\",\"Okada\",\"Hasegawa\",\"Murakami\",\"Kondo\",\"Ishii\",\"Saito\",\"Sakamoto\",\"Endo\",\"Aoki\",\"Fujii\",\"Nishimura\",\"Fukuda\",\"Ota\",\"Miura\",\"Fujiwara\",\"Okamoto\",\"Matsuda\",\"Nakagawa\",\"Nakano\",\"Harada\",\"Ono\",\"Tamura\",\"Takeuchi\",\"Kaneko\",\"Wada\",\"Nakayama\",\"Ishida\",\"Ueda\",\"Morita\",\"Hara\",\"Shibata\",\"Sakai\",\"Kudo\",\"Yokoyama\",\"Miyazaki\",\"Miyamoto\",\"Uchida\",\"Takagi\",\"Ando\",\"Taniguchi\",\"Ohno\",\"Maruyama\",\"Imai\",\"Takada\",\"Fujimoto\",\"Takeda\",\"Murata\",\"Ueno\",\"Sugiyama\",\"Masuda\",\"Sugawara\",\"Hirano\",\"Kojima\",\"Otsuka\",\"Chiba\",\"Kubo\",\"Matsui\",\"Iwasaki\",\"Sakurai\",\"Kinoshita\",\"Noguchi\",\"Matsuo\",\"Nomura\",\"Kikuchi\",\"Sano\",\"Onishi\",\"Sugimoto\",\"Arai\"],\n            // http://www.lowchensaustralia.com/names/popular-spanish-names.htm\n            \"es\": [\"Garcia\",\"Fernandez\",\"Lopez\",\"Martinez\",\"Gonzalez\",\"Rodriguez\",\"Sanchez\",\"Perez\",\"Martin\",\"Gomez\",\"Ruiz\",\"Diaz\",\"Hernandez\",\"Alvarez\",\"Jimenez\",\"Moreno\",\"Munoz\",\"Alonso\",\"Romero\",\"Navarro\",\"Gutierrez\",\"Torres\",\"Dominguez\",\"Gil\",\"Vazquez\",\"Blanco\",\"Serrano\",\"Ramos\",\"Castro\",\"Suarez\",\"Sanz\",\"Rubio\",\"Ortega\",\"Molina\",\"Delgado\",\"Ortiz\",\"Morales\",\"Ramirez\",\"Marin\",\"Iglesias\",\"Santos\",\"Castillo\",\"Garrido\",\"Calvo\",\"Pena\",\"Cruz\",\"Cano\",\"Nunez\",\"Prieto\",\"Diez\",\"Lozano\",\"Vidal\",\"Pascual\",\"Ferrer\",\"Medina\",\"Vega\",\"Leon\",\"Herrero\",\"Vicente\",\"Mendez\",\"Guerrero\",\"Fuentes\",\"Campos\",\"Nieto\",\"Cortes\",\"Caballero\",\"Ibanez\",\"Lorenzo\",\"Pastor\",\"Gimenez\",\"Saez\",\"Soler\",\"Marquez\",\"Carrasco\",\"Herrera\",\"Montero\",\"Arias\",\"Crespo\",\"Flores\",\"Andres\",\"Aguilar\",\"Hidalgo\",\"Cabrera\",\"Mora\",\"Duran\",\"Velasco\",\"Rey\",\"Pardo\",\"Roman\",\"Vila\",\"Bravo\",\"Merino\",\"Moya\",\"Soto\",\"Izquierdo\",\"Reyes\",\"Redondo\",\"Marcos\",\"Carmona\",\"Menendez\"],\n            // Data taken from https://fr.wikipedia.org/wiki/Liste_des_noms_de_famille_les_plus_courants_en_France\n            \"fr\": [\"Martin\",\"Bernard\",\"Thomas\",\"Petit\",\"Robert\",\"Richard\",\"Durand\",\"Dubois\",\"Moreau\",\"Laurent\",\"Simon\",\"Michel\",\"Lefèvre\",\"Leroy\",\"Roux\",\"David\",\"Bertrand\",\"Morel\",\"Fournier\",\"Girard\",\"Bonnet\",\"Dupont\",\"Lambert\",\"Fontaine\",\"Rousseau\",\"Vincent\",\"Müller\",\"Lefèvre\",\"Faure\",\"André\",\"Mercier\",\"Blanc\",\"Guérin\",\"Boyer\",\"Garnier\",\"Chevalier\",\"François\",\"Legrand\",\"Gauthier\",\"Garcia\",\"Perrin\",\"Robin\",\"Clément\",\"Morin\",\"Nicolas\",\"Henry\",\"Roussel\",\"Matthieu\",\"Gautier\",\"Masson\",\"Marchand\",\"Duval\",\"Denis\",\"Dumont\",\"Marie\",\"Lemaire\",\"Noël\",\"Meyer\",\"Dufour\",\"Meunier\",\"Brun\",\"Blanchard\",\"Giraud\",\"Joly\",\"Rivière\",\"Lucas\",\"Brunet\",\"Gaillard\",\"Barbier\",\"Arnaud\",\"Martínez\",\"Gérard\",\"Roche\",\"Renard\",\"Schmitt\",\"Roy\",\"Leroux\",\"Colin\",\"Vidal\",\"Caron\",\"Picard\",\"Roger\",\"Fabre\",\"Aubert\",\"Lemoine\",\"Renaud\",\"Dumas\",\"Lacroix\",\"Olivier\",\"Philippe\",\"Bourgeois\",\"Pierre\",\"Benoît\",\"Rey\",\"Leclerc\",\"Payet\",\"Rolland\",\"Leclercq\",\"Guillaume\",\"Lecomte\",\"López\",\"Jean\",\"Dupuy\",\"Guillot\",\"Hubert\",\"Berger\",\"Carpentier\",\"Sánchez\",\"Dupuis\",\"Moulin\",\"Louis\",\"Deschamps\",\"Huet\",\"Vasseur\",\"Perez\",\"Boucher\",\"Fleury\",\"Royer\",\"Klein\",\"Jacquet\",\"Adam\",\"Paris\",\"Poirier\",\"Marty\",\"Aubry\",\"Guyot\",\"Carré\",\"Charles\",\"Renault\",\"Charpentier\",\"Ménard\",\"Maillard\",\"Baron\",\"Bertin\",\"Bailly\",\"Hervé\",\"Schneider\",\"Fernández\",\"Le GallGall\",\"Collet\",\"Léger\",\"Bouvier\",\"Julien\",\"Prévost\",\"Millet\",\"Perrot\",\"Daniel\",\"Le RouxRoux\",\"Cousin\",\"Germain\",\"Breton\",\"Besson\",\"Langlois\",\"Rémi\",\"Le GoffGoff\",\"Pelletier\",\"Lévêque\",\"Perrier\",\"Leblanc\",\"Barré\",\"Lebrun\",\"Marchal\",\"Weber\",\"Mallet\",\"Hamon\",\"Boulanger\",\"Jacob\",\"Monnier\",\"Michaud\",\"Rodríguez\",\"Guichard\",\"Gillet\",\"Étienne\",\"Grondin\",\"Poulain\",\"Tessier\",\"Chevallier\",\"Collin\",\"Chauvin\",\"Da SilvaSilva\",\"Bouchet\",\"Gay\",\"Lemaître\",\"Bénard\",\"Maréchal\",\"Humbert\",\"Reynaud\",\"Antoine\",\"Hoarau\",\"Perret\",\"Barthélemy\",\"Cordier\",\"Pichon\",\"Lejeune\",\"Gilbert\",\"Lamy\",\"Delaunay\",\"Pasquier\",\"Carlier\",\"LaporteLaporte\"]\n        },\n\n        // Data taken from http://geoportal.statistics.gov.uk/datasets/ons-postcode-directory-latest-centroids\n        postcodeAreas: [{code: 'AB'}, {code: 'AL'}, {code: 'B'}, {code: 'BA'}, {code: 'BB'}, {code: 'BD'}, {code: 'BH'}, {code: 'BL'}, {code: 'BN'}, {code: 'BR'}, {code: 'BS'}, {code: 'BT'}, {code: 'CA'}, {code: 'CB'}, {code: 'CF'}, {code: 'CH'}, {code: 'CM'}, {code: 'CO'}, {code: 'CR'}, {code: 'CT'}, {code: 'CV'}, {code: 'CW'}, {code: 'DA'}, {code: 'DD'}, {code: 'DE'}, {code: 'DG'}, {code: 'DH'}, {code: 'DL'}, {code: 'DN'}, {code: 'DT'}, {code: 'DY'}, {code: 'E'}, {code: 'EC'}, {code: 'EH'}, {code: 'EN'}, {code: 'EX'}, {code: 'FK'}, {code: 'FY'}, {code: 'G'}, {code: 'GL'}, {code: 'GU'}, {code: 'GY'}, {code: 'HA'}, {code: 'HD'}, {code: 'HG'}, {code: 'HP'}, {code: 'HR'}, {code: 'HS'}, {code: 'HU'}, {code: 'HX'}, {code: 'IG'}, {code: 'IM'}, {code: 'IP'}, {code: 'IV'}, {code: 'JE'}, {code: 'KA'}, {code: 'KT'}, {code: 'KW'}, {code: 'KY'}, {code: 'L'}, {code: 'LA'}, {code: 'LD'}, {code: 'LE'}, {code: 'LL'}, {code: 'LN'}, {code: 'LS'}, {code: 'LU'}, {code: 'M'}, {code: 'ME'}, {code: 'MK'}, {code: 'ML'}, {code: 'N'}, {code: 'NE'}, {code: 'NG'}, {code: 'NN'}, {code: 'NP'}, {code: 'NR'}, {code: 'NW'}, {code: 'OL'}, {code: 'OX'}, {code: 'PA'}, {code: 'PE'}, {code: 'PH'}, {code: 'PL'}, {code: 'PO'}, {code: 'PR'}, {code: 'RG'}, {code: 'RH'}, {code: 'RM'}, {code: 'S'}, {code: 'SA'}, {code: 'SE'}, {code: 'SG'}, {code: 'SK'}, {code: 'SL'}, {code: 'SM'}, {code: 'SN'}, {code: 'SO'}, {code: 'SP'}, {code: 'SR'}, {code: 'SS'}, {code: 'ST'}, {code: 'SW'}, {code: 'SY'}, {code: 'TA'}, {code: 'TD'}, {code: 'TF'}, {code: 'TN'}, {code: 'TQ'}, {code: 'TR'}, {code: 'TS'}, {code: 'TW'}, {code: 'UB'}, {code: 'W'}, {code: 'WA'}, {code: 'WC'}, {code: 'WD'}, {code: 'WF'}, {code: 'WN'}, {code: 'WR'}, {code: 'WS'}, {code: 'WV'}, {code: 'YO'}, {code: 'ZE'}],\n\n        // Data taken from https://github.com/umpirsky/country-list/blob/master/data/en_US/country.json\n        countries: [{\"name\":\"Afghanistan\",\"abbreviation\":\"AF\"},{\"name\":\"Åland Islands\",\"abbreviation\":\"AX\"},{\"name\":\"Albania\",\"abbreviation\":\"AL\"},{\"name\":\"Algeria\",\"abbreviation\":\"DZ\"},{\"name\":\"American Samoa\",\"abbreviation\":\"AS\"},{\"name\":\"Andorra\",\"abbreviation\":\"AD\"},{\"name\":\"Angola\",\"abbreviation\":\"AO\"},{\"name\":\"Anguilla\",\"abbreviation\":\"AI\"},{\"name\":\"Antarctica\",\"abbreviation\":\"AQ\"},{\"name\":\"Antigua & Barbuda\",\"abbreviation\":\"AG\"},{\"name\":\"Argentina\",\"abbreviation\":\"AR\"},{\"name\":\"Armenia\",\"abbreviation\":\"AM\"},{\"name\":\"Aruba\",\"abbreviation\":\"AW\"},{\"name\":\"Ascension Island\",\"abbreviation\":\"AC\"},{\"name\":\"Australia\",\"abbreviation\":\"AU\"},{\"name\":\"Austria\",\"abbreviation\":\"AT\"},{\"name\":\"Azerbaijan\",\"abbreviation\":\"AZ\"},{\"name\":\"Bahamas\",\"abbreviation\":\"BS\"},{\"name\":\"Bahrain\",\"abbreviation\":\"BH\"},{\"name\":\"Bangladesh\",\"abbreviation\":\"BD\"},{\"name\":\"Barbados\",\"abbreviation\":\"BB\"},{\"name\":\"Belarus\",\"abbreviation\":\"BY\"},{\"name\":\"Belgium\",\"abbreviation\":\"BE\"},{\"name\":\"Belize\",\"abbreviation\":\"BZ\"},{\"name\":\"Benin\",\"abbreviation\":\"BJ\"},{\"name\":\"Bermuda\",\"abbreviation\":\"BM\"},{\"name\":\"Bhutan\",\"abbreviation\":\"BT\"},{\"name\":\"Bolivia\",\"abbreviation\":\"BO\"},{\"name\":\"Bosnia & Herzegovina\",\"abbreviation\":\"BA\"},{\"name\":\"Botswana\",\"abbreviation\":\"BW\"},{\"name\":\"Brazil\",\"abbreviation\":\"BR\"},{\"name\":\"British Indian Ocean Territory\",\"abbreviation\":\"IO\"},{\"name\":\"British Virgin Islands\",\"abbreviation\":\"VG\"},{\"name\":\"Brunei\",\"abbreviation\":\"BN\"},{\"name\":\"Bulgaria\",\"abbreviation\":\"BG\"},{\"name\":\"Burkina Faso\",\"abbreviation\":\"BF\"},{\"name\":\"Burundi\",\"abbreviation\":\"BI\"},{\"name\":\"Cambodia\",\"abbreviation\":\"KH\"},{\"name\":\"Cameroon\",\"abbreviation\":\"CM\"},{\"name\":\"Canada\",\"abbreviation\":\"CA\"},{\"name\":\"Canary Islands\",\"abbreviation\":\"IC\"},{\"name\":\"Cape Verde\",\"abbreviation\":\"CV\"},{\"name\":\"Caribbean Netherlands\",\"abbreviation\":\"BQ\"},{\"name\":\"Cayman Islands\",\"abbreviation\":\"KY\"},{\"name\":\"Central African Republic\",\"abbreviation\":\"CF\"},{\"name\":\"Ceuta & Melilla\",\"abbreviation\":\"EA\"},{\"name\":\"Chad\",\"abbreviation\":\"TD\"},{\"name\":\"Chile\",\"abbreviation\":\"CL\"},{\"name\":\"China\",\"abbreviation\":\"CN\"},{\"name\":\"Christmas Island\",\"abbreviation\":\"CX\"},{\"name\":\"Cocos (Keeling) Islands\",\"abbreviation\":\"CC\"},{\"name\":\"Colombia\",\"abbreviation\":\"CO\"},{\"name\":\"Comoros\",\"abbreviation\":\"KM\"},{\"name\":\"Congo - Brazzaville\",\"abbreviation\":\"CG\"},{\"name\":\"Congo - Kinshasa\",\"abbreviation\":\"CD\"},{\"name\":\"Cook Islands\",\"abbreviation\":\"CK\"},{\"name\":\"Costa Rica\",\"abbreviation\":\"CR\"},{\"name\":\"Côte d'Ivoire\",\"abbreviation\":\"CI\"},{\"name\":\"Croatia\",\"abbreviation\":\"HR\"},{\"name\":\"Cuba\",\"abbreviation\":\"CU\"},{\"name\":\"Curaçao\",\"abbreviation\":\"CW\"},{\"name\":\"Cyprus\",\"abbreviation\":\"CY\"},{\"name\":\"Czech Republic\",\"abbreviation\":\"CZ\"},{\"name\":\"Denmark\",\"abbreviation\":\"DK\"},{\"name\":\"Diego Garcia\",\"abbreviation\":\"DG\"},{\"name\":\"Djibouti\",\"abbreviation\":\"DJ\"},{\"name\":\"Dominica\",\"abbreviation\":\"DM\"},{\"name\":\"Dominican Republic\",\"abbreviation\":\"DO\"},{\"name\":\"Ecuador\",\"abbreviation\":\"EC\"},{\"name\":\"Egypt\",\"abbreviation\":\"EG\"},{\"name\":\"El Salvador\",\"abbreviation\":\"SV\"},{\"name\":\"Equatorial Guinea\",\"abbreviation\":\"GQ\"},{\"name\":\"Eritrea\",\"abbreviation\":\"ER\"},{\"name\":\"Estonia\",\"abbreviation\":\"EE\"},{\"name\":\"Ethiopia\",\"abbreviation\":\"ET\"},{\"name\":\"Falkland Islands\",\"abbreviation\":\"FK\"},{\"name\":\"Faroe Islands\",\"abbreviation\":\"FO\"},{\"name\":\"Fiji\",\"abbreviation\":\"FJ\"},{\"name\":\"Finland\",\"abbreviation\":\"FI\"},{\"name\":\"France\",\"abbreviation\":\"FR\"},{\"name\":\"French Guiana\",\"abbreviation\":\"GF\"},{\"name\":\"French Polynesia\",\"abbreviation\":\"PF\"},{\"name\":\"French Southern Territories\",\"abbreviation\":\"TF\"},{\"name\":\"Gabon\",\"abbreviation\":\"GA\"},{\"name\":\"Gambia\",\"abbreviation\":\"GM\"},{\"name\":\"Georgia\",\"abbreviation\":\"GE\"},{\"name\":\"Germany\",\"abbreviation\":\"DE\"},{\"name\":\"Ghana\",\"abbreviation\":\"GH\"},{\"name\":\"Gibraltar\",\"abbreviation\":\"GI\"},{\"name\":\"Greece\",\"abbreviation\":\"GR\"},{\"name\":\"Greenland\",\"abbreviation\":\"GL\"},{\"name\":\"Grenada\",\"abbreviation\":\"GD\"},{\"name\":\"Guadeloupe\",\"abbreviation\":\"GP\"},{\"name\":\"Guam\",\"abbreviation\":\"GU\"},{\"name\":\"Guatemala\",\"abbreviation\":\"GT\"},{\"name\":\"Guernsey\",\"abbreviation\":\"GG\"},{\"name\":\"Guinea\",\"abbreviation\":\"GN\"},{\"name\":\"Guinea-Bissau\",\"abbreviation\":\"GW\"},{\"name\":\"Guyana\",\"abbreviation\":\"GY\"},{\"name\":\"Haiti\",\"abbreviation\":\"HT\"},{\"name\":\"Honduras\",\"abbreviation\":\"HN\"},{\"name\":\"Hong Kong SAR China\",\"abbreviation\":\"HK\"},{\"name\":\"Hungary\",\"abbreviation\":\"HU\"},{\"name\":\"Iceland\",\"abbreviation\":\"IS\"},{\"name\":\"India\",\"abbreviation\":\"IN\"},{\"name\":\"Indonesia\",\"abbreviation\":\"ID\"},{\"name\":\"Iran\",\"abbreviation\":\"IR\"},{\"name\":\"Iraq\",\"abbreviation\":\"IQ\"},{\"name\":\"Ireland\",\"abbreviation\":\"IE\"},{\"name\":\"Isle of Man\",\"abbreviation\":\"IM\"},{\"name\":\"Israel\",\"abbreviation\":\"IL\"},{\"name\":\"Italy\",\"abbreviation\":\"IT\"},{\"name\":\"Jamaica\",\"abbreviation\":\"JM\"},{\"name\":\"Japan\",\"abbreviation\":\"JP\"},{\"name\":\"Jersey\",\"abbreviation\":\"JE\"},{\"name\":\"Jordan\",\"abbreviation\":\"JO\"},{\"name\":\"Kazakhstan\",\"abbreviation\":\"KZ\"},{\"name\":\"Kenya\",\"abbreviation\":\"KE\"},{\"name\":\"Kiribati\",\"abbreviation\":\"KI\"},{\"name\":\"Kosovo\",\"abbreviation\":\"XK\"},{\"name\":\"Kuwait\",\"abbreviation\":\"KW\"},{\"name\":\"Kyrgyzstan\",\"abbreviation\":\"KG\"},{\"name\":\"Laos\",\"abbreviation\":\"LA\"},{\"name\":\"Latvia\",\"abbreviation\":\"LV\"},{\"name\":\"Lebanon\",\"abbreviation\":\"LB\"},{\"name\":\"Lesotho\",\"abbreviation\":\"LS\"},{\"name\":\"Liberia\",\"abbreviation\":\"LR\"},{\"name\":\"Libya\",\"abbreviation\":\"LY\"},{\"name\":\"Liechtenstein\",\"abbreviation\":\"LI\"},{\"name\":\"Lithuania\",\"abbreviation\":\"LT\"},{\"name\":\"Luxembourg\",\"abbreviation\":\"LU\"},{\"name\":\"Macau SAR China\",\"abbreviation\":\"MO\"},{\"name\":\"Macedonia\",\"abbreviation\":\"MK\"},{\"name\":\"Madagascar\",\"abbreviation\":\"MG\"},{\"name\":\"Malawi\",\"abbreviation\":\"MW\"},{\"name\":\"Malaysia\",\"abbreviation\":\"MY\"},{\"name\":\"Maldives\",\"abbreviation\":\"MV\"},{\"name\":\"Mali\",\"abbreviation\":\"ML\"},{\"name\":\"Malta\",\"abbreviation\":\"MT\"},{\"name\":\"Marshall Islands\",\"abbreviation\":\"MH\"},{\"name\":\"Martinique\",\"abbreviation\":\"MQ\"},{\"name\":\"Mauritania\",\"abbreviation\":\"MR\"},{\"name\":\"Mauritius\",\"abbreviation\":\"MU\"},{\"name\":\"Mayotte\",\"abbreviation\":\"YT\"},{\"name\":\"Mexico\",\"abbreviation\":\"MX\"},{\"name\":\"Micronesia\",\"abbreviation\":\"FM\"},{\"name\":\"Moldova\",\"abbreviation\":\"MD\"},{\"name\":\"Monaco\",\"abbreviation\":\"MC\"},{\"name\":\"Mongolia\",\"abbreviation\":\"MN\"},{\"name\":\"Montenegro\",\"abbreviation\":\"ME\"},{\"name\":\"Montserrat\",\"abbreviation\":\"MS\"},{\"name\":\"Morocco\",\"abbreviation\":\"MA\"},{\"name\":\"Mozambique\",\"abbreviation\":\"MZ\"},{\"name\":\"Myanmar (Burma)\",\"abbreviation\":\"MM\"},{\"name\":\"Namibia\",\"abbreviation\":\"NA\"},{\"name\":\"Nauru\",\"abbreviation\":\"NR\"},{\"name\":\"Nepal\",\"abbreviation\":\"NP\"},{\"name\":\"Netherlands\",\"abbreviation\":\"NL\"},{\"name\":\"New Caledonia\",\"abbreviation\":\"NC\"},{\"name\":\"New Zealand\",\"abbreviation\":\"NZ\"},{\"name\":\"Nicaragua\",\"abbreviation\":\"NI\"},{\"name\":\"Niger\",\"abbreviation\":\"NE\"},{\"name\":\"Nigeria\",\"abbreviation\":\"NG\"},{\"name\":\"Niue\",\"abbreviation\":\"NU\"},{\"name\":\"Norfolk Island\",\"abbreviation\":\"NF\"},{\"name\":\"North Korea\",\"abbreviation\":\"KP\"},{\"name\":\"Northern Mariana Islands\",\"abbreviation\":\"MP\"},{\"name\":\"Norway\",\"abbreviation\":\"NO\"},{\"name\":\"Oman\",\"abbreviation\":\"OM\"},{\"name\":\"Pakistan\",\"abbreviation\":\"PK\"},{\"name\":\"Palau\",\"abbreviation\":\"PW\"},{\"name\":\"Palestinian Territories\",\"abbreviation\":\"PS\"},{\"name\":\"Panama\",\"abbreviation\":\"PA\"},{\"name\":\"Papua New Guinea\",\"abbreviation\":\"PG\"},{\"name\":\"Paraguay\",\"abbreviation\":\"PY\"},{\"name\":\"Peru\",\"abbreviation\":\"PE\"},{\"name\":\"Philippines\",\"abbreviation\":\"PH\"},{\"name\":\"Pitcairn Islands\",\"abbreviation\":\"PN\"},{\"name\":\"Poland\",\"abbreviation\":\"PL\"},{\"name\":\"Portugal\",\"abbreviation\":\"PT\"},{\"name\":\"Puerto Rico\",\"abbreviation\":\"PR\"},{\"name\":\"Qatar\",\"abbreviation\":\"QA\"},{\"name\":\"Réunion\",\"abbreviation\":\"RE\"},{\"name\":\"Romania\",\"abbreviation\":\"RO\"},{\"name\":\"Russia\",\"abbreviation\":\"RU\"},{\"name\":\"Rwanda\",\"abbreviation\":\"RW\"},{\"name\":\"Samoa\",\"abbreviation\":\"WS\"},{\"name\":\"San Marino\",\"abbreviation\":\"SM\"},{\"name\":\"São Tomé and Príncipe\",\"abbreviation\":\"ST\"},{\"name\":\"Saudi Arabia\",\"abbreviation\":\"SA\"},{\"name\":\"Senegal\",\"abbreviation\":\"SN\"},{\"name\":\"Serbia\",\"abbreviation\":\"RS\"},{\"name\":\"Seychelles\",\"abbreviation\":\"SC\"},{\"name\":\"Sierra Leone\",\"abbreviation\":\"SL\"},{\"name\":\"Singapore\",\"abbreviation\":\"SG\"},{\"name\":\"Sint Maarten\",\"abbreviation\":\"SX\"},{\"name\":\"Slovakia\",\"abbreviation\":\"SK\"},{\"name\":\"Slovenia\",\"abbreviation\":\"SI\"},{\"name\":\"Solomon Islands\",\"abbreviation\":\"SB\"},{\"name\":\"Somalia\",\"abbreviation\":\"SO\"},{\"name\":\"South Africa\",\"abbreviation\":\"ZA\"},{\"name\":\"South Georgia & South Sandwich Islands\",\"abbreviation\":\"GS\"},{\"name\":\"South Korea\",\"abbreviation\":\"KR\"},{\"name\":\"South Sudan\",\"abbreviation\":\"SS\"},{\"name\":\"Spain\",\"abbreviation\":\"ES\"},{\"name\":\"Sri Lanka\",\"abbreviation\":\"LK\"},{\"name\":\"St. Barthélemy\",\"abbreviation\":\"BL\"},{\"name\":\"St. Helena\",\"abbreviation\":\"SH\"},{\"name\":\"St. Kitts & Nevis\",\"abbreviation\":\"KN\"},{\"name\":\"St. Lucia\",\"abbreviation\":\"LC\"},{\"name\":\"St. Martin\",\"abbreviation\":\"MF\"},{\"name\":\"St. Pierre & Miquelon\",\"abbreviation\":\"PM\"},{\"name\":\"St. Vincent & Grenadines\",\"abbreviation\":\"VC\"},{\"name\":\"Sudan\",\"abbreviation\":\"SD\"},{\"name\":\"Suriname\",\"abbreviation\":\"SR\"},{\"name\":\"Svalbard & Jan Mayen\",\"abbreviation\":\"SJ\"},{\"name\":\"Swaziland\",\"abbreviation\":\"SZ\"},{\"name\":\"Sweden\",\"abbreviation\":\"SE\"},{\"name\":\"Switzerland\",\"abbreviation\":\"CH\"},{\"name\":\"Syria\",\"abbreviation\":\"SY\"},{\"name\":\"Taiwan\",\"abbreviation\":\"TW\"},{\"name\":\"Tajikistan\",\"abbreviation\":\"TJ\"},{\"name\":\"Tanzania\",\"abbreviation\":\"TZ\"},{\"name\":\"Thailand\",\"abbreviation\":\"TH\"},{\"name\":\"Timor-Leste\",\"abbreviation\":\"TL\"},{\"name\":\"Togo\",\"abbreviation\":\"TG\"},{\"name\":\"Tokelau\",\"abbreviation\":\"TK\"},{\"name\":\"Tonga\",\"abbreviation\":\"TO\"},{\"name\":\"Trinidad & Tobago\",\"abbreviation\":\"TT\"},{\"name\":\"Tristan da Cunha\",\"abbreviation\":\"TA\"},{\"name\":\"Tunisia\",\"abbreviation\":\"TN\"},{\"name\":\"Turkey\",\"abbreviation\":\"TR\"},{\"name\":\"Turkmenistan\",\"abbreviation\":\"TM\"},{\"name\":\"Turks & Caicos Islands\",\"abbreviation\":\"TC\"},{\"name\":\"Tuvalu\",\"abbreviation\":\"TV\"},{\"name\":\"U.S. Outlying Islands\",\"abbreviation\":\"UM\"},{\"name\":\"U.S. Virgin Islands\",\"abbreviation\":\"VI\"},{\"name\":\"Uganda\",\"abbreviation\":\"UG\"},{\"name\":\"Ukraine\",\"abbreviation\":\"UA\"},{\"name\":\"United Arab Emirates\",\"abbreviation\":\"AE\"},{\"name\":\"United Kingdom\",\"abbreviation\":\"GB\"},{\"name\":\"United States\",\"abbreviation\":\"US\"},{\"name\":\"Uruguay\",\"abbreviation\":\"UY\"},{\"name\":\"Uzbekistan\",\"abbreviation\":\"UZ\"},{\"name\":\"Vanuatu\",\"abbreviation\":\"VU\"},{\"name\":\"Vatican City\",\"abbreviation\":\"VA\"},{\"name\":\"Venezuela\",\"abbreviation\":\"VE\"},{\"name\":\"Vietnam\",\"abbreviation\":\"VN\"},{\"name\":\"Wallis & Futuna\",\"abbreviation\":\"WF\"},{\"name\":\"Western Sahara\",\"abbreviation\":\"EH\"},{\"name\":\"Yemen\",\"abbreviation\":\"YE\"},{\"name\":\"Zambia\",\"abbreviation\":\"ZM\"},{\"name\":\"Zimbabwe\",\"abbreviation\":\"ZW\"}],\n\n                counties: {\n            // Data taken from http://www.downloadexcelfiles.com/gb_en/download-excel-file-list-counties-uk\n            \"uk\": [\n                {name: 'Bath and North East Somerset'},\n                {name: 'Aberdeenshire'},\n                {name: 'Anglesey'},\n                {name: 'Angus'},\n                {name: 'Bedford'},\n                {name: 'Blackburn with Darwen'},\n                {name: 'Blackpool'},\n                {name: 'Bournemouth'},\n                {name: 'Bracknell Forest'},\n                {name: 'Brighton & Hove'},\n                {name: 'Bristol'},\n                {name: 'Buckinghamshire'},\n                {name: 'Cambridgeshire'},\n                {name: 'Carmarthenshire'},\n                {name: 'Central Bedfordshire'},\n                {name: 'Ceredigion'},\n                {name: 'Cheshire East'},\n                {name: 'Cheshire West and Chester'},\n                {name: 'Clackmannanshire'},\n                {name: 'Conwy'},\n                {name: 'Cornwall'},\n                {name: 'County Antrim'},\n                {name: 'County Armagh'},\n                {name: 'County Down'},\n                {name: 'County Durham'},\n                {name: 'County Fermanagh'},\n                {name: 'County Londonderry'},\n                {name: 'County Tyrone'},\n                {name: 'Cumbria'},\n                {name: 'Darlington'},\n                {name: 'Denbighshire'},\n                {name: 'Derby'},\n                {name: 'Derbyshire'},\n                {name: 'Devon'},\n                {name: 'Dorset'},\n                {name: 'Dumfries and Galloway'},\n                {name: 'Dundee'},\n                {name: 'East Lothian'},\n                {name: 'East Riding of Yorkshire'},\n                {name: 'East Sussex'},\n                {name: 'Edinburgh?'},\n                {name: 'Essex'},\n                {name: 'Falkirk'},\n                {name: 'Fife'},\n                {name: 'Flintshire'},\n                {name: 'Gloucestershire'},\n                {name: 'Greater London'},\n                {name: 'Greater Manchester'},\n                {name: 'Gwent'},\n                {name: 'Gwynedd'},\n                {name: 'Halton'},\n                {name: 'Hampshire'},\n                {name: 'Hartlepool'},\n                {name: 'Herefordshire'},\n                {name: 'Hertfordshire'},\n                {name: 'Highlands'},\n                {name: 'Hull'},\n                {name: 'Isle of Wight'},\n                {name: 'Isles of Scilly'},\n                {name: 'Kent'},\n                {name: 'Lancashire'},\n                {name: 'Leicester'},\n                {name: 'Leicestershire'},\n                {name: 'Lincolnshire'},\n                {name: 'Lothian'},\n                {name: 'Luton'},\n                {name: 'Medway'},\n                {name: 'Merseyside'},\n                {name: 'Mid Glamorgan'},\n                {name: 'Middlesbrough'},\n                {name: 'Milton Keynes'},\n                {name: 'Monmouthshire'},\n                {name: 'Moray'},\n                {name: 'Norfolk'},\n                {name: 'North East Lincolnshire'},\n                {name: 'North Lincolnshire'},\n                {name: 'North Somerset'},\n                {name: 'North Yorkshire'},\n                {name: 'Northamptonshire'},\n                {name: 'Northumberland'},\n                {name: 'Nottingham'},\n                {name: 'Nottinghamshire'},\n                {name: 'Oxfordshire'},\n                {name: 'Pembrokeshire'},\n                {name: 'Perth and Kinross'},\n                {name: 'Peterborough'},\n                {name: 'Plymouth'},\n                {name: 'Poole'},\n                {name: 'Portsmouth'},\n                {name: 'Powys'},\n                {name: 'Reading'},\n                {name: 'Redcar and Cleveland'},\n                {name: 'Rutland'},\n                {name: 'Scottish Borders'},\n                {name: 'Shropshire'},\n                {name: 'Slough'},\n                {name: 'Somerset'},\n                {name: 'South Glamorgan'},\n                {name: 'South Gloucestershire'},\n                {name: 'South Yorkshire'},\n                {name: 'Southampton'},\n                {name: 'Southend-on-Sea'},\n                {name: 'Staffordshire'},\n                {name: 'Stirlingshire'},\n                {name: 'Stockton-on-Tees'},\n                {name: 'Stoke-on-Trent'},\n                {name: 'Strathclyde'},\n                {name: 'Suffolk'},\n                {name: 'Surrey'},\n                {name: 'Swindon'},\n                {name: 'Telford and Wrekin'},\n                {name: 'Thurrock'},\n                {name: 'Torbay'},\n                {name: 'Tyne and Wear'},\n                {name: 'Warrington'},\n                {name: 'Warwickshire'},\n                {name: 'West Berkshire'},\n                {name: 'West Glamorgan'},\n                {name: 'West Lothian'},\n                {name: 'West Midlands'},\n                {name: 'West Sussex'},\n                {name: 'West Yorkshire'},\n                {name: 'Western Isles'},\n                {name: 'Wiltshire'},\n                {name: 'Windsor and Maidenhead'},\n                {name: 'Wokingham'},\n                {name: 'Worcestershire'},\n                {name: 'Wrexham'},\n                {name: 'York'}]\n                                },\n        provinces: {\n            \"ca\": [\n                {name: 'Alberta', abbreviation: 'AB'},\n                {name: 'British Columbia', abbreviation: 'BC'},\n                {name: 'Manitoba', abbreviation: 'MB'},\n                {name: 'New Brunswick', abbreviation: 'NB'},\n                {name: 'Newfoundland and Labrador', abbreviation: 'NL'},\n                {name: 'Nova Scotia', abbreviation: 'NS'},\n                {name: 'Ontario', abbreviation: 'ON'},\n                {name: 'Prince Edward Island', abbreviation: 'PE'},\n                {name: 'Quebec', abbreviation: 'QC'},\n                {name: 'Saskatchewan', abbreviation: 'SK'},\n\n                // The case could be made that the following are not actually provinces\n                // since they are technically considered \"territories\" however they all\n                // look the same on an envelope!\n                {name: 'Northwest Territories', abbreviation: 'NT'},\n                {name: 'Nunavut', abbreviation: 'NU'},\n                {name: 'Yukon', abbreviation: 'YT'}\n            ],\n            \"it\": [\n                { name: \"Agrigento\", abbreviation: \"AG\", code: 84 },\n                { name: \"Alessandria\", abbreviation: \"AL\", code: 6 },\n                { name: \"Ancona\", abbreviation: \"AN\", code: 42 },\n                { name: \"Aosta\", abbreviation: \"AO\", code: 7 },\n                { name: \"L'Aquila\", abbreviation: \"AQ\", code: 66 },\n                { name: \"Arezzo\", abbreviation: \"AR\", code: 51 },\n                { name: \"Ascoli-Piceno\", abbreviation: \"AP\", code: 44 },\n                { name: \"Asti\", abbreviation: \"AT\", code: 5 },\n                { name: \"Avellino\", abbreviation: \"AV\", code: 64 },\n                { name: \"Bari\", abbreviation: \"BA\", code: 72 },\n                { name: \"Barletta-Andria-Trani\", abbreviation: \"BT\", code: 72 },\n                { name: \"Belluno\", abbreviation: \"BL\", code: 25 },\n                { name: \"Benevento\", abbreviation: \"BN\", code: 62 },\n                { name: \"Bergamo\", abbreviation: \"BG\", code: 16 },\n                { name: \"Biella\", abbreviation: \"BI\", code: 96 },\n                { name: \"Bologna\", abbreviation: \"BO\", code: 37 },\n                { name: \"Bolzano\", abbreviation: \"BZ\", code: 21 },\n                { name: \"Brescia\", abbreviation: \"BS\", code: 17 },\n                { name: \"Brindisi\", abbreviation: \"BR\", code: 74 },\n                { name: \"Cagliari\", abbreviation: \"CA\", code: 92 },\n                { name: \"Caltanissetta\", abbreviation: \"CL\", code: 85 },\n                { name: \"Campobasso\", abbreviation: \"CB\", code: 70 },\n                { name: \"Carbonia Iglesias\", abbreviation: \"CI\", code: 70 },\n                { name: \"Caserta\", abbreviation: \"CE\", code: 61 },\n                { name: \"Catania\", abbreviation: \"CT\", code: 87 },\n                { name: \"Catanzaro\", abbreviation: \"CZ\", code: 79 },\n                { name: \"Chieti\", abbreviation: \"CH\", code: 69 },\n                { name: \"Como\", abbreviation: \"CO\", code: 13 },\n                { name: \"Cosenza\", abbreviation: \"CS\", code: 78 },\n                { name: \"Cremona\", abbreviation: \"CR\", code: 19 },\n                { name: \"Crotone\", abbreviation: \"KR\", code: 101 },\n                { name: \"Cuneo\", abbreviation: \"CN\", code: 4 },\n                { name: \"Enna\", abbreviation: \"EN\", code: 86 },\n                { name: \"Fermo\", abbreviation: \"FM\", code: 86 },\n                { name: \"Ferrara\", abbreviation: \"FE\", code: 38 },\n                { name: \"Firenze\", abbreviation: \"FI\", code: 48 },\n                { name: \"Foggia\", abbreviation: \"FG\", code: 71 },\n                { name: \"Forli-Cesena\", abbreviation: \"FC\", code: 71 },\n                { name: \"Frosinone\", abbreviation: \"FR\", code: 60 },\n                { name: \"Genova\", abbreviation: \"GE\", code: 10 },\n                { name: \"Gorizia\", abbreviation: \"GO\", code: 31 },\n                { name: \"Grosseto\", abbreviation: \"GR\", code: 53 },\n                { name: \"Imperia\", abbreviation: \"IM\", code: 8 },\n                { name: \"Isernia\", abbreviation: \"IS\", code: 94 },\n                { name: \"La-Spezia\", abbreviation: \"SP\", code: 66 },\n                { name: \"Latina\", abbreviation: \"LT\", code: 59 },\n                { name: \"Lecce\", abbreviation: \"LE\", code: 75 },\n                { name: \"Lecco\", abbreviation: \"LC\", code: 97 },\n                { name: \"Livorno\", abbreviation: \"LI\", code: 49 },\n                { name: \"Lodi\", abbreviation: \"LO\", code: 98 },\n                { name: \"Lucca\", abbreviation: \"LU\", code: 46 },\n                { name: \"Macerata\", abbreviation: \"MC\", code: 43 },\n                { name: \"Mantova\", abbreviation: \"MN\", code: 20 },\n                { name: \"Massa-Carrara\", abbreviation: \"MS\", code: 45 },\n                { name: \"Matera\", abbreviation: \"MT\", code: 77 },\n                { name: \"Medio Campidano\", abbreviation: \"VS\", code: 77 },\n                { name: \"Messina\", abbreviation: \"ME\", code: 83 },\n                { name: \"Milano\", abbreviation: \"MI\", code: 15 },\n                { name: \"Modena\", abbreviation: \"MO\", code: 36 },\n                { name: \"Monza-Brianza\", abbreviation: \"MB\", code: 36 },\n                { name: \"Napoli\", abbreviation: \"NA\", code: 63 },\n                { name: \"Novara\", abbreviation: \"NO\", code: 3 },\n                { name: \"Nuoro\", abbreviation: \"NU\", code: 91 },\n                { name: \"Ogliastra\", abbreviation: \"OG\", code: 91 },\n                { name: \"Olbia Tempio\", abbreviation: \"OT\", code: 91 },\n                { name: \"Oristano\", abbreviation: \"OR\", code: 95 },\n                { name: \"Padova\", abbreviation: \"PD\", code: 28 },\n                { name: \"Palermo\", abbreviation: \"PA\", code: 82 },\n                { name: \"Parma\", abbreviation: \"PR\", code: 34 },\n                { name: \"Pavia\", abbreviation: \"PV\", code: 18 },\n                { name: \"Perugia\", abbreviation: \"PG\", code: 54 },\n                { name: \"Pesaro-Urbino\", abbreviation: \"PU\", code: 41 },\n                { name: \"Pescara\", abbreviation: \"PE\", code: 68 },\n                { name: \"Piacenza\", abbreviation: \"PC\", code: 33 },\n                { name: \"Pisa\", abbreviation: \"PI\", code: 50 },\n                { name: \"Pistoia\", abbreviation: \"PT\", code: 47 },\n                { name: \"Pordenone\", abbreviation: \"PN\", code: 93 },\n                { name: \"Potenza\", abbreviation: \"PZ\", code: 76 },\n                { name: \"Prato\", abbreviation: \"PO\", code: 100 },\n                { name: \"Ragusa\", abbreviation: \"RG\", code: 88 },\n                { name: \"Ravenna\", abbreviation: \"RA\", code: 39 },\n                { name: \"Reggio-Calabria\", abbreviation: \"RC\", code: 35 },\n                { name: \"Reggio-Emilia\", abbreviation: \"RE\", code: 35 },\n                { name: \"Rieti\", abbreviation: \"RI\", code: 57 },\n                { name: \"Rimini\", abbreviation: \"RN\", code: 99 },\n                { name: \"Roma\", abbreviation: \"Roma\", code: 58 },\n                { name: \"Rovigo\", abbreviation: \"RO\", code: 29 },\n                { name: \"Salerno\", abbreviation: \"SA\", code: 65 },\n                { name: \"Sassari\", abbreviation: \"SS\", code: 90 },\n                { name: \"Savona\", abbreviation: \"SV\", code: 9 },\n                { name: \"Siena\", abbreviation: \"SI\", code: 52 },\n                { name: \"Siracusa\", abbreviation: \"SR\", code: 89 },\n                { name: \"Sondrio\", abbreviation: \"SO\", code: 14 },\n                { name: \"Taranto\", abbreviation: \"TA\", code: 73 },\n                { name: \"Teramo\", abbreviation: \"TE\", code: 67 },\n                { name: \"Terni\", abbreviation: \"TR\", code: 55 },\n                { name: \"Torino\", abbreviation: \"TO\", code: 1 },\n                { name: \"Trapani\", abbreviation: \"TP\", code: 81 },\n                { name: \"Trento\", abbreviation: \"TN\", code: 22 },\n                { name: \"Treviso\", abbreviation: \"TV\", code: 26 },\n                { name: \"Trieste\", abbreviation: \"TS\", code: 32 },\n                { name: \"Udine\", abbreviation: \"UD\", code: 30 },\n                { name: \"Varese\", abbreviation: \"VA\", code: 12 },\n                { name: \"Venezia\", abbreviation: \"VE\", code: 27 },\n                { name: \"Verbania\", abbreviation: \"VB\", code: 27 },\n                { name: \"Vercelli\", abbreviation: \"VC\", code: 2 },\n                { name: \"Verona\", abbreviation: \"VR\", code: 23 },\n                { name: \"Vibo-Valentia\", abbreviation: \"VV\", code: 102 },\n                { name: \"Vicenza\", abbreviation: \"VI\", code: 24 },\n                { name: \"Viterbo\", abbreviation: \"VT\", code: 56 }\n            ]\n        },\n\n            // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json\n        nationalities: [\n           {name: 'Afghan'},\n           {name: 'Albanian'},\n           {name: 'Algerian'},\n           {name: 'American'},\n           {name: 'Andorran'},\n           {name: 'Angolan'},\n           {name: 'Antiguans'},\n           {name: 'Argentinean'},\n           {name: 'Armenian'},\n           {name: 'Australian'},\n           {name: 'Austrian'},\n           {name: 'Azerbaijani'},\n           {name: 'Bahami'},\n           {name: 'Bahraini'},\n           {name: 'Bangladeshi'},\n           {name: 'Barbadian'},\n           {name: 'Barbudans'},\n           {name: 'Batswana'},\n           {name: 'Belarusian'},\n           {name: 'Belgian'},\n           {name: 'Belizean'},\n           {name: 'Beninese'},\n           {name: 'Bhutanese'},\n           {name: 'Bolivian'},\n           {name: 'Bosnian'},\n           {name: 'Brazilian'},\n           {name: 'British'},\n           {name: 'Bruneian'},\n           {name: 'Bulgarian'},\n           {name: 'Burkinabe'},\n           {name: 'Burmese'},\n           {name: 'Burundian'},\n           {name: 'Cambodian'},\n           {name: 'Cameroonian'},\n           {name: 'Canadian'},\n           {name: 'Cape Verdean'},\n           {name: 'Central African'},\n           {name: 'Chadian'},\n           {name: 'Chilean'},\n           {name: 'Chinese'},\n           {name: 'Colombian'},\n           {name: 'Comoran'},\n           {name: 'Congolese'},\n           {name: 'Costa Rican'},\n           {name: 'Croatian'},\n           {name: 'Cuban'},\n           {name: 'Cypriot'},\n           {name: 'Czech'},\n           {name: 'Danish'},\n           {name: 'Djibouti'},\n           {name: 'Dominican'},\n           {name: 'Dutch'},\n           {name: 'East Timorese'},\n           {name: 'Ecuadorean'},\n           {name: 'Egyptian'},\n           {name: 'Emirian'},\n           {name: 'Equatorial Guinean'},\n           {name: 'Eritrean'},\n           {name: 'Estonian'},\n           {name: 'Ethiopian'},\n           {name: 'Fijian'},\n           {name: 'Filipino'},\n           {name: 'Finnish'},\n           {name: 'French'},\n           {name: 'Gabonese'},\n           {name: 'Gambian'},\n           {name: 'Georgian'},\n           {name: 'German'},\n           {name: 'Ghanaian'},\n           {name: 'Greek'},\n           {name: 'Grenadian'},\n           {name: 'Guatemalan'},\n           {name: 'Guinea-Bissauan'},\n           {name: 'Guinean'},\n           {name: 'Guyanese'},\n           {name: 'Haitian'},\n           {name: 'Herzegovinian'},\n           {name: 'Honduran'},\n           {name: 'Hungarian'},\n           {name: 'I-Kiribati'},\n           {name: 'Icelander'},\n           {name: 'Indian'},\n           {name: 'Indonesian'},\n           {name: 'Iranian'},\n           {name: 'Iraqi'},\n           {name: 'Irish'},\n           {name: 'Israeli'},\n           {name: 'Italian'},\n           {name: 'Ivorian'},\n           {name: 'Jamaican'},\n           {name: 'Japanese'},\n           {name: 'Jordanian'},\n           {name: 'Kazakhstani'},\n           {name: 'Kenyan'},\n           {name: 'Kittian and Nevisian'},\n           {name: 'Kuwaiti'},\n           {name: 'Kyrgyz'},\n           {name: 'Laotian'},\n           {name: 'Latvian'},\n           {name: 'Lebanese'},\n           {name: 'Liberian'},\n           {name: 'Libyan'},\n           {name: 'Liechtensteiner'},\n           {name: 'Lithuanian'},\n           {name: 'Luxembourger'},\n           {name: 'Macedonian'},\n           {name: 'Malagasy'},\n           {name: 'Malawian'},\n           {name: 'Malaysian'},\n           {name: 'Maldivan'},\n           {name: 'Malian'},\n           {name: 'Maltese'},\n           {name: 'Marshallese'},\n           {name: 'Mauritanian'},\n           {name: 'Mauritian'},\n           {name: 'Mexican'},\n           {name: 'Micronesian'},\n           {name: 'Moldovan'},\n           {name: 'Monacan'},\n           {name: 'Mongolian'},\n           {name: 'Moroccan'},\n           {name: 'Mosotho'},\n           {name: 'Motswana'},\n           {name: 'Mozambican'},\n           {name: 'Namibian'},\n           {name: 'Nauruan'},\n           {name: 'Nepalese'},\n           {name: 'New Zealander'},\n           {name: 'Nicaraguan'},\n           {name: 'Nigerian'},\n           {name: 'Nigerien'},\n           {name: 'North Korean'},\n           {name: 'Northern Irish'},\n           {name: 'Norwegian'},\n           {name: 'Omani'},\n           {name: 'Pakistani'},\n           {name: 'Palauan'},\n           {name: 'Panamanian'},\n           {name: 'Papua New Guinean'},\n           {name: 'Paraguayan'},\n           {name: 'Peruvian'},\n           {name: 'Polish'},\n           {name: 'Portuguese'},\n           {name: 'Qatari'},\n           {name: 'Romani'},\n           {name: 'Russian'},\n           {name: 'Rwandan'},\n           {name: 'Saint Lucian'},\n           {name: 'Salvadoran'},\n           {name: 'Samoan'},\n           {name: 'San Marinese'},\n           {name: 'Sao Tomean'},\n           {name: 'Saudi'},\n           {name: 'Scottish'},\n           {name: 'Senegalese'},\n           {name: 'Serbian'},\n           {name: 'Seychellois'},\n           {name: 'Sierra Leonean'},\n           {name: 'Singaporean'},\n           {name: 'Slovakian'},\n           {name: 'Slovenian'},\n           {name: 'Solomon Islander'},\n           {name: 'Somali'},\n           {name: 'South African'},\n           {name: 'South Korean'},\n           {name: 'Spanish'},\n           {name: 'Sri Lankan'},\n           {name: 'Sudanese'},\n           {name: 'Surinamer'},\n           {name: 'Swazi'},\n           {name: 'Swedish'},\n           {name: 'Swiss'},\n           {name: 'Syrian'},\n           {name: 'Taiwanese'},\n           {name: 'Tajik'},\n           {name: 'Tanzanian'},\n           {name: 'Thai'},\n           {name: 'Togolese'},\n           {name: 'Tongan'},\n           {name: 'Trinidadian or Tobagonian'},\n           {name: 'Tunisian'},\n           {name: 'Turkish'},\n           {name: 'Tuvaluan'},\n           {name: 'Ugandan'},\n           {name: 'Ukrainian'},\n           {name: 'Uruguaya'},\n           {name: 'Uzbekistani'},\n           {name: 'Venezuela'},\n           {name: 'Vietnamese'},\n           {name: 'Wels'},\n           {name: 'Yemenit'},\n           {name: 'Zambia'},\n           {name: 'Zimbabwe'},\n        ],\n          // http://www.loc.gov/standards/iso639-2/php/code_list.php (ISO-639-1 codes)\n        locale_languages: [\n          \"aa\",\n          \"ab\",\n          \"ae\",\n          \"af\",\n          \"ak\",\n          \"am\",\n          \"an\",\n          \"ar\",\n          \"as\",\n          \"av\",\n          \"ay\",\n          \"az\",\n          \"ba\",\n          \"be\",\n          \"bg\",\n          \"bh\",\n          \"bi\",\n          \"bm\",\n          \"bn\",\n          \"bo\",\n          \"br\",\n          \"bs\",\n          \"ca\",\n          \"ce\",\n          \"ch\",\n          \"co\",\n          \"cr\",\n          \"cs\",\n          \"cu\",\n          \"cv\",\n          \"cy\",\n          \"da\",\n          \"de\",\n          \"dv\",\n          \"dz\",\n          \"ee\",\n          \"el\",\n          \"en\",\n          \"eo\",\n          \"es\",\n          \"et\",\n          \"eu\",\n          \"fa\",\n          \"ff\",\n          \"fi\",\n          \"fj\",\n          \"fo\",\n          \"fr\",\n          \"fy\",\n          \"ga\",\n          \"gd\",\n          \"gl\",\n          \"gn\",\n          \"gu\",\n          \"gv\",\n          \"ha\",\n          \"he\",\n          \"hi\",\n          \"ho\",\n          \"hr\",\n          \"ht\",\n          \"hu\",\n          \"hy\",\n          \"hz\",\n          \"ia\",\n          \"id\",\n          \"ie\",\n          \"ig\",\n          \"ii\",\n          \"ik\",\n          \"io\",\n          \"is\",\n          \"it\",\n          \"iu\",\n          \"ja\",\n          \"jv\",\n          \"ka\",\n          \"kg\",\n          \"ki\",\n          \"kj\",\n          \"kk\",\n          \"kl\",\n          \"km\",\n          \"kn\",\n          \"ko\",\n          \"kr\",\n          \"ks\",\n          \"ku\",\n          \"kv\",\n          \"kw\",\n          \"ky\",\n          \"la\",\n          \"lb\",\n          \"lg\",\n          \"li\",\n          \"ln\",\n          \"lo\",\n          \"lt\",\n          \"lu\",\n          \"lv\",\n          \"mg\",\n          \"mh\",\n          \"mi\",\n          \"mk\",\n          \"ml\",\n          \"mn\",\n          \"mr\",\n          \"ms\",\n          \"mt\",\n          \"my\",\n          \"na\",\n          \"nb\",\n          \"nd\",\n          \"ne\",\n          \"ng\",\n          \"nl\",\n          \"nn\",\n          \"no\",\n          \"nr\",\n          \"nv\",\n          \"ny\",\n          \"oc\",\n          \"oj\",\n          \"om\",\n          \"or\",\n          \"os\",\n          \"pa\",\n          \"pi\",\n          \"pl\",\n          \"ps\",\n          \"pt\",\n          \"qu\",\n          \"rm\",\n          \"rn\",\n          \"ro\",\n          \"ru\",\n          \"rw\",\n          \"sa\",\n          \"sc\",\n          \"sd\",\n          \"se\",\n          \"sg\",\n          \"si\",\n          \"sk\",\n          \"sl\",\n          \"sm\",\n          \"sn\",\n          \"so\",\n          \"sq\",\n          \"sr\",\n          \"ss\",\n          \"st\",\n          \"su\",\n          \"sv\",\n          \"sw\",\n          \"ta\",\n          \"te\",\n          \"tg\",\n          \"th\",\n          \"ti\",\n          \"tk\",\n          \"tl\",\n          \"tn\",\n          \"to\",\n          \"tr\",\n          \"ts\",\n          \"tt\",\n          \"tw\",\n          \"ty\",\n          \"ug\",\n          \"uk\",\n          \"ur\",\n          \"uz\",\n          \"ve\",\n          \"vi\",\n          \"vo\",\n          \"wa\",\n          \"wo\",\n          \"xh\",\n          \"yi\",\n          \"yo\",\n          \"za\",\n          \"zh\",\n          \"zu\"\n        ],\n\n        // From http://data.okfn.org/data/core/language-codes#resource-language-codes-full (IETF language tags)\n        locale_regions: [\n          \"agq-CM\",\n          \"asa-TZ\",\n          \"ast-ES\",\n          \"bas-CM\",\n          \"bem-ZM\",\n          \"bez-TZ\",\n          \"brx-IN\",\n          \"cgg-UG\",\n          \"chr-US\",\n          \"dav-KE\",\n          \"dje-NE\",\n          \"dsb-DE\",\n          \"dua-CM\",\n          \"dyo-SN\",\n          \"ebu-KE\",\n          \"ewo-CM\",\n          \"fil-PH\",\n          \"fur-IT\",\n          \"gsw-CH\",\n          \"gsw-FR\",\n          \"gsw-LI\",\n          \"guz-KE\",\n          \"haw-US\",\n          \"hsb-DE\",\n          \"jgo-CM\",\n          \"jmc-TZ\",\n          \"kab-DZ\",\n          \"kam-KE\",\n          \"kde-TZ\",\n          \"kea-CV\",\n          \"khq-ML\",\n          \"kkj-CM\",\n          \"kln-KE\",\n          \"kok-IN\",\n          \"ksb-TZ\",\n          \"ksf-CM\",\n          \"ksh-DE\",\n          \"lag-TZ\",\n          \"lkt-US\",\n          \"luo-KE\",\n          \"luy-KE\",\n          \"mas-KE\",\n          \"mas-TZ\",\n          \"mer-KE\",\n          \"mfe-MU\",\n          \"mgh-MZ\",\n          \"mgo-CM\",\n          \"mua-CM\",\n          \"naq-NA\",\n          \"nmg-CM\",\n          \"nnh-CM\",\n          \"nus-SD\",\n          \"nyn-UG\",\n          \"rof-TZ\",\n          \"rwk-TZ\",\n          \"sah-RU\",\n          \"saq-KE\",\n          \"sbp-TZ\",\n          \"seh-MZ\",\n          \"ses-ML\",\n          \"shi-Latn\",\n          \"shi-Latn-MA\",\n          \"shi-Tfng\",\n          \"shi-Tfng-MA\",\n          \"smn-FI\",\n          \"teo-KE\",\n          \"teo-UG\",\n          \"twq-NE\",\n          \"tzm-Latn\",\n          \"tzm-Latn-MA\",\n          \"vai-Latn\",\n          \"vai-Latn-LR\",\n          \"vai-Vaii\",\n          \"vai-Vaii-LR\",\n          \"vun-TZ\",\n          \"wae-CH\",\n          \"xog-UG\",\n          \"yav-CM\",\n          \"zgh-MA\",\n          \"af-NA\",\n          \"af-ZA\",\n          \"ak-GH\",\n          \"am-ET\",\n          \"ar-001\",\n          \"ar-AE\",\n          \"ar-BH\",\n          \"ar-DJ\",\n          \"ar-DZ\",\n          \"ar-EG\",\n          \"ar-EH\",\n          \"ar-ER\",\n          \"ar-IL\",\n          \"ar-IQ\",\n          \"ar-JO\",\n          \"ar-KM\",\n          \"ar-KW\",\n          \"ar-LB\",\n          \"ar-LY\",\n          \"ar-MA\",\n          \"ar-MR\",\n          \"ar-OM\",\n          \"ar-PS\",\n          \"ar-QA\",\n          \"ar-SA\",\n          \"ar-SD\",\n          \"ar-SO\",\n          \"ar-SS\",\n          \"ar-SY\",\n          \"ar-TD\",\n          \"ar-TN\",\n          \"ar-YE\",\n          \"as-IN\",\n          \"az-Cyrl\",\n          \"az-Cyrl-AZ\",\n          \"az-Latn\",\n          \"az-Latn-AZ\",\n          \"be-BY\",\n          \"bg-BG\",\n          \"bm-Latn\",\n          \"bm-Latn-ML\",\n          \"bn-BD\",\n          \"bn-IN\",\n          \"bo-CN\",\n          \"bo-IN\",\n          \"br-FR\",\n          \"bs-Cyrl\",\n          \"bs-Cyrl-BA\",\n          \"bs-Latn\",\n          \"bs-Latn-BA\",\n          \"ca-AD\",\n          \"ca-ES\",\n          \"ca-ES-VALENCIA\",\n          \"ca-FR\",\n          \"ca-IT\",\n          \"cs-CZ\",\n          \"cy-GB\",\n          \"da-DK\",\n          \"da-GL\",\n          \"de-AT\",\n          \"de-BE\",\n          \"de-CH\",\n          \"de-DE\",\n          \"de-LI\",\n          \"de-LU\",\n          \"dz-BT\",\n          \"ee-GH\",\n          \"ee-TG\",\n          \"el-CY\",\n          \"el-GR\",\n          \"en-001\",\n          \"en-150\",\n          \"en-AG\",\n          \"en-AI\",\n          \"en-AS\",\n          \"en-AU\",\n          \"en-BB\",\n          \"en-BE\",\n          \"en-BM\",\n          \"en-BS\",\n          \"en-BW\",\n          \"en-BZ\",\n          \"en-CA\",\n          \"en-CC\",\n          \"en-CK\",\n          \"en-CM\",\n          \"en-CX\",\n          \"en-DG\",\n          \"en-DM\",\n          \"en-ER\",\n          \"en-FJ\",\n          \"en-FK\",\n          \"en-FM\",\n          \"en-GB\",\n          \"en-GD\",\n          \"en-GG\",\n          \"en-GH\",\n          \"en-GI\",\n          \"en-GM\",\n          \"en-GU\",\n          \"en-GY\",\n          \"en-HK\",\n          \"en-IE\",\n          \"en-IM\",\n          \"en-IN\",\n          \"en-IO\",\n          \"en-JE\",\n          \"en-JM\",\n          \"en-KE\",\n          \"en-KI\",\n          \"en-KN\",\n          \"en-KY\",\n          \"en-LC\",\n          \"en-LR\",\n          \"en-LS\",\n          \"en-MG\",\n          \"en-MH\",\n          \"en-MO\",\n          \"en-MP\",\n          \"en-MS\",\n          \"en-MT\",\n          \"en-MU\",\n          \"en-MW\",\n          \"en-MY\",\n          \"en-NA\",\n          \"en-NF\",\n          \"en-NG\",\n          \"en-NR\",\n          \"en-NU\",\n          \"en-NZ\",\n          \"en-PG\",\n          \"en-PH\",\n          \"en-PK\",\n          \"en-PN\",\n          \"en-PR\",\n          \"en-PW\",\n          \"en-RW\",\n          \"en-SB\",\n          \"en-SC\",\n          \"en-SD\",\n          \"en-SG\",\n          \"en-SH\",\n          \"en-SL\",\n          \"en-SS\",\n          \"en-SX\",\n          \"en-SZ\",\n          \"en-TC\",\n          \"en-TK\",\n          \"en-TO\",\n          \"en-TT\",\n          \"en-TV\",\n          \"en-TZ\",\n          \"en-UG\",\n          \"en-UM\",\n          \"en-US\",\n          \"en-US-POSIX\",\n          \"en-VC\",\n          \"en-VG\",\n          \"en-VI\",\n          \"en-VU\",\n          \"en-WS\",\n          \"en-ZA\",\n          \"en-ZM\",\n          \"en-ZW\",\n          \"eo-001\",\n          \"es-419\",\n          \"es-AR\",\n          \"es-BO\",\n          \"es-CL\",\n          \"es-CO\",\n          \"es-CR\",\n          \"es-CU\",\n          \"es-DO\",\n          \"es-EA\",\n          \"es-EC\",\n          \"es-ES\",\n          \"es-GQ\",\n          \"es-GT\",\n          \"es-HN\",\n          \"es-IC\",\n          \"es-MX\",\n          \"es-NI\",\n          \"es-PA\",\n          \"es-PE\",\n          \"es-PH\",\n          \"es-PR\",\n          \"es-PY\",\n          \"es-SV\",\n          \"es-US\",\n          \"es-UY\",\n          \"es-VE\",\n          \"et-EE\",\n          \"eu-ES\",\n          \"fa-AF\",\n          \"fa-IR\",\n          \"ff-CM\",\n          \"ff-GN\",\n          \"ff-MR\",\n          \"ff-SN\",\n          \"fi-FI\",\n          \"fo-FO\",\n          \"fr-BE\",\n          \"fr-BF\",\n          \"fr-BI\",\n          \"fr-BJ\",\n          \"fr-BL\",\n          \"fr-CA\",\n          \"fr-CD\",\n          \"fr-CF\",\n          \"fr-CG\",\n          \"fr-CH\",\n          \"fr-CI\",\n          \"fr-CM\",\n          \"fr-DJ\",\n          \"fr-DZ\",\n          \"fr-FR\",\n          \"fr-GA\",\n          \"fr-GF\",\n          \"fr-GN\",\n          \"fr-GP\",\n          \"fr-GQ\",\n          \"fr-HT\",\n          \"fr-KM\",\n          \"fr-LU\",\n          \"fr-MA\",\n          \"fr-MC\",\n          \"fr-MF\",\n          \"fr-MG\",\n          \"fr-ML\",\n          \"fr-MQ\",\n          \"fr-MR\",\n          \"fr-MU\",\n          \"fr-NC\",\n          \"fr-NE\",\n          \"fr-PF\",\n          \"fr-PM\",\n          \"fr-RE\",\n          \"fr-RW\",\n          \"fr-SC\",\n          \"fr-SN\",\n          \"fr-SY\",\n          \"fr-TD\",\n          \"fr-TG\",\n          \"fr-TN\",\n          \"fr-VU\",\n          \"fr-WF\",\n          \"fr-YT\",\n          \"fy-NL\",\n          \"ga-IE\",\n          \"gd-GB\",\n          \"gl-ES\",\n          \"gu-IN\",\n          \"gv-IM\",\n          \"ha-Latn\",\n          \"ha-Latn-GH\",\n          \"ha-Latn-NE\",\n          \"ha-Latn-NG\",\n          \"he-IL\",\n          \"hi-IN\",\n          \"hr-BA\",\n          \"hr-HR\",\n          \"hu-HU\",\n          \"hy-AM\",\n          \"id-ID\",\n          \"ig-NG\",\n          \"ii-CN\",\n          \"is-IS\",\n          \"it-CH\",\n          \"it-IT\",\n          \"it-SM\",\n          \"ja-JP\",\n          \"ka-GE\",\n          \"ki-KE\",\n          \"kk-Cyrl\",\n          \"kk-Cyrl-KZ\",\n          \"kl-GL\",\n          \"km-KH\",\n          \"kn-IN\",\n          \"ko-KP\",\n          \"ko-KR\",\n          \"ks-Arab\",\n          \"ks-Arab-IN\",\n          \"kw-GB\",\n          \"ky-Cyrl\",\n          \"ky-Cyrl-KG\",\n          \"lb-LU\",\n          \"lg-UG\",\n          \"ln-AO\",\n          \"ln-CD\",\n          \"ln-CF\",\n          \"ln-CG\",\n          \"lo-LA\",\n          \"lt-LT\",\n          \"lu-CD\",\n          \"lv-LV\",\n          \"mg-MG\",\n          \"mk-MK\",\n          \"ml-IN\",\n          \"mn-Cyrl\",\n          \"mn-Cyrl-MN\",\n          \"mr-IN\",\n          \"ms-Latn\",\n          \"ms-Latn-BN\",\n          \"ms-Latn-MY\",\n          \"ms-Latn-SG\",\n          \"mt-MT\",\n          \"my-MM\",\n          \"nb-NO\",\n          \"nb-SJ\",\n          \"nd-ZW\",\n          \"ne-IN\",\n          \"ne-NP\",\n          \"nl-AW\",\n          \"nl-BE\",\n          \"nl-BQ\",\n          \"nl-CW\",\n          \"nl-NL\",\n          \"nl-SR\",\n          \"nl-SX\",\n          \"nn-NO\",\n          \"om-ET\",\n          \"om-KE\",\n          \"or-IN\",\n          \"os-GE\",\n          \"os-RU\",\n          \"pa-Arab\",\n          \"pa-Arab-PK\",\n          \"pa-Guru\",\n          \"pa-Guru-IN\",\n          \"pl-PL\",\n          \"ps-AF\",\n          \"pt-AO\",\n          \"pt-BR\",\n          \"pt-CV\",\n          \"pt-GW\",\n          \"pt-MO\",\n          \"pt-MZ\",\n          \"pt-PT\",\n          \"pt-ST\",\n          \"pt-TL\",\n          \"qu-BO\",\n          \"qu-EC\",\n          \"qu-PE\",\n          \"rm-CH\",\n          \"rn-BI\",\n          \"ro-MD\",\n          \"ro-RO\",\n          \"ru-BY\",\n          \"ru-KG\",\n          \"ru-KZ\",\n          \"ru-MD\",\n          \"ru-RU\",\n          \"ru-UA\",\n          \"rw-RW\",\n          \"se-FI\",\n          \"se-NO\",\n          \"se-SE\",\n          \"sg-CF\",\n          \"si-LK\",\n          \"sk-SK\",\n          \"sl-SI\",\n          \"sn-ZW\",\n          \"so-DJ\",\n          \"so-ET\",\n          \"so-KE\",\n          \"so-SO\",\n          \"sq-AL\",\n          \"sq-MK\",\n          \"sq-XK\",\n          \"sr-Cyrl\",\n          \"sr-Cyrl-BA\",\n          \"sr-Cyrl-ME\",\n          \"sr-Cyrl-RS\",\n          \"sr-Cyrl-XK\",\n          \"sr-Latn\",\n          \"sr-Latn-BA\",\n          \"sr-Latn-ME\",\n          \"sr-Latn-RS\",\n          \"sr-Latn-XK\",\n          \"sv-AX\",\n          \"sv-FI\",\n          \"sv-SE\",\n          \"sw-CD\",\n          \"sw-KE\",\n          \"sw-TZ\",\n          \"sw-UG\",\n          \"ta-IN\",\n          \"ta-LK\",\n          \"ta-MY\",\n          \"ta-SG\",\n          \"te-IN\",\n          \"th-TH\",\n          \"ti-ER\",\n          \"ti-ET\",\n          \"to-TO\",\n          \"tr-CY\",\n          \"tr-TR\",\n          \"ug-Arab\",\n          \"ug-Arab-CN\",\n          \"uk-UA\",\n          \"ur-IN\",\n          \"ur-PK\",\n          \"uz-Arab\",\n          \"uz-Arab-AF\",\n          \"uz-Cyrl\",\n          \"uz-Cyrl-UZ\",\n          \"uz-Latn\",\n          \"uz-Latn-UZ\",\n          \"vi-VN\",\n          \"yi-001\",\n          \"yo-BJ\",\n          \"yo-NG\",\n          \"zh-Hans\",\n          \"zh-Hans-CN\",\n          \"zh-Hans-HK\",\n          \"zh-Hans-MO\",\n          \"zh-Hans-SG\",\n          \"zh-Hant\",\n          \"zh-Hant-HK\",\n          \"zh-Hant-MO\",\n          \"zh-Hant-TW\",\n          \"zu-ZA\"\n        ],\n\n        us_states_and_dc: [\n            {name: 'Alabama', abbreviation: 'AL'},\n            {name: 'Alaska', abbreviation: 'AK'},\n            {name: 'Arizona', abbreviation: 'AZ'},\n            {name: 'Arkansas', abbreviation: 'AR'},\n            {name: 'California', abbreviation: 'CA'},\n            {name: 'Colorado', abbreviation: 'CO'},\n            {name: 'Connecticut', abbreviation: 'CT'},\n            {name: 'Delaware', abbreviation: 'DE'},\n            {name: 'District of Columbia', abbreviation: 'DC'},\n            {name: 'Florida', abbreviation: 'FL'},\n            {name: 'Georgia', abbreviation: 'GA'},\n            {name: 'Hawaii', abbreviation: 'HI'},\n            {name: 'Idaho', abbreviation: 'ID'},\n            {name: 'Illinois', abbreviation: 'IL'},\n            {name: 'Indiana', abbreviation: 'IN'},\n            {name: 'Iowa', abbreviation: 'IA'},\n            {name: 'Kansas', abbreviation: 'KS'},\n            {name: 'Kentucky', abbreviation: 'KY'},\n            {name: 'Louisiana', abbreviation: 'LA'},\n            {name: 'Maine', abbreviation: 'ME'},\n            {name: 'Maryland', abbreviation: 'MD'},\n            {name: 'Massachusetts', abbreviation: 'MA'},\n            {name: 'Michigan', abbreviation: 'MI'},\n            {name: 'Minnesota', abbreviation: 'MN'},\n            {name: 'Mississippi', abbreviation: 'MS'},\n            {name: 'Missouri', abbreviation: 'MO'},\n            {name: 'Montana', abbreviation: 'MT'},\n            {name: 'Nebraska', abbreviation: 'NE'},\n            {name: 'Nevada', abbreviation: 'NV'},\n            {name: 'New Hampshire', abbreviation: 'NH'},\n            {name: 'New Jersey', abbreviation: 'NJ'},\n            {name: 'New Mexico', abbreviation: 'NM'},\n            {name: 'New York', abbreviation: 'NY'},\n            {name: 'North Carolina', abbreviation: 'NC'},\n            {name: 'North Dakota', abbreviation: 'ND'},\n            {name: 'Ohio', abbreviation: 'OH'},\n            {name: 'Oklahoma', abbreviation: 'OK'},\n            {name: 'Oregon', abbreviation: 'OR'},\n            {name: 'Pennsylvania', abbreviation: 'PA'},\n            {name: 'Rhode Island', abbreviation: 'RI'},\n            {name: 'South Carolina', abbreviation: 'SC'},\n            {name: 'South Dakota', abbreviation: 'SD'},\n            {name: 'Tennessee', abbreviation: 'TN'},\n            {name: 'Texas', abbreviation: 'TX'},\n            {name: 'Utah', abbreviation: 'UT'},\n            {name: 'Vermont', abbreviation: 'VT'},\n            {name: 'Virginia', abbreviation: 'VA'},\n            {name: 'Washington', abbreviation: 'WA'},\n            {name: 'West Virginia', abbreviation: 'WV'},\n            {name: 'Wisconsin', abbreviation: 'WI'},\n            {name: 'Wyoming', abbreviation: 'WY'}\n        ],\n\n        territories: [\n            {name: 'American Samoa', abbreviation: 'AS'},\n            {name: 'Federated States of Micronesia', abbreviation: 'FM'},\n            {name: 'Guam', abbreviation: 'GU'},\n            {name: 'Marshall Islands', abbreviation: 'MH'},\n            {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n            {name: 'Puerto Rico', abbreviation: 'PR'},\n            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}\n        ],\n\n        armed_forces: [\n            {name: 'Armed Forces Europe', abbreviation: 'AE'},\n            {name: 'Armed Forces Pacific', abbreviation: 'AP'},\n            {name: 'Armed Forces the Americas', abbreviation: 'AA'}\n        ],\n\n        country_regions: {\n            it: [\n                { name: \"Valle d'Aosta\", abbreviation: \"VDA\" },\n                { name: \"Piemonte\", abbreviation: \"PIE\" },\n                { name: \"Lombardia\", abbreviation: \"LOM\" },\n                { name: \"Veneto\", abbreviation: \"VEN\" },\n                { name: \"Trentino Alto Adige\", abbreviation: \"TAA\" },\n                { name: \"Friuli Venezia Giulia\", abbreviation: \"FVG\" },\n                { name: \"Liguria\", abbreviation: \"LIG\" },\n                { name: \"Emilia Romagna\", abbreviation: \"EMR\" },\n                { name: \"Toscana\", abbreviation: \"TOS\" },\n                { name: \"Umbria\", abbreviation: \"UMB\" },\n                { name: \"Marche\", abbreviation: \"MAR\" },\n                { name: \"Abruzzo\", abbreviation: \"ABR\" },\n                { name: \"Lazio\", abbreviation: \"LAZ\" },\n                { name: \"Campania\", abbreviation: \"CAM\" },\n                { name: \"Puglia\", abbreviation: \"PUG\" },\n                { name: \"Basilicata\", abbreviation: \"BAS\" },\n                { name: \"Molise\", abbreviation: \"MOL\" },\n                { name: \"Calabria\", abbreviation: \"CAL\" },\n                { name: \"Sicilia\", abbreviation: \"SIC\" },\n                { name: \"Sardegna\", abbreviation: \"SAR\" }\n            ],\n            mx: [\n                { name: 'Aguascalientes', abbreviation: 'AGU' },\n                { name: 'Baja California', abbreviation: 'BCN' },\n                { name: 'Baja California Sur', abbreviation: 'BCS' },\n                { name: 'Campeche', abbreviation: 'CAM' },\n                { name: 'Chiapas', abbreviation: 'CHP' },\n                { name: 'Chihuahua', abbreviation: 'CHH' },\n                { name: 'Ciudad de México', abbreviation: 'DIF' },\n                { name: 'Coahuila', abbreviation: 'COA' },\n                { name: 'Colima', abbreviation: 'COL' },\n                { name: 'Durango', abbreviation: 'DUR' },\n                { name: 'Guanajuato', abbreviation: 'GUA' },\n                { name: 'Guerrero', abbreviation: 'GRO' },\n                { name: 'Hidalgo', abbreviation: 'HID' },\n                { name: 'Jalisco', abbreviation: 'JAL' },\n                { name: 'México', abbreviation: 'MEX' },\n                { name: 'Michoacán', abbreviation: 'MIC' },\n                { name: 'Morelos', abbreviation: 'MOR' },\n                { name: 'Nayarit', abbreviation: 'NAY' },\n                { name: 'Nuevo León', abbreviation: 'NLE' },\n                { name: 'Oaxaca', abbreviation: 'OAX' },\n                { name: 'Puebla', abbreviation: 'PUE' },\n                { name: 'Querétaro', abbreviation: 'QUE' },\n                { name: 'Quintana Roo', abbreviation: 'ROO' },\n                { name: 'San Luis Potosí', abbreviation: 'SLP' },\n                { name: 'Sinaloa', abbreviation: 'SIN' },\n                { name: 'Sonora', abbreviation: 'SON' },\n                { name: 'Tabasco', abbreviation: 'TAB' },\n                { name: 'Tamaulipas', abbreviation: 'TAM' },\n                { name: 'Tlaxcala', abbreviation: 'TLA' },\n                { name: 'Veracruz', abbreviation: 'VER' },\n                { name: 'Yucatán', abbreviation: 'YUC' },\n                { name: 'Zacatecas', abbreviation: 'ZAC' }\n            ]\n        },\n\n        street_suffixes: {\n            'us': [\n                {name: 'Avenue', abbreviation: 'Ave'},\n                {name: 'Boulevard', abbreviation: 'Blvd'},\n                {name: 'Center', abbreviation: 'Ctr'},\n                {name: 'Circle', abbreviation: 'Cir'},\n                {name: 'Court', abbreviation: 'Ct'},\n                {name: 'Drive', abbreviation: 'Dr'},\n                {name: 'Extension', abbreviation: 'Ext'},\n                {name: 'Glen', abbreviation: 'Gln'},\n                {name: 'Grove', abbreviation: 'Grv'},\n                {name: 'Heights', abbreviation: 'Hts'},\n                {name: 'Highway', abbreviation: 'Hwy'},\n                {name: 'Junction', abbreviation: 'Jct'},\n                {name: 'Key', abbreviation: 'Key'},\n                {name: 'Lane', abbreviation: 'Ln'},\n                {name: 'Loop', abbreviation: 'Loop'},\n                {name: 'Manor', abbreviation: 'Mnr'},\n                {name: 'Mill', abbreviation: 'Mill'},\n                {name: 'Park', abbreviation: 'Park'},\n                {name: 'Parkway', abbreviation: 'Pkwy'},\n                {name: 'Pass', abbreviation: 'Pass'},\n                {name: 'Path', abbreviation: 'Path'},\n                {name: 'Pike', abbreviation: 'Pike'},\n                {name: 'Place', abbreviation: 'Pl'},\n                {name: 'Plaza', abbreviation: 'Plz'},\n                {name: 'Point', abbreviation: 'Pt'},\n                {name: 'Ridge', abbreviation: 'Rdg'},\n                {name: 'River', abbreviation: 'Riv'},\n                {name: 'Road', abbreviation: 'Rd'},\n                {name: 'Square', abbreviation: 'Sq'},\n                {name: 'Street', abbreviation: 'St'},\n                {name: 'Terrace', abbreviation: 'Ter'},\n                {name: 'Trail', abbreviation: 'Trl'},\n                {name: 'Turnpike', abbreviation: 'Tpke'},\n                {name: 'View', abbreviation: 'Vw'},\n                {name: 'Way', abbreviation: 'Way'}\n            ],\n            'it': [\n                { name: 'Accesso', abbreviation: 'Acc.' },\n                { name: 'Alzaia', abbreviation: 'Alz.' },\n                { name: 'Arco', abbreviation: 'Arco' },\n                { name: 'Archivolto', abbreviation: 'Acv.' },\n                { name: 'Arena', abbreviation: 'Arena' },\n                { name: 'Argine', abbreviation: 'Argine' },\n                { name: 'Bacino', abbreviation: 'Bacino' },\n                { name: 'Banchi', abbreviation: 'Banchi' },\n                { name: 'Banchina', abbreviation: 'Ban.' },\n                { name: 'Bastioni', abbreviation: 'Bas.' },\n                { name: 'Belvedere', abbreviation: 'Belv.' },\n                { name: 'Borgata', abbreviation: 'B.ta' },\n                { name: 'Borgo', abbreviation: 'B.go' },\n                { name: 'Calata', abbreviation: 'Cal.' },\n                { name: 'Calle', abbreviation: 'Calle' },\n                { name: 'Campiello', abbreviation: 'Cam.' },\n                { name: 'Campo', abbreviation: 'Cam.' },\n                { name: 'Canale', abbreviation: 'Can.' },\n                { name: 'Carraia', abbreviation: 'Carr.' },\n                { name: 'Cascina', abbreviation: 'Cascina' },\n                { name: 'Case sparse', abbreviation: 'c.s.' },\n                { name: 'Cavalcavia', abbreviation: 'Cv.' },\n                { name: 'Circonvallazione', abbreviation: 'Cv.' },\n                { name: 'Complanare', abbreviation: 'C.re' },\n                { name: 'Contrada', abbreviation: 'C.da' },\n                { name: 'Corso', abbreviation: 'C.so' },\n                { name: 'Corte', abbreviation: 'C.te' },\n                { name: 'Cortile', abbreviation: 'C.le' },\n                { name: 'Diramazione', abbreviation: 'Dir.' },\n                { name: 'Fondaco', abbreviation: 'F.co' },\n                { name: 'Fondamenta', abbreviation: 'F.ta' },\n                { name: 'Fondo', abbreviation: 'F.do' },\n                { name: 'Frazione', abbreviation: 'Fr.' },\n                { name: 'Isola', abbreviation: 'Is.' },\n                { name: 'Largo', abbreviation: 'L.go' },\n                { name: 'Litoranea', abbreviation: 'Lit.' },\n                { name: 'Lungolago', abbreviation: 'L.go lago' },\n                { name: 'Lungo Po', abbreviation: 'l.go Po' },\n                { name: 'Molo', abbreviation: 'Molo' },\n                { name: 'Mura', abbreviation: 'Mura' },\n                { name: 'Passaggio privato', abbreviation: 'pass. priv.' },\n                { name: 'Passeggiata', abbreviation: 'Pass.' },\n                { name: 'Piazza', abbreviation: 'P.zza' },\n                { name: 'Piazzale', abbreviation: 'P.le' },\n                { name: 'Ponte', abbreviation: 'P.te' },\n                { name: 'Portico', abbreviation: 'P.co' },\n                { name: 'Rampa', abbreviation: 'Rampa' },\n                { name: 'Regione', abbreviation: 'Reg.' },\n                { name: 'Rione', abbreviation: 'R.ne' },\n                { name: 'Rio', abbreviation: 'Rio' },\n                { name: 'Ripa', abbreviation: 'Ripa' },\n                { name: 'Riva', abbreviation: 'Riva' },\n                { name: 'Rondò', abbreviation: 'Rondò' },\n                { name: 'Rotonda', abbreviation: 'Rot.' },\n                { name: 'Sagrato', abbreviation: 'Sagr.' },\n                { name: 'Salita', abbreviation: 'Sal.' },\n                { name: 'Scalinata', abbreviation: 'Scal.' },\n                { name: 'Scalone', abbreviation: 'Scal.' },\n                { name: 'Slargo', abbreviation: 'Sl.' },\n                { name: 'Sottoportico', abbreviation: 'Sott.' },\n                { name: 'Strada', abbreviation: 'Str.' },\n                { name: 'Stradale', abbreviation: 'Str.le' },\n                { name: 'Strettoia', abbreviation: 'Strett.' },\n                { name: 'Traversa', abbreviation: 'Trav.' },\n                { name: 'Via', abbreviation: 'V.' },\n                { name: 'Viale', abbreviation: 'V.le' },\n                { name: 'Vicinale', abbreviation: 'Vic.le' },\n                { name: 'Vicolo', abbreviation: 'Vic.' }\n            ],\n            'uk' : [\n                {name: 'Avenue', abbreviation: 'Ave'},\n                {name: 'Close', abbreviation: 'Cl'},\n                {name: 'Court', abbreviation: 'Ct'},\n                {name: 'Crescent', abbreviation: 'Cr'},\n                {name: 'Drive', abbreviation: 'Dr'},\n                {name: 'Garden', abbreviation: 'Gdn'},\n                {name: 'Gardens', abbreviation: 'Gdns'},\n                {name: 'Green', abbreviation: 'Gn'},\n                {name: 'Grove', abbreviation: 'Gr'},\n                {name: 'Lane', abbreviation: 'Ln'},\n                {name: 'Mount', abbreviation: 'Mt'},\n                {name: 'Place', abbreviation: 'Pl'},\n                {name: 'Park', abbreviation: 'Pk'},\n                {name: 'Ridge', abbreviation: 'Rdg'},\n                {name: 'Road', abbreviation: 'Rd'},\n                {name: 'Square', abbreviation: 'Sq'},\n                {name: 'Street', abbreviation: 'St'},\n                {name: 'Terrace', abbreviation: 'Ter'},\n                {name: 'Valley', abbreviation: 'Val'}\n            ]\n        },\n\n        months: [\n            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},\n            // Not messing with leap years...\n            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},\n            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},\n            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},\n            {name: 'May', short_name: 'May', numeric: '05', days: 31},\n            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},\n            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},\n            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},\n            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},\n            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},\n            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},\n            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}\n        ],\n\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\n        cc_types: [\n            {name: \"American Express\", short_name: 'amex', prefix: '34', length: 15},\n            {name: \"Bankcard\", short_name: 'bankcard', prefix: '5610', length: 16},\n            {name: \"China UnionPay\", short_name: 'chinaunion', prefix: '62', length: 16},\n            {name: \"Diners Club Carte Blanche\", short_name: 'dccarte', prefix: '300', length: 14},\n            {name: \"Diners Club enRoute\", short_name: 'dcenroute', prefix: '2014', length: 15},\n            {name: \"Diners Club International\", short_name: 'dcintl', prefix: '36', length: 14},\n            {name: \"Diners Club United States & Canada\", short_name: 'dcusc', prefix: '54', length: 16},\n            {name: \"Discover Card\", short_name: 'discover', prefix: '6011', length: 16},\n            {name: \"InstaPayment\", short_name: 'instapay', prefix: '637', length: 16},\n            {name: \"JCB\", short_name: 'jcb', prefix: '3528', length: 16},\n            {name: \"Laser\", short_name: 'laser', prefix: '6304', length: 16},\n            {name: \"Maestro\", short_name: 'maestro', prefix: '5018', length: 16},\n            {name: \"Mastercard\", short_name: 'mc', prefix: '51', length: 16},\n            {name: \"Solo\", short_name: 'solo', prefix: '6334', length: 16},\n            {name: \"Switch\", short_name: 'switch', prefix: '4903', length: 16},\n            {name: \"Visa\", short_name: 'visa', prefix: '4', length: 16},\n            {name: \"Visa Electron\", short_name: 'electron', prefix: '4026', length: 16}\n        ],\n\n        //return all world currency by ISO 4217\n        currency_types: [\n            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},\n            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},\n            {'code' : 'ALL', 'name' : 'Albania Lek'},\n            {'code' : 'AMD', 'name' : 'Armenia Dram'},\n            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},\n            {'code' : 'AOA', 'name' : 'Angola Kwanza'},\n            {'code' : 'ARS', 'name' : 'Argentina Peso'},\n            {'code' : 'AUD', 'name' : 'Australia Dollar'},\n            {'code' : 'AWG', 'name' : 'Aruba Guilder'},\n            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},\n            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},\n            {'code' : 'BBD', 'name' : 'Barbados Dollar'},\n            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},\n            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},\n            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},\n            {'code' : 'BIF', 'name' : 'Burundi Franc'},\n            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},\n            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},\n            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},\n            {'code' : 'BRL', 'name' : 'Brazil Real'},\n            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},\n            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},\n            {'code' : 'BWP', 'name' : 'Botswana Pula'},\n            {'code' : 'BYR', 'name' : 'Belarus Ruble'},\n            {'code' : 'BZD', 'name' : 'Belize Dollar'},\n            {'code' : 'CAD', 'name' : 'Canada Dollar'},\n            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},\n            {'code' : 'CHF', 'name' : 'Switzerland Franc'},\n            {'code' : 'CLP', 'name' : 'Chile Peso'},\n            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},\n            {'code' : 'COP', 'name' : 'Colombia Peso'},\n            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},\n            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},\n            {'code' : 'CUP', 'name' : 'Cuba Peso'},\n            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},\n            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},\n            {'code' : 'DJF', 'name' : 'Djibouti Franc'},\n            {'code' : 'DKK', 'name' : 'Denmark Krone'},\n            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},\n            {'code' : 'DZD', 'name' : 'Algeria Dinar'},\n            {'code' : 'EGP', 'name' : 'Egypt Pound'},\n            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},\n            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},\n            {'code' : 'EUR', 'name' : 'Euro Member Countries'},\n            {'code' : 'FJD', 'name' : 'Fiji Dollar'},\n            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},\n            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},\n            {'code' : 'GEL', 'name' : 'Georgia Lari'},\n            {'code' : 'GGP', 'name' : 'Guernsey Pound'},\n            {'code' : 'GHS', 'name' : 'Ghana Cedi'},\n            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},\n            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},\n            {'code' : 'GNF', 'name' : 'Guinea Franc'},\n            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},\n            {'code' : 'GYD', 'name' : 'Guyana Dollar'},\n            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},\n            {'code' : 'HNL', 'name' : 'Honduras Lempira'},\n            {'code' : 'HRK', 'name' : 'Croatia Kuna'},\n            {'code' : 'HTG', 'name' : 'Haiti Gourde'},\n            {'code' : 'HUF', 'name' : 'Hungary Forint'},\n            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},\n            {'code' : 'ILS', 'name' : 'Israel Shekel'},\n            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},\n            {'code' : 'INR', 'name' : 'India Rupee'},\n            {'code' : 'IQD', 'name' : 'Iraq Dinar'},\n            {'code' : 'IRR', 'name' : 'Iran Rial'},\n            {'code' : 'ISK', 'name' : 'Iceland Krona'},\n            {'code' : 'JEP', 'name' : 'Jersey Pound'},\n            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},\n            {'code' : 'JOD', 'name' : 'Jordan Dinar'},\n            {'code' : 'JPY', 'name' : 'Japan Yen'},\n            {'code' : 'KES', 'name' : 'Kenya Shilling'},\n            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},\n            {'code' : 'KHR', 'name' : 'Cambodia Riel'},\n            {'code' : 'KMF', 'name' : 'Comoros Franc'},\n            {'code' : 'KPW', 'name' : 'Korea (North) Won'},\n            {'code' : 'KRW', 'name' : 'Korea (South) Won'},\n            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},\n            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},\n            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},\n            {'code' : 'LAK', 'name' : 'Laos Kip'},\n            {'code' : 'LBP', 'name' : 'Lebanon Pound'},\n            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},\n            {'code' : 'LRD', 'name' : 'Liberia Dollar'},\n            {'code' : 'LSL', 'name' : 'Lesotho Loti'},\n            {'code' : 'LTL', 'name' : 'Lithuania Litas'},\n            {'code' : 'LYD', 'name' : 'Libya Dinar'},\n            {'code' : 'MAD', 'name' : 'Morocco Dirham'},\n            {'code' : 'MDL', 'name' : 'Moldova Leu'},\n            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},\n            {'code' : 'MKD', 'name' : 'Macedonia Denar'},\n            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},\n            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},\n            {'code' : 'MOP', 'name' : 'Macau Pataca'},\n            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},\n            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},\n            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},\n            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},\n            {'code' : 'MXN', 'name' : 'Mexico Peso'},\n            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},\n            {'code' : 'MZN', 'name' : 'Mozambique Metical'},\n            {'code' : 'NAD', 'name' : 'Namibia Dollar'},\n            {'code' : 'NGN', 'name' : 'Nigeria Naira'},\n            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},\n            {'code' : 'NOK', 'name' : 'Norway Krone'},\n            {'code' : 'NPR', 'name' : 'Nepal Rupee'},\n            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},\n            {'code' : 'OMR', 'name' : 'Oman Rial'},\n            {'code' : 'PAB', 'name' : 'Panama Balboa'},\n            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},\n            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},\n            {'code' : 'PHP', 'name' : 'Philippines Peso'},\n            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},\n            {'code' : 'PLN', 'name' : 'Poland Zloty'},\n            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},\n            {'code' : 'QAR', 'name' : 'Qatar Riyal'},\n            {'code' : 'RON', 'name' : 'Romania New Leu'},\n            {'code' : 'RSD', 'name' : 'Serbia Dinar'},\n            {'code' : 'RUB', 'name' : 'Russia Ruble'},\n            {'code' : 'RWF', 'name' : 'Rwanda Franc'},\n            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},\n            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},\n            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},\n            {'code' : 'SDG', 'name' : 'Sudan Pound'},\n            {'code' : 'SEK', 'name' : 'Sweden Krona'},\n            {'code' : 'SGD', 'name' : 'Singapore Dollar'},\n            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},\n            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},\n            {'code' : 'SOS', 'name' : 'Somalia Shilling'},\n            {'code' : 'SPL', 'name' : 'Seborga Luigino'},\n            {'code' : 'SRD', 'name' : 'Suriname Dollar'},\n            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},\n            {'code' : 'SVC', 'name' : 'El Salvador Colon'},\n            {'code' : 'SYP', 'name' : 'Syria Pound'},\n            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},\n            {'code' : 'THB', 'name' : 'Thailand Baht'},\n            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},\n            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},\n            {'code' : 'TND', 'name' : 'Tunisia Dinar'},\n            {'code' : 'TOP', 'name' : 'Tonga Pa\\'anga'},\n            {'code' : 'TRY', 'name' : 'Turkey Lira'},\n            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},\n            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},\n            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},\n            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},\n            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},\n            {'code' : 'UGX', 'name' : 'Uganda Shilling'},\n            {'code' : 'USD', 'name' : 'United States Dollar'},\n            {'code' : 'UYU', 'name' : 'Uruguay Peso'},\n            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},\n            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},\n            {'code' : 'VND', 'name' : 'Viet Nam Dong'},\n            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},\n            {'code' : 'WST', 'name' : 'Samoa Tala'},\n            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},\n            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},\n            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},\n            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},\n            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},\n            {'code' : 'YER', 'name' : 'Yemen Rial'},\n            {'code' : 'ZAR', 'name' : 'South Africa Rand'},\n            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},\n            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}\n        ],\n\n        // return the names of all valide colors\n        colorNames : [  \"AliceBlue\", \"Black\", \"Navy\", \"DarkBlue\", \"MediumBlue\", \"Blue\", \"DarkGreen\", \"Green\", \"Teal\", \"DarkCyan\", \"DeepSkyBlue\", \"DarkTurquoise\", \"MediumSpringGreen\", \"Lime\", \"SpringGreen\",\n            \"Aqua\", \"Cyan\", \"MidnightBlue\", \"DodgerBlue\", \"LightSeaGreen\", \"ForestGreen\", \"SeaGreen\", \"DarkSlateGray\", \"LimeGreen\", \"MediumSeaGreen\", \"Turquoise\", \"RoyalBlue\", \"SteelBlue\", \"DarkSlateBlue\", \"MediumTurquoise\",\n            \"Indigo\", \"DarkOliveGreen\", \"CadetBlue\", \"CornflowerBlue\", \"RebeccaPurple\", \"MediumAquaMarine\", \"DimGray\", \"SlateBlue\", \"OliveDrab\", \"SlateGray\", \"LightSlateGray\", \"MediumSlateBlue\", \"LawnGreen\", \"Chartreuse\",\n            \"Aquamarine\", \"Maroon\", \"Purple\", \"Olive\", \"Gray\", \"SkyBlue\", \"LightSkyBlue\", \"BlueViolet\", \"DarkRed\", \"DarkMagenta\", \"SaddleBrown\", \"Ivory\", \"White\",\n            \"DarkSeaGreen\", \"LightGreen\", \"MediumPurple\", \"DarkViolet\", \"PaleGreen\", \"DarkOrchid\", \"YellowGreen\", \"Sienna\", \"Brown\", \"DarkGray\", \"LightBlue\", \"GreenYellow\", \"PaleTurquoise\", \"LightSteelBlue\", \"PowderBlue\",\n            \"FireBrick\", \"DarkGoldenRod\", \"MediumOrchid\", \"RosyBrown\", \"DarkKhaki\", \"Silver\", \"MediumVioletRed\", \"IndianRed\", \"Peru\", \"Chocolate\", \"Tan\", \"LightGray\", \"Thistle\", \"Orchid\", \"GoldenRod\", \"PaleVioletRed\",\n            \"Crimson\", \"Gainsboro\", \"Plum\", \"BurlyWood\", \"LightCyan\", \"Lavender\", \"DarkSalmon\", \"Violet\", \"PaleGoldenRod\", \"LightCoral\", \"Khaki\", \"AliceBlue\", \"HoneyDew\", \"Azure\", \"SandyBrown\", \"Wheat\", \"Beige\", \"WhiteSmoke\",\n            \"MintCream\", \"GhostWhite\", \"Salmon\", \"AntiqueWhite\", \"Linen\", \"LightGoldenRodYellow\", \"OldLace\", \"Red\", \"Fuchsia\", \"Magenta\", \"DeepPink\", \"OrangeRed\", \"Tomato\", \"HotPink\", \"Coral\", \"DarkOrange\", \"LightSalmon\", \"Orange\",\n            \"LightPink\", \"Pink\", \"Gold\", \"PeachPuff\", \"NavajoWhite\", \"Moccasin\", \"Bisque\", \"MistyRose\", \"BlanchedAlmond\", \"PapayaWhip\", \"LavenderBlush\", \"SeaShell\", \"Cornsilk\", \"LemonChiffon\", \"FloralWhite\", \"Snow\", \"Yellow\", \"LightYellow\"\n        ],\n\n        // Data taken from https://www.sec.gov/rules/other/4-460list.htm\n        company: [ \"3Com Corp\",\n        \"3M Company\",\n        \"A.G. Edwards Inc.\",\n        \"Abbott Laboratories\",\n        \"Abercrombie & Fitch Co.\",\n        \"ABM Industries Incorporated\",\n        \"Ace Hardware Corporation\",\n        \"ACT Manufacturing Inc.\",\n        \"Acterna Corp.\",\n        \"Adams Resources & Energy, Inc.\",\n        \"ADC Telecommunications, Inc.\",\n        \"Adelphia Communications Corporation\",\n        \"Administaff, Inc.\",\n        \"Adobe Systems Incorporated\",\n        \"Adolph Coors Company\",\n        \"Advance Auto Parts, Inc.\",\n        \"Advanced Micro Devices, Inc.\",\n        \"AdvancePCS, Inc.\",\n        \"Advantica Restaurant Group, Inc.\",\n        \"The AES Corporation\",\n        \"Aetna Inc.\",\n        \"Affiliated Computer Services, Inc.\",\n        \"AFLAC Incorporated\",\n        \"AGCO Corporation\",\n        \"Agilent Technologies, Inc.\",\n        \"Agway Inc.\",\n        \"Apartment Investment and Management Company\",\n        \"Air Products and Chemicals, Inc.\",\n        \"Airborne, Inc.\",\n        \"Airgas, Inc.\",\n        \"AK Steel Holding Corporation\",\n        \"Alaska Air Group, Inc.\",\n        \"Alberto-Culver Company\",\n        \"Albertson's, Inc.\",\n        \"Alcoa Inc.\",\n        \"Alleghany Corporation\",\n        \"Allegheny Energy, Inc.\",\n        \"Allegheny Technologies Incorporated\",\n        \"Allergan, Inc.\",\n        \"ALLETE, Inc.\",\n        \"Alliant Energy Corporation\",\n        \"Allied Waste Industries, Inc.\",\n        \"Allmerica Financial Corporation\",\n        \"The Allstate Corporation\",\n        \"ALLTEL Corporation\",\n        \"The Alpine Group, Inc.\",\n        \"Amazon.com, Inc.\",\n        \"AMC Entertainment Inc.\",\n        \"American Power Conversion Corporation\",\n        \"Amerada Hess Corporation\",\n        \"AMERCO\",\n        \"Ameren Corporation\",\n        \"America West Holdings Corporation\",\n        \"American Axle & Manufacturing Holdings, Inc.\",\n        \"American Eagle Outfitters, Inc.\",\n        \"American Electric Power Company, Inc.\",\n        \"American Express Company\",\n        \"American Financial Group, Inc.\",\n        \"American Greetings Corporation\",\n        \"American International Group, Inc.\",\n        \"American Standard Companies Inc.\",\n        \"American Water Works Company, Inc.\",\n        \"AmerisourceBergen Corporation\",\n        \"Ames Department Stores, Inc.\",\n        \"Amgen Inc.\",\n        \"Amkor Technology, Inc.\",\n        \"AMR Corporation\",\n        \"AmSouth Bancorp.\",\n        \"Amtran, Inc.\",\n        \"Anadarko Petroleum Corporation\",\n        \"Analog Devices, Inc.\",\n        \"Anheuser-Busch Companies, Inc.\",\n        \"Anixter International Inc.\",\n        \"AnnTaylor Inc.\",\n        \"Anthem, Inc.\",\n        \"AOL Time Warner Inc.\",\n        \"Aon Corporation\",\n        \"Apache Corporation\",\n        \"Apple Computer, Inc.\",\n        \"Applera Corporation\",\n        \"Applied Industrial Technologies, Inc.\",\n        \"Applied Materials, Inc.\",\n        \"Aquila, Inc.\",\n        \"ARAMARK Corporation\",\n        \"Arch Coal, Inc.\",\n        \"Archer Daniels Midland Company\",\n        \"Arkansas Best Corporation\",\n        \"Armstrong Holdings, Inc.\",\n        \"Arrow Electronics, Inc.\",\n        \"ArvinMeritor, Inc.\",\n        \"Ashland Inc.\",\n        \"Astoria Financial Corporation\",\n        \"AT&T Corp.\",\n        \"Atmel Corporation\",\n        \"Atmos Energy Corporation\",\n        \"Audiovox Corporation\",\n        \"Autoliv, Inc.\",\n        \"Automatic Data Processing, Inc.\",\n        \"AutoNation, Inc.\",\n        \"AutoZone, Inc.\",\n        \"Avaya Inc.\",\n        \"Avery Dennison Corporation\",\n        \"Avista Corporation\",\n        \"Avnet, Inc.\",\n        \"Avon Products, Inc.\",\n        \"Baker Hughes Incorporated\",\n        \"Ball Corporation\",\n        \"Bank of America Corporation\",\n        \"The Bank of New York Company, Inc.\",\n        \"Bank One Corporation\",\n        \"Banknorth Group, Inc.\",\n        \"Banta Corporation\",\n        \"Barnes & Noble, Inc.\",\n        \"Bausch & Lomb Incorporated\",\n        \"Baxter International Inc.\",\n        \"BB&T Corporation\",\n        \"The Bear Stearns Companies Inc.\",\n        \"Beazer Homes USA, Inc.\",\n        \"Beckman Coulter, Inc.\",\n        \"Becton, Dickinson and Company\",\n        \"Bed Bath & Beyond Inc.\",\n        \"Belk, Inc.\",\n        \"Bell Microproducts Inc.\",\n        \"BellSouth Corporation\",\n        \"Belo Corp.\",\n        \"Bemis Company, Inc.\",\n        \"Benchmark Electronics, Inc.\",\n        \"Berkshire Hathaway Inc.\",\n        \"Best Buy Co., Inc.\",\n        \"Bethlehem Steel Corporation\",\n        \"Beverly Enterprises, Inc.\",\n        \"Big Lots, Inc.\",\n        \"BJ Services Company\",\n        \"BJ's Wholesale Club, Inc.\",\n        \"The Black & Decker Corporation\",\n        \"Black Hills Corporation\",\n        \"BMC Software, Inc.\",\n        \"The Boeing Company\",\n        \"Boise Cascade Corporation\",\n        \"Borders Group, Inc.\",\n        \"BorgWarner Inc.\",\n        \"Boston Scientific Corporation\",\n        \"Bowater Incorporated\",\n        \"Briggs & Stratton Corporation\",\n        \"Brightpoint, Inc.\",\n        \"Brinker International, Inc.\",\n        \"Bristol-Myers Squibb Company\",\n        \"Broadwing, Inc.\",\n        \"Brown Shoe Company, Inc.\",\n        \"Brown-Forman Corporation\",\n        \"Brunswick Corporation\",\n        \"Budget Group, Inc.\",\n        \"Burlington Coat Factory Warehouse Corporation\",\n        \"Burlington Industries, Inc.\",\n        \"Burlington Northern Santa Fe Corporation\",\n        \"Burlington Resources Inc.\",\n        \"C. H. Robinson Worldwide Inc.\",\n        \"Cablevision Systems Corp\",\n        \"Cabot Corp\",\n        \"Cadence Design Systems, Inc.\",\n        \"Calpine Corp.\",\n        \"Campbell Soup Co.\",\n        \"Capital One Financial Corp.\",\n        \"Cardinal Health Inc.\",\n        \"Caremark Rx Inc.\",\n        \"Carlisle Cos. Inc.\",\n        \"Carpenter Technology Corp.\",\n        \"Casey's General Stores Inc.\",\n        \"Caterpillar Inc.\",\n        \"CBRL Group Inc.\",\n        \"CDI Corp.\",\n        \"CDW Computer Centers Inc.\",\n        \"CellStar Corp.\",\n        \"Cendant Corp\",\n        \"Cenex Harvest States Cooperatives\",\n        \"Centex Corp.\",\n        \"CenturyTel Inc.\",\n        \"Ceridian Corp.\",\n        \"CH2M Hill Cos. Ltd.\",\n        \"Champion Enterprises Inc.\",\n        \"Charles Schwab Corp.\",\n        \"Charming Shoppes Inc.\",\n        \"Charter Communications Inc.\",\n        \"Charter One Financial Inc.\",\n        \"ChevronTexaco Corp.\",\n        \"Chiquita Brands International Inc.\",\n        \"Chubb Corp\",\n        \"Ciena Corp.\",\n        \"Cigna Corp\",\n        \"Cincinnati Financial Corp.\",\n        \"Cinergy Corp.\",\n        \"Cintas Corp.\",\n        \"Circuit City Stores Inc.\",\n        \"Cisco Systems Inc.\",\n        \"Citigroup, Inc\",\n        \"Citizens Communications Co.\",\n        \"CKE Restaurants Inc.\",\n        \"Clear Channel Communications Inc.\",\n        \"The Clorox Co.\",\n        \"CMGI Inc.\",\n        \"CMS Energy Corp.\",\n        \"CNF Inc.\",\n        \"Coca-Cola Co.\",\n        \"Coca-Cola Enterprises Inc.\",\n        \"Colgate-Palmolive Co.\",\n        \"Collins & Aikman Corp.\",\n        \"Comcast Corp.\",\n        \"Comdisco Inc.\",\n        \"Comerica Inc.\",\n        \"Comfort Systems USA Inc.\",\n        \"Commercial Metals Co.\",\n        \"Community Health Systems Inc.\",\n        \"Compass Bancshares Inc\",\n        \"Computer Associates International Inc.\",\n        \"Computer Sciences Corp.\",\n        \"Compuware Corp.\",\n        \"Comverse Technology Inc.\",\n        \"ConAgra Foods Inc.\",\n        \"Concord EFS Inc.\",\n        \"Conectiv, Inc\",\n        \"Conoco Inc\",\n        \"Conseco Inc.\",\n        \"Consolidated Freightways Corp.\",\n        \"Consolidated Edison Inc.\",\n        \"Constellation Brands Inc.\",\n        \"Constellation Emergy Group Inc.\",\n        \"Continental Airlines Inc.\",\n        \"Convergys Corp.\",\n        \"Cooper Cameron Corp.\",\n        \"Cooper Industries Ltd.\",\n        \"Cooper Tire & Rubber Co.\",\n        \"Corn Products International Inc.\",\n        \"Corning Inc.\",\n        \"Costco Wholesale Corp.\",\n        \"Countrywide Credit Industries Inc.\",\n        \"Coventry Health Care Inc.\",\n        \"Cox Communications Inc.\",\n        \"Crane Co.\",\n        \"Crompton Corp.\",\n        \"Crown Cork & Seal Co. Inc.\",\n        \"CSK Auto Corp.\",\n        \"CSX Corp.\",\n        \"Cummins Inc.\",\n        \"CVS Corp.\",\n        \"Cytec Industries Inc.\",\n        \"D&K Healthcare Resources, Inc.\",\n        \"D.R. Horton Inc.\",\n        \"Dana Corporation\",\n        \"Danaher Corporation\",\n        \"Darden Restaurants Inc.\",\n        \"DaVita Inc.\",\n        \"Dean Foods Company\",\n        \"Deere & Company\",\n        \"Del Monte Foods Co\",\n        \"Dell Computer Corporation\",\n        \"Delphi Corp.\",\n        \"Delta Air Lines Inc.\",\n        \"Deluxe Corporation\",\n        \"Devon Energy Corporation\",\n        \"Di Giorgio Corporation\",\n        \"Dial Corporation\",\n        \"Diebold Incorporated\",\n        \"Dillard's Inc.\",\n        \"DIMON Incorporated\",\n        \"Dole Food Company, Inc.\",\n        \"Dollar General Corporation\",\n        \"Dollar Tree Stores, Inc.\",\n        \"Dominion Resources, Inc.\",\n        \"Domino's Pizza LLC\",\n        \"Dover Corporation, Inc.\",\n        \"Dow Chemical Company\",\n        \"Dow Jones & Company, Inc.\",\n        \"DPL Inc.\",\n        \"DQE Inc.\",\n        \"Dreyer's Grand Ice Cream, Inc.\",\n        \"DST Systems, Inc.\",\n        \"DTE Energy Co.\",\n        \"E.I. Du Pont de Nemours and Company\",\n        \"Duke Energy Corp\",\n        \"Dun & Bradstreet Inc.\",\n        \"DURA Automotive Systems Inc.\",\n        \"DynCorp\",\n        \"Dynegy Inc.\",\n        \"E*Trade Group, Inc.\",\n        \"E.W. Scripps Company\",\n        \"Earthlink, Inc.\",\n        \"Eastman Chemical Company\",\n        \"Eastman Kodak Company\",\n        \"Eaton Corporation\",\n        \"Echostar Communications Corporation\",\n        \"Ecolab Inc.\",\n        \"Edison International\",\n        \"EGL Inc.\",\n        \"El Paso Corporation\",\n        \"Electronic Arts Inc.\",\n        \"Electronic Data Systems Corp.\",\n        \"Eli Lilly and Company\",\n        \"EMC Corporation\",\n        \"Emcor Group Inc.\",\n        \"Emerson Electric Co.\",\n        \"Encompass Services Corporation\",\n        \"Energizer Holdings Inc.\",\n        \"Energy East Corporation\",\n        \"Engelhard Corporation\",\n        \"Enron Corp.\",\n        \"Entergy Corporation\",\n        \"Enterprise Products Partners L.P.\",\n        \"EOG Resources, Inc.\",\n        \"Equifax Inc.\",\n        \"Equitable Resources Inc.\",\n        \"Equity Office Properties Trust\",\n        \"Equity Residential Properties Trust\",\n        \"Estee Lauder Companies Inc.\",\n        \"Exelon Corporation\",\n        \"Exide Technologies\",\n        \"Expeditors International of Washington Inc.\",\n        \"Express Scripts Inc.\",\n        \"ExxonMobil Corporation\",\n        \"Fairchild Semiconductor International Inc.\",\n        \"Family Dollar Stores Inc.\",\n        \"Farmland Industries Inc.\",\n        \"Federal Mogul Corp.\",\n        \"Federated Department Stores Inc.\",\n        \"Federal Express Corp.\",\n        \"Felcor Lodging Trust Inc.\",\n        \"Ferro Corp.\",\n        \"Fidelity National Financial Inc.\",\n        \"Fifth Third Bancorp\",\n        \"First American Financial Corp.\",\n        \"First Data Corp.\",\n        \"First National of Nebraska Inc.\",\n        \"First Tennessee National Corp.\",\n        \"FirstEnergy Corp.\",\n        \"Fiserv Inc.\",\n        \"Fisher Scientific International Inc.\",\n        \"FleetBoston Financial Co.\",\n        \"Fleetwood Enterprises Inc.\",\n        \"Fleming Companies Inc.\",\n        \"Flowers Foods Inc.\",\n        \"Flowserv Corp\",\n        \"Fluor Corp\",\n        \"FMC Corp\",\n        \"Foamex International Inc\",\n        \"Foot Locker Inc\",\n        \"Footstar Inc.\",\n        \"Ford Motor Co\",\n        \"Forest Laboratories Inc.\",\n        \"Fortune Brands Inc.\",\n        \"Foster Wheeler Ltd.\",\n        \"FPL Group Inc.\",\n        \"Franklin Resources Inc.\",\n        \"Freeport McMoran Copper & Gold Inc.\",\n        \"Frontier Oil Corp\",\n        \"Furniture Brands International Inc.\",\n        \"Gannett Co., Inc.\",\n        \"Gap Inc.\",\n        \"Gateway Inc.\",\n        \"GATX Corporation\",\n        \"Gemstar-TV Guide International Inc.\",\n        \"GenCorp Inc.\",\n        \"General Cable Corporation\",\n        \"General Dynamics Corporation\",\n        \"General Electric Company\",\n        \"General Mills Inc\",\n        \"General Motors Corporation\",\n        \"Genesis Health Ventures Inc.\",\n        \"Gentek Inc.\",\n        \"Gentiva Health Services Inc.\",\n        \"Genuine Parts Company\",\n        \"Genuity Inc.\",\n        \"Genzyme Corporation\",\n        \"Georgia Gulf Corporation\",\n        \"Georgia-Pacific Corporation\",\n        \"Gillette Company\",\n        \"Gold Kist Inc.\",\n        \"Golden State Bancorp Inc.\",\n        \"Golden West Financial Corporation\",\n        \"Goldman Sachs Group Inc.\",\n        \"Goodrich Corporation\",\n        \"The Goodyear Tire & Rubber Company\",\n        \"Granite Construction Incorporated\",\n        \"Graybar Electric Company Inc.\",\n        \"Great Lakes Chemical Corporation\",\n        \"Great Plains Energy Inc.\",\n        \"GreenPoint Financial Corp.\",\n        \"Greif Bros. Corporation\",\n        \"Grey Global Group Inc.\",\n        \"Group 1 Automotive Inc.\",\n        \"Guidant Corporation\",\n        \"H&R Block Inc.\",\n        \"H.B. Fuller Company\",\n        \"H.J. Heinz Company\",\n        \"Halliburton Co.\",\n        \"Harley-Davidson Inc.\",\n        \"Harman International Industries Inc.\",\n        \"Harrah's Entertainment Inc.\",\n        \"Harris Corp.\",\n        \"Harsco Corp.\",\n        \"Hartford Financial Services Group Inc.\",\n        \"Hasbro Inc.\",\n        \"Hawaiian Electric Industries Inc.\",\n        \"HCA Inc.\",\n        \"Health Management Associates Inc.\",\n        \"Health Net Inc.\",\n        \"Healthsouth Corp\",\n        \"Henry Schein Inc.\",\n        \"Hercules Inc.\",\n        \"Herman Miller Inc.\",\n        \"Hershey Foods Corp.\",\n        \"Hewlett-Packard Company\",\n        \"Hibernia Corp.\",\n        \"Hillenbrand Industries Inc.\",\n        \"Hilton Hotels Corp.\",\n        \"Hollywood Entertainment Corp.\",\n        \"Home Depot Inc.\",\n        \"Hon Industries Inc.\",\n        \"Honeywell International Inc.\",\n        \"Hormel Foods Corp.\",\n        \"Host Marriott Corp.\",\n        \"Household International Corp.\",\n        \"Hovnanian Enterprises Inc.\",\n        \"Hub Group Inc.\",\n        \"Hubbell Inc.\",\n        \"Hughes Supply Inc.\",\n        \"Humana Inc.\",\n        \"Huntington Bancshares Inc.\",\n        \"Idacorp Inc.\",\n        \"IDT Corporation\",\n        \"IKON Office Solutions Inc.\",\n        \"Illinois Tool Works Inc.\",\n        \"IMC Global Inc.\",\n        \"Imperial Sugar Company\",\n        \"IMS Health Inc.\",\n        \"Ingles Market Inc\",\n        \"Ingram Micro Inc.\",\n        \"Insight Enterprises Inc.\",\n        \"Integrated Electrical Services Inc.\",\n        \"Intel Corporation\",\n        \"International Paper Co.\",\n        \"Interpublic Group of Companies Inc.\",\n        \"Interstate Bakeries Corporation\",\n        \"International Business Machines Corp.\",\n        \"International Flavors & Fragrances Inc.\",\n        \"International Multifoods Corporation\",\n        \"Intuit Inc.\",\n        \"IT Group Inc.\",\n        \"ITT Industries Inc.\",\n        \"Ivax Corp.\",\n        \"J.B. Hunt Transport Services Inc.\",\n        \"J.C. Penny Co.\",\n        \"J.P. Morgan Chase & Co.\",\n        \"Jabil Circuit Inc.\",\n        \"Jack In The Box Inc.\",\n        \"Jacobs Engineering Group Inc.\",\n        \"JDS Uniphase Corp.\",\n        \"Jefferson-Pilot Co.\",\n        \"John Hancock Financial Services Inc.\",\n        \"Johnson & Johnson\",\n        \"Johnson Controls Inc.\",\n        \"Jones Apparel Group Inc.\",\n        \"KB Home\",\n        \"Kellogg Company\",\n        \"Kellwood Company\",\n        \"Kelly Services Inc.\",\n        \"Kemet Corp.\",\n        \"Kennametal Inc.\",\n        \"Kerr-McGee Corporation\",\n        \"KeyCorp\",\n        \"KeySpan Corp.\",\n        \"Kimball International Inc.\",\n        \"Kimberly-Clark Corporation\",\n        \"Kindred Healthcare Inc.\",\n        \"KLA-Tencor Corporation\",\n        \"K-Mart Corp.\",\n        \"Knight-Ridder Inc.\",\n        \"Kohl's Corp.\",\n        \"KPMG Consulting Inc.\",\n        \"Kroger Co.\",\n        \"L-3 Communications Holdings Inc.\",\n        \"Laboratory Corporation of America Holdings\",\n        \"Lam Research Corporation\",\n        \"LandAmerica Financial Group Inc.\",\n        \"Lands' End Inc.\",\n        \"Landstar System Inc.\",\n        \"La-Z-Boy Inc.\",\n        \"Lear Corporation\",\n        \"Legg Mason Inc.\",\n        \"Leggett & Platt Inc.\",\n        \"Lehman Brothers Holdings Inc.\",\n        \"Lennar Corporation\",\n        \"Lennox International Inc.\",\n        \"Level 3 Communications Inc.\",\n        \"Levi Strauss & Co.\",\n        \"Lexmark International Inc.\",\n        \"Limited Inc.\",\n        \"Lincoln National Corporation\",\n        \"Linens 'n Things Inc.\",\n        \"Lithia Motors Inc.\",\n        \"Liz Claiborne Inc.\",\n        \"Lockheed Martin Corporation\",\n        \"Loews Corporation\",\n        \"Longs Drug Stores Corporation\",\n        \"Louisiana-Pacific Corporation\",\n        \"Lowe's Companies Inc.\",\n        \"LSI Logic Corporation\",\n        \"The LTV Corporation\",\n        \"The Lubrizol Corporation\",\n        \"Lucent Technologies Inc.\",\n        \"Lyondell Chemical Company\",\n        \"M & T Bank Corporation\",\n        \"Magellan Health Services Inc.\",\n        \"Mail-Well Inc.\",\n        \"Mandalay Resort Group\",\n        \"Manor Care Inc.\",\n        \"Manpower Inc.\",\n        \"Marathon Oil Corporation\",\n        \"Mariner Health Care Inc.\",\n        \"Markel Corporation\",\n        \"Marriott International Inc.\",\n        \"Marsh & McLennan Companies Inc.\",\n        \"Marsh Supermarkets Inc.\",\n        \"Marshall & Ilsley Corporation\",\n        \"Martin Marietta Materials Inc.\",\n        \"Masco Corporation\",\n        \"Massey Energy Company\",\n        \"MasTec Inc.\",\n        \"Mattel Inc.\",\n        \"Maxim Integrated Products Inc.\",\n        \"Maxtor Corporation\",\n        \"Maxxam Inc.\",\n        \"The May Department Stores Company\",\n        \"Maytag Corporation\",\n        \"MBNA Corporation\",\n        \"McCormick & Company Incorporated\",\n        \"McDonald's Corporation\",\n        \"The McGraw-Hill Companies Inc.\",\n        \"McKesson Corporation\",\n        \"McLeodUSA Incorporated\",\n        \"M.D.C. Holdings Inc.\",\n        \"MDU Resources Group Inc.\",\n        \"MeadWestvaco Corporation\",\n        \"Medtronic Inc.\",\n        \"Mellon Financial Corporation\",\n        \"The Men's Wearhouse Inc.\",\n        \"Merck & Co., Inc.\",\n        \"Mercury General Corporation\",\n        \"Merrill Lynch & Co. Inc.\",\n        \"Metaldyne Corporation\",\n        \"Metals USA Inc.\",\n        \"MetLife Inc.\",\n        \"Metris Companies Inc\",\n        \"MGIC Investment Corporation\",\n        \"MGM Mirage\",\n        \"Michaels Stores Inc.\",\n        \"Micron Technology Inc.\",\n        \"Microsoft Corporation\",\n        \"Milacron Inc.\",\n        \"Millennium Chemicals Inc.\",\n        \"Mirant Corporation\",\n        \"Mohawk Industries Inc.\",\n        \"Molex Incorporated\",\n        \"The MONY Group Inc.\",\n        \"Morgan Stanley Dean Witter & Co.\",\n        \"Motorola Inc.\",\n        \"MPS Group Inc.\",\n        \"Murphy Oil Corporation\",\n        \"Nabors Industries Inc\",\n        \"Nacco Industries Inc\",\n        \"Nash Finch Company\",\n        \"National City Corp.\",\n        \"National Commerce Financial Corporation\",\n        \"National Fuel Gas Company\",\n        \"National Oilwell Inc\",\n        \"National Rural Utilities Cooperative Finance Corporation\",\n        \"National Semiconductor Corporation\",\n        \"National Service Industries Inc\",\n        \"Navistar International Corporation\",\n        \"NCR Corporation\",\n        \"The Neiman Marcus Group Inc.\",\n        \"New Jersey Resources Corporation\",\n        \"New York Times Company\",\n        \"Newell Rubbermaid Inc\",\n        \"Newmont Mining Corporation\",\n        \"Nextel Communications Inc\",\n        \"Nicor Inc\",\n        \"Nike Inc\",\n        \"NiSource Inc\",\n        \"Noble Energy Inc\",\n        \"Nordstrom Inc\",\n        \"Norfolk Southern Corporation\",\n        \"Nortek Inc\",\n        \"North Fork Bancorporation Inc\",\n        \"Northeast Utilities System\",\n        \"Northern Trust Corporation\",\n        \"Northrop Grumman Corporation\",\n        \"NorthWestern Corporation\",\n        \"Novellus Systems Inc\",\n        \"NSTAR\",\n        \"NTL Incorporated\",\n        \"Nucor Corp\",\n        \"Nvidia Corp\",\n        \"NVR Inc\",\n        \"Northwest Airlines Corp\",\n        \"Occidental Petroleum Corp\",\n        \"Ocean Energy Inc\",\n        \"Office Depot Inc.\",\n        \"OfficeMax Inc\",\n        \"OGE Energy Corp\",\n        \"Oglethorpe Power Corp.\",\n        \"Ohio Casualty Corp.\",\n        \"Old Republic International Corp.\",\n        \"Olin Corp.\",\n        \"OM Group Inc\",\n        \"Omnicare Inc\",\n        \"Omnicom Group\",\n        \"On Semiconductor Corp\",\n        \"ONEOK Inc\",\n        \"Oracle Corp\",\n        \"Oshkosh Truck Corp\",\n        \"Outback Steakhouse Inc.\",\n        \"Owens & Minor Inc.\",\n        \"Owens Corning\",\n        \"Owens-Illinois Inc\",\n        \"Oxford Health Plans Inc\",\n        \"Paccar Inc\",\n        \"PacifiCare Health Systems Inc\",\n        \"Packaging Corp. of America\",\n        \"Pactiv Corp\",\n        \"Pall Corp\",\n        \"Pantry Inc\",\n        \"Park Place Entertainment Corp\",\n        \"Parker Hannifin Corp.\",\n        \"Pathmark Stores Inc.\",\n        \"Paychex Inc\",\n        \"Payless Shoesource Inc\",\n        \"Penn Traffic Co.\",\n        \"Pennzoil-Quaker State Company\",\n        \"Pentair Inc\",\n        \"Peoples Energy Corp.\",\n        \"PeopleSoft Inc\",\n        \"Pep Boys Manny, Moe & Jack\",\n        \"Potomac Electric Power Co.\",\n        \"Pepsi Bottling Group Inc.\",\n        \"PepsiAmericas Inc.\",\n        \"PepsiCo Inc.\",\n        \"Performance Food Group Co.\",\n        \"Perini Corp\",\n        \"PerkinElmer Inc\",\n        \"Perot Systems Corp\",\n        \"Petco Animal Supplies Inc.\",\n        \"Peter Kiewit Sons', Inc.\",\n        \"PETsMART Inc\",\n        \"Pfizer Inc\",\n        \"Pacific Gas & Electric Corp.\",\n        \"Pharmacia Corp\",\n        \"Phar Mor Inc.\",\n        \"Phelps Dodge Corp.\",\n        \"Philip Morris Companies Inc.\",\n        \"Phillips Petroleum Co\",\n        \"Phillips Van Heusen Corp.\",\n        \"Phoenix Companies Inc\",\n        \"Pier 1 Imports Inc.\",\n        \"Pilgrim's Pride Corporation\",\n        \"Pinnacle West Capital Corp\",\n        \"Pioneer-Standard Electronics Inc.\",\n        \"Pitney Bowes Inc.\",\n        \"Pittston Brinks Group\",\n        \"Plains All American Pipeline LP\",\n        \"PNC Financial Services Group Inc.\",\n        \"PNM Resources Inc\",\n        \"Polaris Industries Inc.\",\n        \"Polo Ralph Lauren Corp\",\n        \"PolyOne Corp\",\n        \"Popular Inc\",\n        \"Potlatch Corp\",\n        \"PPG Industries Inc\",\n        \"PPL Corp\",\n        \"Praxair Inc\",\n        \"Precision Castparts Corp\",\n        \"Premcor Inc.\",\n        \"Pride International Inc\",\n        \"Primedia Inc\",\n        \"Principal Financial Group Inc.\",\n        \"Procter & Gamble Co.\",\n        \"Pro-Fac Cooperative Inc.\",\n        \"Progress Energy Inc\",\n        \"Progressive Corporation\",\n        \"Protective Life Corp\",\n        \"Provident Financial Group\",\n        \"Providian Financial Corp.\",\n        \"Prudential Financial Inc.\",\n        \"PSS World Medical Inc\",\n        \"Public Service Enterprise Group Inc.\",\n        \"Publix Super Markets Inc.\",\n        \"Puget Energy Inc.\",\n        \"Pulte Homes Inc\",\n        \"Qualcomm Inc\",\n        \"Quanta Services Inc.\",\n        \"Quantum Corp\",\n        \"Quest Diagnostics Inc.\",\n        \"Questar Corp\",\n        \"Quintiles Transnational\",\n        \"Qwest Communications Intl Inc\",\n        \"R.J. Reynolds Tobacco Company\",\n        \"R.R. Donnelley & Sons Company\",\n        \"Radio Shack Corporation\",\n        \"Raymond James Financial Inc.\",\n        \"Raytheon Company\",\n        \"Reader's Digest Association Inc.\",\n        \"Reebok International Ltd.\",\n        \"Regions Financial Corp.\",\n        \"Regis Corporation\",\n        \"Reliance Steel & Aluminum Co.\",\n        \"Reliant Energy Inc.\",\n        \"Rent A Center Inc\",\n        \"Republic Services Inc\",\n        \"Revlon Inc\",\n        \"RGS Energy Group Inc\",\n        \"Rite Aid Corp\",\n        \"Riverwood Holding Inc.\",\n        \"RoadwayCorp\",\n        \"Robert Half International Inc.\",\n        \"Rock-Tenn Co\",\n        \"Rockwell Automation Inc\",\n        \"Rockwell Collins Inc\",\n        \"Rohm & Haas Co.\",\n        \"Ross Stores Inc\",\n        \"RPM Inc.\",\n        \"Ruddick Corp\",\n        \"Ryder System Inc\",\n        \"Ryerson Tull Inc\",\n        \"Ryland Group Inc.\",\n        \"Sabre Holdings Corp\",\n        \"Safeco Corp\",\n        \"Safeguard Scientifics Inc.\",\n        \"Safeway Inc\",\n        \"Saks Inc\",\n        \"Sanmina-SCI Inc\",\n        \"Sara Lee Corp\",\n        \"SBC Communications Inc\",\n        \"Scana Corp.\",\n        \"Schering-Plough Corp\",\n        \"Scholastic Corp\",\n        \"SCI Systems Onc.\",\n        \"Science Applications Intl. Inc.\",\n        \"Scientific-Atlanta Inc\",\n        \"Scotts Company\",\n        \"Seaboard Corp\",\n        \"Sealed Air Corp\",\n        \"Sears Roebuck & Co\",\n        \"Sempra Energy\",\n        \"Sequa Corp\",\n        \"Service Corp. International\",\n        \"ServiceMaster Co\",\n        \"Shaw Group Inc\",\n        \"Sherwin-Williams Company\",\n        \"Shopko Stores Inc\",\n        \"Siebel Systems Inc\",\n        \"Sierra Health Services Inc\",\n        \"Sierra Pacific Resources\",\n        \"Silgan Holdings Inc.\",\n        \"Silicon Graphics Inc\",\n        \"Simon Property Group Inc\",\n        \"SLM Corporation\",\n        \"Smith International Inc\",\n        \"Smithfield Foods Inc\",\n        \"Smurfit-Stone Container Corp\",\n        \"Snap-On Inc\",\n        \"Solectron Corp\",\n        \"Solutia Inc\",\n        \"Sonic Automotive Inc.\",\n        \"Sonoco Products Co.\",\n        \"Southern Company\",\n        \"Southern Union Company\",\n        \"SouthTrust Corp.\",\n        \"Southwest Airlines Co\",\n        \"Southwest Gas Corp\",\n        \"Sovereign Bancorp Inc.\",\n        \"Spartan Stores Inc\",\n        \"Spherion Corp\",\n        \"Sports Authority Inc\",\n        \"Sprint Corp.\",\n        \"SPX Corp\",\n        \"St. Jude Medical Inc\",\n        \"St. Paul Cos.\",\n        \"Staff Leasing Inc.\",\n        \"StanCorp Financial Group Inc\",\n        \"Standard Pacific Corp.\",\n        \"Stanley Works\",\n        \"Staples Inc\",\n        \"Starbucks Corp\",\n        \"Starwood Hotels & Resorts Worldwide Inc\",\n        \"State Street Corp.\",\n        \"Stater Bros. Holdings Inc.\",\n        \"Steelcase Inc\",\n        \"Stein Mart Inc\",\n        \"Stewart & Stevenson Services Inc\",\n        \"Stewart Information Services Corp\",\n        \"Stilwell Financial Inc\",\n        \"Storage Technology Corporation\",\n        \"Stryker Corp\",\n        \"Sun Healthcare Group Inc.\",\n        \"Sun Microsystems Inc.\",\n        \"SunGard Data Systems Inc.\",\n        \"Sunoco Inc.\",\n        \"SunTrust Banks Inc\",\n        \"Supervalu Inc\",\n        \"Swift Transportation, Co., Inc\",\n        \"Symbol Technologies Inc\",\n        \"Synovus Financial Corp.\",\n        \"Sysco Corp\",\n        \"Systemax Inc.\",\n        \"Target Corp.\",\n        \"Tech Data Corporation\",\n        \"TECO Energy Inc\",\n        \"Tecumseh Products Company\",\n        \"Tektronix Inc\",\n        \"Teleflex Incorporated\",\n        \"Telephone & Data Systems Inc\",\n        \"Tellabs Inc.\",\n        \"Temple-Inland Inc\",\n        \"Tenet Healthcare Corporation\",\n        \"Tenneco Automotive Inc.\",\n        \"Teradyne Inc\",\n        \"Terex Corp\",\n        \"Tesoro Petroleum Corp.\",\n        \"Texas Industries Inc.\",\n        \"Texas Instruments Incorporated\",\n        \"Textron Inc\",\n        \"Thermo Electron Corporation\",\n        \"Thomas & Betts Corporation\",\n        \"Tiffany & Co\",\n        \"Timken Company\",\n        \"TJX Companies Inc\",\n        \"TMP Worldwide Inc\",\n        \"Toll Brothers Inc\",\n        \"Torchmark Corporation\",\n        \"Toro Company\",\n        \"Tower Automotive Inc.\",\n        \"Toys 'R' Us Inc\",\n        \"Trans World Entertainment Corp.\",\n        \"TransMontaigne Inc\",\n        \"Transocean Inc\",\n        \"TravelCenters of America Inc.\",\n        \"Triad Hospitals Inc\",\n        \"Tribune Company\",\n        \"Trigon Healthcare Inc.\",\n        \"Trinity Industries Inc\",\n        \"Trump Hotels & Casino Resorts Inc.\",\n        \"TruServ Corporation\",\n        \"TRW Inc\",\n        \"TXU Corp\",\n        \"Tyson Foods Inc\",\n        \"U.S. Bancorp\",\n        \"U.S. Industries Inc.\",\n        \"UAL Corporation\",\n        \"UGI Corporation\",\n        \"Unified Western Grocers Inc\",\n        \"Union Pacific Corporation\",\n        \"Union Planters Corp\",\n        \"Unisource Energy Corp\",\n        \"Unisys Corporation\",\n        \"United Auto Group Inc\",\n        \"United Defense Industries Inc.\",\n        \"United Parcel Service Inc\",\n        \"United Rentals Inc\",\n        \"United Stationers Inc\",\n        \"United Technologies Corporation\",\n        \"UnitedHealth Group Incorporated\",\n        \"Unitrin Inc\",\n        \"Universal Corporation\",\n        \"Universal Forest Products Inc\",\n        \"Universal Health Services Inc\",\n        \"Unocal Corporation\",\n        \"Unova Inc\",\n        \"UnumProvident Corporation\",\n        \"URS Corporation\",\n        \"US Airways Group Inc\",\n        \"US Oncology Inc\",\n        \"USA Interactive\",\n        \"USFreighways Corporation\",\n        \"USG Corporation\",\n        \"UST Inc\",\n        \"Valero Energy Corporation\",\n        \"Valspar Corporation\",\n        \"Value City Department Stores Inc\",\n        \"Varco International Inc\",\n        \"Vectren Corporation\",\n        \"Veritas Software Corporation\",\n        \"Verizon Communications Inc\",\n        \"VF Corporation\",\n        \"Viacom Inc\",\n        \"Viad Corp\",\n        \"Viasystems Group Inc\",\n        \"Vishay Intertechnology Inc\",\n        \"Visteon Corporation\",\n        \"Volt Information Sciences Inc\",\n        \"Vulcan Materials Company\",\n        \"W.R. Berkley Corporation\",\n        \"W.R. Grace & Co\",\n        \"W.W. Grainger Inc\",\n        \"Wachovia Corporation\",\n        \"Wakenhut Corporation\",\n        \"Walgreen Co\",\n        \"Wallace Computer Services Inc\",\n        \"Wal-Mart Stores Inc\",\n        \"Walt Disney Co\",\n        \"Walter Industries Inc\",\n        \"Washington Mutual Inc\",\n        \"Washington Post Co.\",\n        \"Waste Management Inc\",\n        \"Watsco Inc\",\n        \"Weatherford International Inc\",\n        \"Weis Markets Inc.\",\n        \"Wellpoint Health Networks Inc\",\n        \"Wells Fargo & Company\",\n        \"Wendy's International Inc\",\n        \"Werner Enterprises Inc\",\n        \"WESCO International Inc\",\n        \"Western Digital Inc\",\n        \"Western Gas Resources Inc\",\n        \"WestPoint Stevens Inc\",\n        \"Weyerhauser Company\",\n        \"WGL Holdings Inc\",\n        \"Whirlpool Corporation\",\n        \"Whole Foods Market Inc\",\n        \"Willamette Industries Inc.\",\n        \"Williams Companies Inc\",\n        \"Williams Sonoma Inc\",\n        \"Winn Dixie Stores Inc\",\n        \"Wisconsin Energy Corporation\",\n        \"Wm Wrigley Jr Company\",\n        \"World Fuel Services Corporation\",\n        \"WorldCom Inc\",\n        \"Worthington Industries Inc\",\n        \"WPS Resources Corporation\",\n        \"Wyeth\",\n        \"Wyndham International Inc\",\n        \"Xcel Energy Inc\",\n        \"Xerox Corp\",\n        \"Xilinx Inc\",\n        \"XO Communications Inc\",\n        \"Yellow Corporation\",\n        \"York International Corp\",\n        \"Yum Brands Inc.\",\n        \"Zale Corporation\",\n        \"Zions Bancorporation\"\n      ],\n\n        fileExtension : {\n            \"raster\"    : [\"bmp\", \"gif\", \"gpl\", \"ico\", \"jpeg\", \"psd\", \"png\", \"psp\", \"raw\", \"tiff\"],\n            \"vector\"    : [\"3dv\", \"amf\", \"awg\", \"ai\", \"cgm\", \"cdr\", \"cmx\", \"dxf\", \"e2d\", \"egt\", \"eps\", \"fs\", \"odg\", \"svg\", \"xar\"],\n            \"3d\"        : [\"3dmf\", \"3dm\", \"3mf\", \"3ds\", \"an8\", \"aoi\", \"blend\", \"cal3d\", \"cob\", \"ctm\", \"iob\", \"jas\", \"max\", \"mb\", \"mdx\", \"obj\", \"x\", \"x3d\"],\n            \"document\"  : [\"doc\", \"docx\", \"dot\", \"html\", \"xml\", \"odt\", \"odm\", \"ott\", \"csv\", \"rtf\", \"tex\", \"xhtml\", \"xps\"]\n        },\n\n        // Data taken from https://github.com/dmfilipenko/timezones.json/blob/master/timezones.json\n        timezones: [\n                  {\n                    \"name\": \"Dateline Standard Time\",\n                    \"abbr\": \"DST\",\n                    \"offset\": -12,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-12:00) International Date Line West\",\n                    \"utc\": [\n                      \"Etc/GMT+12\"\n                    ]\n                  },\n                  {\n                    \"name\": \"UTC-11\",\n                    \"abbr\": \"U\",\n                    \"offset\": -11,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-11:00) Coordinated Universal Time-11\",\n                    \"utc\": [\n                      \"Etc/GMT+11\",\n                      \"Pacific/Midway\",\n                      \"Pacific/Niue\",\n                      \"Pacific/Pago_Pago\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Hawaiian Standard Time\",\n                    \"abbr\": \"HST\",\n                    \"offset\": -10,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-10:00) Hawaii\",\n                    \"utc\": [\n                      \"Etc/GMT+10\",\n                      \"Pacific/Honolulu\",\n                      \"Pacific/Johnston\",\n                      \"Pacific/Rarotonga\",\n                      \"Pacific/Tahiti\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Alaskan Standard Time\",\n                    \"abbr\": \"AKDT\",\n                    \"offset\": -8,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-09:00) Alaska\",\n                    \"utc\": [\n                      \"America/Anchorage\",\n                      \"America/Juneau\",\n                      \"America/Nome\",\n                      \"America/Sitka\",\n                      \"America/Yakutat\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Pacific Standard Time (Mexico)\",\n                    \"abbr\": \"PDT\",\n                    \"offset\": -7,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-08:00) Baja California\",\n                    \"utc\": [\n                      \"America/Santa_Isabel\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Pacific Daylight Time\",\n                    \"abbr\": \"PDT\",\n                    \"offset\": -7,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-07:00) Pacific Time (US & Canada)\",\n                    \"utc\": [\n                      \"America/Dawson\",\n                      \"America/Los_Angeles\",\n                      \"America/Tijuana\",\n                      \"America/Vancouver\",\n                      \"America/Whitehorse\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Pacific Standard Time\",\n                    \"abbr\": \"PST\",\n                    \"offset\": -8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-08:00) Pacific Time (US & Canada)\",\n                    \"utc\": [\n                      \"America/Dawson\",\n                      \"America/Los_Angeles\",\n                      \"America/Tijuana\",\n                      \"America/Vancouver\",\n                      \"America/Whitehorse\",\n                      \"PST8PDT\"\n                    ]\n                  },\n                  {\n                    \"name\": \"US Mountain Standard Time\",\n                    \"abbr\": \"UMST\",\n                    \"offset\": -7,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-07:00) Arizona\",\n                    \"utc\": [\n                      \"America/Creston\",\n                      \"America/Dawson_Creek\",\n                      \"America/Hermosillo\",\n                      \"America/Phoenix\",\n                      \"Etc/GMT+7\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Mountain Standard Time (Mexico)\",\n                    \"abbr\": \"MDT\",\n                    \"offset\": -6,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\",\n                    \"utc\": [\n                      \"America/Chihuahua\",\n                      \"America/Mazatlan\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Mountain Standard Time\",\n                    \"abbr\": \"MDT\",\n                    \"offset\": -6,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-07:00) Mountain Time (US & Canada)\",\n                    \"utc\": [\n                      \"America/Boise\",\n                      \"America/Cambridge_Bay\",\n                      \"America/Denver\",\n                      \"America/Edmonton\",\n                      \"America/Inuvik\",\n                      \"America/Ojinaga\",\n                      \"America/Yellowknife\",\n                      \"MST7MDT\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central America Standard Time\",\n                    \"abbr\": \"CAST\",\n                    \"offset\": -6,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-06:00) Central America\",\n                    \"utc\": [\n                      \"America/Belize\",\n                      \"America/Costa_Rica\",\n                      \"America/El_Salvador\",\n                      \"America/Guatemala\",\n                      \"America/Managua\",\n                      \"America/Tegucigalpa\",\n                      \"Etc/GMT+6\",\n                      \"Pacific/Galapagos\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Standard Time\",\n                    \"abbr\": \"CDT\",\n                    \"offset\": -5,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-06:00) Central Time (US & Canada)\",\n                    \"utc\": [\n                      \"America/Chicago\",\n                      \"America/Indiana/Knox\",\n                      \"America/Indiana/Tell_City\",\n                      \"America/Matamoros\",\n                      \"America/Menominee\",\n                      \"America/North_Dakota/Beulah\",\n                      \"America/North_Dakota/Center\",\n                      \"America/North_Dakota/New_Salem\",\n                      \"America/Rainy_River\",\n                      \"America/Rankin_Inlet\",\n                      \"America/Resolute\",\n                      \"America/Winnipeg\",\n                      \"CST6CDT\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Standard Time (Mexico)\",\n                    \"abbr\": \"CDT\",\n                    \"offset\": -5,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\",\n                    \"utc\": [\n                      \"America/Bahia_Banderas\",\n                      \"America/Cancun\",\n                      \"America/Merida\",\n                      \"America/Mexico_City\",\n                      \"America/Monterrey\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Canada Central Standard Time\",\n                    \"abbr\": \"CCST\",\n                    \"offset\": -6,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-06:00) Saskatchewan\",\n                    \"utc\": [\n                      \"America/Regina\",\n                      \"America/Swift_Current\"\n                    ]\n                  },\n                  {\n                    \"name\": \"SA Pacific Standard Time\",\n                    \"abbr\": \"SPST\",\n                    \"offset\": -5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-05:00) Bogota, Lima, Quito\",\n                    \"utc\": [\n                      \"America/Bogota\",\n                      \"America/Cayman\",\n                      \"America/Coral_Harbour\",\n                      \"America/Eirunepe\",\n                      \"America/Guayaquil\",\n                      \"America/Jamaica\",\n                      \"America/Lima\",\n                      \"America/Panama\",\n                      \"America/Rio_Branco\",\n                      \"Etc/GMT+5\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Eastern Standard Time\",\n                    \"abbr\": \"EDT\",\n                    \"offset\": -4,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-05:00) Eastern Time (US & Canada)\",\n                    \"utc\": [\n                      \"America/Detroit\",\n                      \"America/Havana\",\n                      \"America/Indiana/Petersburg\",\n                      \"America/Indiana/Vincennes\",\n                      \"America/Indiana/Winamac\",\n                      \"America/Iqaluit\",\n                      \"America/Kentucky/Monticello\",\n                      \"America/Louisville\",\n                      \"America/Montreal\",\n                      \"America/Nassau\",\n                      \"America/New_York\",\n                      \"America/Nipigon\",\n                      \"America/Pangnirtung\",\n                      \"America/Port-au-Prince\",\n                      \"America/Thunder_Bay\",\n                      \"America/Toronto\",\n                      \"EST5EDT\"\n                    ]\n                  },\n                  {\n                    \"name\": \"US Eastern Standard Time\",\n                    \"abbr\": \"UEDT\",\n                    \"offset\": -4,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-05:00) Indiana (East)\",\n                    \"utc\": [\n                      \"America/Indiana/Marengo\",\n                      \"America/Indiana/Vevay\",\n                      \"America/Indianapolis\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Venezuela Standard Time\",\n                    \"abbr\": \"VST\",\n                    \"offset\": -4.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-04:30) Caracas\",\n                    \"utc\": [\n                      \"America/Caracas\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Paraguay Standard Time\",\n                    \"abbr\": \"PYT\",\n                    \"offset\": -4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-04:00) Asuncion\",\n                    \"utc\": [\n                      \"America/Asuncion\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Atlantic Standard Time\",\n                    \"abbr\": \"ADT\",\n                    \"offset\": -3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-04:00) Atlantic Time (Canada)\",\n                    \"utc\": [\n                      \"America/Glace_Bay\",\n                      \"America/Goose_Bay\",\n                      \"America/Halifax\",\n                      \"America/Moncton\",\n                      \"America/Thule\",\n                      \"Atlantic/Bermuda\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Brazilian Standard Time\",\n                    \"abbr\": \"CBST\",\n                    \"offset\": -4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-04:00) Cuiaba\",\n                    \"utc\": [\n                      \"America/Campo_Grande\",\n                      \"America/Cuiaba\"\n                    ]\n                  },\n                  {\n                    \"name\": \"SA Western Standard Time\",\n                    \"abbr\": \"SWST\",\n                    \"offset\": -4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan\",\n                    \"utc\": [\n                      \"America/Anguilla\",\n                      \"America/Antigua\",\n                      \"America/Aruba\",\n                      \"America/Barbados\",\n                      \"America/Blanc-Sablon\",\n                      \"America/Boa_Vista\",\n                      \"America/Curacao\",\n                      \"America/Dominica\",\n                      \"America/Grand_Turk\",\n                      \"America/Grenada\",\n                      \"America/Guadeloupe\",\n                      \"America/Guyana\",\n                      \"America/Kralendijk\",\n                      \"America/La_Paz\",\n                      \"America/Lower_Princes\",\n                      \"America/Manaus\",\n                      \"America/Marigot\",\n                      \"America/Martinique\",\n                      \"America/Montserrat\",\n                      \"America/Port_of_Spain\",\n                      \"America/Porto_Velho\",\n                      \"America/Puerto_Rico\",\n                      \"America/Santo_Domingo\",\n                      \"America/St_Barthelemy\",\n                      \"America/St_Kitts\",\n                      \"America/St_Lucia\",\n                      \"America/St_Thomas\",\n                      \"America/St_Vincent\",\n                      \"America/Tortola\",\n                      \"Etc/GMT+4\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Pacific SA Standard Time\",\n                    \"abbr\": \"PSST\",\n                    \"offset\": -4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-04:00) Santiago\",\n                    \"utc\": [\n                      \"America/Santiago\",\n                      \"Antarctica/Palmer\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Newfoundland Standard Time\",\n                    \"abbr\": \"NDT\",\n                    \"offset\": -2.5,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-03:30) Newfoundland\",\n                    \"utc\": [\n                      \"America/St_Johns\"\n                    ]\n                  },\n                  {\n                    \"name\": \"E. South America Standard Time\",\n                    \"abbr\": \"ESAST\",\n                    \"offset\": -3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-03:00) Brasilia\",\n                    \"utc\": [\n                      \"America/Sao_Paulo\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Argentina Standard Time\",\n                    \"abbr\": \"AST\",\n                    \"offset\": -3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-03:00) Buenos Aires\",\n                    \"utc\": [\n                      \"America/Argentina/La_Rioja\",\n                      \"America/Argentina/Rio_Gallegos\",\n                      \"America/Argentina/Salta\",\n                      \"America/Argentina/San_Juan\",\n                      \"America/Argentina/San_Luis\",\n                      \"America/Argentina/Tucuman\",\n                      \"America/Argentina/Ushuaia\",\n                      \"America/Buenos_Aires\",\n                      \"America/Catamarca\",\n                      \"America/Cordoba\",\n                      \"America/Jujuy\",\n                      \"America/Mendoza\"\n                    ]\n                  },\n                  {\n                    \"name\": \"SA Eastern Standard Time\",\n                    \"abbr\": \"SEST\",\n                    \"offset\": -3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-03:00) Cayenne, Fortaleza\",\n                    \"utc\": [\n                      \"America/Araguaina\",\n                      \"America/Belem\",\n                      \"America/Cayenne\",\n                      \"America/Fortaleza\",\n                      \"America/Maceio\",\n                      \"America/Paramaribo\",\n                      \"America/Recife\",\n                      \"America/Santarem\",\n                      \"Antarctica/Rothera\",\n                      \"Atlantic/Stanley\",\n                      \"Etc/GMT+3\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Greenland Standard Time\",\n                    \"abbr\": \"GDT\",\n                    \"offset\": -3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-03:00) Greenland\",\n                    \"utc\": [\n                      \"America/Godthab\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Montevideo Standard Time\",\n                    \"abbr\": \"MST\",\n                    \"offset\": -3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-03:00) Montevideo\",\n                    \"utc\": [\n                      \"America/Montevideo\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Bahia Standard Time\",\n                    \"abbr\": \"BST\",\n                    \"offset\": -3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-03:00) Salvador\",\n                    \"utc\": [\n                      \"America/Bahia\"\n                    ]\n                  },\n                  {\n                    \"name\": \"UTC-02\",\n                    \"abbr\": \"U\",\n                    \"offset\": -2,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-02:00) Coordinated Universal Time-02\",\n                    \"utc\": [\n                      \"America/Noronha\",\n                      \"Atlantic/South_Georgia\",\n                      \"Etc/GMT+2\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Mid-Atlantic Standard Time\",\n                    \"abbr\": \"MDT\",\n                    \"offset\": -1,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-02:00) Mid-Atlantic - Old\",\n                    \"utc\": []\n                  },\n                  {\n                    \"name\": \"Azores Standard Time\",\n                    \"abbr\": \"ADT\",\n                    \"offset\": 0,\n                    \"isdst\": true,\n                    \"text\": \"(UTC-01:00) Azores\",\n                    \"utc\": [\n                      \"America/Scoresbysund\",\n                      \"Atlantic/Azores\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Cape Verde Standard Time\",\n                    \"abbr\": \"CVST\",\n                    \"offset\": -1,\n                    \"isdst\": false,\n                    \"text\": \"(UTC-01:00) Cape Verde Is.\",\n                    \"utc\": [\n                      \"Atlantic/Cape_Verde\",\n                      \"Etc/GMT+1\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Morocco Standard Time\",\n                    \"abbr\": \"MDT\",\n                    \"offset\": 1,\n                    \"isdst\": true,\n                    \"text\": \"(UTC) Casablanca\",\n                    \"utc\": [\n                      \"Africa/Casablanca\",\n                      \"Africa/El_Aaiun\"\n                    ]\n                  },\n                  {\n                    \"name\": \"UTC\",\n                    \"abbr\": \"UTC\",\n                    \"offset\": 0,\n                    \"isdst\": false,\n                    \"text\": \"(UTC) Coordinated Universal Time\",\n                    \"utc\": [\n                      \"America/Danmarkshavn\",\n                      \"Etc/GMT\"\n                    ]\n                  },\n                  {\n                    \"name\": \"GMT Standard Time\",\n                    \"abbr\": \"GMT\",\n                    \"offset\": 0,\n                    \"isdst\": false,\n                    \"text\": \"(UTC) Edinburgh, London\",\n                    \"utc\": [\n                      \"Europe/Isle_of_Man\",\n                      \"Europe/Guernsey\",\n                      \"Europe/Jersey\",\n                      \"Europe/London\"\n                    ]\n                  },\n                  {\n                    \"name\": \"British Summer Time\",\n                    \"abbr\": \"BST\",\n                    \"offset\": 1,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+01:00) Edinburgh, London\",\n                    \"utc\": [\n                      \"Europe/Isle_of_Man\",\n                      \"Europe/Guernsey\",\n                      \"Europe/Jersey\",\n                      \"Europe/London\"\n                    ]\n                  },\n                  {\n                    \"name\": \"GMT Standard Time\",\n                    \"abbr\": \"GDT\",\n                    \"offset\": 1,\n                    \"isdst\": true,\n                    \"text\": \"(UTC) Dublin, Lisbon\",\n                    \"utc\": [\n                      \"Atlantic/Canary\",\n                      \"Atlantic/Faeroe\",\n                      \"Atlantic/Madeira\",\n                      \"Europe/Dublin\",\n                      \"Europe/Lisbon\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Greenwich Standard Time\",\n                    \"abbr\": \"GST\",\n                    \"offset\": 0,\n                    \"isdst\": false,\n                    \"text\": \"(UTC) Monrovia, Reykjavik\",\n                    \"utc\": [\n                      \"Africa/Abidjan\",\n                      \"Africa/Accra\",\n                      \"Africa/Bamako\",\n                      \"Africa/Banjul\",\n                      \"Africa/Bissau\",\n                      \"Africa/Conakry\",\n                      \"Africa/Dakar\",\n                      \"Africa/Freetown\",\n                      \"Africa/Lome\",\n                      \"Africa/Monrovia\",\n                      \"Africa/Nouakchott\",\n                      \"Africa/Ouagadougou\",\n                      \"Africa/Sao_Tome\",\n                      \"Atlantic/Reykjavik\",\n                      \"Atlantic/St_Helena\"\n                    ]\n                  },\n                  {\n                    \"name\": \"W. Europe Standard Time\",\n                    \"abbr\": \"WEDT\",\n                    \"offset\": 2,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\",\n                    \"utc\": [\n                      \"Arctic/Longyearbyen\",\n                      \"Europe/Amsterdam\",\n                      \"Europe/Andorra\",\n                      \"Europe/Berlin\",\n                      \"Europe/Busingen\",\n                      \"Europe/Gibraltar\",\n                      \"Europe/Luxembourg\",\n                      \"Europe/Malta\",\n                      \"Europe/Monaco\",\n                      \"Europe/Oslo\",\n                      \"Europe/Rome\",\n                      \"Europe/San_Marino\",\n                      \"Europe/Stockholm\",\n                      \"Europe/Vaduz\",\n                      \"Europe/Vatican\",\n                      \"Europe/Vienna\",\n                      \"Europe/Zurich\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Europe Standard Time\",\n                    \"abbr\": \"CEDT\",\n                    \"offset\": 2,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague\",\n                    \"utc\": [\n                      \"Europe/Belgrade\",\n                      \"Europe/Bratislava\",\n                      \"Europe/Budapest\",\n                      \"Europe/Ljubljana\",\n                      \"Europe/Podgorica\",\n                      \"Europe/Prague\",\n                      \"Europe/Tirane\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Romance Standard Time\",\n                    \"abbr\": \"RDT\",\n                    \"offset\": 2,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris\",\n                    \"utc\": [\n                      \"Africa/Ceuta\",\n                      \"Europe/Brussels\",\n                      \"Europe/Copenhagen\",\n                      \"Europe/Madrid\",\n                      \"Europe/Paris\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central European Standard Time\",\n                    \"abbr\": \"CEDT\",\n                    \"offset\": 2,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb\",\n                    \"utc\": [\n                      \"Europe/Sarajevo\",\n                      \"Europe/Skopje\",\n                      \"Europe/Warsaw\",\n                      \"Europe/Zagreb\"\n                    ]\n                  },\n                  {\n                    \"name\": \"W. Central Africa Standard Time\",\n                    \"abbr\": \"WCAST\",\n                    \"offset\": 1,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+01:00) West Central Africa\",\n                    \"utc\": [\n                      \"Africa/Algiers\",\n                      \"Africa/Bangui\",\n                      \"Africa/Brazzaville\",\n                      \"Africa/Douala\",\n                      \"Africa/Kinshasa\",\n                      \"Africa/Lagos\",\n                      \"Africa/Libreville\",\n                      \"Africa/Luanda\",\n                      \"Africa/Malabo\",\n                      \"Africa/Ndjamena\",\n                      \"Africa/Niamey\",\n                      \"Africa/Porto-Novo\",\n                      \"Africa/Tunis\",\n                      \"Etc/GMT-1\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Namibia Standard Time\",\n                    \"abbr\": \"NST\",\n                    \"offset\": 1,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+01:00) Windhoek\",\n                    \"utc\": [\n                      \"Africa/Windhoek\"\n                    ]\n                  },\n                  {\n                    \"name\": \"GTB Standard Time\",\n                    \"abbr\": \"GDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) Athens, Bucharest\",\n                    \"utc\": [\n                      \"Asia/Nicosia\",\n                      \"Europe/Athens\",\n                      \"Europe/Bucharest\",\n                      \"Europe/Chisinau\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Middle East Standard Time\",\n                    \"abbr\": \"MEDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) Beirut\",\n                    \"utc\": [\n                      \"Asia/Beirut\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Egypt Standard Time\",\n                    \"abbr\": \"EST\",\n                    \"offset\": 2,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+02:00) Cairo\",\n                    \"utc\": [\n                      \"Africa/Cairo\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Syria Standard Time\",\n                    \"abbr\": \"SDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) Damascus\",\n                    \"utc\": [\n                      \"Asia/Damascus\"\n                    ]\n                  },\n                  {\n                    \"name\": \"E. Europe Standard Time\",\n                    \"abbr\": \"EEDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) E. Europe\",\n                    \"utc\": [\n                      \"Asia/Nicosia\",\n                      \"Europe/Athens\",\n                      \"Europe/Bucharest\",\n                      \"Europe/Chisinau\",\n                      \"Europe/Helsinki\",\n                      \"Europe/Kiev\",\n                      \"Europe/Mariehamn\",\n                      \"Europe/Nicosia\",\n                      \"Europe/Riga\",\n                      \"Europe/Sofia\",\n                      \"Europe/Tallinn\",\n                      \"Europe/Uzhgorod\",\n                      \"Europe/Vilnius\",\n                      \"Europe/Zaporozhye\"\n                    ]\n                  },\n                  {\n                    \"name\": \"South Africa Standard Time\",\n                    \"abbr\": \"SAST\",\n                    \"offset\": 2,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+02:00) Harare, Pretoria\",\n                    \"utc\": [\n                      \"Africa/Blantyre\",\n                      \"Africa/Bujumbura\",\n                      \"Africa/Gaborone\",\n                      \"Africa/Harare\",\n                      \"Africa/Johannesburg\",\n                      \"Africa/Kigali\",\n                      \"Africa/Lubumbashi\",\n                      \"Africa/Lusaka\",\n                      \"Africa/Maputo\",\n                      \"Africa/Maseru\",\n                      \"Africa/Mbabane\",\n                      \"Etc/GMT-2\"\n                    ]\n                  },\n                  {\n                    \"name\": \"FLE Standard Time\",\n                    \"abbr\": \"FDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius\",\n                    \"utc\": [\n                      \"Europe/Helsinki\",\n                      \"Europe/Kiev\",\n                      \"Europe/Mariehamn\",\n                      \"Europe/Riga\",\n                      \"Europe/Sofia\",\n                      \"Europe/Tallinn\",\n                      \"Europe/Uzhgorod\",\n                      \"Europe/Vilnius\",\n                      \"Europe/Zaporozhye\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Turkey Standard Time\",\n                    \"abbr\": \"TDT\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Istanbul\",\n                    \"utc\": [\n                      \"Europe/Istanbul\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Israel Standard Time\",\n                    \"abbr\": \"JDT\",\n                    \"offset\": 3,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+02:00) Jerusalem\",\n                    \"utc\": [\n                      \"Asia/Jerusalem\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Libya Standard Time\",\n                    \"abbr\": \"LST\",\n                    \"offset\": 2,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+02:00) Tripoli\",\n                    \"utc\": [\n                      \"Africa/Tripoli\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Jordan Standard Time\",\n                    \"abbr\": \"JST\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Amman\",\n                    \"utc\": [\n                      \"Asia/Amman\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Arabic Standard Time\",\n                    \"abbr\": \"AST\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Baghdad\",\n                    \"utc\": [\n                      \"Asia/Baghdad\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Kaliningrad Standard Time\",\n                    \"abbr\": \"KST\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+02:00) Kaliningrad\",\n                    \"utc\": [\n                      \"Europe/Kaliningrad\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Arab Standard Time\",\n                    \"abbr\": \"AST\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Kuwait, Riyadh\",\n                    \"utc\": [\n                      \"Asia/Aden\",\n                      \"Asia/Bahrain\",\n                      \"Asia/Kuwait\",\n                      \"Asia/Qatar\",\n                      \"Asia/Riyadh\"\n                    ]\n                  },\n                  {\n                    \"name\": \"E. Africa Standard Time\",\n                    \"abbr\": \"EAST\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Nairobi\",\n                    \"utc\": [\n                      \"Africa/Addis_Ababa\",\n                      \"Africa/Asmera\",\n                      \"Africa/Dar_es_Salaam\",\n                      \"Africa/Djibouti\",\n                      \"Africa/Juba\",\n                      \"Africa/Kampala\",\n                      \"Africa/Khartoum\",\n                      \"Africa/Mogadishu\",\n                      \"Africa/Nairobi\",\n                      \"Antarctica/Syowa\",\n                      \"Etc/GMT-3\",\n                      \"Indian/Antananarivo\",\n                      \"Indian/Comoro\",\n                      \"Indian/Mayotte\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Moscow Standard Time\",\n                    \"abbr\": \"MSK\",\n                    \"offset\": 3,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk\",\n                    \"utc\": [\n                        \"Europe/Kirov\",\n                      \"Europe/Moscow\",\n                      \"Europe/Simferopol\",\n                      \"Europe/Volgograd\",\n                      \"Europe/Minsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Samara Time\",\n                    \"abbr\": \"SAMT\",\n                    \"offset\": 4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:00) Samara, Ulyanovsk, Saratov\",\n                    \"utc\": [\n                        \"Europe/Astrakhan\",\n                      \"Europe/Samara\",\n                        \"Europe/Ulyanovsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Iran Standard Time\",\n                    \"abbr\": \"IDT\",\n                    \"offset\": 4.5,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+03:30) Tehran\",\n                    \"utc\": [\n                      \"Asia/Tehran\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Arabian Standard Time\",\n                    \"abbr\": \"AST\",\n                    \"offset\": 4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:00) Abu Dhabi, Muscat\",\n                    \"utc\": [\n                      \"Asia/Dubai\",\n                      \"Asia/Muscat\",\n                      \"Etc/GMT-4\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Azerbaijan Standard Time\",\n                    \"abbr\": \"ADT\",\n                    \"offset\": 5,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+04:00) Baku\",\n                    \"utc\": [\n                      \"Asia/Baku\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Mauritius Standard Time\",\n                    \"abbr\": \"MST\",\n                    \"offset\": 4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:00) Port Louis\",\n                    \"utc\": [\n                      \"Indian/Mahe\",\n                      \"Indian/Mauritius\",\n                      \"Indian/Reunion\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Georgian Standard Time\",\n                    \"abbr\": \"GET\",\n                    \"offset\": 4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:00) Tbilisi\",\n                    \"utc\": [\n                      \"Asia/Tbilisi\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Caucasus Standard Time\",\n                    \"abbr\": \"CST\",\n                    \"offset\": 4,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:00) Yerevan\",\n                    \"utc\": [\n                      \"Asia/Yerevan\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Afghanistan Standard Time\",\n                    \"abbr\": \"AST\",\n                    \"offset\": 4.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+04:30) Kabul\",\n                    \"utc\": [\n                      \"Asia/Kabul\"\n                    ]\n                  },\n                  {\n                    \"name\": \"West Asia Standard Time\",\n                    \"abbr\": \"WAST\",\n                    \"offset\": 5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:00) Ashgabat, Tashkent\",\n                    \"utc\": [\n                      \"Antarctica/Mawson\",\n                      \"Asia/Aqtau\",\n                      \"Asia/Aqtobe\",\n                      \"Asia/Ashgabat\",\n                      \"Asia/Dushanbe\",\n                      \"Asia/Oral\",\n                      \"Asia/Samarkand\",\n                      \"Asia/Tashkent\",\n                      \"Etc/GMT-5\",\n                      \"Indian/Kerguelen\",\n                      \"Indian/Maldives\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Yekaterinburg Time\",\n                    \"abbr\": \"YEKT\",\n                    \"offset\": 5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:00) Yekaterinburg\",\n                    \"utc\": [\n                      \"Asia/Yekaterinburg\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Pakistan Standard Time\",\n                    \"abbr\": \"PKT\",\n                    \"offset\": 5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:00) Islamabad, Karachi\",\n                    \"utc\": [\n                      \"Asia/Karachi\"\n                    ]\n                  },\n                  {\n                    \"name\": \"India Standard Time\",\n                    \"abbr\": \"IST\",\n                    \"offset\": 5.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi\",\n                    \"utc\": [\n                      \"Asia/Kolkata\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Sri Lanka Standard Time\",\n                    \"abbr\": \"SLST\",\n                    \"offset\": 5.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:30) Sri Jayawardenepura\",\n                    \"utc\": [\n                      \"Asia/Colombo\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Nepal Standard Time\",\n                    \"abbr\": \"NST\",\n                    \"offset\": 5.75,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+05:45) Kathmandu\",\n                    \"utc\": [\n                      \"Asia/Kathmandu\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Asia Standard Time\",\n                    \"abbr\": \"CAST\",\n                    \"offset\": 6,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+06:00) Nur-Sultan (Astana)\",\n                    \"utc\": [\n                      \"Antarctica/Vostok\",\n                      \"Asia/Almaty\",\n                      \"Asia/Bishkek\",\n                      \"Asia/Qyzylorda\",\n                      \"Asia/Urumqi\",\n                      \"Etc/GMT-6\",\n                      \"Indian/Chagos\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Bangladesh Standard Time\",\n                    \"abbr\": \"BST\",\n                    \"offset\": 6,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+06:00) Dhaka\",\n                    \"utc\": [\n                      \"Asia/Dhaka\",\n                      \"Asia/Thimphu\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Myanmar Standard Time\",\n                    \"abbr\": \"MST\",\n                    \"offset\": 6.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+06:30) Yangon (Rangoon)\",\n                    \"utc\": [\n                      \"Asia/Rangoon\",\n                      \"Indian/Cocos\"\n                    ]\n                  },\n                  {\n                    \"name\": \"SE Asia Standard Time\",\n                    \"abbr\": \"SAST\",\n                    \"offset\": 7,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+07:00) Bangkok, Hanoi, Jakarta\",\n                    \"utc\": [\n                      \"Antarctica/Davis\",\n                      \"Asia/Bangkok\",\n                      \"Asia/Hovd\",\n                      \"Asia/Jakarta\",\n                      \"Asia/Phnom_Penh\",\n                      \"Asia/Pontianak\",\n                      \"Asia/Saigon\",\n                      \"Asia/Vientiane\",\n                      \"Etc/GMT-7\",\n                      \"Indian/Christmas\"\n                    ]\n                  },\n                  {\n                    \"name\": \"N. Central Asia Standard Time\",\n                    \"abbr\": \"NCAST\",\n                    \"offset\": 7,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+07:00) Novosibirsk\",\n                    \"utc\": [\n                      \"Asia/Novokuznetsk\",\n                      \"Asia/Novosibirsk\",\n                      \"Asia/Omsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"China Standard Time\",\n                    \"abbr\": \"CST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi\",\n                    \"utc\": [\n                      \"Asia/Hong_Kong\",\n                      \"Asia/Macau\",\n                      \"Asia/Shanghai\"\n                    ]\n                  },\n                  {\n                    \"name\": \"North Asia Standard Time\",\n                    \"abbr\": \"NAST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Krasnoyarsk\",\n                    \"utc\": [\n                      \"Asia/Krasnoyarsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Singapore Standard Time\",\n                    \"abbr\": \"MPST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Kuala Lumpur, Singapore\",\n                    \"utc\": [\n                      \"Asia/Brunei\",\n                      \"Asia/Kuala_Lumpur\",\n                      \"Asia/Kuching\",\n                      \"Asia/Makassar\",\n                      \"Asia/Manila\",\n                      \"Asia/Singapore\",\n                      \"Etc/GMT-8\"\n                    ]\n                  },\n                  {\n                    \"name\": \"W. Australia Standard Time\",\n                    \"abbr\": \"WAST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Perth\",\n                    \"utc\": [\n                      \"Antarctica/Casey\",\n                      \"Australia/Perth\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Taipei Standard Time\",\n                    \"abbr\": \"TST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Taipei\",\n                    \"utc\": [\n                      \"Asia/Taipei\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Ulaanbaatar Standard Time\",\n                    \"abbr\": \"UST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Ulaanbaatar\",\n                    \"utc\": [\n                      \"Asia/Choibalsan\",\n                      \"Asia/Ulaanbaatar\"\n                    ]\n                  },\n                  {\n                    \"name\": \"North Asia East Standard Time\",\n                    \"abbr\": \"NAEST\",\n                    \"offset\": 8,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+08:00) Irkutsk\",\n                    \"utc\": [\n                      \"Asia/Irkutsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Japan Standard Time\",\n                    \"abbr\": \"JST\",\n                    \"offset\": 9,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+09:00) Osaka, Sapporo, Tokyo\",\n                    \"utc\": [\n                      \"Asia/Dili\",\n                      \"Asia/Jayapura\",\n                      \"Asia/Tokyo\",\n                      \"Etc/GMT-9\",\n                      \"Pacific/Palau\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Korea Standard Time\",\n                    \"abbr\": \"KST\",\n                    \"offset\": 9,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+09:00) Seoul\",\n                    \"utc\": [\n                      \"Asia/Pyongyang\",\n                      \"Asia/Seoul\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Cen. Australia Standard Time\",\n                    \"abbr\": \"CAST\",\n                    \"offset\": 9.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+09:30) Adelaide\",\n                    \"utc\": [\n                      \"Australia/Adelaide\",\n                      \"Australia/Broken_Hill\"\n                    ]\n                  },\n                  {\n                    \"name\": \"AUS Central Standard Time\",\n                    \"abbr\": \"ACST\",\n                    \"offset\": 9.5,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+09:30) Darwin\",\n                    \"utc\": [\n                      \"Australia/Darwin\"\n                    ]\n                  },\n                  {\n                    \"name\": \"E. Australia Standard Time\",\n                    \"abbr\": \"EAST\",\n                    \"offset\": 10,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+10:00) Brisbane\",\n                    \"utc\": [\n                      \"Australia/Brisbane\",\n                      \"Australia/Lindeman\"\n                    ]\n                  },\n                  {\n                    \"name\": \"AUS Eastern Standard Time\",\n                    \"abbr\": \"AEST\",\n                    \"offset\": 10,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+10:00) Canberra, Melbourne, Sydney\",\n                    \"utc\": [\n                      \"Australia/Melbourne\",\n                      \"Australia/Sydney\"\n                    ]\n                  },\n                  {\n                    \"name\": \"West Pacific Standard Time\",\n                    \"abbr\": \"WPST\",\n                    \"offset\": 10,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+10:00) Guam, Port Moresby\",\n                    \"utc\": [\n                      \"Antarctica/DumontDUrville\",\n                      \"Etc/GMT-10\",\n                      \"Pacific/Guam\",\n                      \"Pacific/Port_Moresby\",\n                      \"Pacific/Saipan\",\n                      \"Pacific/Truk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Tasmania Standard Time\",\n                    \"abbr\": \"TST\",\n                    \"offset\": 10,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+10:00) Hobart\",\n                    \"utc\": [\n                      \"Australia/Currie\",\n                      \"Australia/Hobart\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Yakutsk Standard Time\",\n                    \"abbr\": \"YST\",\n                    \"offset\": 9,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+09:00) Yakutsk\",\n                    \"utc\": [\n                      \"Asia/Chita\",\n                      \"Asia/Khandyga\",\n                      \"Asia/Yakutsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Central Pacific Standard Time\",\n                    \"abbr\": \"CPST\",\n                    \"offset\": 11,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+11:00) Solomon Is., New Caledonia\",\n                    \"utc\": [\n                      \"Antarctica/Macquarie\",\n                      \"Etc/GMT-11\",\n                      \"Pacific/Efate\",\n                      \"Pacific/Guadalcanal\",\n                      \"Pacific/Kosrae\",\n                      \"Pacific/Noumea\",\n                      \"Pacific/Ponape\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Vladivostok Standard Time\",\n                    \"abbr\": \"VST\",\n                    \"offset\": 11,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+11:00) Vladivostok\",\n                    \"utc\": [\n                      \"Asia/Sakhalin\",\n                      \"Asia/Ust-Nera\",\n                      \"Asia/Vladivostok\"\n                    ]\n                  },\n                  {\n                    \"name\": \"New Zealand Standard Time\",\n                    \"abbr\": \"NZST\",\n                    \"offset\": 12,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+12:00) Auckland, Wellington\",\n                    \"utc\": [\n                      \"Antarctica/McMurdo\",\n                      \"Pacific/Auckland\"\n                    ]\n                  },\n                  {\n                    \"name\": \"UTC+12\",\n                    \"abbr\": \"U\",\n                    \"offset\": 12,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+12:00) Coordinated Universal Time+12\",\n                    \"utc\": [\n                      \"Etc/GMT-12\",\n                      \"Pacific/Funafuti\",\n                      \"Pacific/Kwajalein\",\n                      \"Pacific/Majuro\",\n                      \"Pacific/Nauru\",\n                      \"Pacific/Tarawa\",\n                      \"Pacific/Wake\",\n                      \"Pacific/Wallis\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Fiji Standard Time\",\n                    \"abbr\": \"FST\",\n                    \"offset\": 12,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+12:00) Fiji\",\n                    \"utc\": [\n                      \"Pacific/Fiji\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Magadan Standard Time\",\n                    \"abbr\": \"MST\",\n                    \"offset\": 12,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+12:00) Magadan\",\n                    \"utc\": [\n                      \"Asia/Anadyr\",\n                      \"Asia/Kamchatka\",\n                      \"Asia/Magadan\",\n                      \"Asia/Srednekolymsk\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Kamchatka Standard Time\",\n                    \"abbr\": \"KDT\",\n                    \"offset\": 13,\n                    \"isdst\": true,\n                    \"text\": \"(UTC+12:00) Petropavlovsk-Kamchatsky - Old\",\n                    \"utc\": [\n                      \"Asia/Kamchatka\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Tonga Standard Time\",\n                    \"abbr\": \"TST\",\n                    \"offset\": 13,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+13:00) Nuku'alofa\",\n                    \"utc\": [\n                      \"Etc/GMT-13\",\n                      \"Pacific/Enderbury\",\n                      \"Pacific/Fakaofo\",\n                      \"Pacific/Tongatapu\"\n                    ]\n                  },\n                  {\n                    \"name\": \"Samoa Standard Time\",\n                    \"abbr\": \"SST\",\n                    \"offset\": 13,\n                    \"isdst\": false,\n                    \"text\": \"(UTC+13:00) Samoa\",\n                    \"utc\": [\n                      \"Pacific/Apia\"\n                    ]\n                  }\n                ],\n        //List source: http://answers.google.com/answers/threadview/id/589312.html\n        profession: [\n            \"Airline Pilot\",\n            \"Academic Team\",\n            \"Accountant\",\n            \"Account Executive\",\n            \"Actor\",\n            \"Actuary\",\n            \"Acquisition Analyst\",\n            \"Administrative Asst.\",\n            \"Administrative Analyst\",\n            \"Administrator\",\n            \"Advertising Director\",\n            \"Aerospace Engineer\",\n            \"Agent\",\n            \"Agricultural Inspector\",\n            \"Agricultural Scientist\",\n            \"Air Traffic Controller\",\n            \"Animal Trainer\",\n            \"Anthropologist\",\n            \"Appraiser\",\n            \"Architect\",\n            \"Art Director\",\n            \"Artist\",\n            \"Astronomer\",\n            \"Athletic Coach\",\n            \"Auditor\",\n            \"Author\",\n            \"Baker\",\n            \"Banker\",\n            \"Bankruptcy Attorney\",\n            \"Benefits Manager\",\n            \"Biologist\",\n            \"Bio-feedback Specialist\",\n            \"Biomedical Engineer\",\n            \"Biotechnical Researcher\",\n            \"Broadcaster\",\n            \"Broker\",\n            \"Building Manager\",\n            \"Building Contractor\",\n            \"Building Inspector\",\n            \"Business Analyst\",\n            \"Business Planner\",\n            \"Business Manager\",\n            \"Buyer\",\n            \"Call Center Manager\",\n            \"Career Counselor\",\n            \"Cash Manager\",\n            \"Ceramic Engineer\",\n            \"Chief Executive Officer\",\n            \"Chief Operation Officer\",\n            \"Chef\",\n            \"Chemical Engineer\",\n            \"Chemist\",\n            \"Child Care Manager\",\n            \"Chief Medical Officer\",\n            \"Chiropractor\",\n            \"Cinematographer\",\n            \"City Housing Manager\",\n            \"City Manager\",\n            \"Civil Engineer\",\n            \"Claims Manager\",\n            \"Clinical Research Assistant\",\n            \"Collections Manager\",\n            \"Compliance Manager\",\n            \"Comptroller\",\n            \"Computer Manager\",\n            \"Commercial Artist\",\n            \"Communications Affairs Director\",\n            \"Communications Director\",\n            \"Communications Engineer\",\n            \"Compensation Analyst\",\n            \"Computer Programmer\",\n            \"Computer Ops. Manager\",\n            \"Computer Engineer\",\n            \"Computer Operator\",\n            \"Computer Graphics Specialist\",\n            \"Construction Engineer\",\n            \"Construction Manager\",\n            \"Consultant\",\n            \"Consumer Relations Manager\",\n            \"Contract Administrator\",\n            \"Copyright Attorney\",\n            \"Copywriter\",\n            \"Corporate Planner\",\n            \"Corrections Officer\",\n            \"Cosmetologist\",\n            \"Credit Analyst\",\n            \"Cruise Director\",\n            \"Chief Information Officer\",\n            \"Chief Technology Officer\",\n            \"Customer Service Manager\",\n            \"Cryptologist\",\n            \"Dancer\",\n            \"Data Security Manager\",\n            \"Database Manager\",\n            \"Day Care Instructor\",\n            \"Dentist\",\n            \"Designer\",\n            \"Design Engineer\",\n            \"Desktop Publisher\",\n            \"Developer\",\n            \"Development Officer\",\n            \"Diamond Merchant\",\n            \"Dietitian\",\n            \"Direct Marketer\",\n            \"Director\",\n            \"Distribution Manager\",\n            \"Diversity Manager\",\n            \"Economist\",\n            \"EEO Compliance Manager\",\n            \"Editor\",\n            \"Education Adminator\",\n            \"Electrical Engineer\",\n            \"Electro Optical Engineer\",\n            \"Electronics Engineer\",\n            \"Embassy Management\",\n            \"Employment Agent\",\n            \"Engineer Technician\",\n            \"Entrepreneur\",\n            \"Environmental Analyst\",\n            \"Environmental Attorney\",\n            \"Environmental Engineer\",\n            \"Environmental Specialist\",\n            \"Escrow Officer\",\n            \"Estimator\",\n            \"Executive Assistant\",\n            \"Executive Director\",\n            \"Executive Recruiter\",\n            \"Facilities Manager\",\n            \"Family Counselor\",\n            \"Fashion Events Manager\",\n            \"Fashion Merchandiser\",\n            \"Fast Food Manager\",\n            \"Film Producer\",\n            \"Film Production Assistant\",\n            \"Financial Analyst\",\n            \"Financial Planner\",\n            \"Financier\",\n            \"Fine Artist\",\n            \"Wildlife Specialist\",\n            \"Fitness Consultant\",\n            \"Flight Attendant\",\n            \"Flight Engineer\",\n            \"Floral Designer\",\n            \"Food & Beverage Director\",\n            \"Food Service Manager\",\n            \"Forestry Technician\",\n            \"Franchise Management\",\n            \"Franchise Sales\",\n            \"Fraud Investigator\",\n            \"Freelance Writer\",\n            \"Fund Raiser\",\n            \"General Manager\",\n            \"Geologist\",\n            \"General Counsel\",\n            \"Geriatric Specialist\",\n            \"Gerontologist\",\n            \"Glamour Photographer\",\n            \"Golf Club Manager\",\n            \"Gourmet Chef\",\n            \"Graphic Designer\",\n            \"Grounds Keeper\",\n            \"Hazardous Waste Manager\",\n            \"Health Care Manager\",\n            \"Health Therapist\",\n            \"Health Service Administrator\",\n            \"Hearing Officer\",\n            \"Home Economist\",\n            \"Horticulturist\",\n            \"Hospital Administrator\",\n            \"Hotel Manager\",\n            \"Human Resources Manager\",\n            \"Importer\",\n            \"Industrial Designer\",\n            \"Industrial Engineer\",\n            \"Information Director\",\n            \"Inside Sales\",\n            \"Insurance Adjuster\",\n            \"Interior Decorator\",\n            \"Internal Controls Director\",\n            \"International Acct.\",\n            \"International Courier\",\n            \"International Lawyer\",\n            \"Interpreter\",\n            \"Investigator\",\n            \"Investment Banker\",\n            \"Investment Manager\",\n            \"IT Architect\",\n            \"IT Project Manager\",\n            \"IT Systems Analyst\",\n            \"Jeweler\",\n            \"Joint Venture Manager\",\n            \"Journalist\",\n            \"Labor Negotiator\",\n            \"Labor Organizer\",\n            \"Labor Relations Manager\",\n            \"Lab Services Director\",\n            \"Lab Technician\",\n            \"Land Developer\",\n            \"Landscape Architect\",\n            \"Law Enforcement Officer\",\n            \"Lawyer\",\n            \"Lead Software Engineer\",\n            \"Lead Software Test Engineer\",\n            \"Leasing Manager\",\n            \"Legal Secretary\",\n            \"Library Manager\",\n            \"Litigation Attorney\",\n            \"Loan Officer\",\n            \"Lobbyist\",\n            \"Logistics Manager\",\n            \"Maintenance Manager\",\n            \"Management Consultant\",\n            \"Managed Care Director\",\n            \"Managing Partner\",\n            \"Manufacturing Director\",\n            \"Manpower Planner\",\n            \"Marine Biologist\",\n            \"Market Res. Analyst\",\n            \"Marketing Director\",\n            \"Materials Manager\",\n            \"Mathematician\",\n            \"Membership Chairman\",\n            \"Mechanic\",\n            \"Mechanical Engineer\",\n            \"Media Buyer\",\n            \"Medical Investor\",\n            \"Medical Secretary\",\n            \"Medical Technician\",\n            \"Mental Health Counselor\",\n            \"Merchandiser\",\n            \"Metallurgical Engineering\",\n            \"Meteorologist\",\n            \"Microbiologist\",\n            \"MIS Manager\",\n            \"Motion Picture Director\",\n            \"Multimedia Director\",\n            \"Musician\",\n            \"Network Administrator\",\n            \"Network Specialist\",\n            \"Network Operator\",\n            \"New Product Manager\",\n            \"Novelist\",\n            \"Nuclear Engineer\",\n            \"Nuclear Specialist\",\n            \"Nutritionist\",\n            \"Nursing Administrator\",\n            \"Occupational Therapist\",\n            \"Oceanographer\",\n            \"Office Manager\",\n            \"Operations Manager\",\n            \"Operations Research Director\",\n            \"Optical Technician\",\n            \"Optometrist\",\n            \"Organizational Development Manager\",\n            \"Outplacement Specialist\",\n            \"Paralegal\",\n            \"Park Ranger\",\n            \"Patent Attorney\",\n            \"Payroll Specialist\",\n            \"Personnel Specialist\",\n            \"Petroleum Engineer\",\n            \"Pharmacist\",\n            \"Photographer\",\n            \"Physical Therapist\",\n            \"Physician\",\n            \"Physician Assistant\",\n            \"Physicist\",\n            \"Planning Director\",\n            \"Podiatrist\",\n            \"Political Analyst\",\n            \"Political Scientist\",\n            \"Politician\",\n            \"Portfolio Manager\",\n            \"Preschool Management\",\n            \"Preschool Teacher\",\n            \"Principal\",\n            \"Private Banker\",\n            \"Private Investigator\",\n            \"Probation Officer\",\n            \"Process Engineer\",\n            \"Producer\",\n            \"Product Manager\",\n            \"Product Engineer\",\n            \"Production Engineer\",\n            \"Production Planner\",\n            \"Professional Athlete\",\n            \"Professional Coach\",\n            \"Professor\",\n            \"Project Engineer\",\n            \"Project Manager\",\n            \"Program Manager\",\n            \"Property Manager\",\n            \"Public Administrator\",\n            \"Public Safety Director\",\n            \"PR Specialist\",\n            \"Publisher\",\n            \"Purchasing Agent\",\n            \"Publishing Director\",\n            \"Quality Assurance Specialist\",\n            \"Quality Control Engineer\",\n            \"Quality Control Inspector\",\n            \"Radiology Manager\",\n            \"Railroad Engineer\",\n            \"Real Estate Broker\",\n            \"Recreational Director\",\n            \"Recruiter\",\n            \"Redevelopment Specialist\",\n            \"Regulatory Affairs Manager\",\n            \"Registered Nurse\",\n            \"Rehabilitation Counselor\",\n            \"Relocation Manager\",\n            \"Reporter\",\n            \"Research Specialist\",\n            \"Restaurant Manager\",\n            \"Retail Store Manager\",\n            \"Risk Analyst\",\n            \"Safety Engineer\",\n            \"Sales Engineer\",\n            \"Sales Trainer\",\n            \"Sales Promotion Manager\",\n            \"Sales Representative\",\n            \"Sales Manager\",\n            \"Service Manager\",\n            \"Sanitation Engineer\",\n            \"Scientific Programmer\",\n            \"Scientific Writer\",\n            \"Securities Analyst\",\n            \"Security Consultant\",\n            \"Security Director\",\n            \"Seminar Presenter\",\n            \"Ship's Officer\",\n            \"Singer\",\n            \"Social Director\",\n            \"Social Program Planner\",\n            \"Social Research\",\n            \"Social Scientist\",\n            \"Social Worker\",\n            \"Sociologist\",\n            \"Software Developer\",\n            \"Software Engineer\",\n            \"Software Test Engineer\",\n            \"Soil Scientist\",\n            \"Special Events Manager\",\n            \"Special Education Teacher\",\n            \"Special Projects Director\",\n            \"Speech Pathologist\",\n            \"Speech Writer\",\n            \"Sports Event Manager\",\n            \"Statistician\",\n            \"Store Manager\",\n            \"Strategic Alliance Director\",\n            \"Strategic Planning Director\",\n            \"Stress Reduction Specialist\",\n            \"Stockbroker\",\n            \"Surveyor\",\n            \"Structural Engineer\",\n            \"Superintendent\",\n            \"Supply Chain Director\",\n            \"System Engineer\",\n            \"Systems Analyst\",\n            \"Systems Programmer\",\n            \"System Administrator\",\n            \"Tax Specialist\",\n            \"Teacher\",\n            \"Technical Support Specialist\",\n            \"Technical Illustrator\",\n            \"Technical Writer\",\n            \"Technology Director\",\n            \"Telecom Analyst\",\n            \"Telemarketer\",\n            \"Theatrical Director\",\n            \"Title Examiner\",\n            \"Tour Escort\",\n            \"Tour Guide Director\",\n            \"Traffic Manager\",\n            \"Trainer Translator\",\n            \"Transportation Manager\",\n            \"Travel Agent\",\n            \"Treasurer\",\n            \"TV Programmer\",\n            \"Underwriter\",\n            \"Union Representative\",\n            \"University Administrator\",\n            \"University Dean\",\n            \"Urban Planner\",\n            \"Veterinarian\",\n            \"Vendor Relations Director\",\n            \"Viticulturist\",\n            \"Warehouse Manager\"\n        ],\n        animals : {\n          //list of ocean animals comes from https://owlcation.com/stem/list-of-ocean-animals\n          \"ocean\" : [\"Acantharea\",\"Anemone\",\"Angelfish King\",\"Ahi Tuna\",\"Albacore\",\"American Oyster\",\"Anchovy\",\"Armored Snail\",\"Arctic Char\",\"Atlantic Bluefin Tuna\",\"Atlantic Cod\",\"Atlantic Goliath Grouper\",\"Atlantic Trumpetfish\",\"Atlantic Wolffish\",\"Baleen Whale\",\"Banded Butterflyfish\",\"Banded Coral Shrimp\",\"Banded Sea Krait\",\"Barnacle\",\"Barndoor Skate\",\"Barracuda\",\"Basking Shark\",\"Bass\",\"Beluga Whale\",\"Bluebanded Goby\",\"Bluehead Wrasse\",\"Bluefish\",\"Bluestreak Cleaner-Wrasse\",\"Blue Marlin\",\"Blue Shark\",\"Blue Spiny Lobster\",\"Blue Tang\",\"Blue Whale\",\"Broadclub Cuttlefish\",\"Bull Shark\",\"Chambered Nautilus\",\"Chilean Basket Star\",\"Chilean Jack Mackerel\",\"Chinook Salmon\",\"Christmas Tree Worm\",\"Clam\",\"Clown Anemonefish\",\"Clown Triggerfish\",\"Cod\",\"Coelacanth\",\"Cockscomb Cup Coral\",\"Common Fangtooth\",\"Conch\",\"Cookiecutter Shark\",\"Copepod\",\"Coral\",\"Corydoras\",\"Cownose Ray\",\"Crab\",\"Crown-of-Thorns Starfish\",\"Cushion Star\",\"Cuttlefish\",\"California Sea Otters\",\"Dolphin\",\"Dolphinfish\",\"Dory\",\"Devil Fish\",\"Dugong\",\"Dumbo Octopus\",\"Dungeness Crab\",\"Eccentric Sand Dollar\",\"Edible Sea Cucumber\",\"Eel\",\"Elephant Seal\",\"Elkhorn Coral\",\"Emperor Shrimp\",\"Estuarine Crocodile\",\"Fathead Sculpin\",\"Fiddler Crab\",\"Fin Whale\",\"Flameback\",\"Flamingo Tongue Snail\",\"Flashlight Fish\",\"Flatback Turtle\",\"Flatfish\",\"Flying Fish\",\"Flounder\",\"Fluke\",\"French Angelfish\",\"Frilled Shark\",\"Fugu (also called Pufferfish)\",\"Gar\",\"Geoduck\",\"Giant Barrel Sponge\",\"Giant Caribbean Sea Anemone\",\"Giant Clam\",\"Giant Isopod\",\"Giant Kingfish\",\"Giant Oarfish\",\"Giant Pacific Octopus\",\"Giant Pyrosome\",\"Giant Sea Star\",\"Giant Squid\",\"Glowing Sucker Octopus\",\"Giant Tube Worm\",\"Goblin Shark\",\"Goosefish\",\"Great White Shark\",\"Greenland Shark\",\"Grey Atlantic Seal\",\"Grouper\",\"Grunion\",\"Guineafowl Puffer\",\"Haddock\",\"Hake\",\"Halibut\",\"Hammerhead Shark\",\"Hapuka\",\"Harbor Porpoise\",\"Harbor Seal\",\"Hatchetfish\",\"Hawaiian Monk Seal\",\"Hawksbill Turtle\",\"Hector's Dolphin\",\"Hermit Crab\",\"Herring\",\"Hoki\",\"Horn Shark\",\"Horseshoe Crab\",\"Humpback Anglerfish\",\"Humpback Whale\",\"Icefish\",\"Imperator Angelfish\",\"Irukandji Jellyfish\",\"Isopod\",\"Ivory Bush Coral\",\"Japanese Spider Crab\",\"Jellyfish\",\"John Dory\",\"Juan Fernandez Fur Seal\",\"Killer Whale\",\"Kiwa Hirsuta\",\"Krill\",\"Lagoon Triggerfish\",\"Lamprey\",\"Leafy Seadragon\",\"Leopard Seal\",\"Limpet\",\"Ling\",\"Lionfish\",\"Lions Mane Jellyfish\",\"Lobe Coral\",\"Lobster\",\"Loggerhead Turtle\",\"Longnose Sawshark\",\"Longsnout Seahorse\",\"Lophelia Coral\",\"Marrus Orthocanna\",\"Manatee\",\"Manta Ray\",\"Marlin\",\"Megamouth Shark\",\"Mexican Lookdown\",\"Mimic Octopus\",\"Moon Jelly\",\"Mollusk\",\"Monkfish\",\"Moray Eel\",\"Mullet\",\"Mussel\",\"Megaladon\",\"Napoleon Wrasse\",\"Nassau Grouper\",\"Narwhal\",\"Nautilus\",\"Needlefish\",\"Northern Seahorse\",\"North Atlantic Right Whale\",\"Northern Red Snapper\",\"Norway Lobster\",\"Nudibranch\",\"Nurse Shark\",\"Oarfish\",\"Ocean Sunfish\",\"Oceanic Whitetip Shark\",\"Octopus\",\"Olive Sea Snake\",\"Orange Roughy\",\"Ostracod\",\"Otter\",\"Oyster\",\"Pacific Angelshark\",\"Pacific Blackdragon\",\"Pacific Halibut\",\"Pacific Sardine\",\"Pacific Sea Nettle Jellyfish\",\"Pacific White Sided Dolphin\",\"Pantropical Spotted Dolphin\",\"Patagonian Toothfish\",\"Peacock Mantis Shrimp\",\"Pelagic Thresher Shark\",\"Penguin\",\"Peruvian Anchoveta\",\"Pilchard\",\"Pink Salmon\",\"Pinniped\",\"Plankton\",\"Porpoise\",\"Polar Bear\",\"Portuguese Man o' War\",\"Pycnogonid Sea Spider\",\"Quahog\",\"Queen Angelfish\",\"Queen Conch\",\"Queen Parrotfish\",\"Queensland Grouper\",\"Ragfish\",\"Ratfish\",\"Rattail Fish\",\"Ray\",\"Red Drum\",\"Red King Crab\",\"Ringed Seal\",\"Risso's Dolphin\",\"Ross Seals\",\"Sablefish\",\"Salmon\",\"Sand Dollar\",\"Sandbar Shark\",\"Sawfish\",\"Sarcastic Fringehead\",\"Scalloped Hammerhead Shark\",\"Seahorse\",\"Sea Cucumber\",\"Sea Lion\",\"Sea Urchin\",\"Seal\",\"Shark\",\"Shortfin Mako Shark\",\"Shovelnose Guitarfish\",\"Shrimp\",\"Silverside Fish\",\"Skipjack Tuna\",\"Slender Snipe Eel\",\"Smalltooth Sawfish\",\"Smelts\",\"Sockeye Salmon\",\"Southern Stingray\",\"Sponge\",\"Spotted Porcupinefish\",\"Spotted Dolphin\",\"Spotted Eagle Ray\",\"Spotted Moray\",\"Squid\",\"Squidworm\",\"Starfish\",\"Stickleback\",\"Stonefish\",\"Stoplight Loosejaw\",\"Sturgeon\",\"Swordfish\",\"Tan Bristlemouth\",\"Tasseled Wobbegong\",\"Terrible Claw Lobster\",\"Threespot Damselfish\",\"Tiger Prawn\",\"Tiger Shark\",\"Tilefish\",\"Toadfish\",\"Tropical Two-Wing Flyfish\",\"Tuna\",\"Umbrella Squid\",\"Velvet Crab\",\"Venus Flytrap Sea Anemone\",\"Vigtorniella Worm\",\"Viperfish\",\"Vampire Squid\",\"Vaquita\",\"Wahoo\",\"Walrus\",\"West Indian Manatee\",\"Whale\",\"Whale Shark\",\"Whiptail Gulper\",\"White-Beaked Dolphin\",\"White-Ring Garden Eel\",\"White Shrimp\",\"Wobbegong\",\"Wrasse\",\"Wreckfish\",\"Xiphosura\",\"Yellowtail Damselfish\",\"Yelloweye Rockfish\",\"Yellow Cup Black Coral\",\"Yellow Tube Sponge\",\"Yellowfin Tuna\",\"Zebrashark\",\"Zooplankton\"],\n          //list of desert, grassland, and forest animals comes from http://www.skyenimals.com/\n          \"desert\" : [\"Aardwolf\",\"Addax\",\"African Wild Ass\",\"Ant\",\"Antelope\",\"Armadillo\",\"Baboon\",\"Badger\",\"Bat\",\"Bearded Dragon\",\"Beetle\",\"Bird\",\"Black-footed Cat\",\"Boa\",\"Brown Bear\",\"Bustard\",\"Butterfly\",\"Camel\",\"Caracal\",\"Caracara\",\"Caterpillar\",\"Centipede\",\"Cheetah\",\"Chipmunk\",\"Chuckwalla\",\"Climbing Mouse\",\"Coati\",\"Cobra\",\"Cotton Rat\",\"Cougar\",\"Courser\",\"Crane Fly\",\"Crow\",\"Dassie Rat\",\"Dove\",\"Dunnart\",\"Eagle\",\"Echidna\",\"Elephant\",\"Emu\",\"Falcon\",\"Fly\",\"Fox\",\"Frogmouth\",\"Gecko\",\"Geoffroy's Cat\",\"Gerbil\",\"Grasshopper\",\"Guanaco\",\"Gundi\",\"Hamster\",\"Hawk\",\"Hedgehog\",\"Hyena\",\"Hyrax\",\"Jackal\",\"Kangaroo\",\"Kangaroo Rat\",\"Kestrel\",\"Kowari\",\"Kultarr\",\"Leopard\",\"Lion\",\"Macaw\",\"Meerkat\",\"Mouse\",\"Oryx\",\"Ostrich\",\"Owl\",\"Pronghorn\",\"Python\",\"Rabbit\",\"Raccoon\",\"Rattlesnake\",\"Rhinoceros\",\"Sand Cat\",\"Spectacled Bear\",\"Spiny Mouse\",\"Starling\",\"Stick Bug\",\"Tarantula\",\"Tit\",\"Toad\",\"Tortoise\",\"Tyrant Flycatcher\",\"Viper\",\"Vulture\",\"Waxwing\",\"Xerus\",\"Zebra\"],\n          \"grassland\" : [\"Aardvark\",\"Aardwolf\",\"Accentor\",\"African Buffalo\",\"African Wild Dog\",\"Alpaca\",\"Anaconda\",\"Ant\",\"Anteater\",\"Antelope\",\"Armadillo\",\"Baboon\",\"Badger\",\"Bandicoot\",\"Barbet\",\"Bat\",\"Bee\",\"Bee-eater\",\"Beetle\",\"Bird\",\"Bison\",\"Black-footed Cat\",\"Black-footed Ferret\",\"Bluebird\",\"Boa\",\"Bowerbird\",\"Brown Bear\",\"Bush Dog\",\"Bushshrike\",\"Bustard\",\"Butterfly\",\"Buzzard\",\"Caracal\",\"Caracara\",\"Cardinal\",\"Caterpillar\",\"Cheetah\",\"Chipmunk\",\"Civet\",\"Climbing Mouse\",\"Clouded Leopard\",\"Coati\",\"Cobra\",\"Cockatoo\",\"Cockroach\",\"Common Genet\",\"Cotton Rat\",\"Cougar\",\"Courser\",\"Coyote\",\"Crane\",\"Crane Fly\",\"Cricket\",\"Crow\",\"Culpeo\",\"Death Adder\",\"Deer\",\"Deer Mouse\",\"Dingo\",\"Dinosaur\",\"Dove\",\"Drongo\",\"Duck\",\"Duiker\",\"Dunnart\",\"Eagle\",\"Echidna\",\"Elephant\",\"Elk\",\"Emu\",\"Falcon\",\"Finch\",\"Flea\",\"Fly\",\"Flying Frog\",\"Fox\",\"Frog\",\"Frogmouth\",\"Garter Snake\",\"Gazelle\",\"Gecko\",\"Geoffroy's Cat\",\"Gerbil\",\"Giant Tortoise\",\"Giraffe\",\"Grasshopper\",\"Grison\",\"Groundhog\",\"Grouse\",\"Guanaco\",\"Guinea Pig\",\"Hamster\",\"Harrier\",\"Hartebeest\",\"Hawk\",\"Hedgehog\",\"Helmetshrike\",\"Hippopotamus\",\"Hornbill\",\"Hyena\",\"Hyrax\",\"Impala\",\"Jackal\",\"Jaguar\",\"Jaguarundi\",\"Kangaroo\",\"Kangaroo Rat\",\"Kestrel\",\"Kultarr\",\"Ladybug\",\"Leopard\",\"Lion\",\"Macaw\",\"Meerkat\",\"Mouse\",\"Newt\",\"Oryx\",\"Ostrich\",\"Owl\",\"Pangolin\",\"Pheasant\",\"Prairie Dog\",\"Pronghorn\",\"Przewalski's Horse\",\"Python\",\"Quoll\",\"Rabbit\",\"Raven\",\"Rhinoceros\",\"Shelduck\",\"Sloth Bear\",\"Spectacled Bear\",\"Squirrel\",\"Starling\",\"Stick Bug\",\"Tamandua\",\"Tasmanian Devil\",\"Thornbill\",\"Thrush\",\"Toad\",\"Tortoise\"],\n          \"forest\" : [\"Agouti\",\"Anaconda\",\"Anoa\",\"Ant\",\"Anteater\",\"Antelope\",\"Armadillo\",\"Asian Black Bear\",\"Aye-aye\",\"Babirusa\",\"Baboon\",\"Badger\",\"Bandicoot\",\"Banteng\",\"Barbet\",\"Basilisk\",\"Bat\",\"Bearded Dragon\",\"Bee\",\"Bee-eater\",\"Beetle\",\"Bettong\",\"Binturong\",\"Bird-of-paradise\",\"Bongo\",\"Bowerbird\",\"Bulbul\",\"Bush Dog\",\"Bushbaby\",\"Bushshrike\",\"Butterfly\",\"Buzzard\",\"Caecilian\",\"Cardinal\",\"Cassowary\",\"Caterpillar\",\"Centipede\",\"Chameleon\",\"Chimpanzee\",\"Cicada\",\"Civet\",\"Clouded Leopard\",\"Coati\",\"Cobra\",\"Cockatoo\",\"Cockroach\",\"Colugo\",\"Cotinga\",\"Cotton Rat\",\"Cougar\",\"Crane Fly\",\"Cricket\",\"Crocodile\",\"Crow\",\"Cuckoo\",\"Cuscus\",\"Death Adder\",\"Deer\",\"Dhole\",\"Dingo\",\"Dinosaur\",\"Drongo\",\"Duck\",\"Duiker\",\"Eagle\",\"Echidna\",\"Elephant\",\"Finch\",\"Flat-headed Cat\",\"Flea\",\"Flowerpecker\",\"Fly\",\"Flying Frog\",\"Fossa\",\"Frog\",\"Frogmouth\",\"Gaur\",\"Gecko\",\"Gorilla\",\"Grison\",\"Hawaiian Honeycreeper\",\"Hawk\",\"Hedgehog\",\"Helmetshrike\",\"Hornbill\",\"Hyrax\",\"Iguana\",\"Jackal\",\"Jaguar\",\"Jaguarundi\",\"Kestrel\",\"Ladybug\",\"Lemur\",\"Leopard\",\"Lion\",\"Macaw\",\"Mandrill\",\"Margay\",\"Monkey\",\"Mouse\",\"Mouse Deer\",\"Newt\",\"Okapi\",\"Old World Flycatcher\",\"Orangutan\",\"Owl\",\"Pangolin\",\"Peafowl\",\"Pheasant\",\"Possum\",\"Python\",\"Quokka\",\"Rabbit\",\"Raccoon\",\"Red Panda\",\"Red River Hog\",\"Rhinoceros\",\"Sloth Bear\",\"Spectacled Bear\",\"Squirrel\",\"Starling\",\"Stick Bug\",\"Sun Bear\",\"Tamandua\",\"Tamarin\",\"Tapir\",\"Tarantula\",\"Thrush\",\"Tiger\",\"Tit\",\"Toad\",\"Tortoise\",\"Toucan\",\"Trogon\",\"Trumpeter\",\"Turaco\",\"Turtle\",\"Tyrant Flycatcher\",\"Viper\",\"Vulture\",\"Wallaby\",\"Warbler\",\"Wasp\",\"Waxwing\",\"Weaver\",\"Weaver-finch\",\"Whistler\",\"White-eye\",\"Whydah\",\"Woodswallow\",\"Worm\",\"Wren\",\"Xenops\",\"Yellowjacket\",\"Accentor\",\"African Buffalo\",\"American Black Bear\",\"Anole\",\"Bird\",\"Bison\",\"Boa\",\"Brown Bear\",\"Chipmunk\",\"Common Genet\",\"Copperhead\",\"Coyote\",\"Deer Mouse\",\"Dormouse\",\"Elk\",\"Emu\",\"Fisher\",\"Fox\",\"Garter Snake\",\"Giant Panda\",\"Giant Tortoise\",\"Groundhog\",\"Grouse\",\"Guanaco\",\"Himalayan Tahr\",\"Kangaroo\",\"Koala\",\"Numbat\",\"Quoll\",\"Raccoon dog\",\"Tasmanian Devil\",\"Thornbill\",\"Turkey\",\"Vole\",\"Weasel\",\"Wildcat\",\"Wolf\",\"Wombat\",\"Woodchuck\",\"Woodpecker\"],\n          //list of farm animals comes from https://www.buzzle.com/articles/farm-animals-list.html\n          \"farm\" : [\"Alpaca\",\"Buffalo\",\"Banteng\",\"Cow\",\"Cat\",\"Chicken\",\"Carp\",\"Camel\",\"Donkey\",\"Dog\",\"Duck\",\"Emu\",\"Goat\",\"Gayal\",\"Guinea\",\"Goose\",\"Horse\",\"Honey\",\"Llama\",\"Pig\",\"Pigeon\",\"Rhea\",\"Rabbit\",\"Sheep\",\"Silkworm\",\"Turkey\",\"Yak\",\"Zebu\"],\n          //list of pet animals comes from https://www.dogbreedinfo.com/pets/pet.htm\n          \"pet\" : [\"Bearded Dragon\",\"Birds\",\"Burro\",\"Cats\",\"Chameleons\",\"Chickens\",\"Chinchillas\",\"Chinese Water Dragon\",\"Cows\",\"Dogs\",\"Donkey\",\"Ducks\",\"Ferrets\",\"Fish\",\"Geckos\",\"Geese\",\"Gerbils\",\"Goats\",\"Guinea Fowl\",\"Guinea Pigs\",\"Hamsters\",\"Hedgehogs\",\"Horses\",\"Iguanas\",\"Llamas\",\"Lizards\",\"Mice\",\"Mule\",\"Peafowl\",\"Pigs and Hogs\",\"Pigeons\",\"Ponies\",\"Pot Bellied Pig\",\"Rabbits\",\"Rats\",\"Sheep\",\"Skinks\",\"Snakes\",\"Stick Insects\",\"Sugar Gliders\",\"Tarantula\",\"Turkeys\",\"Turtles\"],\n          //list of zoo animals comes from https://bronxzoo.com/animals\n          \"zoo\" : [\"Aardvark\",\"African Wild Dog\",\"Aldabra Tortoise\",\"American Alligator\",\"American Bison\",\"Amur Tiger\",\"Anaconda\",\"Andean Condor\",\"Asian Elephant\",\"Baby Doll Sheep\",\"Bald Eagle\",\"Barred Owl\",\"Blue Iguana\",\"Boer Goat\",\"California Sea Lion\",\"Caribbean Flamingo\",\"Chinchilla\",\"Collared Lemur\",\"Coquerel's Sifaka\",\"Cuban Amazon Parrot\",\"Ebony Langur\",\"Fennec Fox\",\"Fossa\",\"Gelada\",\"Giant Anteater\",\"Giraffe\",\"Gorilla\",\"Grizzly Bear\",\"Henkel's Leaf-tailed Gecko\",\"Indian Gharial\",\"Indian Rhinoceros\",\"King Cobra\",\"King Vulture\",\"Komodo Dragon\",\"Linne's Two-toed Sloth\",\"Lion\",\"Little Penguin\",\"Madagascar Tree Boa\",\"Magellanic Penguin\",\"Malayan Tapir\",\"Malayan Tiger\",\"Matschies Tree Kangaroo\",\"Mini Donkey\",\"Monarch Butterfly\",\"Nile crocodile\",\"North American Porcupine\",\"Nubian Ibex\",\"Okapi\",\"Poison Dart Frog\",\"Polar Bear\",\"Pygmy Marmoset\",\"Radiated Tortoise\",\"Red Panda\",\"Red Ruffed Lemur\",\"Ring-tailed Lemur\",\"Ring-tailed Mongoose\",\"Rock Hyrax\",\"Small Clawed Asian Otter\",\"Snow Leopard\",\"Snowy Owl\",\"Southern White-faced Owl\",\"Southern White Rhinocerous\",\"Squirrel Monkey\",\"Tufted Puffin\",\"White Cheeked Gibbon\",\"White-throated Bee Eater\",\"Zebra\"]\n        },\n        primes: [\n            // 1230 first primes, i.e. all primes up to the first one greater than 10000, inclusive.\n            2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007\n        ],\n        emotions: [\n            \"love\",\n            \"joy\",\n            \"surprise\",\n            \"anger\",\n            \"sadness\",\n            \"fear\"\n        ],\n    };\n\n    var o_hasOwnProperty = Object.prototype.hasOwnProperty;\n    var o_keys = (Object.keys || function(obj) {\n      var result = [];\n      for (var key in obj) {\n        if (o_hasOwnProperty.call(obj, key)) {\n          result.push(key);\n        }\n      }\n\n      return result;\n    });\n\n\n    function _copyObject(source, target) {\n      var keys = o_keys(source);\n      var key;\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        target[key] = source[key] || target[key];\n      }\n    }\n\n    function _copyArray(source, target) {\n      for (var i = 0, l = source.length; i < l; i++) {\n        target[i] = source[i];\n      }\n    }\n\n    function copyObject(source, _target) {\n        var isArray = Array.isArray(source);\n        var target = _target || (isArray ? new Array(source.length) : {});\n\n        if (isArray) {\n          _copyArray(source, target);\n        } else {\n          _copyObject(source, target);\n        }\n\n        return target;\n    }\n\n    /** Get the data based on key**/\n    Chance.prototype.get = function (name) {\n        return copyObject(data[name]);\n    };\n\n    // Mac Address\n    Chance.prototype.mac_address = function(options){\n        // typically mac addresses are separated by \":\"\n        // however they can also be separated by \"-\"\n        // the network variant uses a dot every fourth byte\n\n        options = initOptions(options);\n        if(!options.separator) {\n            options.separator =  options.networkVersion ? \".\" : \":\";\n        }\n\n        var mac_pool=\"ABCDEF1234567890\",\n            mac = \"\";\n        if(!options.networkVersion) {\n            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);\n        } else {\n            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);\n        }\n\n        return mac;\n    };\n\n    Chance.prototype.normal = function (options) {\n        options = initOptions(options, {mean : 0, dev : 1, pool : []});\n\n        testRange(\n            options.pool.constructor !== Array,\n            \"Chance: The pool option must be a valid array.\"\n        );\n        testRange(\n            typeof options.mean !== 'number',\n            \"Chance: Mean (mean) must be a number\"\n        );\n        testRange(\n            typeof options.dev !== 'number',\n            \"Chance: Standard deviation (dev) must be a number\"\n        );\n\n        // If a pool has been passed, then we are returning an item from that pool,\n        // using the normal distribution settings that were passed in\n        if (options.pool.length > 0) {\n            return this.normal_pool(options);\n        }\n\n        // The Marsaglia Polar method\n        var s, u, v, norm,\n            mean = options.mean,\n            dev = options.dev;\n\n        do {\n            // U and V are from the uniform distribution on (-1, 1)\n            u = this.random() * 2 - 1;\n            v = this.random() * 2 - 1;\n\n            s = u * u + v * v;\n        } while (s >= 1);\n\n        // Compute the standard normal variate\n        norm = u * Math.sqrt(-2 * Math.log(s) / s);\n\n        // Shape and scale\n        return dev * norm + mean;\n    };\n\n    Chance.prototype.normal_pool = function(options) {\n        var performanceCounter = 0;\n        do {\n            var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));\n            if (idx < options.pool.length && idx >= 0) {\n                return options.pool[idx];\n            } else {\n                performanceCounter++;\n            }\n        } while(performanceCounter < 100);\n\n        throw new RangeError(\"Chance: Your pool is too small for the given mean and standard deviation. Please adjust.\");\n    };\n\n    Chance.prototype.radio = function (options) {\n        // Initial Letter (Typically Designated by Side of Mississippi River)\n        options = initOptions(options, {side : \"?\"});\n        var fl = \"\";\n        switch (options.side.toLowerCase()) {\n        case \"east\":\n        case \"e\":\n            fl = \"W\";\n            break;\n        case \"west\":\n        case \"w\":\n            fl = \"K\";\n            break;\n        default:\n            fl = this.character({pool: \"KW\"});\n            break;\n        }\n\n        return fl + this.character({alpha: true, casing: \"upper\"}) +\n                this.character({alpha: true, casing: \"upper\"}) +\n                this.character({alpha: true, casing: \"upper\"});\n    };\n\n    // Set the data as key and data or the data map\n    Chance.prototype.set = function (name, values) {\n        if (typeof name === \"string\") {\n            data[name] = values;\n        } else {\n            data = copyObject(name, data);\n        }\n    };\n\n    Chance.prototype.tv = function (options) {\n        return this.radio(options);\n    };\n\n    // ID number for Brazil companies\n    Chance.prototype.cnpj = function () {\n        var n = this.n(this.natural, 8, { max: 9 });\n        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\n        d1 = 11 - (d1 % 11);\n        if (d1>=10){\n            d1 = 0;\n        }\n        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\n        d2 = 11 - (d2 % 11);\n        if (d2>=10){\n            d2 = 0;\n        }\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;\n    };\n\n    Chance.prototype.emotion = function () {\n        return this.pick(this.get(\"emotions\"));\n    };\n\n    // -- End Miscellaneous --\n\n    Chance.prototype.mersenne_twister = function (seed) {\n        return new MersenneTwister(seed);\n    };\n\n    Chance.prototype.blueimp_md5 = function () {\n        return new BlueImpMD5();\n    };\n\n    // Mersenne Twister from https://gist.github.com/banksean/300494\n    /*\n       A C-program for MT19937, with initialization improved 2002/1/26.\n       Coded by Takuji Nishimura and Makoto Matsumoto.\n\n       Before using, initialize the state by using init_genrand(seed)\n       or init_by_array(init_key, key_length).\n\n       Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n       All rights reserved.\n\n       Redistribution and use in source and binary forms, with or without\n       modification, are permitted provided that the following conditions\n       are met:\n\n       1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n\n       2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n       3. The names of its contributors may not be used to endorse or promote\n       products derived from this software without specific prior written\n       permission.\n\n       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n       \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n       A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n       CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n       EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n       PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n       PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n       LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n       NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n       Any feedback is very welcome.\n       http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n       email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n     */\n    var MersenneTwister = function (seed) {\n        if (seed === undefined) {\n            // kept random number same size as time used previously to ensure no unexpected results downstream\n            seed = Math.floor(Math.random()*Math.pow(10,13));\n        }\n        /* Period parameters */\n        this.N = 624;\n        this.M = 397;\n        this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n        this.mt = new Array(this.N); /* the array for the state vector */\n        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */\n\n        this.init_genrand(seed);\n    };\n\n    /* initializes mt[N] with a seed */\n    MersenneTwister.prototype.init_genrand = function (s) {\n        this.mt[0] = s >>> 0;\n        for (this.mti = 1; this.mti < this.N; this.mti++) {\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n            /* In the previous versions, MSBs of the seed affect   */\n            /* only MSBs of the array mt[].                        */\n            /* 2002/01/09 modified by Makoto Matsumoto             */\n            this.mt[this.mti] >>>= 0;\n            /* for >32 bit machines */\n        }\n    };\n\n    /* initialize by an array with array-length */\n    /* init_key is the array for initializing keys */\n    /* key_length is its length */\n    /* slight change for C++, 2004/2/26 */\n    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {\n        var i = 1, j = 0, k, s;\n        this.init_genrand(19650218);\n        k = (this.N > key_length ? this.N : key_length);\n        for (; k; k--) {\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n            i++;\n            j++;\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n            if (j >= key_length) { j = 0; }\n        }\n        for (k = this.N - 1; k; k--) {\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n            i++;\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n        }\n\n        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n    };\n\n    /* generates a random number on [0,0xffffffff]-interval */\n    MersenneTwister.prototype.genrand_int32 = function () {\n        var y;\n        var mag01 = new Array(0x0, this.MATRIX_A);\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n        if (this.mti >= this.N) { /* generate N words at one time */\n            var kk;\n\n            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */\n                this.init_genrand(5489); /* a default initial seed is used */\n            }\n            for (kk = 0; kk < this.N - this.M; kk++) {\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (;kk < this.N - 1; kk++) {\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\n                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this.mti = 0;\n        }\n\n        y = this.mt[this.mti++];\n\n        /* Tempering */\n        y ^= (y >>> 11);\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= (y >>> 18);\n\n        return y >>> 0;\n    };\n\n    /* generates a random number on [0,0x7fffffff]-interval */\n    MersenneTwister.prototype.genrand_int31 = function () {\n        return (this.genrand_int32() >>> 1);\n    };\n\n    /* generates a random number on [0,1]-real-interval */\n    MersenneTwister.prototype.genrand_real1 = function () {\n        return this.genrand_int32() * (1.0 / 4294967295.0);\n        /* divided by 2^32-1 */\n    };\n\n    /* generates a random number on [0,1)-real-interval */\n    MersenneTwister.prototype.random = function () {\n        return this.genrand_int32() * (1.0 / 4294967296.0);\n        /* divided by 2^32 */\n    };\n\n    /* generates a random number on (0,1)-real-interval */\n    MersenneTwister.prototype.genrand_real3 = function () {\n        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);\n        /* divided by 2^32 */\n    };\n\n    /* generates a random number on [0,1) with 53-bit resolution*/\n    MersenneTwister.prototype.genrand_res53 = function () {\n        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n    };\n\n    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5\n    var BlueImpMD5 = function () {};\n\n    BlueImpMD5.prototype.VERSION = '1.0.1';\n\n    /*\n    * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n    * to work around bugs in some JS interpreters.\n    */\n    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n    * Bitwise rotate a 32-bit number to the left.\n    */\n    BlueImpMD5.prototype.bit_roll = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n    * These functions implement the five basic operations the algorithm uses.\n    */\n    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {\n        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);\n    };\n    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {\n        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n    * Calculate the MD5 of an array of little-endian words, and a bit length.\n    */\n    BlueImpMD5.prototype.binl_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << (len % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var i, olda, oldb, oldc, oldd,\n            a =  1732584193,\n            b = -271733879,\n            c = -1732584194,\n            d =  271733878;\n\n        for (i = 0; i < x.length; i += 16) {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);\n            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);\n            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);\n            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);\n            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);\n            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);\n            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);\n            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);\n            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);\n            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);\n            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);\n            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);\n\n            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);\n            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);\n            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);\n            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);\n            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);\n            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);\n            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);\n            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);\n            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);\n            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);\n            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);\n            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);\n            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);\n            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);\n            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);\n            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);\n            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);\n            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);\n            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);\n            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);\n            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);\n            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);\n            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);\n            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);\n            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);\n            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);\n            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);\n\n            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);\n            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);\n            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);\n            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);\n            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);\n            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);\n            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);\n            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);\n            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);\n            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);\n            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);\n            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);\n\n            a = this.safe_add(a, olda);\n            b = this.safe_add(b, oldb);\n            c = this.safe_add(c, oldc);\n            d = this.safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    /*\n    * Convert an array of little-endian words to a string\n    */\n    BlueImpMD5.prototype.binl2rstr = function (input) {\n        var i,\n            output = '';\n        for (i = 0; i < input.length * 32; i += 8) {\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\n        }\n        return output;\n    };\n\n    /*\n    * Convert a raw string to an array of little-endian words\n    * Characters >255 have their high-byte silently ignored.\n    */\n    BlueImpMD5.prototype.rstr2binl = function (input) {\n        var i,\n            output = [];\n        output[(input.length >> 2) - 1] = undefined;\n        for (i = 0; i < output.length; i += 1) {\n            output[i] = 0;\n        }\n        for (i = 0; i < input.length * 8; i += 8) {\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\n        }\n        return output;\n    };\n\n    /*\n    * Calculate the MD5 of a raw string\n    */\n    BlueImpMD5.prototype.rstr_md5 = function (s) {\n        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));\n    };\n\n    /*\n    * Calculate the HMAC-MD5, of a key and some data (raw strings)\n    */\n    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {\n        var i,\n            bkey = this.rstr2binl(key),\n            ipad = [],\n            opad = [],\n            hash;\n        ipad[15] = opad[15] = undefined;\n        if (bkey.length > 16) {\n            bkey = this.binl_md5(bkey, key.length * 8);\n        }\n        for (i = 0; i < 16; i += 1) {\n            ipad[i] = bkey[i] ^ 0x36363636;\n            opad[i] = bkey[i] ^ 0x5C5C5C5C;\n        }\n        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\n        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));\n    };\n\n    /*\n    * Convert a raw string to a hex string\n    */\n    BlueImpMD5.prototype.rstr2hex = function (input) {\n        var hex_tab = '0123456789abcdef',\n            output = '',\n            x,\n            i;\n        for (i = 0; i < input.length; i += 1) {\n            x = input.charCodeAt(i);\n            output += hex_tab.charAt((x >>> 4) & 0x0F) +\n                hex_tab.charAt(x & 0x0F);\n        }\n        return output;\n    };\n\n    /*\n    * Encode a string as utf-8\n    */\n    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {\n        return unescape(encodeURIComponent(input));\n    };\n\n    /*\n    * Take string arguments and return either raw or hex encoded strings\n    */\n    BlueImpMD5.prototype.raw_md5 = function (s) {\n        return this.rstr_md5(this.str2rstr_utf8(s));\n    };\n    BlueImpMD5.prototype.hex_md5 = function (s) {\n        return this.rstr2hex(this.raw_md5(s));\n    };\n    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {\n        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));\n    };\n    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {\n        return this.rstr2hex(this.raw_hmac_md5(k, d));\n    };\n\n    BlueImpMD5.prototype.md5 = function (string, key, raw) {\n        if (!key) {\n            if (!raw) {\n                return this.hex_md5(string);\n            }\n\n            return this.raw_md5(string);\n        }\n\n        if (!raw) {\n            return this.hex_hmac_md5(key, string);\n        }\n\n        return this.raw_hmac_md5(key, string);\n    };\n\n    // CommonJS module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = Chance;\n        }\n        exports.Chance = Chance;\n    }\n\n    // Register as an anonymous AMD module\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return Chance;\n        });\n    }\n\n    // if there is a importsScrips object define chance for worker\n    // allows worker to use full Chance functionality with seed\n    if (typeof importScripts !== 'undefined') {\n        chance = new Chance();\n        self.Chance = Chance;\n    }\n\n    // If there is a window object, that at least has a document property,\n    // instantiate and define chance on the window\n    if (typeof window === \"object\" && typeof window.document === \"object\") {\n        window.Chance = Chance;\n        window.chance = new Chance();\n    }\n})();\n\n}).call(this)}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":2}]},{},[])(\"chance\")\n});\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('common/core/constants',[], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory();\r\n    }\r\n}(function () {\r\n    'use strict';\r\n    //return string constants\r\n    return {\r\n        ATTRIBUTES_PROPERTY: 'atr',\r\n        REGISTRY_PROPERTY: 'reg',\r\n        OVERLAYS_PROPERTY: 'ovr',\r\n        COLLECTION_NAME_SUFFIX: '-inv',\r\n        ALL_SETS_PROPERTY: '_sets',\r\n        SET_MODIFIED_REGISTRY: '_sets_',\r\n        MEMBER_RELATION: 'member',\r\n        BASE_POINTER: 'base',\r\n        PATH_SEP: '/',\r\n        MUTABLE_PROPERTY: '_mutable',\r\n        MINIMAL_RELID_LENGTH_PROPERTY: '_minlenrelid',\r\n        DOES_NOT_HAVE_RELID_CHILDREN: {\r\n            _sets: true, // ALL_SETS_PROPERTY\r\n            _meta: true  // META_NODE\r\n        },\r\n        INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY: '_hasownrelation',\r\n\r\n        NULLPTR_NAME: '_null_pointer',\r\n        NULLPTR_RELID: '_nullptr',\r\n\r\n        META_SET_NAME: 'MetaAspectSet',\r\n        NULL_GUID: '00000000-0000-0000-0000-000000000000',\r\n        OWN_GUID: '_relguid',\r\n\r\n        CONSTRAINTS_RELID: '_constraints',\r\n        C_DEF_PRIORITY: 1,\r\n        CONSTRAINT_REGISTRY_PREFIX: '_ch#_',\r\n\r\n        TO_DELETE_STRING: '*to*delete*',\r\n\r\n        SET_ITEMS: 'items',\r\n        SET_ITEMS_MAX: 'max',\r\n        SET_ITEMS_MIN: 'min',\r\n\r\n        META_ASPECTS: 'aspects',\r\n        META_CHILDREN: 'children',\r\n        META_NODE: '_meta',\r\n        META_POINTER_PREFIX: '_p_',\r\n        META_ASPECT_PREFIX: '_a_',\r\n\r\n        ATTRIBUTE_TYPES: {\r\n            STRING: 'string',\r\n            INTEGER: 'integer',\r\n            FLOAT: 'float',\r\n            BOOLEAN: 'boolean',\r\n            ASSET: 'asset'\r\n        },\r\n\r\n        MIXINS_SET: '_mixins',\r\n        MIXIN_ERROR_TYPE: {\r\n            MISSING: 'missing',\r\n            ATTRIBUTE_COLLISION: 'attribute collision',\r\n            SET_COLLISION: 'set collision',\r\n            POINTER_COLLISION: 'pointer collision',\r\n            CONTAINMENT_COLLISION: 'containment collision',\r\n            ASPECT_COLLISION: 'aspect collision',\r\n            CONSTRAINT_COLLISION: 'constraint collision'\r\n        },\r\n\r\n        EXPORT_TYPE_PROJECT: 'project',\r\n        EXPORT_TYPE_LIBRARY: 'library',\r\n\r\n        NAMESPACE_SEPARATOR: '.',\r\n\r\n        MAX_AGE: 3,\r\n        MAX_TICKS: 2000,\r\n        MAX_MUTATE: 30000,\r\n        MAXIMUM_STARTING_RELID_LENGTH: 5,\r\n\r\n        OVERLAY_SHARD_INDICATOR: 'sharded'\r\n    };\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * STRING CONSTANT DEFINITIONS USED IN BOTH CLIENT AND SERVER JAVASCRIPT\r\n * @author rkereskenyi / https://github.com/rkereskenyi\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('common/Constants',['common/core/constants', 'common/storage/constants'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('./core/constants'), require('./storage/constants'));\r\n    }\r\n}(function (CORE, STORAGE) {\r\n    'use strict';\r\n    //return string constants\r\n    return {\r\n        /*\r\n         * TERRITORY EVENTS\r\n         */\r\n        TERRITORY_EVENT_LOAD: 'load',\r\n        TERRITORY_EVENT_UPDATE: 'update',\r\n        TERRITORY_EVENT_UNLOAD: 'unload',\r\n        TERRITORY_EVENT_COMPLETE: 'complete',\r\n        TERRITORY_EVENT_INCOMPLETE: 'incomplete',\r\n\r\n        /*\r\n         * GME_ID: wherever a GME object ID needs to be present\r\n         */\r\n        GME_ID: 'GME_ID',\r\n\r\n        /*\r\n         * DEDICATED GME OBJECT IDs\r\n         */\r\n        PROJECT_ROOT_ID: '',\r\n        PROJECT_FCO_ID: 'FCO_ID',\r\n        PROJECT_FCO_GUID: 'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045',\r\n        PROJECT_FCO_RELID: '1',\r\n\r\n        /*\r\n         * DEDICATED GME ROOT properties\r\n         */\r\n        PROJECT_ROOT_NAME: 'ROOT',\r\n\r\n        /*\r\n         * Dedicated POINTER names\r\n         */\r\n        POINTER_SOURCE: 'src',      //dedicated connection source pointer name\r\n        POINTER_TARGET: 'dst',      //dedicated connection target pointer name\r\n        POINTER_BASE: 'base',       //dedicated inheritance pointer name\r\n        POINTER_CONSTRAINED_BY: 'constrainedby', //dedicated replaceable/constrainedBy pointer name\r\n\r\n        /*\r\n         * Dedicated RELATION names\r\n         */\r\n        RELATION_CONTAINMENT: 'containment',\r\n\r\n        CORE: CORE,\r\n        STORAGE: STORAGE,\r\n\r\n        WEBHOOK_EVENTS: {\r\n            BRANCH_DELETED: STORAGE.BRANCH_DELETED,\r\n            BRANCH_CREATED: STORAGE.BRANCH_CREATED,\r\n            BRANCH_HASH_UPDATED: STORAGE.BRANCH_HASH_UPDATED,\r\n            TAG_DELETED: STORAGE.TAG_DELETED,\r\n            TAG_CREATED: STORAGE.TAG_CREATED,\r\n            COMMIT: STORAGE.COMMIT,\r\n            PROJECT_DELETED: STORAGE.PROJECT_DELETED,\r\n            BRANCH_JOINED: STORAGE.BRANCH_JOINED,\r\n            BRANCH_LEFT: STORAGE.BRANCH_LEFT\r\n        },\r\n\r\n        SERVER_WORKER_REQUESTS: {\r\n            EXECUTE_PLUGIN: 'executePlugin',\r\n            SEED_PROJECT: 'seedProject',\r\n            DIFF: 'diff',\r\n            AUTO_MERGE: 'autoMerge',\r\n            RESOLVE: 'resolve',\r\n            CHECK_CONSTRAINTS: 'checkConstraints',\r\n\r\n            IMPORT_PROJECT_FROM_FILE: 'importProjectFromFile',\r\n            EXPORT_PROJECT_TO_FILE: 'exportProjectToFile',\r\n            ADD_LIBRARY: 'addLibrary',\r\n            UPDATE_LIBRARY: 'updateLibrary',\r\n            EXPORT_SELECTION_TO_FILE: 'exportSelectionToFile',\r\n            IMPORT_SELECTION_FROM_FILE: 'importSelectionFromFile',\r\n            UPDATE_PROJECT_FROM_FILE: 'updateProjectFromFile',\r\n            RENAME_CONCEPT: 'renameConcept',\r\n            CHANGE_ATTRIBUTE_META: 'changeAttributeMeta',\r\n            RENAME_META_POINTER_TARGET: 'renameMetaPointerTarget',\r\n            CHANGE_ASPECT_META: 'changeAspectMeta',\r\n            REMOVE_META_RULE: 'removeMetaRule'\r\n        },\r\n\r\n        ATTRIBUTE_MULTILINE_TYPES: {\r\n            plaintext: 'plaintext',\r\n            c: 'c',\r\n            cpp: 'cpp',\r\n            csharp: 'csharp',\r\n            css: 'css',\r\n            erlang: 'erlang',\r\n            html: 'html',\r\n            java: 'java',\r\n            javascript: 'javascript',\r\n            latex: 'latex',\r\n            lua: 'lua',\r\n            markdown: 'markdown',\r\n            mathematica: 'mathematica',\r\n            modelica: 'modelica',\r\n            python: 'python',\r\n            sql: 'sql',\r\n            tex: 'tex',\r\n            ttcn: 'ttcn',\r\n            yaml: 'yaml'\r\n        },\r\n\r\n        HTTP_HEADERS: {\r\n            MOUNTED_PATH: 'X-Proxy-Mounted-Path'\r\n        }\r\n    };\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n *\r\n * collection of functions that uses random Numbers in WebGME\r\n */\r\n\r\ndefine('common/util/random',['chance', 'common/Constants'], function (ChanceJs, CONSTANTS) {\r\n    'use strict';\r\n\r\n    var guidPool = '0123456789abcdef',\r\n        relidPool = '0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM',\r\n        excludeList = ['atr', 'reg', 'ovr'],\r\n        maxTry = 2,\r\n        chance = new ChanceJs(),\r\n        randFunction = function (max) {\r\n            //return Math.floor(Math.random() * max);\r\n            return chance.natural({max: max - 1});\r\n        },\r\n        relidRegexp = _generateRelidRegexp(),\r\n        random = {\r\n            generateGuid: generateGuid,\r\n            generateRelid: generateRelid,\r\n            isValidRelid: isValidRelid,\r\n            isValidPath: isValidPath,\r\n            relidToInteger: relidToInteger,\r\n            generateRandomString: generateRandomString\r\n        };\r\n\r\n    function _generateRelidRegexp() {\r\n        var regexp = '',\r\n            i;\r\n\r\n        //adding excludes\r\n        if (excludeList.length > 0) {\r\n            for (i = 0; i < excludeList.length; i += 1) {\r\n                regexp += '(?!(^' + excludeList[i] + '$))';\r\n            }\r\n        }\r\n        //adding the pool\r\n        regexp += '^(-)?[' + relidPool + ']+$';\r\n\r\n        return new RegExp(regexp);\r\n    }\r\n\r\n    function getRandomCharacter(pool) {\r\n        return pool.charAt(randFunction(pool.length));\r\n    }\r\n\r\n    function generateGuid() {\r\n        var s4 = function () {\r\n            return getRandomCharacter(guidPool) +\r\n                getRandomCharacter(guidPool) +\r\n                getRandomCharacter(guidPool) +\r\n                getRandomCharacter(guidPool);\r\n        };\r\n\r\n        return (s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4());\r\n    }\r\n\r\n    function generateRelid(object, minimalLength) {\r\n        var relid,\r\n            i,\r\n            length = minimalLength || 1,\r\n            tries = 0;\r\n\r\n        do {\r\n            if (tries >= maxTry) {\r\n                tries = 0;\r\n                length += 1;\r\n            }\r\n            relid = '';\r\n            for (i = 0; i < length; i += 1) {\r\n                relid += getRandomCharacter(relidPool);\r\n            }\r\n            tries += 1;\r\n        } while (Object.hasOwn(object, relid) === true || isValidRelid(relid) === false);\r\n\r\n        return relid;\r\n    }\r\n\r\n    function generateRandomString(length) {\r\n        return chance.string({\r\n            pool: relidPool,\r\n            length: length\r\n        });\r\n    }\r\n\r\n    function isValidRelid(relid) {\r\n\r\n        if (typeof relid !== 'string') {\r\n            return false;\r\n        }\r\n        return relidRegexp.test(relid);\r\n    }\r\n\r\n    function isValidPath(path) {\r\n        var relid;\r\n\r\n        if (path === CONSTANTS.PROJECT_ROOT_ID) {\r\n            return true;\r\n        }\r\n\r\n        path = path.split(CONSTANTS.CORE.PATH_SEP);\r\n\r\n        relid = path.shift();\r\n\r\n        if (relid !== CONSTANTS.PROJECT_ROOT_ID) {\r\n            return false;\r\n        }\r\n\r\n        do {\r\n            relid = path.shift();\r\n            if (typeof relid === 'string' && relidRegexp.test(relid) === false) {\r\n                return false;\r\n            }\r\n        } while (relid);\r\n\r\n        return true;\r\n    }\r\n\r\n    function relidToInteger(relid) {\r\n        var num = 'NaN',\r\n            //negative = false,\r\n            i;\r\n\r\n        if (isValidRelid(relid)) {\r\n            num = 0;\r\n            for (i = 0; i < relid.length; i += 1) {\r\n                if (relid.charAt(i) === '-') {\r\n                    //negative = true;\r\n                } else {\r\n                    num = num * relidPool.length;\r\n                    num += relidPool.indexOf(relid.charAt(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        return num;\r\n    }\r\n\r\n    return random;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/regexp',[], function () {\r\n    'use strict';\r\n    var HASH = new RegExp('^#[0-9a-zA-Z_]*$'),\r\n        DB_HASH = new RegExp('^#[0-9a-zA-Z_]{40}$'),\r\n        BRANCH = new RegExp('^[0-9a-zA-Z_]*$'),\r\n        TAG = new RegExp('^[0-9a-zA-Z_]*$'),\r\n        RAW_BRANCH = new RegExp('^\\\\*[0-9a-zA-Z_]*$'), // This is how it's stored in mongodb, i.e. with a prefixed *.\r\n        PROJECT = new RegExp('^(?!system\\\\.)(?!_)[0-9a-zA-Z_+]*$'), // project name may not start with system. or _\r\n        DOCUMENT_KEY = new RegExp('^[^($|_).][^.]*$'), //based on the MongoDB requirements (no '.' and no leading $)\r\n        PROJECT_NAME = new RegExp('^[0-9a-zA-Z_]+$'),\r\n\r\n        INVALID_CSS_CHARS = new RegExp('[!\"#$%&\\'()*+,./:;<=>?@[\\\\]^`{|}~ ]+', 'g'),\r\n        HTML_ELEMENT = new RegExp('<[a-z][\\\\s\\\\S]*>', 'i'),\r\n        GUID = new RegExp('[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}', 'i'),\r\n        BLOB_HASH = new RegExp('^[0-9a-f]{40}$');\r\n    return {\r\n        HASH: HASH,\r\n        DB_HASH: DB_HASH,\r\n        BRANCH: BRANCH,\r\n        TAG: TAG,\r\n        RAW_BRANCH: RAW_BRANCH,\r\n        PROJECT: PROJECT,\r\n        DOCUMENT_KEY: DOCUMENT_KEY,\r\n        GUID: GUID,\r\n        INVALID_CSS_CHARS: INVALID_CSS_CHARS,\r\n        HTML_ELEMENT: HTML_ELEMENT,\r\n        PROJECT_NAME: PROJECT_NAME,\r\n        BLOB_HASH: BLOB_HASH\r\n    };\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * This is a partial implementation of RFC 6902\r\n * the generated patch is fully compliant though the\r\n * patch generation is specialized to the expected input form.\r\n *\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/util/jsonPatcher',[\r\n    'common/util/canon',\r\n    'common/util/random',\r\n    'common/core/constants',\r\n    'common/regexp'\r\n], function (CANON, RANDOM, CORE_CONSTANTS, REGEXP) {\r\n\r\n    'use strict';\r\n\r\n    var MIN_RELID_LENGTH_PATH = CORE_CONSTANTS.PATH_SEP + CORE_CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY;\r\n\r\n    function _strEncode(str) {\r\n        //we should replace the '/' in the patch paths\r\n        return str.replace(/\\//g, '%2f');\r\n    }\r\n\r\n    function _strDecode(str) {\r\n        return str.replace(/%2f/g, '/');\r\n    }\r\n\r\n    // function _endsWith(str, pattern) {\r\n    //     var d = str.length - pattern.length;\r\n    //     return d >= 0 && str.lastIndexOf(pattern) === d;\r\n    // }\r\n\r\n    function _startsWith(str, pattern) {\r\n        return str.indexOf(pattern) === 0;\r\n    }\r\n\r\n    function _isOvr(path) {\r\n        return path.indexOf('/ovr') === 0;\r\n    }\r\n\r\n    function _isRelid(path) {\r\n        return RANDOM.isValidRelid(path.substring(1));\r\n    }\r\n\r\n    function _isGmePath(path) {\r\n        if (typeof path !== 'string') {\r\n            return false;\r\n        }\r\n\r\n        if (path === '') {\r\n            return true;\r\n        }\r\n\r\n        var relIds = path.split('/'),\r\n            result = false,\r\n            i;\r\n\r\n        for (i = 1; i < relIds.length; i += 1) {\r\n            if (RANDOM.isValidRelid(relIds[i]) === false) {\r\n                return false;\r\n            } else {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function diff(source, target, basePath, excludeList, noUpdate, innerPath, overlay, inOverlay) {\r\n        var result = [],\r\n            patchItem,\r\n            path,\r\n            i;\r\n\r\n        //add\r\n        for (i in target) {\r\n            if (excludeList.indexOf(i) === -1 && Object.hasOwn(target, i)) {\r\n                if (!Object.hasOwn(source, i)) {\r\n                    patchItem = {\r\n                        op: 'add',\r\n                        path: basePath + _strEncode(i),\r\n                        value: target[i]\r\n                    };\r\n\r\n                    if (inOverlay || overlay) {\r\n                        patchItem.partialUpdates = [];\r\n                        patchItem.updates = [];\r\n                        if (inOverlay) {\r\n                            if (_isGmePath(innerPath)) {\r\n                                patchItem.updates.push(innerPath);\r\n                            }\r\n                            if (_isGmePath(target[i])) {\r\n                                patchItem.partialUpdates.push(target[i]);\r\n                            }\r\n                        } else {\r\n                            if (_isGmePath(i)) {\r\n                                patchItem.updates.push(i);\r\n                            }\r\n                            for (path in target[i]) {\r\n                                if (_isGmePath(target[i][path])) {\r\n                                    patchItem.partialUpdates.push(target[i][path]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    result.push(patchItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        //replace\r\n        if (!noUpdate) {\r\n            for (i in target) {\r\n                if (excludeList.indexOf(i) === -1 && Object.hasOwn(target, i)) {\r\n                    if (Object.hasOwn(source, i) && CANON.stringify(source[i]) !== CANON.stringify(target[i])) {\r\n                        patchItem = {\r\n                            op: 'replace',\r\n                            path: basePath + _strEncode(i),\r\n                            value: target[i]\r\n                            //oldValue: source[i]\r\n                        };\r\n\r\n                        if (inOverlay) {\r\n                            patchItem.partialUpdates = [];\r\n                            patchItem.updates = [];\r\n                            if (_isGmePath(innerPath)) {\r\n                                patchItem.updates.push(innerPath);\r\n                            }\r\n\r\n                            if (_isGmePath(target[i])) {\r\n                                patchItem.partialUpdates.push(target[i]);\r\n                            }\r\n\r\n                            if (_isGmePath(source[i])) {\r\n                                patchItem.partialUpdates.push(source[i]);\r\n                            }\r\n                        }\r\n\r\n                        result.push(patchItem);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //remove\r\n        for (i in source) {\r\n            if (excludeList.indexOf(i) === -1 && Object.hasOwn(source, i)) {\r\n                if (!Object.hasOwn(target, i)) {\r\n                    patchItem = {\r\n                        op: 'remove',\r\n                        path: basePath + _strEncode(i)\r\n                        //oldValue: source[i]\r\n                    };\r\n\r\n                    if (inOverlay || overlay) {\r\n                        patchItem.partialUpdates = [];\r\n                        patchItem.updates = [];\r\n                        if (inOverlay) {\r\n                            if (_isGmePath(innerPath)) {\r\n                                patchItem.updates.push(innerPath);\r\n                            }\r\n                            if (_isGmePath(source[i])) {\r\n                                patchItem.partialUpdates.push(source[i]);\r\n                            }\r\n                        } else {\r\n                            if (_isGmePath(i)) {\r\n                                patchItem.updates.push(i);\r\n                            }\r\n                            for (path in source[i]) {\r\n                                if (_isGmePath(source[i][path])) {\r\n                                    patchItem.partialUpdates.push(source[i][path]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    result.push(patchItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function _isEmptyObject(object) {\r\n        for (var key in object) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function wholeShardDiff(items, isAddition) {\r\n        var patchItem = {\r\n                updates: [],\r\n                partialUpdates: []\r\n            },\r\n            source,\r\n            name;\r\n\r\n        patchItem.op = 'replace';\r\n        patchItem.path = '/items';\r\n\r\n        if (isAddition) {\r\n            patchItem.value = items;\r\n        } else {\r\n            patchItem.value = {};\r\n        }\r\n\r\n        for (source in items) {\r\n            patchItem.updates.push(source);\r\n            for (name in items[source]) {\r\n                if (_isGmePath(items[source][name])) {\r\n                    patchItem.partialUpdates.push(items[source][name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return patchItem;\r\n    }\r\n\r\n    function overlayShardDiff(sourceJson, targetJson) {\r\n        var patch,\r\n            key,\r\n            sourceEmpty = _isEmptyObject(sourceJson.items || {}),\r\n            targetEmpty = _isEmptyObject(targetJson.items || {});\r\n\r\n        patch = diff(sourceJson, targetJson, '/', ['_id', 'type', 'items'], false, '', false, false);\r\n\r\n        if (sourceEmpty && targetEmpty) {\r\n            // Do nothing as nothing have changed\r\n        } else if (sourceEmpty) {\r\n            patch.push(wholeShardDiff(targetJson.items, true));\r\n        } else if (targetEmpty) {\r\n            patch.push(wholeShardDiff(sourceJson.items, false));\r\n        } else {\r\n            patch = patch\r\n                .concat(diff(sourceJson.items || {}, targetJson.items || {}, '/items/', [], true, '', true, false));\r\n            for (key in sourceJson.items) {\r\n                if (Object.hasOwn(targetJson.items, key)) {\r\n                    patch = patch.concat(diff(\r\n                        sourceJson.items[key],\r\n                        targetJson.items[key],\r\n                        '/items/' + _strEncode(key) + '/',\r\n                        [],\r\n                        false,\r\n                        key,\r\n                        false,\r\n                        true));\r\n                }\r\n            }\r\n        }\r\n\r\n        return patch;\r\n    }\r\n\r\n    function getShardingDiff(commonOverlay, shardedOverlay) {\r\n        var patchItem = {\r\n            op: 'replace',\r\n            path: '/ovr',\r\n            value: shardedOverlay,\r\n            preShardRelations: commonOverlay\r\n        };\r\n\r\n        return patchItem;\r\n    }\r\n\r\n    function create(sourceJson, targetJson) {\r\n        var patch,\r\n            patchItem,\r\n            diffRes,\r\n            i,\r\n            key;\r\n\r\n        //if it is an overlay shard, we make a more simple diff\r\n        if (sourceJson.type === 'shard' && targetJson.type === 'shard') {\r\n            return overlayShardDiff(sourceJson, targetJson);\r\n        }\r\n\r\n        //main level diff\r\n        patch = diff(sourceJson, targetJson, '/', ['_id', 'ovr', 'atr', 'reg', '_sets'], false, '', false, false);\r\n\r\n        //atr\r\n        if (sourceJson.atr && targetJson.atr) {\r\n            patch = patch.concat(diff(sourceJson.atr, targetJson.atr, '/atr/', [], false, '', false, false));\r\n        } else if (sourceJson.atr) {\r\n            patch.push({\r\n                op: 'remove',\r\n                path: '/atr'\r\n            });\r\n        } else if (targetJson.atr) {\r\n            patch.push({\r\n                op: 'add',\r\n                path: '/atr',\r\n                value: targetJson.atr\r\n            });\r\n        }\r\n\r\n        //reg\r\n        if (sourceJson.reg && targetJson.reg) {\r\n            patch = patch.concat(diff(sourceJson.reg, targetJson.reg, '/reg/', [], false, '', false, false));\r\n        } else if (sourceJson.reg) {\r\n            patch.push({\r\n                op: 'remove',\r\n                path: '/reg'\r\n            });\r\n        } else if (targetJson.reg) {\r\n            patch.push({\r\n                op: 'add',\r\n                path: '/reg',\r\n                value: targetJson.reg\r\n            });\r\n        }\r\n\r\n        //_sets\r\n        if (sourceJson._sets && targetJson._sets) {\r\n            patch = patch.concat(diff(sourceJson._sets, targetJson._sets, '/_sets/', [], true, '', false, false));\r\n            for (key in targetJson._sets) {\r\n                if (sourceJson._sets[key]) {\r\n                    patch = patch.concat(diff(\r\n                        sourceJson._sets[key],\r\n                        targetJson._sets[key],\r\n                        '/_sets/' + _strEncode(key) + '/',\r\n                        [],\r\n                        false,\r\n                        '',\r\n                        false,\r\n                        false));\r\n                }\r\n            }\r\n        } else if (sourceJson._sets) {\r\n            patch.push({\r\n                op: 'remove',\r\n                path: '/_sets'\r\n            });\r\n        } else if (targetJson._sets) {\r\n            patch.push({\r\n                op: 'add',\r\n                path: '/_sets',\r\n                value: targetJson._sets\r\n            });\r\n        }\r\n\r\n        //ovr\r\n        if (sourceJson.ovr && targetJson.ovr) {\r\n            if (sourceJson.ovr.sharded !== true && targetJson.ovr.sharded === true) {\r\n                // Transformation into sharded overlays means that we have to collect update information.\r\n                patch.push(getShardingDiff(sourceJson.ovr, targetJson.ovr));\r\n            } else if (sourceJson.ovr.sharded === true && targetJson.ovr.sharded === true) {\r\n                patch = patch.concat(diff(sourceJson.ovr, targetJson.ovr, '/ovr/', [], false, '', true, false));\r\n            } else {\r\n                patch = patch.concat(diff(sourceJson.ovr, targetJson.ovr, '/ovr/', [], true, '', true, false));\r\n                for (key in targetJson.ovr) {\r\n                    if (sourceJson.ovr[key]) {\r\n                        patch = patch.concat(diff(\r\n                            sourceJson.ovr[key],\r\n                            targetJson.ovr[key],\r\n                            '/ovr/' + _strEncode(key) + '/',\r\n                            [],\r\n                            false,\r\n                            key,\r\n                            false,\r\n                            true));\r\n                    }\r\n                }\r\n            }\r\n        } else if (sourceJson.ovr || targetJson.ovr) {\r\n            patchItem = {\r\n                path: '/ovr',\r\n                partialUpdates: [],\r\n                updates: []\r\n            };\r\n\r\n            if (sourceJson.ovr) {\r\n                patchItem.op = 'remove';\r\n            } else {\r\n                patchItem.op = 'add';\r\n                patchItem.value = targetJson.ovr;\r\n            }\r\n\r\n            // For ovr removal/addition we need to compute updates/partialUpdates\r\n            diffRes = diff(sourceJson.ovr || {}, targetJson.ovr || {}, '/ovr/', [], true, '', true, false);\r\n            for (i = 0; i < diffRes.length; i += 1) {\r\n                patchItem.partialUpdates = patchItem.partialUpdates.concat(diffRes[i].partialUpdates);\r\n                patchItem.updates = patchItem.updates.concat(diffRes[i].updates);\r\n            }\r\n\r\n            patch.push(patchItem);\r\n        }\r\n\r\n        return patch;\r\n    }\r\n\r\n    function apply(sourceJson, patch) {\r\n        var targetJson = JSON.parse(JSON.stringify(sourceJson)),\r\n            i, j,\r\n            badOperation = false,\r\n            pathArray,\r\n            key,\r\n            parent,\r\n            result = {\r\n                status: 'success',\r\n                faults: [],\r\n                patch: patch,\r\n                result: targetJson\r\n            };\r\n\r\n        for (i = 0; i < patch.length; i += 1) {\r\n            pathArray = (patch[i].path + '').split('/').slice(1);\r\n            parent = targetJson;\r\n\r\n            for (j = 0; j < pathArray.length; j += 1) {\r\n                pathArray[j] = _strDecode(pathArray[j]);\r\n            }\r\n            key = pathArray.pop();\r\n            badOperation = false;\r\n            switch (patch[i].op) {\r\n                case 'remove':\r\n                    if (typeof patch[i].path === 'string') {\r\n                        for (j = 0; j < pathArray.length; j += 1) {\r\n                            if (!parent[pathArray[j]]) {\r\n                                badOperation = true;\r\n                                break;\r\n                            }\r\n                            parent = parent[pathArray[j]];\r\n                        }\r\n                        if (!badOperation && parent[key] !== undefined) {\r\n                            delete parent[key];\r\n                        } else {\r\n                            result.status = 'fail';\r\n                            result.faults.push(patch[i]);\r\n                        }\r\n                    } else {\r\n                        result.status = 'fail';\r\n                        result.faults.push(patch[i]);\r\n                    }\r\n                    break;\r\n                case 'add':\r\n                    if (typeof patch[i].path === 'string' && patch[i].value !== undefined) {\r\n                        for (j = 0; j < pathArray.length; j += 1) {\r\n                            if (!parent[pathArray[j]]) {\r\n                                parent[pathArray[j]] = {};\r\n                            }\r\n                            parent = parent[pathArray[j]];\r\n                        }\r\n                        parent[key] = patch[i].value;\r\n\r\n                    } else {\r\n                        result.status = 'fail';\r\n                        result.faults.push(patch[i]);\r\n                    }\r\n                    break;\r\n                case 'replace':\r\n                    if (typeof patch[i].path === 'string' && patch[i].value !== undefined) {\r\n                        for (j = 0; j < pathArray.length; j += 1) {\r\n                            if (!parent[pathArray[j]]) {\r\n                                badOperation = true;\r\n                                break;\r\n                            }\r\n                            parent = parent[pathArray[j]];\r\n                        }\r\n                        if (!badOperation && parent[key] !== undefined) {\r\n                            parent[key] = patch[i].value;\r\n                        } else {\r\n                            result.status = 'fail';\r\n                            result.faults.push(patch[i]);\r\n                        }\r\n                    } else {\r\n                        result.status = 'fail';\r\n                        result.faults.push(patch[i]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    result.status = 'fail';\r\n                    result.faults.push(patch[i]);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function _inLoadOrUnload(res, gmePath) {\r\n        var pathPieces = gmePath.split('/'),\r\n            parentPath;\r\n\r\n        parentPath = gmePath;\r\n\r\n        do {\r\n            if (res.load[parentPath] || res.unload[parentPath]) {\r\n                return true;\r\n            }\r\n\r\n            pathPieces.pop();\r\n            parentPath = pathPieces.join('/');\r\n        } while (pathPieces.length > 1);\r\n\r\n        return false;\r\n    }\r\n\r\n    function _removeFromUpdates(res, gmePath) {\r\n        var updatesPath,\r\n            i;\r\n\r\n        updatesPath = Object.keys(res.update);\r\n        for (i = 0; i < updatesPath; i += 1) {\r\n            if (_startsWith(updatesPath[i], gmePath)) {\r\n                delete res.update[gmePath];\r\n            }\r\n        }\r\n\r\n        updatesPath = Object.keys(res.partialUpdate);\r\n        for (i = 0; i < updatesPath; i += 1) {\r\n            if (_startsWith(updatesPath[i], gmePath)) {\r\n                delete res.partialUpdate[gmePath];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isShardChange(patchItem) {\r\n        if (!_isOvr(patchItem.path)) {\r\n            return false;\r\n        }\r\n\r\n        if (patchItem.op === 'add' || patchItem.op === 'replace') {\r\n            return REGEXP.HASH.test(patchItem.value);\r\n        }\r\n    }\r\n\r\n    function _getChangedNodesFromShard(patch, res, hash, gmePath) {\r\n        var shardPatch = patch[hash] && patch[hash].patch ? patch[hash] && patch[hash].patch : patch[hash],\r\n            source,\r\n            name,\r\n            i, j,\r\n            absGmePath;\r\n\r\n        if (!shardPatch) {\r\n            return;\r\n        }\r\n\r\n        if (shardPatch instanceof Array) {\r\n            // patch objects\r\n            for (i = 0; i < shardPatch.length; i += 1) {\r\n                if (shardPatch[i].updates instanceof Array) {\r\n                    for (j = 0; j < shardPatch[i].updates.length; j += 1) {\r\n                        absGmePath = gmePath + shardPatch[i].updates[j];\r\n                        if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                            res.update[absGmePath] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (shardPatch[i].partialUpdates instanceof Array) {\r\n                    for (j = 0; j < shardPatch[i].partialUpdates.length; j += 1) {\r\n                        absGmePath = gmePath + shardPatch[i].partialUpdates[j];\r\n                        if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                            res.partialUpdate[absGmePath] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // completely new shard\r\n            for (source in shardPatch.items || {}) {\r\n                for (name in shardPatch.items[source]) {\r\n                    absGmePath = gmePath + source;\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.update[absGmePath] = true;\r\n                    }\r\n\r\n                    absGmePath = gmePath + shardPatch.items[source][name];\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.partialUpdate[absGmePath] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getChangedNodesFromSharding(patch, patchItem, res, gmePath) {\r\n        var shards = [],\r\n            shardId,\r\n            absGmePath,\r\n            preShardRelations = patchItem.preShardRelations,\r\n            foundSource,\r\n            source,\r\n            name,\r\n            i;\r\n\r\n        for (shardId in patchItem.value) {\r\n            if (REGEXP.HASH.test(patchItem.value[shardId])) {\r\n                if (patch[patchItem.value[shardId]]) {\r\n                    shards.push(patch[patchItem.value[shardId]]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // First handle those relations where we have the source in both states\r\n        for (source in preShardRelations) {\r\n            foundSource = false;\r\n            for (i = 0; i < shards.length; i += 1) {\r\n                if (Object.hasOwn(shards[i].items, source)) {\r\n                    foundSource = true;\r\n                    // check the removal and updates\r\n                    for (name in preShardRelations[source]) {\r\n                        if (Object.hasOwn(shards[i].items[source], name)) {\r\n                            if (shards[i].items[source][name] !== preShardRelations[source][name]) {\r\n                                // update\r\n                                absGmePath = gmePath + source;\r\n                                if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                    res.update[absGmePath] = true;\r\n                                }\r\n\r\n                                if (_isGmePath(preShardRelations[source][name])) {\r\n                                    absGmePath = gmePath + preShardRelations[source][name];\r\n                                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                        res.partialUpdate[absGmePath] = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_isGmePath(shards[i].items[source][name])) {\r\n                                    absGmePath = gmePath + shards[i].items[source][name];\r\n                                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                        res.partialUpdate[absGmePath] = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // remove\r\n                            absGmePath = gmePath + source;\r\n                            if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                res.update[absGmePath] = true;\r\n                            }\r\n\r\n                            if (_isGmePath(preShardRelations[source][name])) {\r\n                                absGmePath = gmePath + preShardRelations[source][name];\r\n                                if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                    res.partialUpdate[absGmePath] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // check additions\r\n                    for (name in shards[i].items[source]) {\r\n                        if (Object.hasOwn(preShardRelations[source], name) === false) {\r\n                            absGmePath = gmePath + source;\r\n                            if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                res.update[absGmePath] = true;\r\n                            }\r\n\r\n                            if (_isGmePath(shards[i].items[source][name])) {\r\n                                absGmePath = gmePath + shards[i].items[source][name];\r\n                                if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                                    res.partialUpdate[absGmePath] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!foundSource) {\r\n                // All relations from this source was removed\r\n                absGmePath = gmePath + source;\r\n                if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                    res.update[absGmePath] = true;\r\n                }\r\n\r\n                for (name in preShardRelations[source]) {\r\n                    if (preShardRelations[source][name] instanceof Array) {\r\n                        // Sharding from v < 1 with inverse relations stored.\r\n                        continue;\r\n                    }\r\n                    absGmePath = gmePath + preShardRelations[source][name];\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.partialUpdate[absGmePath] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Finally check for completely new sources\r\n        for (i = 0; i < shards.length; i += 1) {\r\n            for (source in shards[i].items) {\r\n                if (Object.hasOwn(preShardRelations, source) === false) {\r\n                    // All relations from this source was removed\r\n                    absGmePath = gmePath + source;\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.update[absGmePath] = true;\r\n                    }\r\n\r\n                    for (name in shards[i].items[source]) {\r\n                        absGmePath = gmePath + shards[i].items[source][name];\r\n                        if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                            res.partialUpdate[absGmePath] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getChangedNodesRec(patch, res, hash, gmePath) {\r\n        var nodePatches = patch[hash] && patch[hash].patch, // Changes regarding node with hash\r\n            i, j,\r\n            ownChange = false,\r\n            absGmePath,\r\n            patchPath,\r\n            subPath,\r\n            pathPieces;\r\n\r\n        if (!nodePatches) {\r\n            // E.g. if the node was added the full data is given instead of a patch.\r\n            return;\r\n        }\r\n\r\n        for (i = 0; i < nodePatches.length; i += 1) {\r\n            patchPath = nodePatches[i].path;\r\n\r\n            if (nodePatches[i].op === 'replace' && typeof nodePatches[i].preShardRelations === 'object') {\r\n                //special case when the overlay is converted\r\n                _getChangedNodesFromSharding(patch, nodePatches[i], res, gmePath);\r\n            } else if (_isShardChange(nodePatches[i])) {\r\n                _getChangedNodesFromShard(patch, res, nodePatches[i].value, gmePath);\r\n            } else if (_isOvr(patchPath) === true) {\r\n                // Now handle the updates\r\n                for (j = 0; j < nodePatches[i].partialUpdates.length; j += 1) {\r\n                    absGmePath = gmePath + nodePatches[i].partialUpdates[j];\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.partialUpdate[absGmePath] = true;\r\n                    }\r\n                }\r\n\r\n                for (j = 0; j < nodePatches[i].updates.length; j += 1) {\r\n                    absGmePath = gmePath + nodePatches[i].updates[j];\r\n                    if (_inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.update[absGmePath] = true;\r\n                    }\r\n                }\r\n\r\n                // #1438 This will capture set-owner updates.\r\n                subPath = _strDecode(patchPath.substring('/ovr/'.length));\r\n                pathPieces = subPath.split('/');\r\n                if (pathPieces.length >= 3 && pathPieces[2] === CORE_CONSTANTS.ALL_SETS_PROPERTY) {\r\n                    // Original path looks something like /ovr/<nodePath>/_sets/...\r\n                    absGmePath = gmePath + '/' + pathPieces[1];\r\n\r\n                    if (_isGmePath(absGmePath) && _inLoadOrUnload(res, absGmePath) === false) {\r\n                        res.update[absGmePath] = true;\r\n                    }\r\n                }\r\n            } else if (_isRelid(patchPath) === true) {\r\n                // There was a change in one of the children..\r\n                switch (nodePatches[i].op) {\r\n                    case 'add':\r\n                        res.load[gmePath + patchPath] = true;\r\n                        _removeFromUpdates(res, gmePath + patchPath);\r\n                        break;\r\n                    case 'remove':\r\n                        res.unload[gmePath + patchPath] = true;\r\n                        _removeFromUpdates(res, gmePath + patchPath);\r\n                        break;\r\n                    case 'replace':\r\n                        _getChangedNodesRec(patch, res, nodePatches[i].value, gmePath + patchPath);\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unexpected patch operation ' + nodePatches[i]);\r\n                }\r\n            } else if (patchPath !== MIN_RELID_LENGTH_PATH && patchPath !== '/__v') {\r\n                ownChange = true;\r\n            }\r\n        }\r\n\r\n        if (ownChange) {\r\n            res.update[gmePath] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} patch\r\n     * @returns {object}\r\n     */\r\n    // TODO check if all event related information could be set during patch creation,\r\n    // so this function would only collect those information.\r\n    function getChangedNodes(patch, rootHash) {\r\n        var res;\r\n\r\n        if (patch[rootHash] && patch[rootHash].patch) {\r\n            res = {\r\n                load: {},\r\n                unload: {},\r\n                update: {},\r\n                partialUpdate: {}\r\n            };\r\n\r\n            _getChangedNodesRec(patch, res, rootHash, '');\r\n        } else {\r\n            res = null;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    return {\r\n        create: create,\r\n        apply: apply,\r\n        getChangedNodes: getChangedNodes\r\n    };\r\n});\n",
    "/*eslint-disable*/\r\n//SHA1 in Javascript 862 bytes, MIT License, http://antimatter15.com/\r\ndefine('common/util/sha1',[],function() {\r\nreturn function(l){function p(b,a){return b<<a|b>>>32-a}l+=\"\";for(var n=Math,c=[1518500249,1859775393,2400959708,3395469782,1732584193,4023233417,2562383102,271733878,3285377520,4294967295],s=n.ceil(l.length/4)+2,q=n.ceil(s/16),g=[],a=0,h=[],j,d,e,f,m,i,b,k;a<q;a++){g[a]=[];for(k=0;k<16;k++){function o(b,c){return l.charCodeAt(a*64+k*4+b)<<c}g[a][k]=o(0,24)|o(1,16)|o(2,8)|o(3,0)}}i=l.length*8-8;a=q-1;g[a][14]=i/(c[9]+1);g[a][14]=n.floor(g[a][14]);g[a][15]=i&c[9];for(a=0;a<q;a++){for(b=0;b<16;b++)h[b]=g[a][b];for(b=16;b<80;b++)h[b]=p(h[b-3]^h[b-8]^h[b-14]^h[b-16],1);j=c[4];d=c[5];e=c[6];f=c[7];m=c[8];for(b=0;b<80;b++){var r=n.floor(b/20),t=p(j,5)+(r<1?d&e^~d&f:r==2?d&e^d&f^e&f:d^e^f)+m+c[r]+h[b]&c[9];m=f;f=e;e=p(d,30);d=j;j=t}c[4]+=j;c[5]+=d;c[6]+=e;c[7]+=f;c[8]+=m}i=\"\";for(z=4;z<9;z++)for(a=7;a>=0;a--)i+=((c[z]&c[9])>>>a*4&15).toString(16);return i};\r\n});\r\n\n",
    "/*globals define, requirejs, wasm_bindgen*/\r\n/*eslint-env node, browser*/\r\n/*eslint camelcase: 0*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/util/key',[\r\n    'common/util/sha1',\r\n    'common/util/assert',\r\n    'common/util/canon'\r\n], function (generateSHA1, ASSERT, CANON) {\r\n    'use strict';\r\n\r\n    var wasm_node = null;\r\n    function run() {\r\n        requirejs(['common/util/rust/sha1/web/wasm-sha1'], function () {\r\n            wasm_bindgen('common/util/rust/sha1/web/wasm-sha1_bg.wasm')\r\n                .then(function () {\r\n                    //nothing to do as wasm_bindgen holds the key\r\n                });\r\n        });\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        run();\r\n    } else {\r\n        //TODO why does it have to be static full path???\r\n        const path = require('path');\r\n        wasm_node = require(\r\n            path.join(requirejs.s.contexts._.config.baseUrl, 'common/util/rust/sha1/node/wasm-sha1-node')\r\n        );\r\n    }\r\n\r\n    function rand160Bits() {\r\n        var result = '',\r\n            i, code;\r\n        for (i = 0; i < 40; i++) {\r\n            code = Math.floor(Math.random() * 16);\r\n            code = code > 9 ? code + 87 : code + 48;\r\n            result += String.fromCharCode(code);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return function KeyGenerator(object, gmeConfig) {\r\n        const keyType = gmeConfig.storage.keyType;\r\n        ASSERT(typeof keyType === 'string');\r\n\r\n        switch (keyType) {\r\n            case 'rand160Bits':\r\n                return rand160Bits();\r\n            case 'rustSHA1':\r\n                if (wasm_node) {\r\n                    return wasm_node.hash(CANON.stringify(object));\r\n                } else {\r\n                    return wasm_bindgen.hash(CANON.stringify(object));\r\n                }\r\n            default: //plainSHA1\r\n                return generateSHA1(CANON.stringify(object));\r\n        }\r\n    };\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\ndefine('common/storage/util',[\r\n    'common/storage/constants',\r\n    'common/util/jsonPatcher',\r\n    'q',\r\n    'common/regexp',\r\n    'common/util/key'\r\n], function (CONSTANTS, jsonPatcher, Q, REGEXP, generateKey) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {ProjectInterface} project\r\n     * @param {object} parameters - If more than one is given, the order of precedence is:\r\n     * branchName, commitHash, tagName and rootHash.\r\n     * @param {string} [parameters.rootHash] - The hash of the tree root.\r\n     * @param {string} [parameters.commitHash] - The tree associated with the commitHash.\r\n     * @param {string} [parameters.tagName] - The tree at the given tag.\r\n     * @param {string} [parameters.branchName] - The tree at the given branch.\r\n     * @param {function} [callback]\r\n     * @returns {Promise}\r\n     */\r\n    function getRootHash(project, parameters, callback) {\r\n        var deferred = Q.defer();\r\n\r\n        if (parameters.branchName) {\r\n            Q.ninvoke(project, 'getBranchHash', parameters.branchName)\r\n                .then(function (commitHash) {\r\n                    parameters.commitHash = commitHash;\r\n                    return Q.ninvoke(project, 'loadObject', commitHash);\r\n                })\r\n                .then(function (commitObject) {\r\n                    parameters.rootHash = commitObject.root;\r\n                    deferred.resolve(commitObject.root);\r\n                })\r\n                .catch(deferred.reject);\r\n        } else if (parameters.commitHash) {\r\n            Q.ninvoke(project, 'loadObject', parameters.commitHash)\r\n                .then(function (commitObject) {\r\n                    parameters.rootHash = commitObject.root;\r\n                    deferred.resolve(commitObject.root);\r\n                })\r\n                .catch(deferred.reject);\r\n        } else if (parameters.tagName) {\r\n            Q.ninvoke(project, 'getTags')\r\n                .then(function (tags) {\r\n                    if (tags[parameters.tagName]) {\r\n                        parameters.commitHash = tags[parameters.tagName];\r\n                        return Q.ninvoke(project, 'loadObject', tags[parameters.tagName]);\r\n                    } else {\r\n                        throw new Error('Unknown tag name [' + parameters.tagName + ']');\r\n                    }\r\n                })\r\n                .then(function (commitObject) {\r\n                    parameters.rootHash = commitObject.root;\r\n                    deferred.resolve(commitObject.root);\r\n                })\r\n                .catch(deferred.reject);\r\n        } else if (parameters.rootHash) {\r\n            deferred.resolve(parameters.rootHash);\r\n        } else {\r\n            deferred.reject(new Error('No valid input was given to search for rootHash'));\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    }\r\n\r\n    function _collectObjects(project, objectHashArray) {\r\n        var deferred = Q.defer(),\r\n            promises = [],\r\n            objects = [],\r\n            i;\r\n\r\n        for (i = 0; i < objectHashArray.length; i += 1) {\r\n            promises.push(Q.ninvoke(project, 'loadObject', objectHashArray[i]));\r\n        }\r\n\r\n        Q.allSettled(promises)\r\n            .then(function (results) {\r\n                var error = null,\r\n                    i;\r\n                for (i = 0; i < results.length; i += 1) {\r\n                    if (results[i].state === 'fulfilled') {\r\n                        objects.push(results[i].value);\r\n                    } else {\r\n                        error = error || results[i].reason || new Error('unable to load');\r\n                    }\r\n                }\r\n\r\n                if (error) {\r\n                    deferred.reject(error);\r\n                } else {\r\n                    deferred.resolve(objects);\r\n                }\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    function _collectObjectAndAssetHashes(project, rootHash) {\r\n        var deferred = Q.defer(),\r\n            objects = {},\r\n            assets = {},\r\n            queue = [rootHash],\r\n            task,\r\n            error = null,\r\n            working = false,\r\n            timerId;\r\n\r\n        timerId = setInterval(function () {\r\n            if (!working) {\r\n                task = queue.shift();\r\n                if (task === undefined) {\r\n                    clearInterval(timerId);\r\n                    if (error) {\r\n                        deferred.reject(error);\r\n                    } else {\r\n                        deferred.resolve({objects: Object.keys(objects), assets: Object.keys(assets)});\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (!objects[task]) {\r\n                    working = true;\r\n                    project.loadObject(task, function (err, object) {\r\n                        var key;\r\n\r\n                        error = error || err;\r\n                        if (!err && object) {\r\n                            objects[task] = true;\r\n                            if (object) {\r\n                                //now put every sub-object on top of the queue\r\n                                for (key in object) {\r\n                                    if (typeof object[key] === 'string' && REGEXP.HASH.test(object[key])) {\r\n                                        queue.push(object[key]);\r\n                                    }\r\n                                }\r\n\r\n                                //looking for assets\r\n                                if (object.atr) {\r\n                                    for (key in object.atr) {\r\n                                        //TODO why can't we inlcude BlobConfig???\r\n                                        if (typeof object.atr[key] === 'string' &&\r\n                                            REGEXP.BLOB_HASH.test(object.atr[key])) {\r\n                                            assets[object.atr[key]] = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                //checking if the node has a sharded overlay, we do not load the shards, yet\r\n                                if (object.ovr && object.ovr.sharded === true) {\r\n                                    for (key in object.ovr) {\r\n                                        if (typeof object.ovr[key] === 'string' &&\r\n                                            REGEXP.HASH.test(object.ovr[key])) {\r\n                                            objects[object.ovr[key]] = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        working = false;\r\n                    });\r\n                }\r\n\r\n            }\r\n        }, 1);\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    return {\r\n        CONSTANTS: CONSTANTS,\r\n        getProjectFullNameFromProjectId: function (projectId) {\r\n            if (projectId) {\r\n                return projectId.replace(CONSTANTS.PROJECT_ID_SEP, CONSTANTS.PROJECT_DISPLAYED_NAME_SEP);\r\n            }\r\n        },\r\n        getProjectDisplayedNameFromProjectId: function (projectId) {\r\n            if (projectId) {\r\n                return projectId.replace(CONSTANTS.PROJECT_ID_SEP, ' ' + CONSTANTS.PROJECT_DISPLAYED_NAME_SEP + ' ');\r\n            }\r\n        },\r\n        getProjectIdFromProjectFullName: function (projectFullName) {\r\n            if (projectFullName) {\r\n                return projectFullName.replace(CONSTANTS.PROJECT_DISPLAYED_NAME_SEP, CONSTANTS.PROJECT_ID_SEP);\r\n            }\r\n        },\r\n        getProjectIdFromOwnerIdAndProjectName: function (userId, projectName) {\r\n            return userId + CONSTANTS.PROJECT_ID_SEP + projectName;\r\n        },\r\n        getProjectNameFromProjectId: function (projectId) {\r\n            if (projectId) {\r\n                return projectId.substring(projectId.indexOf(CONSTANTS.PROJECT_ID_SEP) + 1);\r\n            }\r\n        },\r\n        getOwnerFromProjectId: function (projectId) {\r\n            if (projectId) {\r\n                return projectId.substring(0, projectId.indexOf(CONSTANTS.PROJECT_ID_SEP));\r\n            }\r\n        },\r\n        getHashTaggedHash: function (hash) {\r\n            if (typeof hash === 'string') {\r\n                return hash[0] === '#' ? hash : '#' + hash;\r\n            }\r\n            return hash;\r\n        },\r\n        getPatchObject: function (oldData, newData) {\r\n            var patchObject = {\r\n                type: 'patch',\r\n                base: oldData[CONSTANTS.MONGO_ID],\r\n                patch: jsonPatcher.create(oldData, newData)\r\n            };\r\n            patchObject[CONSTANTS.MONGO_ID] = newData[CONSTANTS.MONGO_ID];\r\n\r\n            return patchObject;\r\n        },\r\n        coreObjectHasOldAndNewData: function (coreObj) {\r\n            return !!(coreObj.oldHash && coreObj.newHash && coreObj.oldData && coreObj.newData);\r\n        },\r\n        getChangedNodes: jsonPatcher.getChangedNodes,\r\n        applyPatch: jsonPatcher.apply,\r\n        checkHashConsistency: function (gmeConfig, dataObj, hash) {\r\n            var result;\r\n\r\n            if (gmeConfig.storage.keyType === 'rand160Bits') {\r\n                // Random hashes should not be checked.\r\n                result = true;\r\n            } else if (gmeConfig.storage.disableHashChecks === true) {\r\n                // Configured to not check.\r\n                result = true;\r\n            } else {\r\n                dataObj[CONSTANTS.MONGO_ID] = '';\r\n                result = hash === '#' + generateKey(dataObj, gmeConfig);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Extracts a serializable json representation of a project tree.\r\n         * To specify starting point set one of the four options. If more than one is set the order of precedence is:\r\n         * branchName, commitHash, tagName and rootHash.\r\n         *\r\n         * @param {ProjectInterface} project\r\n         * @param {object} parameters - Specifies which project tree should be serialized:\r\n         * @param {string} [parameters.rootHash] - The hash of the tree root.\r\n         * @param {string} [parameters.commitHash] - The tree associated with the commitHash.\r\n         * @param {string} [parameters.tagName] - The tree at the given tag.\r\n         * @param {string} [parameters.branchName] - The tree at the given branch.\r\n         * @param {string} [parameters.kind] - If not given will assign the one in project.\r\n         * @param {function} callback\r\n         */\r\n        getProjectJson: function (project, parameters, callback) {\r\n            var deferred = Q.defer(),\r\n                rawJson;\r\n\r\n            getRootHash(project, parameters || {})\r\n                .then(function (rootHash) {\r\n                    return Q.all([\r\n                        _collectObjectAndAssetHashes(project, rootHash),\r\n                        project.getProjectInfo()\r\n                    ]);\r\n                })\r\n                .then(function (res) {\r\n                    var hashes = res[0],\r\n                        info = res[1];\r\n                    rawJson = {\r\n                        rootHash: parameters.rootHash,\r\n                        projectId: project.projectId,\r\n                        kind: typeof parameters.kind === 'string' ? parameters.kind : info.info.kind,\r\n                        branchName: parameters.branchName,\r\n                        commitHash: parameters.commitHash,\r\n                        hashes: hashes,\r\n                        objects: null\r\n                    };\r\n                    return _collectObjects(project, hashes.objects);\r\n                })\r\n                .then(function (objects) {\r\n                    rawJson.objects = objects;\r\n                    deferred.resolve(rawJson);\r\n                })\r\n                .catch(deferred.reject);\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        },\r\n\r\n        /**\r\n         * Inserts a serialized project tree into the storage and associates it with a commitHash.\r\n         *\r\n         * @param {ProjectInterface} project\r\n         * @param {object} [options]\r\n         * @param {string} [options.branch] - Name of branch to update\r\n         * @param {string} [options.parentCommit] - Array of parents for new commit\r\n         * @param {string} [options.commitMessage=%defaultCommitMessage%] information about the insertion\r\n         * @param {function(Error, hashes)} callback\r\n         */\r\n        insertProjectJson: function (project, projectJson, options, callback) {\r\n            var deferred = Q.defer(),\r\n                toPersist = {},\r\n                rootHash = projectJson.rootHash,\r\n                defaultCommitMessage = 'Importing contents of [' +\r\n                    projectJson.projectId + '@' + rootHash + ']',\r\n                objects = projectJson.objects,\r\n                i;\r\n\r\n            for (i = 0; i < objects.length; i += 1) {\r\n                // we have to patch the object right before import, for smoother usage experience\r\n                toPersist[objects[i]._id] = objects[i];\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            options.branch = options.branch || null;\r\n            options.parentCommit = options.parentCommit || [];\r\n\r\n            project.makeCommit(options.branch, options.parentCommit,\r\n                rootHash, toPersist, options.commitMessage || defaultCommitMessage)\r\n                .then(function (commitResult) {\r\n                    deferred.resolve(commitResult);\r\n                })\r\n                .catch(deferred.reject);\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        },\r\n        getRootHash: getRootHash\r\n    };\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * This class (extracted functionality from cache implemented by mmaroti) caches objects associated\r\n * with a project.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n * @author kecso / https://github.com/kecso\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/storage/project/cache',[\r\n    'common/util/assert',\r\n    'common/storage/constants',\r\n    'common/storage/util'\r\n], function (ASSERT, CONSTANTS, UTIL) {\r\n    'use strict';\r\n    function ProjectCache(storage, projectId, mainLogger, gmeConfig) {\r\n        var self = this,\r\n            backup = {},\r\n            cache = {},\r\n            ongoingObjectRequests = {},\r\n            ongoingPathsRequests = {},\r\n            logger = mainLogger.fork('ProjectCache'),\r\n            cacheSize = 0;\r\n\r\n        logger.debug('ctor', projectId);\r\n\r\n        this.queuedPersists = {};\r\n\r\n        // Useful for debugging potential mutations, but not good for performance.\r\n        function deepFreeze(obj) {\r\n            Object.freeze(obj);\r\n\r\n            if (obj instanceof Array) {\r\n                for (var i = 0; i < obj.length; i += 1) {\r\n                    if (obj[i] !== null && typeof obj[i] === 'object') {\r\n                        deepFreeze(obj[i]);\r\n                    }\r\n                }\r\n            } else {\r\n                for (var key in obj) {\r\n                    if (obj[key] !== null && typeof obj[key] === 'object') {\r\n                        deepFreeze(obj[key]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function cacheInsert(key, obj) {\r\n            ASSERT(obj[CONSTANTS.MONGO_ID] === key);\r\n            logger.debug('cacheInsert', key);\r\n\r\n            if (gmeConfig.storage.freezeCache) {\r\n                deepFreeze(obj);\r\n            }\r\n\r\n            if (!cache[key]) {\r\n                cache[key] = obj;\r\n\r\n                if (++cacheSize >= gmeConfig.storage.cache) {\r\n                    logger.debug('Cache size reached - moved to backup');\r\n                    backup = cache;\r\n                    cache = {};\r\n                    cacheSize = 0;\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function getFromCache(hash) {\r\n            var obj = cache[hash],\r\n                commitId;\r\n\r\n            if (typeof obj === 'undefined') {\r\n                obj = backup[hash];\r\n\r\n                if (typeof obj === 'undefined') {\r\n                    for (commitId in self.queuedPersists) {\r\n                        if (Object.hasOwn(self.queuedPersists, commitId) && self.queuedPersists[commitId][hash]) {\r\n                            obj = self.queuedPersists[commitId][hash];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return obj;\r\n        }\r\n\r\n        this.loadObject = function (key, callback) {\r\n            var commitId,\r\n                cachedObject;\r\n\r\n            ASSERT(typeof key === 'string' && typeof callback === 'function');\r\n            logger.debug('loadObject', {metadata: key});\r\n\r\n            cachedObject = cache[key];\r\n            if (typeof cachedObject === 'undefined') {\r\n                cachedObject = backup[key];\r\n                if (typeof cachedObject === 'undefined') {\r\n                    for (commitId in self.queuedPersists) {\r\n                        if (Object.hasOwn(self.queuedPersists, commitId) && self.queuedPersists[commitId][key]) {\r\n                            cachedObject = self.queuedPersists[commitId][key];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (typeof cachedObject === 'undefined') {\r\n\r\n                        if (typeof ongoingObjectRequests[key] === 'undefined') {\r\n                            ongoingObjectRequests[key] = [callback];\r\n\r\n                            logger.debug('object set to be loaded from storage', key);\r\n                            storage.loadObject(projectId, key, function (err, loadResult) {\r\n                                ASSERT(typeof loadResult === 'object' || typeof loadResult === 'undefined');\r\n                                logger.debug('object loaded from database', key);\r\n                                var callbacks,\r\n                                    cb,\r\n                                    subKey;\r\n\r\n                                if ((loadResult || {}).multipleObjects === true) {\r\n                                    for (subKey in loadResult.objects) {\r\n                                        callbacks = ongoingObjectRequests[subKey] || [];\r\n                                        delete ongoingObjectRequests[subKey];\r\n                                        if (!err && loadResult.objects[subKey]) {\r\n                                            cacheInsert(subKey, loadResult.objects[subKey]);\r\n                                        }\r\n\r\n                                        if (callbacks) {\r\n                                            while ((cb = callbacks.pop())) {\r\n                                                cb(err, loadResult.objects[subKey]);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    callbacks = ongoingObjectRequests[key] || [];\r\n                                    delete ongoingObjectRequests[key];\r\n                                    if (!err && loadResult) {\r\n                                        cacheInsert(key, loadResult);\r\n                                    }\r\n\r\n                                    while ((cb = callbacks.pop())) {\r\n                                        cb(err, loadResult);\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            logger.debug('object was already queued to be loaded', key);\r\n                            ongoingObjectRequests[key].push(callback);\r\n                        }\r\n                        return;\r\n                    } else {\r\n                        logger.debug('object was erased from cache and backup but present in queuedPersists', key);\r\n                        cacheInsert(key, cachedObject);\r\n                    }\r\n                } else {\r\n                    logger.debug('object was in backup', key);\r\n                    cacheInsert(key, cachedObject);\r\n                }\r\n            } else {\r\n                logger.debug('object was in cache', key);\r\n            }\r\n\r\n            ASSERT(typeof cachedObject === 'object' &&\r\n                cachedObject !== null &&\r\n                cachedObject[CONSTANTS.MONGO_ID] === key);\r\n            callback(null, cachedObject);\r\n        };\r\n\r\n        /**\r\n         * Loads the necessary objects for the nodes corresponding to paths and inserts them in the cache.\r\n         * If the rootKey is empty or does not exist - it won't attempt to load any nodes.\r\n         *\r\n         * Note that when the callback is called - all requested objects may or may not be in the cache. The resolving\r\n         * of callback only indicates that between the call to loadPaths and the point of resolving - all objects have\r\n         * been in the cache.\r\n         *\r\n         * @param {string} rootKey\r\n         * @param {string[]} paths\r\n         * @param {function(err)} callback\r\n         */\r\n        this.loadPaths = function (rootKey, paths, callback) {\r\n            logger.debug('loadPaths', {metadata: {rootKey: rootKey, paths: paths}});\r\n            var cachedObjects = {},\r\n                excludes = [],\r\n                pathsInfo = [],\r\n                rootObj = getFromCache(rootKey),\r\n                whenDone = {\r\n                    cb: callback,\r\n                    cnt: paths.length // When all paths are accounted for - callback will be invoked.\r\n                },\r\n                i,\r\n                j,\r\n                pathArray,\r\n                obj,\r\n                doRequest,\r\n                key;\r\n\r\n            if (!rootKey) {\r\n                logger.debug('rootKey empty:', rootKey);\r\n                callback(null);\r\n                return;\r\n            }\r\n\r\n            // Filter out paths that are currently being requested.\r\n            // We also need to keep track of when all requested paths are loaded\r\n            // and make a final call to the callback at that point.\r\n            paths = paths.filter(function (path) {\r\n                var id = rootKey + path;\r\n                if (ongoingPathsRequests[id]) {\r\n                    ongoingPathsRequests[id].push(whenDone);\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            i = paths.length;\r\n\r\n            if (rootObj) {\r\n                // The root was loaded, so for each requested path we start from the root\r\n                // and work our way down to the containment chain and add each object that is\r\n                // already in the cache to 'excludes'.\r\n\r\n                excludes.push(rootKey);\r\n                cachedObjects[rootKey] = rootObj;\r\n                while (i--) {\r\n                    pathArray = paths[i].split('/');\r\n                    pathArray.shift();\r\n\r\n                    obj = rootObj;\r\n                    doRequest = false;\r\n                    for (j = 0; j < pathArray.length; j += 1) {\r\n                        key = obj[pathArray[j]];\r\n                        if (key) {\r\n                            obj = getFromCache(key);\r\n                            if (typeof obj !== 'undefined') {\r\n                                excludes.push(key);\r\n                                cachedObjects[key] = obj;\r\n                            } else {\r\n                                pathsInfo.push({\r\n                                    parentHash: key,\r\n                                    path: '/' + pathArray.slice(j + 1).join('/')\r\n                                });\r\n                                doRequest = true;\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            // The given path does not exist anymore - break.\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (doRequest) {\r\n                        // A request is needed - therefore initialize a new entry to ongoing.\r\n                        ongoingPathsRequests[rootKey + paths[i]] = [whenDone];\r\n                    } else {\r\n                        whenDone.cnt -= 1;\r\n                        paths.splice(i, 1);\r\n                    }\r\n                }\r\n            } else {\r\n                pathsInfo = paths.map(function (path) {\r\n                    ongoingPathsRequests[rootKey + path] = [whenDone];\r\n                    return {\r\n                        parentHash: rootKey,\r\n                        path: path\r\n                    };\r\n                });\r\n            }\r\n\r\n            if (paths.length === 0) {\r\n                logger.debug('No new paths to request.');\r\n                if (whenDone.cnt === 0) {\r\n                    logger.debug('All objects already in cache too.');\r\n                    whenDone.cb(null);\r\n                }\r\n                return;\r\n            }\r\n\r\n            logger.debug('loadPaths will request from server, pathsInfo:', pathsInfo);\r\n            storage.loadPaths(projectId, pathsInfo, excludes, function (err, serverObjects) {\r\n                var callbacks = [],\r\n                    keys,\r\n                    id,\r\n                    i;\r\n\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    id = rootKey + paths[i];\r\n                    ongoingPathsRequests[id].forEach(function (doneEntry) {\r\n                        // Account for a completed request...\r\n                        doneEntry.cnt -= 1;\r\n                        ASSERT(doneEntry.cnt >= 0, 'ongoingPathsRequests negative for an entry!?');\r\n                        // if the last one for that entry - that call is completed.\r\n                        if (doneEntry.cnt === 0) {\r\n                            callbacks.push(doneEntry.cb);\r\n                        }\r\n                    });\r\n\r\n                    // Finally clear out all entries stored for this id..\r\n                    delete ongoingPathsRequests[id];\r\n                }\r\n\r\n                if (!err && serverObjects) {\r\n                    // Insert every obtained object into the cache (that was not there before).\r\n                    keys = Object.keys(serverObjects);\r\n                    for (i = 0; i < keys.length; i += 1) {\r\n                        if (!cacheInsert(keys[i], serverObjects[keys[i]])) {\r\n                            logger.debug('Inserting same object again', keys[i]);\r\n                        }\r\n                    }\r\n\r\n                    // Reinsert the cachedObjects.\r\n                    keys = Object.keys(cachedObjects);\r\n                    for (i = 0; i < keys.length; i += 1) {\r\n                        cacheInsert(keys[i], cachedObjects[keys[i]]);\r\n                    }\r\n\r\n                    callbacks.forEach(function (cb) {\r\n                        cb(null);\r\n                    });\r\n                } else {\r\n                    logger.error('loadingPaths failed', err || new Error('no object arrived from server'));\r\n                    callbacks.forEach(function (cb) {\r\n                        cb(err);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        this.insertObject = function (obj, stackedObjects) {\r\n            ASSERT(typeof obj === 'object' && obj !== null);\r\n\r\n            var key = obj[CONSTANTS.MONGO_ID];\r\n            logger.debug('insertObject', {metadata: key});\r\n            ASSERT(typeof key === 'string');\r\n\r\n            if (cacheInsert(key, obj) === false) {\r\n                // The storage on the server will return error if it's not the same..\r\n                logger.debug('object inserted was already in cache');\r\n            } else {\r\n                var item = backup[key];\r\n\r\n                if (typeof item !== 'undefined') {\r\n                    // The storage on the server will return error if it's not the same..\r\n                    logger.debug('object inserted was already in back-up');\r\n                } else {\r\n                    item = ongoingObjectRequests[key];\r\n                    if (typeof item !== 'undefined') {\r\n                        delete ongoingObjectRequests[key];\r\n\r\n                        var cb;\r\n                        while ((cb = item.pop())) {\r\n                            cb(null, obj);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (stackedObjects) {\r\n                stackedObjects[key] = obj;\r\n            }\r\n        };\r\n\r\n        this.insertPatchObject = function (obj) {\r\n            ASSERT(typeof obj === 'object' && obj !== null);\r\n\r\n            var base,\r\n                patch,\r\n                key = obj[CONSTANTS.MONGO_ID];\r\n\r\n            if (obj.base && typeof obj.patch === 'object' && key) {\r\n                base = getFromCache(obj.base);\r\n\r\n                if (base) {\r\n                    patch = UTIL.applyPatch(base, obj.patch);\r\n                    if (patch.status === 'success') {\r\n                        patch.result[CONSTANTS.MONGO_ID] = key;\r\n                        this.insertObject(patch.result);\r\n                    } else {\r\n                        logger.error('patch application failed', patch);\r\n                    }\r\n                } else {\r\n                    logger.debug('the base [' +\r\n                        obj.base + '] is not available from the cache so the patch object is ignored');\r\n                }\r\n            } else {\r\n                logger.error('invalid patch object format', obj);\r\n            }\r\n        };\r\n    }\r\n\r\n    return ProjectCache;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint no-unused-vars: 0*/\r\n\r\n/**\r\n * This class defines the common interface for a storage-project.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/project/interface',[\r\n    'q',\r\n    'common/storage/project/cache',\r\n    'common/storage/constants',\r\n    'common/storage/util',\r\n    'common/regexp',\r\n], function (Q, ProjectCache, CONSTANTS, UTIL, REGEXP) {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param {string} projectId - Id of project to be opened.\r\n     * @param {object} storageObjectsAccessor - Exposes loadObject towards the database.\r\n     * @param {GmeLogger} mainLogger - Logger instance from instantiator.\r\n     * @param {GmeConfig} gmeConfig\r\n     * @alias ProjectInterface\r\n     * @constructor\r\n     */\r\n    function ProjectInterface(projectId, storageObjectsAccessor, mainLogger, gmeConfig) {\r\n\r\n        /**\r\n         * Unique ID of project, built up by the ownerId and projectName.\r\n         *\r\n         * @example\r\n         * 'guest+TestProject', 'organization+TestProject2'\r\n         * @type {string}\r\n         */\r\n        this.projectId = projectId;\r\n        this.projectName = UTIL.getProjectNameFromProjectId(projectId);\r\n\r\n        this.CONSTANTS = CONSTANTS;\r\n\r\n        this.ID_NAME = CONSTANTS.MONGO_ID;\r\n\r\n        /**\r\n         * @type {GmeConfig}\r\n         */\r\n        this.gmeConfig = gmeConfig;\r\n\r\n        /**\r\n         * @type {GmeLogger}\r\n         */\r\n        this.logger = mainLogger.fork('Project:' + this.projectId);\r\n\r\n        this.logger.debug('ctor', projectId);\r\n        this.projectCache = new ProjectCache(storageObjectsAccessor, this.projectId, this.logger, gmeConfig);\r\n\r\n        // Functions forwarded to project cache.\r\n        /**\r\n         * Inserts the given object to project-cache.\r\n         *\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\r\n         * @param {Object.<module:Core~ObjectHash, module:Core~ObjectData>} [stackedObjects] - When used by the core,\r\n         * inserts between persists are stored here.\r\n         * @func\r\n         * @private\r\n         */\r\n        this.insertObject = this.projectCache.insertObject;\r\n\r\n        /**\r\n         * Try to create the full object from the patch object by looking for the base object in the cache.\r\n         * If the base has been found it applies the patch and inserts the result. If any step fails it simply\r\n         * ignores the insert.\r\n         *\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\r\n         * @func\r\n         * @private\r\n         */\r\n        this.insertPatchObject = this.projectCache.insertPatchObject;\r\n\r\n        /**\r\n         * Callback for loadObject.\r\n         *\r\n         * @callback ProjectInterface~loadObjectCallback\r\n         * @param {Error} err - If error occurred.\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} object - Object loaded from database,\r\n         * commit-object or model data-blob.\r\n         */\r\n\r\n        /**\r\n         * Loads the object with hash key from the database or\r\n         * directly from the cache if recently loaded.\r\n         * @param {string} key - Hash of object to load.\r\n         * @param {ProjectInterface~loadObjectCallback} callback - Invoked when object is loaded.\r\n         * @func\r\n         * @private\r\n         */\r\n        this.loadObject = this.projectCache.loadObject;\r\n\r\n        /**\r\n         * Collects the objects from the server and pre-loads them into the cache\r\n         * making the load of multiple objects faster.\r\n         * @private\r\n         * @param {string} rootKey - Hash of the object at the entry point of the paths.\r\n         * @param {string[]} paths - List of paths that needs to be pre-loaded.\r\n         * @param {function} callback - Invoked when objects have been collected.\r\n         * @func\r\n         * @private\r\n         */\r\n        this.loadPaths = this.projectCache.loadPaths;\r\n\r\n        // Public API\r\n\r\n        /**\r\n         * Makes a commit to data base. Based on the root hash and commit message a new\r\n         * {@link module:Storage.CommitObject} (with returned hash)\r\n         * is generated and insert together with the core objects to the database on the server.\r\n         *\r\n         * @example\r\n         * var persisted = core.persist(rootNode);\r\n         *\r\n         * project.makeCommit('master', ['#thePreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'SYNCED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })\r\n         *   .catch(function (error) {\r\n         *     // error.message = 'Not authorized to read project: guest+project'\r\n         *   });\r\n         * @example\r\n         * project.makeCommit('master', ['#notPreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'FORKED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @example\r\n         * project.makeCommit(null, ['#anExistingCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @example\r\n         * project.makeCommit('master', ['#aPreviousCommitHash'], previousRootHash, {}, 'adding a commit to master')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'SYNCED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @param {string} branchName - Name of branch to update (none if null).\r\n         * @param {module:Storage~CommitHash[]} parents - Parent commit hashes.\r\n         * @param {module:Core~ObjectHash} rootHash - Hash of root object.\r\n         * @param {module:Core~DataObject} coreObjects - Core objects associated with the commit.\r\n         * @param {string} msg='n/a' - Commit message.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the commit and branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {Error} <b>error</b>.\r\n         */\r\n        this.makeCommit = function (branchName, parents, rootHash, coreObjects, msg, callback) {\r\n            throw new Error('makeCommit must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves the metadata of the project.\r\n         * @example\r\n         * {\r\n         *  _id: 'guest+example',\r\n         *  owner: 'guest',\r\n         *  name: 'example',\r\n         *  info: {\r\n         *      createdAt: '2016-12-02T17:52:25.029Z',\r\n         *      viewedAt: '2017-01-30T22:45:15.269Z',\r\n         *      modifiedAt: '2017-01-20T00:15:34.593Z',\r\n         *      creator: 'guest',\r\n         *      viewer: 'guest',\r\n         *      modifier': 'guest'\r\n         *  },\r\n         *  hooks: {\r\n         *      ConstraintCheckerHook': {\r\n         *          url: 'http://127.0.0.1:8080/ConstraintCheckerHook',\r\n         *          description': 'Checks if there are any meta violations in the project',\r\n         *          events: ['COMMIT'],\r\n         *          active: true,\r\n         *          createdAt: '2017-01-19T23:22:46.834Z',\r\n         *          updatedAt: '2017-01-19T23:22:46.834Z'\r\n         *      }\r\n         *  },\r\n         *  rights: {\r\n         *      read: true,\r\n         *      write: true,\r\n         *      delete: true\r\n         *  },\r\n         *  branches: {\r\n         *      b1: '#998067142c7ff8067cd0c04a0ec4ef80d865606c',\r\n         *      master: '#36df6f8c17b2ccf4e35a2a75b1e0adb928f82a61'\r\n         *  }\r\n         * }\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {object} callback.projectInfo - An object with info about the project.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {object} <b>projectInfo</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getProjectInfo = function (callback) {\r\n            throw new Error('getProjectInfo must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Updates the head of the branch.\r\n         * @param {string} branchName - Name of branch to update.\r\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\r\n         * @param {module:Storage~CommitHash} oldHash - Current state of the branch head inside the database.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.setBranchHash = function (branchName, newHash, oldHash, callback) {\r\n            throw new Error('setBranchHash must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves the commit hash for the head of the branch.\r\n         * @param {string} branchName - Name of branch.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitHash} callback.commitHash - The commit hash.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitHash} <b>commitHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getBranchHash = function (branchName, callback) {\r\n            throw new Error('getBranchHash must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves the root hash at the provided branch or commit-hash.\r\n         * @param {string} branchNameOrCommitHash - Name of branch or a commit-hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Core~ObjectHash} callback.rootHash - The root hash.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Core~ObjectHash} <b>rootHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getRootHash = function (branchNameOrCommitHash, callback) {\r\n            return this.getCommitObject(branchNameOrCommitHash)\r\n                .then(function (commitObj) {\r\n                    return commitObj.root;\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         * Creates a new branch with head pointing to the provided commit hash.\r\n         * @param {string} branchName - Name of branch to create.\r\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.createBranch = function (branchName, newHash, callback) {\r\n            throw new Error('createBranch must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Deletes the branch.\r\n         * @param {string} branchName - Name of branch to create.\r\n         * @param {module:Storage~CommitHash} oldHash - Previous commit hash for branch head.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.deleteBranch = function (branchName, oldHash, callback) {\r\n            throw new Error('deleteBranch must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves all branches and their current heads within the project.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Object.<string, module:Storage~CommitHash>} callback.branches - An object with branch names as keys\r\n         * and their commit-hashes as values.\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Object.<string, {@link module:Storage~CommitHash}> <b>branches</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getBranches = function (callback) {\r\n            throw new Error('getBranches must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves the commit-object at the provided branch or commit-hash.\r\n         * @param {string} branchNameOrCommitHash - Name of branch or a commit-hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitObject} callback.commit - The commit-object.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitObject} <b>commitObject</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getCommitObject = function (branchNameOrCommitHash, callback) {\r\n            var self = this,\r\n                commitDeferred;\r\n\r\n            if (REGEXP.HASH.test(branchNameOrCommitHash)) {\r\n                commitDeferred = Q(branchNameOrCommitHash);\r\n            } else {\r\n                commitDeferred = this.getBranchHash(branchNameOrCommitHash);\r\n            }\r\n\r\n            return commitDeferred\r\n                .then(function (commitHash) {\r\n                    return Q.ninvoke(self, 'loadObject', commitHash);\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         * Retrieves an array of commits starting from a branch(es) and/or commitHash(es).\r\n         * <br> The result is ordered by the rules (applied in order)\r\n         * <br> 1. Descendants are always returned before their ancestors.\r\n         * <br> 2. By their timestamp.\r\n         * @param {string|module:Storage~CommitHash|string[]|module:Storage~CommitHash[]} start - Branch name,\r\n         * commit hash or array of these.\r\n         * @param {number} number - Number of commits to load.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Array.<module:Storage~CommitObject>} callback.commits - The commits that match the input ordered\r\n         * as explained.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Array.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getHistory = function (start, number, callback) {\r\n            throw new Error('getHistory must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves and array of the latest (sorted by timestamp) commits for the project.\r\n         * If timestamp is given it will get <b>number</b> of commits strictly before <b>before</b>.\r\n         * If commit hash is specified that commit will be included too.\r\n         * <br> N.B. due to slight time differences on different machines, ancestors may be returned before\r\n         * their descendants. Unless looking for 'headless' commits 'getHistory' is the preferred method.\r\n         * @param {number|module:Storage~CommitHash} before - Timestamp or commitHash to load history from.\r\n         * @param {number} number - Number of commits to load.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Array.<module:Storage~CommitObject>} callback.commits - The commits that match the input, ordered\r\n         * by their time of insertion.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Array.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getCommits = function (before, number, callback) {\r\n            throw new Error('getCommits must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Creates a new tag pointing to the provided commit hash.\r\n         * @param {string} tagName - Name of tag to create.\r\n         * @param {module:Storage~CommitHash} commitHash - Commit hash tag will point to.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.createTag = function (tagName, commitHash, callback) {\r\n            throw new Error('createTag must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Deletes the given tag.\r\n         * @param {string} tagName - Name of tag to delete.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.deleteTag = function (tagName, callback) {\r\n            throw new Error('deleteTag must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves all tags and their commits hashes within the project.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Object.<string, module:Storage~CommitHash>} callback.tags - An object with tag names as keys and\r\n         * their commit-hashes as values.\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Object.<string, {@link module:Storage~CommitHash}> <b>tags</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getTags = function (callback) {\r\n            throw new Error('getTags must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Retrieves the common ancestor of two commits. If no ancestor exists it will result in an error.\r\n         *\r\n         * @param {module:Storage~CommitHash} commitA - Commit hash.\r\n         * @param {module:Storage~CommitHash} commitB - Commit hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution (will be non-null if e.g. the commits do\r\n         * not exist or have no common ancestor).\r\n         * @param {module:Storage~CommitHash} callback.commitHash - The commit hash of the common ancestor.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitHash} <b>commitHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */\r\n        this.getCommonAncestorCommit = function (commitA, commitB, callback) {\r\n            throw new Error('getCommonAncestorCommit must be overridden in derived class');\r\n        };\r\n\r\n        /**\r\n         * Return the identity of the current user of this project.\r\n         * @return {string} the userId\r\n         */\r\n        this.getUserId = function () {\r\n            throw new Error('getUserId must be overridden in derived class');\r\n        };\r\n    }\r\n\r\n    return ProjectInterface;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/project/branch',['common/storage/constants'], function (CONSTANTS) {\r\n    'use strict';\r\n\r\n    function Branch(name, mainLogger) {\r\n        var self = this,\r\n            logger = mainLogger.fork('Branch:' + name),\r\n            originHash = '',\r\n            localHash = '',\r\n            commitQueue = [],\r\n            updateQueue = [],\r\n            branchStatus = CONSTANTS.BRANCH_STATUS.SYNC;\r\n\r\n        logger.debug('ctor');\r\n        this.name = name;\r\n        this.isOpen = true;\r\n        this.inSync = true;\r\n\r\n        this.branchStatusHandlers = [];\r\n        this.hashUpdateHandlers = [];\r\n        this.callbackQueue = [];\r\n\r\n        this.pendingWorkerRequests = {};\r\n\r\n        /**\r\n         * @type {Error[]}\r\n         */\r\n        this.errorList = [];\r\n\r\n        this._remoteUpdateHandler = null;\r\n\r\n        this.cleanUp = function () {\r\n            var commitHash,\r\n                i,\r\n                commitResult;\r\n\r\n            self.isOpen = false;\r\n            self.branchStatusHandlers = [];\r\n            self.hashUpdateHandlers = [];\r\n\r\n            self._remoteUpdateHandler = null;\r\n            for (i = 0; i < self.callbackQueue.length; i += 1) {\r\n                // Make sure there are no pending callbacks, invoke with status CANCELED.\r\n                commitResult = {\r\n                    status: CONSTANTS.CANCELED,\r\n                    hash: commitQueue[i].commitObject[CONSTANTS.MONGO_ID]\r\n                };\r\n                self.callbackQueue[i](null, commitResult);\r\n            }\r\n\r\n            self.callbackQueue = [];\r\n\r\n            for (commitHash in self.pendingWorkerRequests) {\r\n                (this.pendingWorkerRequests[commitHash] || [])\r\n                    .forEach(function (action) {\r\n                        action.abort();\r\n                    });\r\n            }\r\n\r\n            self.pendingWorkerRequests = {};\r\n            commitQueue = [];\r\n            updateQueue = [];\r\n        };\r\n\r\n        // Hash related functions\r\n        this.getLocalHash = function () {\r\n            return localHash;\r\n        };\r\n\r\n        this.getOriginHash = function () {\r\n            return originHash;\r\n        };\r\n\r\n        this.getQueuedHashes = function () {\r\n            return commitQueue\r\n                .map(function (commitData) {\r\n                    return commitData.commitObject[CONSTANTS.MONGO_ID];\r\n                });\r\n        };\r\n\r\n        this.updateHashes = function (newLocal, newOrigin) {\r\n            logger.debug('updatingHashes');\r\n            if (newLocal !== null) {\r\n                logger.debug('localHash: old, new', localHash, newLocal);\r\n                localHash = newLocal;\r\n            }\r\n            if (newOrigin !== null) {\r\n                logger.debug('originHash: old, new', originHash, newOrigin);\r\n                originHash = newOrigin;\r\n            }\r\n        };\r\n\r\n        // Queue related functions\r\n        this.queueCommit = function (commitData, commitCallback) {\r\n            commitQueue.push(commitData);\r\n            self.callbackQueue.push(commitCallback);\r\n            logger.debug('Adding new commit to queue', commitQueue.length);\r\n        };\r\n\r\n        this.getFirstCommit = function (shift) {\r\n            var commitData;\r\n            if (shift) {\r\n                commitData = commitQueue.shift();\r\n                self.callbackQueue.shift();\r\n                logger.debug('Removed commit from queue', commitQueue.length);\r\n            } else {\r\n                commitData = commitQueue[0];\r\n            }\r\n\r\n            return commitData;\r\n        };\r\n\r\n        this.getMergedCommit = function (mergeHash) {\r\n            var mergeCommit,\r\n                i = updateQueue.length;\r\n\r\n            while (i) {\r\n                i -= 1;\r\n                if (updateQueue[i].commitObject[CONSTANTS.MONGO_ID] === mergeHash) {\r\n                    mergeCommit = updateQueue[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!mergeCommit) {\r\n                logger.error('mergeCommit not available in updateQueue', mergeHash,\r\n                    JSON.stringify(updateQueue, null, 2));\r\n            }\r\n\r\n            updateQueue = [];\r\n\r\n            return mergeCommit;\r\n        };\r\n\r\n        this.getCommitQueue = function () {\r\n            return commitQueue;\r\n        };\r\n\r\n        this.getCommitsForNewFork = function (upTillCommitHash) {\r\n            var i,\r\n                commitData,\r\n                commitHash,\r\n                commitHashExisted = false,\r\n                subQueue = [];\r\n\r\n            logger.debug('getCommitsForNewFork', upTillCommitHash);\r\n\r\n            if (commitQueue.length === 0) {\r\n                commitHash = localHash;\r\n\r\n                logger.debug('No commits queued will fork from', commitHash);\r\n                upTillCommitHash = upTillCommitHash || commitHash;\r\n                commitHashExisted = upTillCommitHash === commitHash;\r\n            } else {\r\n                upTillCommitHash = upTillCommitHash ||\r\n                    commitQueue[commitQueue.length - 1].commitObject[CONSTANTS.MONGO_ID];\r\n            }\r\n\r\n            logger.debug('Will fork up to commitHash', upTillCommitHash);\r\n\r\n            // Move over all commit-data up till the chosen commitHash to the fork's queue,\r\n            // except the commit that caused the fork (all its objects are already in the database).\r\n            for (i = 0; i < commitQueue.length; i += 1) {\r\n                commitData = commitQueue[i];\r\n                commitHash = commitData.commitObject[CONSTANTS.MONGO_ID];\r\n                if (i !== 0) {\r\n                    subQueue.push(commitData);\r\n                }\r\n                if (commitData.commitObject[CONSTANTS.MONGO_ID] === upTillCommitHash) {\r\n                    // The commitHash from where to fork has been reached.\r\n                    // If any, the rest of the 'pending' commits will not be used.\r\n                    commitHashExisted = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (commitHashExisted === false) {\r\n                logger.error('Could not find the specified commitHash', upTillCommitHash);\r\n                return false;\r\n            }\r\n\r\n            return {commitHash: commitHash, queue: subQueue};\r\n        };\r\n\r\n        this.queueUpdate = function (updateData) {\r\n            updateQueue.push(updateData);\r\n            logger.debug('Adding new update to queue', updateQueue.length);\r\n        };\r\n\r\n        this.getUpdateQueue = function () {\r\n            return updateQueue;\r\n        };\r\n\r\n        this.getFirstUpdate = function (shift) {\r\n            var updateData;\r\n            if (shift) {\r\n                updateData = updateQueue.shift();\r\n                logger.debug('Removed update from queue', updateQueue.length);\r\n            } else {\r\n                updateData = updateQueue[0];\r\n            }\r\n\r\n            return updateData;\r\n        };\r\n\r\n        // Event related functions\r\n        this.addBranchStatusHandler = function (fn) {\r\n            self.branchStatusHandlers.push(fn);\r\n        };\r\n\r\n        this.removeBranchStatusHandler = function (fn) {\r\n            var i;\r\n\r\n            for (i = 0; i < self.branchStatusHandlers.length; i += 1) {\r\n                if (self.branchStatusHandlers[i] === fn) {\r\n                    self.branchStatusHandlers.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.dispatchBranchStatus = function (newStatus, err) {\r\n            var i;\r\n\r\n            logger.debug('dispatchBranchStatus old, new', branchStatus, newStatus);\r\n\r\n            if (branchStatus === CONSTANTS.BRANCH_STATUS.ERROR) {\r\n                logger.error('In error state, action from user required!');\r\n                newStatus = branchStatus;\r\n            } else {\r\n                branchStatus = newStatus;\r\n            }\r\n\r\n            if (err) {\r\n                this.errorList.push(err instanceof Error ? err : new Error(err));\r\n            }\r\n\r\n            for (i = 0; i < self.branchStatusHandlers.length; i += 1) {\r\n                self.branchStatusHandlers[i](newStatus, commitQueue, updateQueue);\r\n            }\r\n        };\r\n\r\n        this.addHashUpdateHandler = function (fn) {\r\n            self.hashUpdateHandlers.push(fn);\r\n        };\r\n\r\n        this.removeHashUpdateHandler = function (fn) {\r\n            var i;\r\n\r\n            for (i = 0; i < self.hashUpdateHandlers.length; i += 1) {\r\n                if (self.hashUpdateHandlers[i] === fn) {\r\n                    self.hashUpdateHandlers.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.dispatchHashUpdate = function (data, callback) {\r\n            var i,\r\n                error = null,\r\n                counter = self.hashUpdateHandlers.length,\r\n                allProceed = true,\r\n                counterCallback = function (err, proceed) {\r\n                    error = error || err; // Use the latest error\r\n                    allProceed = allProceed && proceed === true;\r\n                    counter -= 1;\r\n                    if (counter === 0) {\r\n                        callback(error, allProceed);\r\n                    }\r\n                };\r\n\r\n            for (i = 0; i < self.hashUpdateHandlers.length; i += 1) {\r\n                self.hashUpdateHandlers[i](data, commitQueue, updateQueue, counterCallback);\r\n            }\r\n        };\r\n\r\n        this.queueWorkerRequest = function (commitHash, action) {\r\n            this.pendingWorkerRequests[commitHash] = this.pendingWorkerRequests[commitHash] || [];\r\n\r\n            this.pendingWorkerRequests[commitHash].push(action);\r\n        };\r\n\r\n        this.commitInserted = function (commitHash) {\r\n            (this.pendingWorkerRequests[commitHash] || []).forEach(function (action) {\r\n                action.release();\r\n            });\r\n\r\n            delete this.pendingWorkerRequests[commitHash];\r\n        };\r\n    }\r\n\r\n    return Branch;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n\r\n *\r\n * Storage.openProject resolves with an instance of this classes.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/project/project',[\r\n    'common/storage/project/interface',\r\n    'common/storage/project/branch',\r\n    'q'\r\n], function (ProjectInterface, Branch, Q) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This project uses a common storage to connect to the database on the server via web-sockets.\r\n     * It can run under both nodeJS and in the browser.\r\n     *\r\n     *\r\n     * @param {string} projectId - Id of project to be opened.\r\n     * @param {object} storage - Storage connected to the server and database.\r\n     * @param {object} mainLogger - Logger instance.\r\n     * @param {GmeConfig} gmeConfig\r\n     * @alias Project\r\n     * @constructor\r\n     * @augments ProjectInterface\r\n     */\r\n    function Project(projectId, storage, mainLogger, gmeConfig) {\r\n        var self = this;\r\n        this.branches = {};\r\n\r\n        ProjectInterface.call(this, projectId, storage, mainLogger, gmeConfig);\r\n\r\n        // Functions defined in ProjectInterface\r\n        this.makeCommit = function (branchName, parents, rootHash, coreObjects, msg, callback) {\r\n            return Q.ninvoke(storage, 'makeCommit', self.projectId, branchName, parents, rootHash, coreObjects, msg)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getProjectInfo = function (callback) {\r\n            return Q.ninvoke(storage, 'getProjectInfo', self.projectId)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.setBranchHash = function (branchName, newHash, oldHash, callback) {\r\n            return Q.ninvoke(storage, 'setBranchHash', self.projectId, branchName, newHash, oldHash)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getBranchHash = function (branchName, callback) {\r\n            return Q.ninvoke(storage, 'getBranchHash', self.projectId, branchName)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.createBranch = function (branchName, newHash, callback) {\r\n            return Q.ninvoke(storage, 'createBranch', self.projectId, branchName, newHash)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.deleteBranch = function (branchName, oldHash, callback) {\r\n            return Q.ninvoke(storage, 'deleteBranch', self.projectId, branchName, oldHash)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getBranches = function (callback) {\r\n            return Q.ninvoke(storage, 'getBranches', self.projectId)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.createTag = function (tagName, commitHash, callback) {\r\n            return Q.ninvoke(storage, 'createTag', self.projectId, tagName, commitHash)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.deleteTag = function (tagName, callback) {\r\n            return Q.ninvoke(storage, 'deleteTag', self.projectId, tagName)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getTags = function (callback) {\r\n            return Q.ninvoke(storage, 'getTags', self.projectId)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getCommits = function (before, number, callback) {\r\n            return Q.ninvoke(storage, 'getCommits', self.projectId, before, number)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getHistory = function (start, number, callback) {\r\n            return Q.ninvoke(storage, 'getHistory', self.projectId, start, number)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getCommonAncestorCommit = function (commitA, commitB, callback) {\r\n            return Q.ninvoke(storage, 'getCommonAncestorCommit', self.projectId, commitA, commitB)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.squashCommits = function (fromCommit, toCommitOrBranch, message, callback) {\r\n            return Q.ninvoke(storage, 'squashCommits', self.projectId, fromCommit, toCommitOrBranch, message)\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getUserId = function () {\r\n            return storage.userId;\r\n        };\r\n\r\n        /**\r\n         * Start watching the document at the provided context.\r\n         * @param {object} data\r\n         * @param {string} data.branchName\r\n         * @param {string} data.nodeId\r\n         * @param {string} data.attrName\r\n         * @param {string} data.attrValue - If the first client entering the document the value will be used\r\n         * @param {function} atOperation - Triggered when other clients' operations were applied\r\n         * @param {ot.Operation} atOperation.operation - Triggered when other clients made changes\r\n         * @param {function} atSelection - Triggered when other clients send their selection info\r\n         * @param {object} atSelection.data\r\n         * @param {ot.Selection | null} atSelection.data.selection - null is passed when other client leaves\r\n         * @param {string} atSelection.data.userId - name/id of other user\r\n         * @param {string} atSelection.data.socketId - unique id of other user\r\n         * @param {function} [callback]\r\n         * @param {Error | null} callback.err - If failed to watch the document\r\n         * @param {object} callback.data\r\n         * @param {string} callback.data.docId - Id of document\r\n         * @param {string} callback.data.document - Current document on server\r\n         * @param {number} callback.data.revision - Revision at server when connecting\r\n         * @param {object} callback.data.users - Users that were connected when connecting\r\n         * @returns {Promise}\r\n         */\r\n        this.watchDocument = function (data, atOperation, atSelection, callback) {\r\n            data.projectId = self.projectId;\r\n            return storage.watchDocument(data, atOperation, atSelection).nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         * Stop watching the document.\r\n         * @param {object} data\r\n         * @param {string} data.docId - document id, if not provided branchName, nodeId, attrName must be.\r\n         * @param {string} [data.branchName]\r\n         * @param {string} [data.nodeId]\r\n         * @param {string} [data.attrName]\r\n         * @param {function} [callback]\r\n         * @param {Error | null} callback.err - If failed to unwatch the document\r\n         * @returns {Promise}\r\n         */\r\n        this.unwatchDocument = function (data, callback) {\r\n            if (!data.docId) {\r\n                data.projectId = self.projectId;\r\n            }\r\n\r\n            return storage.unwatchDocument(data).nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         * Send operation made, and optionally selection, on document at docId.\r\n         * @param {object} data\r\n         * @param {string} data.docId\r\n         * @param {ot.TextOperation} data.operation\r\n         * @param {ot.Selection} [data.selection]\r\n         */\r\n        this.sendDocumentOperation = function (data) {\r\n            return storage.sendDocumentOperation(data);\r\n        };\r\n\r\n        /**\r\n         * Send selection on document at docId. (Will only be transmitted if client is Synchronized.)\r\n         * @param {object} data\r\n         * @param {string} data.docId\r\n         * @param {ot.Selection} data.selection\r\n         */\r\n        this.sendDocumentSelection = function (data) {\r\n            return storage.sendDocumentSelection(data);\r\n        };\r\n    }\r\n\r\n    Project.prototype = Object.create(ProjectInterface.prototype);\r\n    Project.prototype.constructor = Project;\r\n\r\n    return Project;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node*/\r\n/**\r\n * This class implements the functionality needed to edit a model in a specific project and branch in a\r\n * collaborative fashion.\r\n *\r\n * It keeps a state of the open projects which in turn keeps track of the open branches.\r\n *\r\n * Each project is associated with a project-cache which is shared amongst the branches. So switching\r\n * between branches is (potentially) an operation that does not require lots of server round-trips.\r\n *\r\n * It is possible to have multiple projects open and multiple branches within each project. However\r\n * one instance of a storage can only hold a single instance of a project (or branch within a project).\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/storageclasses/editorstorage',[\r\n    'common/storage/storageclasses/objectloaders',\r\n    'common/storage/constants',\r\n    'common/storage/project/project',\r\n    'common/storage/project/branch',\r\n    'common/util/assert',\r\n    'common/util/key',\r\n    'common/storage/util',\r\n    'q'\r\n], function (StorageObjectLoaders, CONSTANTS, Project, Branch, assert, generateKey, UTIL, Q) {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param webSocket\r\n     * @param mainLogger\r\n     * @param gmeConfig\r\n     * @constructor\r\n     */\r\n    function EditorStorage(webSocket, mainLogger, gmeConfig) {\r\n        var self = this,\r\n            logger = mainLogger.fork('storage'),\r\n            projects = {};\r\n\r\n        self.logger = logger;\r\n        self.userId = null;\r\n        self.serverVersion = null;\r\n\r\n        StorageObjectLoaders.call(this, webSocket, mainLogger, gmeConfig);\r\n\r\n        function triggerNetworkChange(connectionState, networkHandler) {\r\n            networkHandler(connectionState);\r\n            self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n        }\r\n\r\n        /**\r\n         * Dig out the context for the server-worker request. Needed to determine if\r\n         * the request needs be queued on the current commit-queue.\r\n         * @param {object} swmParams\r\n         * @returns {object} If the request contains a projectId and (branchName and/or commitHash). It\r\n         * will return an object with projectId and (branchName and/or commitHash).\r\n         */\r\n        function extractSWMContext(swmParams) {\r\n            var result = {};\r\n\r\n            if (swmParams.projectId) {\r\n                result.projectId = swmParams.projectId;\r\n                if (swmParams.branchName || swmParams.branch || swmParams.commitHash || swmParams.commit) {\r\n                    // Add any of these.\r\n                    result.branchName = swmParams.branchName || swmParams.branch;\r\n                    result.commitHash = swmParams.commitHash || swmParams.commit;\r\n                }\r\n            } else if (swmParams.context &&\r\n                swmParams.context.managerConfig &&\r\n                swmParams.context.managerConfig.project) {\r\n                // This is a plugin request..\r\n                result.projectId = swmParams.context.managerConfig.project;\r\n                result.commitHash = swmParams.context.managerConfig.commitHash;\r\n                result.branchName = swmParams.context.managerConfig.branchName;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        this.open = function (networkHandler) {\r\n            webSocket.connect(function (err, connectionState) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                    triggerNetworkChange(CONSTANTS.CONNECTION_ERROR, networkHandler);\r\n                } else if (connectionState === CONSTANTS.CONNECTED) {\r\n                    self.connected = true;\r\n                    self.userId = webSocket.userId;\r\n                    self.serverVersion = webSocket.serverVersion;\r\n                    triggerNetworkChange(CONSTANTS.CONNECTED, networkHandler);\r\n                } else if (connectionState === CONSTANTS.RECONNECTING) {\r\n                    // This is an internal state only to handle rejoining of rooms.\r\n                    // Technically the websocket is connected at this point.\r\n                    self.reconnecting = true;\r\n                } else if (connectionState === CONSTANTS.RECONNECTED) {\r\n                    self.connected = true;\r\n                    self._rejoinWatcherRooms()\r\n                        .then(function () {\r\n                            return self._rejoinBranchRooms();\r\n                        })\r\n                        .then(function () {\r\n                            self.reconnecting = false;\r\n                            triggerNetworkChange(CONSTANTS.RECONNECTED, networkHandler);\r\n                        })\r\n                        .catch(function (err) {\r\n                            logger.error('failing during reconnect', err);\r\n                            triggerNetworkChange(CONSTANTS.CONNECTION_ERROR, networkHandler);\r\n                        });\r\n\r\n                } else if (connectionState === CONSTANTS.DISCONNECTED) {\r\n                    self.connected = false;\r\n                    triggerNetworkChange(CONSTANTS.DISCONNECTED, networkHandler);\r\n                } else if (connectionState === CONSTANTS.INCOMPATIBLE_CONNECTION) {\r\n                    triggerNetworkChange(connectionState, networkHandler);\r\n                } else if (connectionState === CONSTANTS.JWT_ABOUT_TO_EXPIRE) {\r\n                    triggerNetworkChange(connectionState, networkHandler);\r\n                } else if (connectionState === CONSTANTS.JWT_EXPIRED) {\r\n                    triggerNetworkChange(connectionState, networkHandler);\r\n                } else {\r\n                    logger.error('unexpected connection state');\r\n                    triggerNetworkChange(CONSTANTS.CONNECTION_ERROR, networkHandler);\r\n                }\r\n            });\r\n        };\r\n\r\n        this.close = function (callback) {\r\n            logger.debug('Closing storage, openProjects', Object.keys(projects));\r\n\r\n            return Q.allSettled(Object.keys(projects)\r\n                .map(function (projectId) {\r\n                    return self.closeProject(projectId);\r\n                }))\r\n                .then(function () {\r\n                    // Remove the handler for the socket.io events 'connect' and 'disconnect'.\r\n                    logger.debug('Removing connect and disconnect events');\r\n                    webSocket.socket.removeAllListeners('connect');\r\n                    webSocket.socket.removeAllListeners('disconnect');\r\n                    // Disconnect from the server.\r\n                    logger.debug('Disconnecting web-socket');\r\n                    webSocket.disconnect();\r\n                    self.connected = false;\r\n                    // Remove all local event-listeners.\r\n                    webSocket.clearAllEvents();\r\n                    self.clearAllEvents();\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getToken = function () {\r\n            return webSocket.ioClient.getToken();\r\n        };\r\n\r\n        this.setToken = function (newToken) {\r\n            return webSocket.ioClient.setToken(newToken);\r\n        };\r\n\r\n        /**\r\n         * Callback for openProject.\r\n         *\r\n         * @callback EditorStorage~openProjectCallback\r\n         * @param {string} err - error string.\r\n         * @param {Project} project - the newly opened project.\r\n         * @param {object} branches - the newly opened project.\r\n         * @example\r\n         * // branches is of the form\r\n         * // { master: '#somevalidhash', b1: '#someothervalidhash' }\r\n         */\r\n\r\n        /**\r\n         *\r\n         * @param {string} projectId - name of project to open.\r\n         * @param {EditorStorage~openProjectCallback} - callback\r\n         */\r\n        this.openProject = function (projectId, callback) {\r\n            var deferred,\r\n                data = {\r\n                    projectId: projectId\r\n                };\r\n\r\n            if (projects[projectId]) {\r\n                return Q.reject(new Error('project is already open ' + projectId)).nodeify(callback);\r\n            }\r\n\r\n            webSocket.openProject(data)\r\n                .spread(function (branches, access) {\r\n                    var project = new Project(projectId, self, logger, gmeConfig);\r\n                    projects[projectId] = project;\r\n\r\n                    if (callback) {\r\n                        callback(null, project, branches, access);\r\n                    } else {\r\n                        deferred.resolve([project, branches, access]);\r\n                    }\r\n                })\r\n                .catch(function (err) {\r\n                    if (callback) {\r\n                        callback(err);\r\n                    } else {\r\n                        deferred.reject(err);\r\n                    }\r\n                });\r\n\r\n            if (!callback) {\r\n                deferred = Q.defer();\r\n                return deferred.promise;\r\n            }\r\n        };\r\n\r\n        this.closeProject = function (projectId, callback) {\r\n            logger.debug('closeProject', projectId);\r\n\r\n            if (projects[projectId]) {\r\n                return Q.allSettled(Object.keys(projects[projectId].branches)\r\n                    .map(function (branchName) {\r\n                        return self.closeBranch(projectId, branchName);\r\n                    }))\r\n                    .then(function () {\r\n                        if (self.connected) {\r\n                            return webSocket.closeProject({projectId: projectId});\r\n                        } else {\r\n                            logger.debug('Disconnected while closing project.. skipping webSocket request to server.');\r\n                        }\r\n                    })\r\n                    .then(function () {\r\n                        delete projects[projectId];\r\n                    })\r\n                    .nodeify(callback);\r\n            } else {\r\n                logger.warn('Project is not open ', projectId);\r\n                return Q().nodeify(callback);\r\n            }\r\n        };\r\n\r\n        this.openBranch = function (projectId, branchName, hashUpdateHandler, branchStatusHandler, callback) {\r\n            var project = projects[projectId],\r\n                data = {\r\n                    projectId: projectId,\r\n                    branchName: branchName\r\n                },\r\n                deferred,\r\n                branch;\r\n\r\n            if (!project) {\r\n                return Q.reject(\r\n                    new Error('Cannot open branch, ' + branchName + ', project ' + projectId + ' is not opened.'))\r\n                    .nodeify(callback);\r\n            }\r\n\r\n            if (project.branches[branchName]) {\r\n                return Q.reject(new Error('Branch is already open ' + branchName + ', project: ' + projectId))\r\n                    .nodeify(callback);\r\n            }\r\n\r\n            logger.debug('openBranch, calling webSocket openBranch', projectId, branchName);\r\n\r\n            deferred = Q.defer();\r\n\r\n            webSocket.openBranch(data)\r\n                .then(function (latestCommit) {\r\n                    var branchHash;\r\n\r\n                    branch = new Branch(branchName, project.logger);\r\n                    project.branches[branchName] = branch;\r\n\r\n                    // Update state of branch\r\n                    branch.latestCommitData = latestCommit;\r\n                    branchHash = latestCommit.commitObject[CONSTANTS.MONGO_ID];\r\n                    branch.updateHashes(branchHash, branchHash);\r\n\r\n                    // Add handlers to branch and set the remote update handler for the web-socket.\r\n                    branch.addHashUpdateHandler(hashUpdateHandler);\r\n                    branch.addBranchStatusHandler(branchStatusHandler);\r\n\r\n                    branch._remoteUpdateHandler = function (_ws, updateData, initCallback) {\r\n                        var j,\r\n                            originHash = updateData.commitObject[CONSTANTS.MONGO_ID];\r\n                        logger.debug('_remoteUpdateHandler invoked for project, branch', projectId, branchName);\r\n                        for (j = 0; j < updateData.coreObjects.length; j += 1) {\r\n                            if (updateData.coreObjects[j] && updateData.coreObjects[j].type === 'patch') {\r\n                                project.insertPatchObject(updateData.coreObjects[j]);\r\n                            } else {\r\n                                project.insertObject(updateData.coreObjects[j]);\r\n                            }\r\n                        }\r\n\r\n                        branch.queueUpdate(updateData);\r\n                        branch.updateHashes(null, originHash);\r\n\r\n                        if (branch.getCommitQueue().length === 0) {\r\n                            if (branch.getUpdateQueue().length === 1) {\r\n                                self._pullNextQueuedCommit(projectId, branchName, initCallback); // hashUpdateHandlers\r\n                            }\r\n                        } else {\r\n                            logger.debug('commitQueue is not empty, only updating originHash.');\r\n                        }\r\n                    };\r\n\r\n                    branch._remoteUpdateHandler(null, latestCommit, function (err) {\r\n                        webSocket.addEventListener(webSocket.getBranchUpdateEventName(projectId, branchName),\r\n                            branch._remoteUpdateHandler);\r\n\r\n                        if (err) {\r\n                            deferred.reject(err);\r\n                        } else {\r\n                            deferred.resolve(latestCommit);\r\n                        }\r\n                    });\r\n                })\r\n                .catch(deferred.reject);\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        this.closeBranch = function (projectId, branchName, callback) {\r\n            var project = projects[projectId],\r\n                branch;\r\n\r\n            logger.debug('closeBranch', projectId, branchName);\r\n\r\n            if (!project) {\r\n                logger.warn('closeBranch: project is not open', projectId, branchName);\r\n                return Q(null).nodeify(callback);\r\n            }\r\n\r\n            branch = project.branches[branchName];\r\n\r\n            if (!branch) {\r\n                logger.warn('closeBranch: project does not have given branch.', projectId, branchName);\r\n                return Q(null).nodeify(callback);\r\n            }\r\n\r\n            // This will prevent memory leaks and expose if a commit is being\r\n            // processed at the server this time (see last error in _pushNextQueuedCommit).\r\n            branch.dispatchBranchStatus(null);\r\n\r\n            // Stop listening to events from the server\r\n            webSocket.removeEventListener(webSocket.getBranchUpdateEventName(projectId, branchName),\r\n                branch._remoteUpdateHandler);\r\n\r\n            branch.cleanUp();\r\n            if (self.connected) {\r\n                return webSocket.closeBranch({projectId: projectId, branchName: branchName})\r\n                    .then(function () {\r\n                        delete project.branches[branchName];\r\n                    })\r\n                    .nodeify(callback);\r\n            } else {\r\n                logger.debug('Disconnected while closing branch.. skipping webSocket request to server.');\r\n                delete project.branches[branchName];\r\n                return Q(null).nodeify(callback);\r\n            }\r\n        };\r\n\r\n        this.forkBranch = function (projectId, branchName, forkName, commitHash, callback) {\r\n            var project = projects[projectId],\r\n                branch,\r\n                forkData;\r\n\r\n            this.logger.debug('forkBranch', projectId, branchName, forkName, commitHash);\r\n\r\n            if (!project) {\r\n                return Q.reject(new Error('Cannot fork branch, ' + branchName + ', project '\r\n                    + projectId + ' is not opened.'))\r\n                    .nodeify(callback);\r\n            }\r\n\r\n            branch = project.branches[branchName];\r\n\r\n            if (!branch) {\r\n                return Q.reject(new Error('Cannot fork branch, branch is not open ' + branchName +\r\n                    ', project: ' + projectId))\r\n                    .nodeify(callback);\r\n            }\r\n\r\n            forkData = branch.getCommitsForNewFork(commitHash, forkName); // commitHash = null defaults to latest commit\r\n            self.logger.debug('forkBranch - forkData', forkData);\r\n\r\n            if (forkData === false) {\r\n                return Q.reject(new Error('Could not find specified commitHash: ' + commitHash)).nodeify(callback);\r\n            }\r\n\r\n            return self.persistCommits(forkData.queue)\r\n                .then(function () {\r\n                    return self.createBranch(projectId, forkName, forkData.commitHash);\r\n                })\r\n                .then(function () {\r\n                    return forkData.commitHash;\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.persistCommits = function (commitQueue, callback) {\r\n            var deferred = Q.defer(),\r\n                commitHash;\r\n\r\n            function commitNext(i) {\r\n                var currentCommitData = commitQueue[i];\r\n\r\n                if (i < commitQueue.length) {\r\n                    currentCommitData = commitQueue[i];\r\n                    logger.debug('persistCommits - commitNext, currentCommitData', currentCommitData);\r\n                    delete currentCommitData.branchName;\r\n                    commitHash = currentCommitData.commitObject[CONSTANTS.MONGO_ID];\r\n\r\n                    webSocket.makeCommit(currentCommitData)\r\n                        .then(function (result) {\r\n                            logger.debug('persistCommits - commit successful, hash', result);\r\n                            commitNext(i += 1);\r\n                        })\r\n                        .catch(deferred.reject);\r\n                } else {\r\n                    deferred.resolve(commitHash);\r\n                }\r\n            }\r\n\r\n            commitNext(0);\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        this.makeCommit = function (projectId, branchName, parents, rootHash, coreObjects, msg, callback) {\r\n            var project = projects[projectId],\r\n                branch,\r\n                commitId,\r\n                commitCallback,\r\n                persistQueueElement = {},\r\n                commitData = {\r\n                    rootHash: rootHash,\r\n                    projectId: projectId,\r\n                    commitObject: null,\r\n                    coreObjects: {},\r\n                    changedNodes: null\r\n                },\r\n                keys = Object.keys(coreObjects),\r\n                i;\r\n\r\n            //handling patch object creation\r\n            // console.time('patch-computation');\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (UTIL.coreObjectHasOldAndNewData(coreObjects[keys[i]])) {\r\n                    // Patch type object.\r\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]].newData;\r\n                    if (keys[i] === rootHash) {\r\n                        // console.time('root-patch-computation');\r\n                    }\r\n                    commitData.coreObjects[keys[i]] = UTIL.getPatchObject(coreObjects[keys[i]].oldData,\r\n                        coreObjects[keys[i]].newData);\r\n                    //if (keys[i] === rootHash) {\r\n                    // console.timeEnd('root-patch-computation');\r\n                    //}\r\n                } else if (coreObjects[keys[i]].newData && coreObjects[keys[i]].newHash) {\r\n                    // A new object with no previous data (send the entire data).\r\n                    commitData.coreObjects[keys[i]] = coreObjects[keys[i]].newData;\r\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]].newData;\r\n                } else {\r\n                    // A regular object.\r\n                    commitData.coreObjects[keys[i]] = coreObjects[keys[i]];\r\n                    persistQueueElement[keys[i]] = coreObjects[keys[i]];\r\n                }\r\n            }\r\n            // console.timeEnd('patch-computation');\r\n            // console.time('getChangedNodes');\r\n\r\n            commitData.changedNodes = UTIL.getChangedNodes(commitData.coreObjects, rootHash);\r\n\r\n            // console.timeEnd('getChangedNodes');\r\n\r\n            commitData.commitObject = self._getCommitObject(projectId, parents, commitData.rootHash, msg);\r\n\r\n            if (project) {\r\n                project.insertObject(commitData.commitObject);\r\n                commitId = commitData.commitObject[CONSTANTS.MONGO_ID];\r\n\r\n                commitCallback = function commitCallback() {\r\n                    delete project.projectCache.queuedPersists[commitId];\r\n                    self.logger.debug('Removed now persisted core-objects from cache: ',\r\n                        Object.keys(project.projectCache.queuedPersists).length);\r\n                    callback.apply(null, arguments);\r\n                };\r\n\r\n                project.projectCache.queuedPersists[commitId] = persistQueueElement;\r\n                logger.debug('Queued non-persisted core-objects in cache: ',\r\n                    Object.keys(project.projectCache.queuedPersists).length);\r\n            } else {\r\n                commitCallback = callback;\r\n            }\r\n\r\n            if (typeof branchName === 'string') {\r\n                commitData.branchName = branchName;\r\n                branch = project ? project.branches[branchName] : null;\r\n            }\r\n\r\n            logger.debug('makeCommit', commitData);\r\n            if (branch) {\r\n                logger.debug('makeCommit, branch is open will commit using commitQueue. branchName:', branchName);\r\n                self._commitToBranch(projectId, branchName, commitData, parents[0], commitCallback);\r\n            } else {\r\n                webSocket.makeCommit(commitData, commitCallback);\r\n            }\r\n\r\n            return commitData.commitObject;\r\n        };\r\n\r\n        this.setBranchHash = function (projectId, branchName, newHash, oldHash, callback) {\r\n            var project = projects[projectId];\r\n\r\n            logger.debug('setBranchHash', projectId, branchName, newHash, oldHash);\r\n            if (project && project.branches[branchName]) {\r\n                logger.debug('setBranchHash, branch is open, will notify other local users about change');\r\n                project.loadObject(newHash, function (err, commitObject) {\r\n                    var commitData;\r\n                    if (err) {\r\n                        logger.error('setBranchHash, failed to load in commitObject');\r\n                        //branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    logger.debug('setBranchHash, loaded commitObject');\r\n                    commitData = {\r\n                        projectId: projectId,\r\n                        branchName: branchName,\r\n                        coreObjects: {},\r\n                        changedNodes: null,\r\n                        commitObject: commitObject,\r\n                        oldHash: oldHash\r\n                    };\r\n                    self._commitToBranch(projectId, branchName, commitData, oldHash, callback);\r\n                });\r\n            } else {\r\n                StorageObjectLoaders.prototype.setBranchHash.call(self,\r\n                    projectId, branchName, newHash, oldHash)\r\n                    .nodeify(callback);\r\n            }\r\n        };\r\n\r\n        this.simpleRequest = function (parameters, callback) {\r\n            // This method is overridden here in order to avoid worker-requests\r\n            // to be sent out referencing commits that haven't made it to the server yet.\r\n            var context = extractSWMContext(parameters),\r\n                commitHash,\r\n                deferred,\r\n                queuedInBranch;\r\n\r\n            if (context.projectId && projects[context.projectId]) {\r\n                // The request deals with a currently opened project - let's see if there is\r\n                // a commitHash and/or branch associated with the request..\r\n                if (context.commitHash) {\r\n                    commitHash = context.commitHash;\r\n\r\n                    if (context.branchName &&\r\n                        projects[context.projectId].branches[context.branchName] &&\r\n                        projects[context.projectId].branches[context.branchName].getQueuedHashes()\r\n                            .indexOf(context.commitHash) > -1) {\r\n                        // Since both commitHash and branchName was specified and the commitHash was queued\r\n                        // in that branch - this is the branch to pick.\r\n                        queuedInBranch = context.branchName;\r\n                    } else {\r\n                        // No branch was specified - let's see if the commit is queued in any opened branch.\r\n                        // (Typically there's really only one open.)\r\n                        Object.keys(projects[context.projectId].branches)\r\n                            .forEach(function (branchName) {\r\n                                if (projects[context.projectId].branches[branchName].getQueuedHashes()\r\n                                    .indexOf(context.commitHash) > -1) {\r\n                                    queuedInBranch = branchName;\r\n                                }\r\n                            });\r\n                    }\r\n                } else if (context.branchName && projects[context.projectId].branches[context.branchName]) {\r\n                    // There is no specific commit-associated with request. However since branchName was passed\r\n                    // we can only assume that it should run on the last commit in that branch.\r\n\r\n                    commitHash = projects[context.projectId].branches[context.branchName].getQueuedHashes()[0];\r\n\r\n                    if (commitHash) {\r\n                        queuedInBranch = context.branchName;\r\n                    }\r\n                }\r\n\r\n                if (queuedInBranch) {\r\n                    deferred = Q.defer();\r\n\r\n                    projects[context.projectId].branches[queuedInBranch].queueWorkerRequest(commitHash, {\r\n                        release: function () {\r\n                            StorageObjectLoaders.prototype.simpleRequest.call(self, parameters)\r\n                                .then(deferred.resolve)\r\n                                .catch(deferred.reject);\r\n                        },\r\n                        abort: function () {\r\n                            deferred.reject(new Error('Queued worker request was aborted. Commit ' + commitHash +\r\n                                ' in branch [' + queuedInBranch + '] never made it to the server.'));\r\n                        }\r\n                    });\r\n\r\n                    return deferred.promise.nodeify(callback);\r\n                }\r\n            }\r\n\r\n            return StorageObjectLoaders.prototype.simpleRequest.call(self, parameters).nodeify(callback);\r\n        };\r\n\r\n        this._commitToBranch = function (projectId, branchName, commitData, oldCommitHash, callback) {\r\n            var project = projects[projectId],\r\n                newCommitHash = commitData.commitObject._id,\r\n                branch = project.branches[branchName],\r\n                wasFirstInQueue,\r\n                eventData = {\r\n                    commitData: commitData,\r\n                    local: true\r\n                };\r\n\r\n            logger.debug('_commitToBranch, [oldCommitHash, localHash]', oldCommitHash, branch.getLocalHash());\r\n\r\n            if (oldCommitHash === branch.getLocalHash()) {\r\n                branch.updateHashes(newCommitHash, null);\r\n                branch.queueCommit(commitData, callback);\r\n\r\n                if (branch.inSync === false) {\r\n                    branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\r\n                } else {\r\n                    branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\r\n                }\r\n\r\n                // Get the queue length before dispatching because within the asynchrony,\r\n                // the queue may get longer and we end up never pushing any commit.\r\n                wasFirstInQueue = branch.getCommitQueue().length === 1;\r\n\r\n                branch.dispatchHashUpdate(eventData, function (err, proceed) {\r\n                    logger.debug('_commitToBranch, dispatchHashUpdate done. [err, proceed]', err, proceed);\r\n\r\n                    if (err) {\r\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\r\n                        callback(new Error('Commit failed being loaded in users: ' + err));\r\n                    } else if (proceed === true) {\r\n                        if (wasFirstInQueue) {\r\n                            logger.debug('_commitToBranch, commit was first in queue - will start pushing commit');\r\n                            self._pushNextQueuedCommit(projectId, branchName);\r\n                        } else {\r\n                            logger.debug('_commitToBranch, commit was NOT first in queue');\r\n                        }\r\n                    } else {\r\n                        callback(new Error('Commit halted when loaded in users (proceed was not true).'));\r\n                    }\r\n                });\r\n            } else {\r\n                // The current user is behind the local branch, e.g. plugin trying to save after client changes.\r\n                logger.warn('_commitToBranch, incoming commit parent was not the same as the localHash ' +\r\n                    'for the branch, commit will be canceled!');\r\n                callback(null, {status: CONSTANTS.CANCELED, hash: newCommitHash});\r\n            }\r\n        };\r\n\r\n        this._pushNextQueuedCommit = function (projectId, branchName) {\r\n            var project = projects[projectId],\r\n                branch = project.branches[branchName],\r\n                commitData;\r\n\r\n            logger.debug('_pushNextQueuedCommit, length=', branch.getCommitQueue().length);\r\n\r\n            commitData = branch.getFirstCommit();\r\n\r\n            logger.debug('_pushNextQueuedCommit, makeCommit [from# -> to#]',\r\n                commitData.commitObject.parents[0], commitData.commitObject._id);\r\n\r\n            webSocket.makeCommit(commitData, function (err, result) {\r\n                var mergeCommitData;\r\n                if (err) {\r\n                    logger.error('makeCommit failed', err);\r\n                }\r\n\r\n                if (branch.isOpen) {\r\n                    branch.callbackQueue[0](err, result);\r\n                    if (!err && result) {\r\n                        branch.commitInserted(result.hash);\r\n                        if (result.status === CONSTANTS.SYNCED) {\r\n                            branch.inSync = true;\r\n                            branch.updateHashes(null, result.hash);\r\n                            branch.getFirstCommit(true);\r\n                            if (branch.getCommitQueue().length === 0) {\r\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\r\n                            } else {\r\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\r\n                                self._pushNextQueuedCommit(projectId, branchName);\r\n                            }\r\n                        } else if (result.status === CONSTANTS.MERGED) {\r\n                            branch.inSync = true;\r\n                            branch.updateHashes(null, result.mergeHash);\r\n\r\n                            if (branch.getCommitQueue().length === 1) {\r\n                                // Finds the MERGED commit-data and clears the update-queue.\r\n                                mergeCommitData = branch.getMergedCommit(result.mergeHash);\r\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.MERGING);\r\n                                branch.dispatchHashUpdate({commitData: mergeCommitData, local: false},\r\n                                    function (err, proceed) {\r\n                                        branch.getFirstCommit(true);\r\n                                        if (err) {\r\n                                            logger.error('Loading of merged commit failed with error', err,\r\n                                                {metadata: mergeCommitData});\r\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\r\n                                        } else if (proceed === true) {\r\n                                            logger.debug('Merged commit was successfully loaded, updating localHash.');\r\n                                            branch.updateHashes(result.mergeHash, null);\r\n                                            // TODO: What if a commit is made during the hashUpdate?\r\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\r\n                                            return;\r\n                                        } else {\r\n                                            logger.warn('Loading of update commit was aborted',\r\n                                                {metadata: result.mergeHash});\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                branch.getFirstCommit(true);\r\n                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.MERGING);\r\n                                self._pushNextQueuedCommit(projectId, branchName);\r\n                            }\r\n                        } else if (result.status === CONSTANTS.FORKED) {\r\n                            branch.inSync = false;\r\n                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\r\n                        } else {\r\n                            err = new Error('Unsupported commit status ' + result.status);\r\n                            logger.error(err);\r\n                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\r\n                        }\r\n                    } else {\r\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR,\r\n                            err || new Error('No result at commit.'));\r\n                    }\r\n                } else {\r\n                    logger.error('_pushNextQueuedCommit returned from server but the branch was closed, ' +\r\n                        'the branch has probably been closed while waiting for the response.', projectId, branchName);\r\n                }\r\n            });\r\n        };\r\n\r\n        this._pullNextQueuedCommit = function (projectId, branchName, callback) {\r\n            assert(Object.hasOwn(projects, projectId), 'Project not opened: ' + projectId);\r\n            var project = projects[projectId],\r\n                branch = project.branches[branchName],\r\n                error,\r\n                updateData;\r\n\r\n            if (!branch) {\r\n                error = new Error('Branch, ' + branchName + ', not in project ' + projectId + '.');\r\n                if (callback) {\r\n                    callback(error);\r\n                    return;\r\n                } else {\r\n                    throw error;\r\n                }\r\n            }\r\n\r\n            logger.debug('About to update, updateQueue', {metadata: branch.getUpdateQueue()});\r\n            if (branch.getUpdateQueue().length === 0) {\r\n                logger.debug('No queued updates, returns');\r\n                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\r\n                if (callback) {\r\n                    callback(null);\r\n                }\r\n                return;\r\n            }\r\n\r\n            updateData = branch.getFirstUpdate();\r\n\r\n            if (branch.isOpen) {\r\n                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.PULLING);\r\n                branch.dispatchHashUpdate({commitData: updateData, local: false}, function (err, proceed) {\r\n                    var originHash = updateData.commitObject[CONSTANTS.MONGO_ID];\r\n                    if (err) {\r\n                        logger.error('Loading of update commit failed with error', err, {metadata: updateData});\r\n                        branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.ERROR, err);\r\n                    } else if (proceed === true) {\r\n                        logger.debug('New commit was successfully loaded, updating localHash.');\r\n                        branch.updateHashes(originHash, null);\r\n                        branch.getFirstUpdate(true);\r\n                        if (branch.getCommitQueue().length === 0) {\r\n                            self._pullNextQueuedCommit(projectId, branchName, callback);\r\n                        }\r\n                        return;\r\n                    } else {\r\n                        logger.warn('Loading of update commit was aborted', {metadata: updateData});\r\n                    }\r\n                    if (callback) {\r\n                        callback(new Error('Loading the first commit was aborted'));\r\n                    }\r\n                });\r\n            } else {\r\n                logger.error('_pullNextQueuedCommit returned from server but the branch was closed.',\r\n                    projectId, branchName);\r\n            }\r\n        };\r\n\r\n        this._getCommitObject = function (projectId, parents, rootHash, msg) {\r\n            msg = msg || 'n/a';\r\n            var commitObj = {\r\n                    root: rootHash,\r\n                    parents: parents,\r\n                    updater: [self.userId],\r\n                    time: Date.now(),\r\n                    message: msg,\r\n                    type: CONSTANTS.COMMIT_TYPE,\r\n                    __v: CONSTANTS.VERSION\r\n                },\r\n                commitHash = '#' + generateKey(commitObj, gmeConfig);\r\n\r\n            commitObj[CONSTANTS.MONGO_ID] = commitHash;\r\n\r\n            return commitObj;\r\n        };\r\n\r\n        this._rejoinBranchRooms = function (callback) {\r\n            var projectId,\r\n                project,\r\n                branchName,\r\n                branchRooms = [],\r\n                promises = [];\r\n\r\n            logger.debug('_rejoinBranchRooms');\r\n\r\n            function afterRejoin(projectId, branchName) {\r\n                var project = projects[projectId],\r\n                    deferred = Q.defer();\r\n\r\n                logger.debug('_rejoinBranchRooms, rejoined branch room', projectId, branchName);\r\n\r\n                if (project) {\r\n                    project.getBranchHash(branchName)\r\n                        .then(function (branchHash) {\r\n                            var branch = project.branches[branchName],\r\n                                queuedCommitHash;\r\n                            logger.debug('_rejoinBranchRooms received branchHash', projectId, branchName, branchHash);\r\n\r\n                            if (!branch) {\r\n                                throw new Error('_rejoinBranchRooms branch was closed ' + projectId + ':' + branchName);\r\n                            }\r\n\r\n                            if (branch.getCommitQueue().length > 0) {\r\n                                queuedCommitHash = branch.getFirstCommit().commitObject._id;\r\n                                logger.debug('_rejoinBranchRooms, commits were queued length=, firstQueuedCommitHash',\r\n                                    branch.getCommitQueue().length, queuedCommitHash);\r\n\r\n                                project.getCommonAncestorCommit(branchHash, queuedCommitHash)\r\n                                    .then(function (commonCommitHash) {\r\n                                        var result;\r\n                                        // The commit made it to the server but the acknowledgement was\r\n                                        // interrupted by the disconnect.\r\n\r\n                                        logger.debug('_rejoinBranchRooms getCommonAncestorCommit',\r\n                                            projectId, branchName, commonCommitHash);\r\n\r\n                                        if (branch.isOpen === false) {\r\n                                            throw new Error('_rejoinBranchRooms branch was closed ' +\r\n                                                projectId + ':' + branchName);\r\n                                        }\r\n\r\n                                        function dispatchSynced() {\r\n                                            result = {status: CONSTANTS.SYNCED, hash: branchHash};\r\n\r\n                                            branch.callbackQueue[0](null, result);\r\n                                            branch.inSync = true;\r\n                                            branch.updateHashes(null, branchHash);\r\n                                            branch.getFirstCommit(true);\r\n                                            if (branch.getCommitQueue().length === 0) {\r\n                                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.SYNC);\r\n                                            } else {\r\n                                                branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_SYNC);\r\n                                                self._pushNextQueuedCommit(projectId, branchName);\r\n                                            }\r\n                                        }\r\n\r\n                                        function dispatchForked() {\r\n                                            result = {status: CONSTANTS.FORKED, hash: branchHash};\r\n\r\n                                            branch.callbackQueue[0](null, result);\r\n                                            branch.inSync = false;\r\n                                            branch.dispatchBranchStatus(CONSTANTS.BRANCH_STATUS.AHEAD_NOT_SYNC);\r\n                                        }\r\n\r\n                                        // c - the commit made by this storage\r\n                                        // H - the head of the branch\r\n                                        if (commonCommitHash === queuedCommitHash) {\r\n                                            // The commit is (or was) in sync with the branch.\r\n                                            //  Hc  or  H\r\n                                            //  |       c\r\n                                            //  |       |\r\n                                            // In case two the next commit made will be forked.\r\n                                            dispatchSynced();\r\n                                        } else if (commonCommitHash === branchHash) {\r\n                                            // The branch has moved back since the commit was made.\r\n                                            // Treat it like the commit was forked.\r\n                                            //  c\r\n                                            //  H\r\n                                            dispatchForked();\r\n                                        } else {\r\n                                            // The branch has moved forward in a different direction.\r\n                                            //  c   H\r\n                                            //   \\ /\r\n                                            dispatchForked();\r\n                                        }\r\n\r\n                                        deferred.resolve();\r\n                                    })\r\n                                    .catch(function (err) {\r\n                                        try {\r\n                                            if (err.message.indexOf('Commit object does not exist [' +\r\n                                                queuedCommitHash) > -1) {\r\n                                                // Commit never made it to the server - push it.\r\n                                                logger.debug('First queued commit never made it to the server - push!');\r\n                                                self._pushNextQueuedCommit(projectId, branchName);\r\n                                                deferred.resolve();\r\n                                            } else {\r\n                                                deferred.reject(err);\r\n                                            }\r\n                                        } catch (err) {\r\n                                            deferred.reject(err);\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                logger.debug('_rejoinBranchRooms, no commits were queued during disconnect.');\r\n                                deferred.resolve();\r\n                            }\r\n                        })\r\n                        .catch(function (err) {\r\n                            deferred.reject(err);\r\n                        });\r\n                } else {\r\n                    deferred.reject(new Error('_rejoinBranchRooms project was closed ' + projectId + ':' + branchName));\r\n                }\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            for (projectId in projects) {\r\n                if (Object.hasOwn(projects, projectId)) {\r\n                    project = projects[projectId];\r\n                    logger.debug('_rejoinBranchRooms found project', projectId);\r\n                    for (branchName in project.branches) {\r\n                        if (Object.hasOwn(project.branches, branchName)) {\r\n                            logger.debug('_rejoinBranchRooms joining branch', projectId, branchName);\r\n\r\n                            branchRooms.push({\r\n                                projectId: projectId,\r\n                                branchName: branchName\r\n                            });\r\n\r\n                            promises.push(webSocket.watchBranch({\r\n                                projectId: projectId,\r\n                                branchName: branchName,\r\n                                join: true\r\n                            }));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Q.all(promises)\r\n                .then(function () {\r\n                    return Q.all(branchRooms.map(function (data) {\r\n                        // Deal with commit queue for each room after rejoining.\r\n                        return afterRejoin(data.projectId, data.branchName);\r\n                    }));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.sendWsRouterMessage = webSocket.sendWsRouterMessage;\r\n        this.onWebsocketRouterMessage = webSocket.onWebsocketRouterMessage;\r\n         \r\n        this.CONSTANTS = CONSTANTS;\r\n    }\r\n\r\n    EditorStorage.prototype = Object.create(StorageObjectLoaders.prototype);\r\n    EditorStorage.prototype.constructor = EditorStorage;\r\n\r\n    EditorStorage.CONSTANTS = CONSTANTS;\r\n\r\n    return EditorStorage;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n *\r\n * FIXME: is there a built in function to JavaScript to parse cookies?\r\n */\r\n\r\ndefine('common/util/url',[],function () {\r\n    'use strict';\r\n\r\n    function parseCookie(cookie) {\r\n        var parsed,\r\n            elements,\r\n            i,\r\n            pair;\r\n\r\n        cookie = decodeURIComponent(cookie);\r\n        parsed = {};\r\n        elements = cookie.split(/[;] */);\r\n        for (i = 0; i < elements.length; i++) {\r\n            pair = elements[i].split('=');\r\n            parsed[pair[0]] = pair[1];\r\n        }\r\n        return parsed;\r\n    }\r\n\r\n    function urlToRefObject(url) {\r\n        return {\r\n            $ref: url\r\n        };\r\n    }\r\n\r\n    return {\r\n        parseCookie: parseCookie,\r\n        urlToRefObject: urlToRefObject\r\n    };\r\n});\r\n\n",
    "/*globals define, require, document*/\r\n/*eslint-env browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/socketio/browserclient',['common/util/url'], function (URL) {\r\n    'use strict';\r\n\r\n    function IoClient(mainLogger, gmeConfig) {\r\n        var logger = mainLogger.fork('socketio-browserclient');\r\n\r\n        this.connect = function (callback) {\r\n            var hostAddress = window.location.protocol + '//' + window.location.host,\r\n                socketIoUrl;\r\n\r\n            if (window.__karma__) {\r\n                // TRICKY: karma uses web sockets too, we need to use the gme server's port\r\n                hostAddress = window.location.protocol + '//localhost:' + gmeConfig.server.port;\r\n            }\r\n\r\n            socketIoUrl = hostAddress + gmeConfig.client.mountedPath + '/socket.io/socket.io.js';\r\n            logger.debug('Will require socketIO from', socketIoUrl);\r\n\r\n            require([socketIoUrl], function (io_) {\r\n                var io = io_ || window.io,\r\n                    socketOptions = gmeConfig.socketIO.clientOptions,\r\n                    socket;\r\n\r\n                if (gmeConfig.client.mountedPath && gmeConfig.socketIO.clientOptions.path === undefined) {\r\n                    socketOptions.path = gmeConfig.client.mountedPath + '/socket.io';\r\n                }\r\n                logger.debug('Connecting to \"' + hostAddress + '\" with options', socketOptions);\r\n                socket = io(hostAddress, socketOptions);\r\n                callback(null, socket);\r\n            });\r\n        };\r\n\r\n        this.getToken = function () {\r\n            var cookies = URL.parseCookie(document.cookie);\r\n            if (cookies[gmeConfig.authentication.jwt.cookieId]) {\r\n                return cookies[gmeConfig.authentication.jwt.cookieId];\r\n            }\r\n        };\r\n\r\n        this.setToken = function (newToken) {\r\n            document.cookie = gmeConfig.authentication.jwt.cookieId + '=' + newToken;\r\n        };\r\n    }\r\n\r\n    return IoClient;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\n// socket.io-client\r\n//\r\ndefine('common/storage/socketio/websocket',[\r\n    'common/EventDispatcher',\r\n    'common/storage/constants',\r\n    'q'\r\n], function (EventDispatcher, CONSTANTS, Q) {\r\n\r\n    'use strict';\r\n\r\n    function WebSocket(ioClient, mainLogger, gmeConfig) {\r\n        var self = this,\r\n            logger = mainLogger.fork('WebSocket'),\r\n            forcedDisconnect,\r\n            beenConnected = false;\r\n\r\n        self.socket = null;\r\n        self.userId = null;\r\n        self.serverVersion = null;\r\n        self.ioClient = ioClient;\r\n        self._handleWebsocketRouterMessage = () => {};\r\n\r\n        logger.debug('ctor');\r\n        EventDispatcher.call(this);\r\n\r\n        function emitWithToken(data, eventName, callback) {\r\n            logger.debug('emitting event', eventName, {metadata: data});\r\n            data.webgmeToken = ioClient.getToken();\r\n            if (callback) {\r\n                self.socket.emit(eventName, data, callback);\r\n            } else {\r\n                return Q.ninvoke(self.socket, 'emit', eventName, data);\r\n            }\r\n        }\r\n\r\n        this.connect = function (networkHandler) {\r\n\r\n            logger.debug('Connecting via ioClient.');\r\n            forcedDisconnect = false;\r\n\r\n            ioClient.connect(function (err, socket_) {\r\n                if (err) {\r\n                    networkHandler(err);\r\n                    return;\r\n                }\r\n\r\n                self.socket = socket_;\r\n\r\n                self.socket.on('connect', function () {\r\n                    var i,\r\n                        sendBufferSave = [];\r\n                    if (beenConnected) {\r\n                        logger.debug('Socket got reconnected.');\r\n                        networkHandler(null, CONSTANTS.RECONNECTING);\r\n\r\n                        // #368\r\n                        for (i = 0; i < self.socket.sendBuffer.length; i += 1) {\r\n                            // Clear all makeCommit and document operations.\r\n                            // If pushed - they would be emitted back to the socket!\r\n                            if (self.socket.sendBuffer[i].data[0] === 'makeCommit' ||\r\n                                self.socket.sendBuffer[i].data[0] === CONSTANTS.DOCUMENT_OPERATION) {\r\n                                logger.debug('Removed makeCommit from sendBuffer...');\r\n                            } else {\r\n                                sendBufferSave.push(self.socket.sendBuffer[i]);\r\n                            }\r\n                        }\r\n                        if (self.socket.receiveBuffer.length > 0) {\r\n                            // TODO: In which cases is this applicable??\r\n                            logger.debug('receiveBuffer not empty after reconnect');\r\n                        }\r\n                        self.socket.sendBuffer = sendBufferSave;\r\n                        self.socket.emit('getConnectionInfo', {webgmeToken: ioClient.getToken()}, function (err, info) {\r\n                            if (err) {\r\n                                networkHandler(new Error('Could not get info on reconnect'));\r\n                            } else {\r\n                                if (self.serverVersion === info.serverVersion) {\r\n                                    networkHandler(null, CONSTANTS.RECONNECTED);\r\n                                } else {\r\n                                    logger.error('Got reconnected to different webgme version (old !== new)',\r\n                                        self.serverVersion, '!==', info.serverVersion);\r\n                                    networkHandler(null, CONSTANTS.INCOMPATIBLE_CONNECTION);\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        logger.debug('Socket got connected for the first time.');\r\n                        beenConnected = true;\r\n                        self.socket.emit('getConnectionInfo', {webgmeToken: ioClient.getToken()}, function (err, info) {\r\n                            if (err) {\r\n                                networkHandler(new Error('Could not get info on connect'));\r\n                            } else {\r\n                                self.userId = info.userId || gmeConfig.authentication.guestAccount;\r\n                                self.serverVersion = info.serverVersion;\r\n                                networkHandler(null, CONSTANTS.CONNECTED);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                self.socket.on('disconnect', function () {\r\n                    logger.debug('Socket got disconnected!');\r\n                    networkHandler(null, CONSTANTS.DISCONNECTED);\r\n\r\n                    // When the server is shut-down the skipReconnect is set to false\r\n                    // create a new socket connect.\r\n                    if (self.socket.io.skipReconnect === true && forcedDisconnect === false) {\r\n                        self.connect(networkHandler);\r\n                    }\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.JWT_ABOUT_TO_EXPIRE, function (data) {\r\n                    data.etype = CONSTANTS.JWT_ABOUT_TO_EXPIRE;\r\n                    logger.debug('JWT_ABOUT_TO_EXPIRE event', {metadata: data});\r\n                    networkHandler(null, CONSTANTS.JWT_ABOUT_TO_EXPIRE);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.JWT_EXPIRED, function (data) {\r\n                    data.etype = CONSTANTS.JWT_EXPIRED;\r\n                    logger.debug('JWT_EXPIRED event', {metadata: data});\r\n                    networkHandler(null, CONSTANTS.JWT_EXPIRED);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.PROJECT_DELETED, function (data) {\r\n                    data.etype = CONSTANTS.PROJECT_DELETED;\r\n                    logger.debug('PROJECT_DELETED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.PROJECT_DELETED, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.PROJECT_CREATED, function (data) {\r\n                    data.etype = CONSTANTS.PROJECT_CREATED;\r\n                    logger.debug('PROJECT_CREATED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.PROJECT_CREATED, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.BRANCH_CREATED, function (data) {\r\n                    data.etype = CONSTANTS.BRANCH_CREATED;\r\n                    logger.debug('BRANCH_CREATED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_CREATED + data.projectId, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.BRANCH_DELETED, function (data) {\r\n                    data.etype = CONSTANTS.BRANCH_DELETED;\r\n                    logger.debug('BRANCH_DELETED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_DELETED + data.projectId, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.BRANCH_HASH_UPDATED, function (data) {\r\n                    data.etype = CONSTANTS.BRANCH_HASH_UPDATED;\r\n                    logger.debug('BRANCH_HASH_UPDATED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_HASH_UPDATED + data.projectId, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.TAG_CREATED, function (data) {\r\n                    data.etype = CONSTANTS.TAG_CREATED;\r\n                    logger.debug('TAG_CREATED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.TAG_CREATED + data.projectId, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.TAG_DELETED, function (data) {\r\n                    data.etype = CONSTANTS.TAG_DELETED;\r\n                    logger.debug('TAG_DELETED event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.TAG_DELETED + data.projectId, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.BRANCH_UPDATED, function (data) {\r\n                    logger.debug('BRANCH_UPDATED event', {metadata: data});\r\n                    self.dispatchEvent(self.getBranchUpdateEventName(data.projectId, data.branchName), data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.NOTIFICATION, function (data) {\r\n                    logger.debug('NOTIFICATION event', {metadata: data});\r\n                    self.dispatchEvent(CONSTANTS.NOTIFICATION, data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.DOCUMENT_OPERATION, function (data) {\r\n                    logger.debug('DOCUMENT_OPERATION event', {metadata: data});\r\n                    self.dispatchEvent(self.getDocumentUpdatedEventName(data), data);\r\n                });\r\n\r\n                self.socket.on(CONSTANTS.DOCUMENT_SELECTION, function (data) {\r\n                    logger.debug('DOCUMENT_SELECTION event', {metadata: data});\r\n                    self.dispatchEvent(self.getDocumentSelectionEventName(data), data);\r\n                });\r\n\r\n                self.socket.on('websocketRouterMessage', function (data) {\r\n                    logger.debug('websocketRouterMessage', {metadata: data});\r\n                    self._handleWebsocketRouterMessage(data.routerId, data.messageType, data.payload);\r\n                });\r\n            });\r\n        };\r\n\r\n        this.disconnect = function () {\r\n            forcedDisconnect = true;\r\n            self.socket.disconnect();\r\n            beenConnected = false; //This is a forced disconnect from the storage and all listeners are removed\r\n        };\r\n\r\n        // watcher functions\r\n        this.watchDatabase = function (data, callback) {\r\n            return emitWithToken(data, 'watchDatabase')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.watchProject = function (data, callback) {\r\n            return emitWithToken(data, 'watchProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.watchBranch = function (data, callback) {\r\n            return emitWithToken(data, 'watchBranch')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        // model editing functions\r\n        this.openProject = function (data, callback) {\r\n            return emitWithToken(data, 'openProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.closeProject = function (data, callback) {\r\n            return emitWithToken(data, 'closeProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.openBranch = function (data, callback) {\r\n            return emitWithToken(data, 'openBranch')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.closeBranch = function (data, callback) {\r\n            return emitWithToken(data, 'closeBranch')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.makeCommit = function (data, callback) {\r\n            return emitWithToken(data, 'makeCommit')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.loadObjects = function (data, callback) {\r\n            return emitWithToken(data, 'loadObjects')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.loadPaths = function (data, callback) {\r\n            return emitWithToken(data, 'loadPaths')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.setBranchHash = function (data, callback) {\r\n            return emitWithToken(data, 'setBranchHash')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getBranchHash = function (data, callback) {\r\n            return emitWithToken(data, 'getBranchHash')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.squashCommits = function (data, callback) {\r\n            return emitWithToken(data, 'squashCommits')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        // REST like functions\r\n        this.getProjects = function (data, callback) {\r\n            return emitWithToken(data, 'getProjects')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.deleteProject = function (data, callback) {\r\n            return emitWithToken(data, 'deleteProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.createProject = function (data, callback) {\r\n            return emitWithToken(data, 'createProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.transferProject = function (data, callback) {\r\n            return emitWithToken(data, 'transferProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.duplicateProject = function (data, callback) {\r\n            return emitWithToken(data, 'duplicateProject')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getBranches = function (data, callback) {\r\n            return emitWithToken(data, 'getBranches')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.createTag = function (data, callback) {\r\n            return emitWithToken(data, 'createTag')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.deleteTag = function (data, callback) {\r\n            return emitWithToken(data, 'deleteTag')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getTags = function (data, callback) {\r\n            return emitWithToken(data, 'getTags')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getCommits = function (data, callback) {\r\n            return emitWithToken(data, 'getCommits')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getHistory = function (data, callback) {\r\n            return emitWithToken(data, 'getHistory')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getLatestCommitData = function (data, callback) {\r\n            return emitWithToken(data, 'getLatestCommitData')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.getCommonAncestorCommit = function (data, callback) {\r\n            return emitWithToken(data, 'getCommonAncestorCommit')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        //temporary simple request / result functions\r\n        this.simpleRequest = function (data, callback) {\r\n            var deferred = Q.defer();\r\n            emitWithToken(data, 'simpleRequest', function (errStr, result) {\r\n                var err;\r\n                if (errStr) {\r\n                    err = new Error(errStr);\r\n                    if (result) {\r\n                        // webgme #1570 For failed plugin executions we need the result details\r\n                        err.result = result;\r\n                    }\r\n\r\n                    deferred.reject(err);\r\n                } else {\r\n                    deferred.resolve(result);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        this.simpleQuery = function (workerId, data, callback) {\r\n            return Q.reject(new Error('Not implemented!')).nodeify(callback);\r\n        };\r\n\r\n        this.sendNotification = function (data, callback) {\r\n            return emitWithToken(data, 'notification')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        // OT handling\r\n        this.watchDocument = function (data, callback) {\r\n            return emitWithToken(data, 'watchDocument')\r\n                .catch(function (err) {\r\n                    return Q.reject(new Error(err));\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        this.sendDocumentOperation = function (data, callback) {\r\n            emitWithToken(data, CONSTANTS.DOCUMENT_OPERATION, function (err, res) {\r\n                if (err) {\r\n                    callback(new Error(err));\r\n                } else {\r\n                    callback(null, res);\r\n                }\r\n            });\r\n        };\r\n\r\n        this.sendDocumentSelection = function (data, callback) {\r\n            emitWithToken(data, CONSTANTS.DOCUMENT_SELECTION, function (err, res) {\r\n                if (err) {\r\n                    callback(new Error(err));\r\n                } else {\r\n                    callback(null, res);\r\n                }\r\n            });\r\n        };\r\n\r\n        // Helper functions\r\n        this.getBranchUpdateEventName = function (projectId, branchName) {\r\n            return CONSTANTS.BRANCH_UPDATED + projectId + CONSTANTS.ROOM_DIVIDER + branchName;\r\n        };\r\n\r\n        this.getDocumentUpdatedEventName = function (data) {\r\n            if (typeof data.docId === 'string') {\r\n                return CONSTANTS.DOCUMENT_OPERATION + data.docId;\r\n            } else {\r\n                return [CONSTANTS.DOCUMENT_OPERATION + data.projectId, data.branchName, data.nodeId, data.attrName]\r\n                    .join(CONSTANTS.ROOM_DIVIDER);\r\n            }\r\n        };\r\n\r\n        this.getDocumentSelectionEventName = function (data) {\r\n            if (typeof data.docId === 'string') {\r\n                return CONSTANTS.DOCUMENT_SELECTION + data.docId;\r\n            } else {\r\n                return [CONSTANTS.DOCUMENT_SELECTION + data.projectId, data.branchName, data.nodeId, data.attrName]\r\n                    .join(CONSTANTS.ROOM_DIVIDER);\r\n            }\r\n        };\r\n\r\n        // Router websocket relay messaging\r\n        this.sendWsRouterMessage = function (routerId, messageType, payload, callback) {\r\n            const data = {\r\n                routerId: routerId,\r\n                messageType: messageType,\r\n                payload: payload,\r\n            };\r\n\r\n            return emitWithToken(data, 'websocketRouterMessage', (err, result) => {\r\n                if (err) {\r\n                    callback(new Error(err), result);\r\n                } else {\r\n                    callback(err, result);\r\n                }\r\n            });\r\n                \r\n        };\r\n\r\n        this.onWebsocketRouterMessage = function (handleFn) {\r\n            self._handleWebsocketRouterMessage = handleFn;\r\n        };\r\n    }\r\n\r\n    WebSocket.prototype = Object.create(EventDispatcher.prototype);\r\n    WebSocket.prototype.constructor = WebSocket;\r\n\r\n    return WebSocket;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n/**\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/storage/browserstorage',[\r\n    'common/storage/storageclasses/editorstorage',\r\n    'common/storage/socketio/browserclient',\r\n    'common/storage/socketio/websocket',\r\n], function (EditorStorage, BrowserIoClient, WebSocket) {\r\n    'use strict';\r\n\r\n    var _storage;\r\n\r\n    function _createStorage(logger, gmeConfig) {\r\n        var ioClient = new BrowserIoClient(logger, gmeConfig),\r\n            webSocket = new WebSocket(ioClient, logger, gmeConfig),\r\n            storage = new EditorStorage(webSocket, logger, gmeConfig);\r\n\r\n        return storage;\r\n    }\r\n\r\n    function getStorage(logger, gmeConfig, forceNew) {\r\n        logger.debug('getStorage');\r\n\r\n        if (!_storage) {\r\n            logger.debug('No storage existed, will create new one..');\r\n            _storage = _createStorage(logger, gmeConfig);\r\n        } else {\r\n            logger.debug('Storage existed...');\r\n\r\n            if (forceNew === true) {\r\n                logger.debug('Force new set to true, will create new one.');\r\n                _storage = _createStorage(logger, gmeConfig);\r\n            }\r\n        }\r\n\r\n        return _storage;\r\n    }\r\n\r\n    return {\r\n        getStorage: getStorage\r\n    };\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * CoreInternalError should be thrown if some internal ASSERTION fails, it triggers some fault inside the core\r\n * and should typically be checked by the developer team, not the one who uses it.\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/CoreInternalError',[], function () {\r\n    'use strict';\r\n    function CoreInternalError() {\r\n        var error = Error.apply(this, arguments);\r\n        error.name = this.name = 'CoreInternalError';\r\n        this.message = error.message;\r\n        this.stack = error.stack;\r\n\r\n        return error;\r\n    }\r\n\r\n    CoreInternalError.prototype = Object.create(Error.prototype);\r\n    CoreInternalError.prototype.constructor = CoreInternalError;\r\n\r\n    return CoreInternalError;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint no-console: 0*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\n\r\ndefine('common/core/CoreAssert',['common/core/CoreInternalError'], function (CoreInternalError) {\r\n    'use strict';\r\n\r\n    var assert = function (cond, msg) {\r\n        if (!cond) {\r\n            var error = new CoreInternalError(msg || 'ASSERT failed');\r\n\r\n            if (typeof TESTING === 'undefined') {\r\n                console.log('Throwing', error.stack);\r\n                console.log();\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return assert;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint camelcase: 0*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    // ------- assert -------\r\n\r\n    var TASYNC_TRACE_ENABLE = true;\r\n\r\n    function setTrace(value) {\r\n        TASYNC_TRACE_ENABLE = value;\r\n    }\r\n\r\n    function assert(cond) {\r\n        if (!cond) {\r\n            throw new Error('tasync internal error');\r\n        }\r\n    }\r\n\r\n    // ------- Future -------\r\n\r\n    var STATE_LISTEN = 0;\r\n    var STATE_REJECTED = 1;\r\n    var STATE_RESOLVED = 2;\r\n\r\n    var Future = function () {\r\n        this.state = STATE_LISTEN;\r\n        this.value = [];\r\n    };\r\n\r\n    Future.prototype.register = function (target) {\r\n        assert(this.state === STATE_LISTEN);\r\n        assert(typeof target === 'object' && target !== null);\r\n\r\n        this.value.push(target);\r\n    };\r\n\r\n    Future.prototype.resolve = function (value) {\r\n        assert(this.state === STATE_LISTEN && !(value instanceof Future));\r\n\r\n        var listeners = this.value;\r\n\r\n        this.state = STATE_RESOLVED;\r\n        this.value = value;\r\n\r\n        var i;\r\n        for (i = 0; i < listeners.length; ++i) {\r\n            listeners[i].onResolved(value);\r\n        }\r\n    };\r\n\r\n    Future.prototype.reject = function (error) {\r\n        assert(this.state === STATE_LISTEN && error instanceof Error);\r\n\r\n        var listeners = this.value;\r\n\r\n        this.state = STATE_REJECTED;\r\n        this.value = error;\r\n\r\n        var i;\r\n        for (i = 0; i < listeners.length; ++i) {\r\n            listeners[i].onRejected(error);\r\n        }\r\n    };\r\n\r\n    // ------- Delay -------\r\n\r\n    function delay(timeout, value) {\r\n        if (timeout < 0) {\r\n            return value;\r\n        }\r\n\r\n        var future = new Future();\r\n        setTimeout(function () {\r\n            future.resolve(value);\r\n        }, timeout);\r\n        return future;\r\n    }\r\n\r\n    // ------- Lift -------\r\n\r\n    var FutureLift = function (array, index) {\r\n        Future.call(this);\r\n\r\n        this.array = array;\r\n        this.index = index;\r\n    };\r\n\r\n    FutureLift.prototype = Object.create(Future.prototype);\r\n\r\n    FutureLift.prototype.onResolved = function (value) {\r\n        assert(this.state === STATE_LISTEN);\r\n\r\n        var array = this.array;\r\n        array[this.index] = value;\r\n\r\n        while (++this.index < array.length) {\r\n            value = array[this.index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_RESOLVED) {\r\n                    array[this.index] = value.value;\r\n                } else if (value.state === STATE_LISTEN) {\r\n                    value.register(this);\r\n                    return;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    this.reject(value.value);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.array = null;\r\n        this.resolve(array);\r\n    };\r\n\r\n    FutureLift.prototype.onRejected = function (error) {\r\n        this.array = null;\r\n        this.reject(error);\r\n    };\r\n\r\n    var lift = function (array) {\r\n        if (!(array instanceof Array)) {\r\n            throw new Error('array argument is expected');\r\n        }\r\n\r\n        var index;\r\n        for (index = 0; index < array.length; ++index) {\r\n            var value = array[index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_RESOLVED) {\r\n                    array[index] = value.value;\r\n                } else if (value.state === STATE_LISTEN) {\r\n                    var future = new FutureLift(array, index);\r\n                    value.register(future);\r\n                    return future;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    // ------- Apply -------\r\n\r\n    var ROOT = {\r\n        subframes: 0\r\n    };\r\n\r\n    var FRAME = ROOT;\r\n\r\n    var FutureApply = function tasync_trace_end(func, that, args, index) {\r\n        Future.call(this);\r\n\r\n        this.caller = FRAME;\r\n        this.position = ++FRAME.subframes;\r\n        this.subframes = 0;\r\n\r\n        if (TASYNC_TRACE_ENABLE) {\r\n            this.trace = new Error();\r\n        }\r\n\r\n        this.func = func;\r\n        this.that = that;\r\n        this.args = args;\r\n        this.index = index;\r\n    };\r\n\r\n    FutureApply.prototype = Object.create(Future.prototype);\r\n\r\n    FutureApply.prototype.getPath = function () {\r\n        var future = this.caller,\r\n            path = [this.position];\r\n\r\n        while (future !== ROOT) {\r\n            path.push(future.position);\r\n            future = future.caller;\r\n        }\r\n\r\n        return path;\r\n    };\r\n\r\n    function getSlice(trace) {\r\n        assert(typeof trace === 'string');\r\n\r\n        var end = trace.indexOf('tasync_trace_start');\r\n        if (end >= 0) {\r\n            end = trace.lastIndexOf('\\n', end) + 1;\r\n        } else {\r\n            if (trace.charAt(trace.length - 1) !== '\\n') {\r\n                // trace += '\\n';\r\n            }\r\n            end = undefined;\r\n        }\r\n\r\n        var start = trace.indexOf('tasync_trace_end');\r\n        if (start >= 0) {\r\n            start = trace.indexOf('\\n', start) + 1;\r\n            if (start >= 0) {\r\n                start = trace.indexOf('\\n', start) + 1;\r\n            }\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        return trace.substring(start, end);\r\n    }\r\n\r\n    function createError(error, future) {\r\n        if (!(error instanceof Error)) {\r\n            error = new Error(error);\r\n        }\r\n\r\n        if (TASYNC_TRACE_ENABLE) {\r\n            error.trace = getSlice(error.stack);\r\n            do {\r\n                error.trace += '*** callback ***\\n';\r\n                error.trace += getSlice(future.trace.stack);\r\n                future = future.caller;\r\n            } while (future !== ROOT);\r\n        }\r\n\r\n        return error;\r\n    }\r\n\r\n    FutureApply.prototype.onRejected = function (error) {\r\n        this.args = null;\r\n        this.reject(error);\r\n    };\r\n\r\n    FutureApply.prototype.onResolved = function tasync_trace_start(value) {\r\n        assert(this.state === STATE_LISTEN);\r\n\r\n        var args = this.args;\r\n        args[this.index] = value;\r\n\r\n        while (--this.index >= 0) {\r\n            value = args[this.index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_RESOLVED) {\r\n                    args[this.index] = value.value;\r\n                } else if (value.state === STATE_LISTEN) {\r\n                    value.register(this);\r\n                    return;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    this.reject(value.value);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        assert(FRAME === ROOT);\r\n        FRAME = this;\r\n\r\n        this.args = null;\r\n        try {\r\n            value = this.func.apply(this.that, args);\r\n        } catch (error) {\r\n            FRAME = ROOT;\r\n\r\n            this.reject(createError(error, this));\r\n            return;\r\n        }\r\n\r\n        FRAME = ROOT;\r\n\r\n        if (value instanceof Future) {\r\n            assert(value.state === STATE_LISTEN);\r\n\r\n            this.onResolved = this.resolve;\r\n            value.register(this);\r\n        } else {\r\n            this.resolve(value);\r\n        }\r\n    };\r\n\r\n    var apply = function (func, args, that) {\r\n        if (typeof func !== 'function') {\r\n            throw new Error('function argument is expected');\r\n        } else if (!(args instanceof Array)) {\r\n            throw new Error('array argument is expected');\r\n        }\r\n\r\n        var index = args.length;\r\n        while (--index >= 0) {\r\n            var value = args[index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_LISTEN) {\r\n                    var future = new FutureApply(func, that, args, index);\r\n                    value.register(future);\r\n                    return future;\r\n                } else if (value.state === STATE_RESOLVED) {\r\n                    args[index] = value.value;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return func.apply(that, args);\r\n    };\r\n\r\n    // ------- Call -------\r\n\r\n    var FutureCall = function tasync_trace_end(args, index) {\r\n        Future.call(this);\r\n\r\n        this.caller = FRAME;\r\n        this.position = ++FRAME.subframes;\r\n        this.subframes = 0;\r\n\r\n        if (TASYNC_TRACE_ENABLE) {\r\n            this.trace = new Error();\r\n        }\r\n\r\n        this.args = args;\r\n        this.index = index;\r\n    };\r\n\r\n    FutureCall.prototype = Object.create(Future.prototype);\r\n\r\n    FutureCall.prototype.getPath = FutureApply.prototype.getPath;\r\n    FutureCall.prototype.onRejected = FutureApply.prototype.onRejected;\r\n\r\n    var FUNCTION_CALL = Function.call;\r\n\r\n    FutureCall.prototype.onResolved = function tasync_trace_start(value) {\r\n        assert(this.state === STATE_LISTEN);\r\n\r\n        var args = this.args;\r\n        args[this.index] = value;\r\n\r\n        while (--this.index >= 0) {\r\n            value = args[this.index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_RESOLVED) {\r\n                    args[this.index] = value.value;\r\n                } else if (value.state === STATE_LISTEN) {\r\n                    value.register(this);\r\n                    return;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    this.reject(value.value);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        assert(FRAME === ROOT);\r\n        FRAME = this;\r\n\r\n        this.args = null;\r\n        try {\r\n            var func = args[0];\r\n            args[0] = null;\r\n            value = FUNCTION_CALL.apply(func, args);\r\n        } catch (error) {\r\n            FRAME = ROOT;\r\n\r\n            this.reject(createError(error, this));\r\n            return;\r\n        }\r\n\r\n        FRAME = ROOT;\r\n\r\n        if (value instanceof Future) {\r\n            assert(value.state === STATE_LISTEN);\r\n\r\n            this.onResolved = this.resolve;\r\n            value.register(this);\r\n        } else {\r\n            this.resolve(value);\r\n        }\r\n    };\r\n\r\n    var call = function () {\r\n        var index = arguments.length;\r\n        while (--index >= 0) {\r\n            var value = arguments[index];\r\n            if (value instanceof Future) {\r\n                if (value.state === STATE_LISTEN) {\r\n                    var future = new FutureCall(arguments, index);\r\n                    value.register(future);\r\n                    return future;\r\n                } else if (value.state === STATE_RESOLVED) {\r\n                    arguments[index] = value.value;\r\n                } else {\r\n                    assert(value.state === STATE_REJECTED);\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n\r\n        var func = arguments[0];\r\n        return FUNCTION_CALL.apply(func, arguments);\r\n    };\r\n\r\n    // ------- TryCatch -------\r\n\r\n    function FutureTryCatch(handler) {\r\n        Future.call(this);\r\n\r\n        this.handler = handler;\r\n    }\r\n\r\n    FutureTryCatch.prototype = Object.create(Future.prototype);\r\n\r\n    FutureTryCatch.prototype.onRejected = function (error) {\r\n        try {\r\n            var value = this.handler(error);\r\n\r\n            if (value instanceof Future) {\r\n                this.onRejected = Future.prorotype.reject;\r\n                value.register(this);\r\n            } else {\r\n                this.resolve(value);\r\n            }\r\n        } catch (err) {\r\n            this.reject(err);\r\n        }\r\n    };\r\n\r\n    FutureTryCatch.prototype.onResolved = Future.prototype.resolve;\r\n\r\n    function trycatch(func, handler) {\r\n        if (typeof func !== 'function' || typeof handler !== 'function') {\r\n            throw new Error('function arguments are expected');\r\n        }\r\n\r\n        try {\r\n            var value = func();\r\n\r\n            if (value instanceof Future) {\r\n                var future = new FutureTryCatch(handler);\r\n                value.register(future);\r\n\r\n                return future;\r\n            } else {\r\n                return value;\r\n            }\r\n        } catch (error) {\r\n            return handler(error);\r\n        }\r\n    }\r\n\r\n    // ------- Wrap -------\r\n\r\n    function wrap(func) {\r\n        if (typeof func !== 'function') {\r\n            throw new Error('function argument is expected');\r\n        }\r\n\r\n        if (func.tasync_wraped === undefined) {\r\n            func.tasync_wraped = function () {\r\n                var args = arguments;\r\n                var future = new Future();\r\n\r\n                args[args.length++] = function (error, value) {\r\n                    if (error) {\r\n                        future.reject(error instanceof Error ? error : new Error(error));\r\n                    } else {\r\n                        future.resolve(value);\r\n                    }\r\n                };\r\n\r\n                func.apply(this, args);\r\n\r\n                if (future.state === STATE_LISTEN) {\r\n                    return future;\r\n                } else if (future.state === STATE_RESOLVED) {\r\n                    return future.value;\r\n                } else {\r\n                    assert(future.state === STATE_REJECTED);\r\n                    throw future.value;\r\n                }\r\n            };\r\n\r\n            func.tasync_wraped.tasync_unwraped = func;\r\n        }\r\n\r\n        return func.tasync_wraped;\r\n    }\r\n\r\n    // ------- Unwrap -------\r\n\r\n    function UnwrapListener(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    UnwrapListener.prototype.onRejected = function (error) {\r\n        this.callback(error);\r\n    };\r\n\r\n    UnwrapListener.prototype.onResolved = function (value) {\r\n        this.callback(null, value);\r\n    };\r\n\r\n    function unwrap(func) {\r\n        if (typeof func !== 'function') {\r\n            throw new Error('function argument is expected');\r\n        }\r\n\r\n        if (func.tasync_unwraped === undefined) {\r\n            func.tasync_unwraped = function () {\r\n                var args = arguments;\r\n\r\n                var callback = args[--args.length];\r\n                assert(typeof callback === 'function');\r\n\r\n                var value;\r\n                try {\r\n                    value = func.apply(this, args);\r\n                } catch (error) {\r\n                    callback(error);\r\n                    return;\r\n                }\r\n\r\n                if (value instanceof Future) {\r\n                    assert(value.state === STATE_LISTEN);\r\n\r\n                    var listener = new UnwrapListener(callback);\r\n                    value.register(listener);\r\n                } else {\r\n                    callback(null, value);\r\n                }\r\n            };\r\n\r\n            func.tasync_unwraped.tasync_wraped = func;\r\n        }\r\n\r\n        return func.tasync_unwraped;\r\n    }\r\n\r\n    // ------- Throttle -------\r\n\r\n    function FutureThrottle(func, that, args) {\r\n        Future.call(this);\r\n\r\n        this.func = func;\r\n        this.that = that;\r\n        this.args = args;\r\n\r\n        this.caller = FRAME;\r\n        this.position = ++FRAME.subframes;\r\n\r\n        this.path = this.getPath();\r\n    }\r\n\r\n    FutureThrottle.prototype = Object.create(Future.prototype);\r\n\r\n    FutureThrottle.prototype.execute = function () {\r\n        var value;\r\n        try {\r\n            assert(FRAME === ROOT);\r\n            FRAME = this;\r\n\r\n            value = this.func.apply(this.that, this.args);\r\n\r\n            FRAME = ROOT;\r\n        } catch (error) {\r\n            FRAME = ROOT;\r\n\r\n            this.reject(error);\r\n            return;\r\n        }\r\n\r\n        if (value instanceof Future) {\r\n            assert(value.state === STATE_LISTEN);\r\n            value.register(this);\r\n        } else {\r\n            this.resolve(value);\r\n        }\r\n    };\r\n\r\n    FutureThrottle.prototype.getPath = FutureApply.prototype.getPath;\r\n    FutureThrottle.prototype.onResolved = Future.prototype.resolve;\r\n    FutureThrottle.prototype.onRejected = Future.prototype.reject;\r\n\r\n    FutureThrottle.prototype.compare = function (second) {\r\n        var first = this.path;\r\n        second = second.path;\r\n\r\n        var i, limit = first.length < second.length ? first.length : second.length;\r\n        for (i = 0; i < limit; ++i) {\r\n            if (first[i] !== second[i]) {\r\n                return first[i] - second[i];\r\n            }\r\n        }\r\n\r\n        return first.length - second.length;\r\n    };\r\n\r\n    function ThrottleListener(limit) {\r\n        this.running = 0;\r\n        this.limit = limit;\r\n        this.queue = [];\r\n    }\r\n\r\n    function priorityQueueInsert(queue, elem) {\r\n        var low = 0;\r\n        var high = queue.length;\r\n\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            assert(low <= mid && mid < high);\r\n\r\n            if (elem.compare(queue[mid]) < 0) {\r\n                low = mid + 1;\r\n            } else {\r\n                high = mid;\r\n            }\r\n        }\r\n\r\n        queue.splice(low, 0, elem);\r\n    }\r\n\r\n    ThrottleListener.prototype.execute = function (func, that, args) {\r\n        if (this.running < this.limit) {\r\n            var value = func.apply(that, args);\r\n\r\n            if (value instanceof Future) {\r\n                assert(value.state === STATE_LISTEN);\r\n\r\n                ++this.running;\r\n                value.register(this);\r\n            }\r\n\r\n            return value;\r\n        } else {\r\n            var future = new FutureThrottle(func, that, args);\r\n            priorityQueueInsert(this.queue, future);\r\n\r\n            return future;\r\n        }\r\n    };\r\n\r\n    ThrottleListener.prototype.onResolved = function () {\r\n        if (this.queue.length > 0) {\r\n            var future = this.queue.pop();\r\n            future.register(this);\r\n\r\n            future.execute();\r\n        } else {\r\n            --this.running;\r\n        }\r\n    };\r\n\r\n    ThrottleListener.prototype.onRejected = ThrottleListener.prototype.onResolved;\r\n\r\n    // TODO: prevent recursion, otheriwise throttle will not work\r\n    function throttle(func, limit) {\r\n        if (typeof func !== 'function') {\r\n            throw new Error('function argument is expected');\r\n        } else if (typeof limit !== 'number') {\r\n            throw new Error('number argument is expected');\r\n        }\r\n\r\n        var listener = new ThrottleListener(limit);\r\n\r\n        return function () {\r\n            return listener.execute(func, this, arguments);\r\n        };\r\n    }\r\n\r\n    // ------- Join -------\r\n\r\n    function FutureJoin(first) {\r\n        Future.call(this);\r\n\r\n        this.first = first;\r\n        this.missing = first instanceof Future && first.state === STATE_LISTEN ? 1 : 0;\r\n    }\r\n\r\n    FutureJoin.prototype = Object.create(Future.prototype);\r\n\r\n    FutureJoin.prototype.onResolved = function (/*value*/) {\r\n        if (--this.missing === 0) {\r\n            assert(this.state !== STATE_RESOLVED);\r\n\r\n            if (this.state === STATE_LISTEN) {\r\n                if (this.first instanceof Future) {\r\n                    assert(this.first.state === STATE_RESOLVED);\r\n\r\n                    this.resolve(this.first.value);\r\n                } else {\r\n                    this.resolve(this.first);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    FutureJoin.prototype.onRejected = function (error) {\r\n        if (this.state === STATE_LISTEN) {\r\n            this.reject(error);\r\n        }\r\n    };\r\n\r\n    function join(first, second) {\r\n        if (first instanceof Future && first.state === STATE_REJECTED) {\r\n            return first;\r\n        } else if (second instanceof Future) {\r\n            if (second.state === STATE_RESOLVED) {\r\n                return first;\r\n            } else if (second.state === STATE_REJECTED) {\r\n                return second;\r\n            }\r\n        } else {\r\n            return first;\r\n        }\r\n\r\n        if (!(first instanceof FutureJoin)) {\r\n            first = new FutureJoin(first);\r\n        }\r\n\r\n        first.missing += 1;\r\n        second.register(first);\r\n\r\n        return first;\r\n    }\r\n\r\n    // ------- TASYNC -------\r\n\r\n    var TASYNC = {\r\n        setTrace: setTrace,\r\n        delay: delay,\r\n        lift: lift,\r\n        apply: apply,\r\n        call: call,\r\n        trycatch: trycatch,\r\n        wrap: wrap,\r\n        unwrap: unwrap,\r\n        throttle: throttle,\r\n        join: join\r\n    };\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('common/core/tasync',[], function () {\r\n            return TASYNC;\r\n        });\r\n    } else {\r\n        module.exports = TASYNC;\r\n    }\r\n}());\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/core/corerel',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/util/random',\r\n    'common/core/constants',\r\n    'common/storage/constants',\r\n    'common/util/key',\r\n    'common/regexp'\r\n], function (ASSERT, TASYNC, RANDOM, CONSTANTS, STORAGE_CONSTANTS, generateKey, REGEXP) {\r\n\r\n    'use strict';\r\n\r\n    function InverseOverlaysCache(maxSize, logger) {\r\n        var self = this;\r\n\r\n        maxSize = maxSize || 10000;\r\n        this._backup = {};\r\n        this._cache = {};\r\n        this._size = 0;\r\n\r\n        this.getItem = function (key) {\r\n            if (self._cache[key]) {\r\n                return self._cache[key];\r\n            }\r\n\r\n            if (self._backup[key]) {\r\n                return self._backup[key];\r\n            }\r\n\r\n            return null;\r\n\r\n        };\r\n\r\n        this.setItem = function (key, data) {\r\n            if (!self._cache[key]) {\r\n                if (self._size === maxSize) {\r\n                    self._size = 0;\r\n                    self._backup = self._cache;\r\n                    self._cache = {};\r\n                }\r\n                self._size += 1;\r\n                self._cache[key] = data;\r\n\r\n            } else {\r\n                logger.warn('trying to add inverse relation object multiple times [#' + key + ']');\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    function CoreRel(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof innerCore === 'object');\r\n\r\n        var logger = innerCore.logger,\r\n            self = this,\r\n            _shardSize = options.globConf.core.overlayShardSize,\r\n            _shardingLimit = Math.floor(_shardSize / 2),\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        //removing direct storage functions on this level\r\n        delete this.loadObject;\r\n        delete this.insertObject;\r\n\r\n        this._inverseCache = new InverseOverlaysCache(options.globConf.core.inverseRelationsCacheSize,\r\n            logger.fork('inverseCache'));\r\n\r\n        logger.debug('initialized CoreRel');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function test(text, cond) {\r\n            if (!cond) {\r\n                throw new Error(text);\r\n            }\r\n        }\r\n\r\n        function isObject(node) {\r\n            node = innerCore.normalize(node);\r\n            return typeof node.data === 'object' && node.data !== null;\r\n        }\r\n\r\n        function isValidNodeThrow(node) {\r\n            test('coretree', innerCore.isValidNode(node));\r\n            test('isobject', isObject(node));\r\n        }\r\n\r\n        function getRelativePointerPathFrom(node, source, name) {\r\n            ASSERT(self.isValidNode(node) && typeof source === 'string' && typeof name === 'string');\r\n            var target,\r\n                ovrInfo;\r\n\r\n            do {\r\n                ovrInfo = self.overlayInquiry(node, source, name);\r\n                if (typeof ovrInfo.value === 'string') {\r\n                    target = ovrInfo.value;\r\n                    break;\r\n                }\r\n\r\n                source = CONSTANTS.PATH_SEP + innerCore.getRelid(node) + source;\r\n                node = innerCore.getParent(node);\r\n\r\n            } while (node);\r\n\r\n            return {\r\n                target: target,\r\n                node: node\r\n            };\r\n        }\r\n\r\n        function storeNewInverseOverlays(node) {\r\n            var hash = self.getHash(node),\r\n                relid;\r\n\r\n            if (hash && node.inverseOverlays && node.inverseOverlaysMutable) {\r\n                self._inverseCache.setItem(hash, node.inverseOverlays);\r\n                delete node.inverseOverlaysMutable;\r\n                for (relid in node.children) {\r\n                    storeNewInverseOverlays(node.children[relid]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function hasShardedOverlays(node) {\r\n            return (self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) ||\r\n                {})[CONSTANTS.OVERLAY_SHARD_INDICATOR] === true;\r\n        }\r\n\r\n        function updateSmallestOverlayShardIndex(node) {\r\n            var shardId,\r\n                minimalItemCount = _shardSize + 1;\r\n\r\n            for (shardId in node.overlays) {\r\n                if (node.overlays[shardId].itemCount < minimalItemCount) {\r\n                    minimalItemCount = node.overlays[shardId].itemCount;\r\n                    node.minimalOverlayShardId = shardId;\r\n                }\r\n            }\r\n        }\r\n\r\n        function attachOverlays(node) {\r\n\r\n            if (hasShardedOverlays(node) !== true) {\r\n                return node;\r\n            }\r\n\r\n            var overlays = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY),\r\n                shardId,\r\n                shardIds = [],\r\n                loadPromises = [];\r\n\r\n            for (shardId in overlays) {\r\n                if (REGEXP.DB_HASH.test(overlays[shardId]) === true) {\r\n                    shardIds.push(shardId);\r\n                    loadPromises.push(innerCore.loadObject(overlays[shardId]));\r\n                }\r\n            }\r\n\r\n            return TASYNC.call(function (overlayShards) {\r\n                var i;\r\n\r\n                node.overlays = {};\r\n                node.overlayMutations = {};\r\n                node.overlayInitials = {};\r\n                for (i = 0; i < overlayShards.length; i += 1) {\r\n                    shardId = shardIds[i];\r\n                    node.overlays[shardId] = overlayShards[i];\r\n                    node.overlayInitials[shardId] = overlayShards[i];\r\n                    node.overlayMutations[shardId] = false;\r\n                }\r\n                updateSmallestOverlayShardIndex(node);\r\n                return node;\r\n            }, TASYNC.lift(loadPromises));\r\n        }\r\n\r\n        // We only shard regular GME nodes, technical sub-nodes do not get sharded\r\n        function shouldHaveShardedOverlays(node) {\r\n            return Object.keys(self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {}).length >=\r\n                _shardingLimit && self.getPath(node).indexOf('_') === -1;\r\n        }\r\n\r\n        function addNewOverlayShard(node) {\r\n            var overlaysNode = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY),\r\n                shardId = RANDOM.generateRelid(overlaysNode.data),\r\n                newShardObject = {\r\n                    type: STORAGE_CONSTANTS.OVERLAY_SHARD_TYPE,\r\n                    itemCount: 0,\r\n                    items: {}\r\n                };\r\n\r\n            newShardObject[self.ID_NAME] = '';\r\n            node.overlays[shardId] = newShardObject;\r\n            node.overlayMutations[shardId] = true;\r\n\r\n            self.setProperty(overlaysNode, shardId, null);\r\n            return shardId;\r\n        }\r\n\r\n        function removeOverlayShard(node, shardId) {\r\n            // At this point the node should always be mutated.\r\n            var overlaysNode = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n\r\n            delete node.overlays[shardId];\r\n            delete node.overlayMutations[shardId];\r\n            self.deleteProperty(overlaysNode, shardId);\r\n        }\r\n\r\n        function transformOverlays(node) {\r\n            var originalOverlays = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY),\r\n                count = _shardSize,\r\n                source,\r\n                name,\r\n                shardId;\r\n\r\n            self.deleteChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n            self.removeChildFromCache(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n\r\n            self.setProperty(self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY), CONSTANTS.OVERLAY_SHARD_INDICATOR, true);\r\n\r\n            node.overlays = {};\r\n            node.overlayMutations = {};\r\n            node.overlayInitials = {};\r\n            node.minimalOverlayShardId = null;\r\n            for (source in originalOverlays) {\r\n                if (source !== CONSTANTS.MUTABLE_PROPERTY) {\r\n                    for (name in originalOverlays[source]) {\r\n                        if (name !== CONSTANTS.MUTABLE_PROPERTY) {\r\n                            if (count >= _shardSize) {\r\n                                shardId = addNewOverlayShard(node);\r\n                                node.minimalOverlayShardId = shardId;\r\n                                count = 0;\r\n                            }\r\n\r\n                            node.overlays[shardId].items[source] = node.overlays[shardId].items[source] || {};\r\n                            node.overlays[shardId].items[source][name] = originalOverlays[source][name];\r\n                            node.overlays[shardId].itemCount += 1;\r\n                            count += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // In the unlikely event that during transition the original shard is empty.\r\n            if (Object.keys(node.overlays).length === 0) {\r\n                node.minimalOverlayShardId = addNewOverlayShard(node);\r\n            }\r\n        }\r\n\r\n        function ensureOverlayShardMutated(node, shardId) {\r\n            var overlayNode;\r\n\r\n            if (node.overlayMutations[shardId] !== true) {\r\n                node.overlayMutations[shardId] = true;\r\n                node.overlays[shardId] = JSON.parse(JSON.stringify(node.overlays[shardId]));\r\n                overlayNode = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n                self.setProperty(overlayNode, shardId, null);\r\n            }\r\n        }\r\n\r\n        function putEntryIntoOverlayShard(node, shardId, source, name, target) {\r\n\r\n            if (node.overlays[shardId].itemCount >= _shardSize &&\r\n                Object.hasOwn(node.overlays[shardId].items, source) === false) {\r\n                shardId = addNewOverlayShard(node);\r\n                node.minimalOverlayShardId = shardId;\r\n            }\r\n\r\n            ensureOverlayShardMutated(node, shardId);\r\n\r\n            node.overlays[shardId].items[source] = node.overlays[shardId].items[source] || {};\r\n            node.overlays[shardId].items[source][name] = target;\r\n            node.overlays[shardId].itemCount += 1;\r\n\r\n            if (node.minimalOverlayShardId === shardId && node.overlays[shardId].itemCount >= _shardSize) {\r\n                updateSmallestOverlayShardIndex(node);\r\n            }\r\n        }\r\n\r\n        function putEntryIntoShardedOverlays(node, source, name, target) {\r\n            // At this point we expect that everything was checked and we can simply look for\r\n            // the proper place of the entry.\r\n            var shardId;\r\n\r\n            for (shardId in node.overlays) {\r\n                if (Object.hasOwn(node.overlays[shardId].items, source)) {\r\n                    putEntryIntoOverlayShard(node, shardId, source, name, target);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            putEntryIntoOverlayShard(node, node.minimalOverlayShardId, source, name, target);\r\n        }\r\n\r\n        function removeEntryFromShardedOverlays(node, source, name) {\r\n            var shardId;\r\n\r\n            for (shardId in node.overlays) {\r\n                if (node.overlays[shardId].items[source]) {\r\n                    if (typeof node.overlays[shardId].items[source][name] === 'string') {\r\n\r\n                        ensureOverlayShardMutated(node, shardId);\r\n\r\n                        delete node.overlays[shardId].items[source][name];\r\n                        node.overlays[shardId].itemCount -= 1;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        function persistShardedOverlays(node, stackedObjects) {\r\n            // This recursive function will save objects, right before calling the underlying persist.\r\n            var relids,\r\n                shardId,\r\n                source,\r\n                hash,\r\n                overlayNode,\r\n                shouldUpdateSmallest = false,\r\n                i;\r\n\r\n            if (self.isMutable(node) !== true) {\r\n                return;\r\n            }\r\n\r\n            relids = self.getChildrenRelids(node);\r\n\r\n            for (i = 0; i < relids.length; i += 1) {\r\n                if (self.childLoaded(node, relids[i]) === true) {\r\n                    persistShardedOverlays(self.getChild(node, relids[i]), stackedObjects);\r\n                }\r\n            }\r\n\r\n            overlayNode = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n            for (shardId in node.overlayMutations) {\r\n                // We only remove shards if they were empty at loading as well. Otherwise\r\n                // node eventing would be impossible.\r\n                if (node.overlayMutations[shardId] === true) {\r\n                    node.overlayMutations[shardId] = false;\r\n                    node.overlays[shardId][self.ID_NAME] = '';\r\n                    node.overlays[shardId].__v = STORAGE_CONSTANTS.VERSION;\r\n\r\n                    // if we persist an empty shard we have to ensure that its hash will be unique\r\n                    if (node.overlays[shardId].itemCount === 0) {\r\n                        node.overlays[shardId].oldHash = node.overlayInitials[shardId] ?\r\n                            node.overlayInitials[shardId][self.ID_NAME] || null : null;\r\n                        node.overlays[shardId].items = {};\r\n                    } else {\r\n                        for (source in node.overlays[shardId].items) {\r\n                            if (Object.keys(node.overlays[shardId].items[source]).length === 0) {\r\n                                delete node.overlays[shardId].items[source];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    hash = '#' + generateKey(node.overlays[shardId], options.globConf);\r\n                    node.overlays[shardId][self.ID_NAME] = hash;\r\n                    innerCore.insertObject(node.overlays[shardId], stackedObjects);\r\n                    stackedObjects[hash] = {\r\n                        oldHash: node.overlayInitials[shardId] ? node.overlayInitials[shardId][self.ID_NAME] : null,\r\n                        oldData: node.overlayInitials[shardId],\r\n                        newHash: hash,\r\n                        newData: node.overlays[shardId]\r\n                    };\r\n\r\n                    self.setProperty(overlayNode, shardId, hash);\r\n                    shouldUpdateSmallest = true;\r\n                } else if (node.overlays[shardId].itemCount === 0) {\r\n                    removeOverlayShard(node, shardId);\r\n                    shouldUpdateSmallest = true;\r\n                }\r\n            }\r\n\r\n            if (shouldUpdateSmallest) {\r\n                updateSmallestOverlayShardIndex(node);\r\n            }\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.isValidNode = function (node) {\r\n            try {\r\n                isValidNodeThrow(node);\r\n\r\n                return true;\r\n            } catch (error) {\r\n                logger.error(error.message, {metadata: {stack: error.stack, node: node}});\r\n                return false;\r\n            }\r\n        };\r\n\r\n        this.persist = function (node) {\r\n            var stackedObjects = {},\r\n                persisted;\r\n\r\n            persistShardedOverlays(node, stackedObjects);\r\n            persisted = innerCore.persist(node, stackedObjects);\r\n            storeNewInverseOverlays(self.getRoot(node));\r\n\r\n            return persisted;\r\n        };\r\n\r\n        this.loadRoot = function (hash) {\r\n            return TASYNC.call(function (root) {\r\n                return attachOverlays(root);\r\n            }, innerCore.loadRoot(hash));\r\n        };\r\n\r\n        this.loadChild = function (node, relid) {\r\n            return TASYNC.call(function (child) {\r\n                return attachOverlays(child);\r\n            }, innerCore.loadChild(node, relid));\r\n        };\r\n\r\n        this.loadByPath = function (node, relPath) {\r\n            return TASYNC.call(function (target) {\r\n                return attachOverlays(target);\r\n            }, innerCore.loadByPath(node, relPath));\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.getInverseOverlayOfNode = function (node) {\r\n            var hash,\r\n                inverseOverlays = {},\r\n                overlay,\r\n                overlaysObject,\r\n                shardId,\r\n                source,\r\n                name,\r\n                target;\r\n\r\n            // If the node already has inverse computed we return that\r\n            if (node.inverseOverlays) {\r\n                return node.inverseOverlays;\r\n            }\r\n\r\n            // If we find it in the cache we set that and use it\r\n            hash = self.getHash(node);\r\n            if (hash) {\r\n                inverseOverlays = self._inverseCache.getItem(hash);\r\n                if (inverseOverlays) {\r\n                    node.inverseOverlays = inverseOverlays;\r\n                    delete node.inverseOverlaysMutable;\r\n                    return node.inverseOverlays;\r\n                }\r\n            }\r\n\r\n            // Otherwise we have to compute it\r\n            if (hasShardedOverlays(node)) {\r\n                overlaysObject = node.overlays;\r\n            } else {\r\n                overlaysObject = {single: {items: self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {}}};\r\n            }\r\n\r\n            inverseOverlays = {};\r\n            for (shardId in overlaysObject) {\r\n                overlay = overlaysObject[shardId];\r\n                for (source in overlay.items) {\r\n                    if (source !== CONSTANTS.MUTABLE_PROPERTY) {\r\n                        for (name in overlay.items[source]) {\r\n                            if (name !== CONSTANTS.MUTABLE_PROPERTY) {\r\n                                target = overlay.items[source][name];\r\n                                inverseOverlays[target] = inverseOverlays[target] || {};\r\n                                inverseOverlays[target][name] = inverseOverlays[target][name] || [];\r\n                                inverseOverlays[target][name].push(source);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If it is an unmodified node, we can store the inverse, otherwise it still can change\r\n            if (hash) {\r\n                self._inverseCache.setItem(hash, inverseOverlays);\r\n                delete node.inverseOverlaysMutable;\r\n            } else {\r\n                node.inverseOverlaysMutable = true;\r\n            }\r\n\r\n            node.inverseOverlays = inverseOverlays;\r\n\r\n            return node.inverseOverlays;\r\n\r\n        };\r\n\r\n        this.isPointerName = function (name) {\r\n            ASSERT(typeof name === 'string');\r\n            //TODO this is needed as now we work with modified data as well\r\n            if (name === CONSTANTS.MUTABLE_PROPERTY) {\r\n                return false;\r\n            }\r\n            // return name.slice(-CONSTANTS.COLLECTION_NAME_SUFFIX.length) !==\r\n            //     CONSTANTS.COLLECTION_NAME_SUFFIX;\r\n\r\n            return true;\r\n        };\r\n\r\n        this.getAttributeNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var data,\r\n                keys,\r\n                i,\r\n                result = [],\r\n                key;\r\n\r\n            data = (innerCore.getProperty(node, CONSTANTS.ATTRIBUTES_PROPERTY) || {});\r\n            keys = Object.keys(data);\r\n            i = keys.length;\r\n            while (--i >= 0) {\r\n                key = keys[i];\r\n                if (key.charAt(0) === '') {\r\n                    logger.error('empty named attribute found in node [' + innerCore.getPath(node) + ']');\r\n                    //keys.splice(i, 1);\r\n                } else if (key.charAt(0) === '_') {\r\n                    //keys.splice(i, 1);\r\n                } else {\r\n                    result.push(key);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.getRegistryNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var data,\r\n                keys,\r\n                i,\r\n                result = [],\r\n                key;\r\n\r\n            data = (innerCore.getProperty(node, CONSTANTS.REGISTRY_PROPERTY) || {});\r\n            keys = Object.keys(data);\r\n            i = keys.length;\r\n            while (--i >= 0) {\r\n                key = keys[i];\r\n                if (keys[i].charAt(0) === '') {\r\n                    logger.error('empty named attribute found in node [' + innerCore.getPath(node) + ']');\r\n                    //keys.splice(i, 1);\r\n                } else if (keys[i].charAt(0) === '_') {\r\n                    //keys.splice(i, 1);\r\n                } else {\r\n                    result.push(key);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.getAttribute = function (node, name) {\r\n            /*node = coretree.getChild(node, coretree.constants.ATTRIBUTES_PROPERTY);\r\n             return coretree.getProperty(node, name);*/\r\n            return (innerCore.getProperty(node, CONSTANTS.ATTRIBUTES_PROPERTY) || {})[name];\r\n        };\r\n\r\n        this.delAttribute = function (node, name) {\r\n            node = innerCore.getChild(node, CONSTANTS.ATTRIBUTES_PROPERTY);\r\n            innerCore.deleteProperty(node, name);\r\n        };\r\n\r\n        this.setAttribute = function (node, name, value) {\r\n            node = innerCore.getChild(node, CONSTANTS.ATTRIBUTES_PROPERTY);\r\n            innerCore.setProperty(node, name, value);\r\n        };\r\n\r\n        this.renameAttribute = function (node, oldName, newName) {\r\n            node = innerCore.getChild(node, CONSTANTS.ATTRIBUTES_PROPERTY);\r\n            innerCore.renameProperty(node, oldName, newName);\r\n        };\r\n\r\n        this.getRegistry = function (node, name) {\r\n            /*node = coretree.getChild(node, coretree.constants.REGISTRY_PROPERTY);\r\n             return coretree.getProperty(node, name);*/\r\n            return (innerCore.getProperty(node, CONSTANTS.REGISTRY_PROPERTY) || {})[name];\r\n        };\r\n\r\n        this.delRegistry = function (node, name) {\r\n            node = innerCore.getChild(node, CONSTANTS.REGISTRY_PROPERTY);\r\n            innerCore.deleteProperty(node, name);\r\n        };\r\n\r\n        this.setRegistry = function (node, name, value) {\r\n            node = innerCore.getChild(node, CONSTANTS.REGISTRY_PROPERTY);\r\n            innerCore.setProperty(node, name, value);\r\n        };\r\n\r\n        this.renameRegistry = function (node, oldName, newName) {\r\n            node = innerCore.getChild(node, CONSTANTS.REGISTRY_PROPERTY);\r\n            innerCore.renameProperty(node, oldName, newName);\r\n        };\r\n\r\n        this.overlayInquiry = function (node, source, name) {\r\n            // If name is not given, then the whole object returned.\r\n            // If no entry found, null is returned.\r\n            var shardId,\r\n                ordinaryOverlays,\r\n                result = {\r\n                    shardId: null,\r\n                    value: null\r\n                };\r\n\r\n            if (hasShardedOverlays(node) === true) {\r\n                for (shardId in node.overlays) {\r\n                    if (node.overlays[shardId].items[source]) {\r\n                        result.shardId = shardId;\r\n                        if (typeof name === 'string') {\r\n                            result.value = typeof node.overlays[shardId].items[source][name] === 'string' ?\r\n                                node.overlays[shardId].items[source][name] : null;\r\n                        } else {\r\n                            result.value = node.overlays[shardId].items[source];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                ordinaryOverlays = self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {};\r\n                if (Object.hasOwn(ordinaryOverlays, source)) {\r\n                    if (typeof name === 'string') {\r\n                        result.value = typeof ordinaryOverlays[source][name] === 'string' ?\r\n                            ordinaryOverlays[source][name] : null;\r\n                    } else {\r\n                        result.value = ordinaryOverlays[source];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.overlayRemove = function (node, source, name, target) {\r\n            ASSERT(self.isValidNode(node));\r\n            ASSERT(innerCore.isValidPath(source) && innerCore.isValidPath(target) && self.isPointerName(name));\r\n            ASSERT(innerCore.getCommonPathPrefixData(source, target).common === '');\r\n\r\n            var currentOverlayInfo = self.overlayInquiry(node, source, name),\r\n                index,\r\n                overlays,\r\n                overlayNode;\r\n\r\n            ASSERT(currentOverlayInfo.value === target);\r\n\r\n            if (hasShardedOverlays(node)) {\r\n                removeEntryFromShardedOverlays(node, source, name);\r\n            } else {\r\n                overlays = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n\r\n                overlayNode = innerCore.getChild(overlays, source);\r\n                innerCore.deleteProperty(overlayNode, name);\r\n\r\n                if (innerCore.getKeys(overlayNode).length === 0) {\r\n                    innerCore.deleteProperty(overlays, source);\r\n                }\r\n            }\r\n\r\n            //Now we check if we need to mutate the inverse overlays\r\n            if (node.inverseOverlays) {\r\n                if (node.inverseOverlaysMutable !== true) {\r\n                    node.inverseOverlays = JSON.parse(JSON.stringify(node.inverseOverlays));\r\n                    node.inverseOverlaysMutable = true;\r\n                }\r\n\r\n                index = ((node.inverseOverlays[target] || {})[name] || []).indexOf(source);\r\n                if (index !== -1) {\r\n                    node.inverseOverlays[target][name].splice(index, 1);\r\n                    if (node.inverseOverlays[target][name].length === 0) {\r\n                        delete node.inverseOverlays[target][name];\r\n                        if (Object.keys(node.inverseOverlays[target]).length === 0) {\r\n                            delete node.inverseOverlays[target];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.overlayQuery = function (node, prefix) {\r\n            ASSERT(self.isValidNode(node) && innerCore.isValidPath(prefix));\r\n\r\n            var overlays,\r\n                overlaysObject,\r\n                shardId,\r\n                inverseOverlays = self.getInverseOverlayOfNode(node), // We necessarily have to compute at this point,\r\n                i, path, name, list = [],\r\n                prefix2 = prefix + CONSTANTS.PATH_SEP;\r\n\r\n            if (hasShardedOverlays(node)) {\r\n                overlaysObject = node.overlays;\r\n            } else {\r\n                overlaysObject = {single: {items: self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {}}};\r\n            }\r\n\r\n            for (shardId in overlaysObject) {\r\n                overlays = overlaysObject[shardId].items;\r\n                for (path in overlays) {\r\n                    if (path === prefix || path.substr(0, prefix2.length) === prefix2) {\r\n                        for (name in overlays[path]) {\r\n                            if (self.isPointerName(name)) {\r\n                                list.push({\r\n                                    s: path,                // source\r\n                                    n: name,                // name\r\n                                    t: overlays[path][name], // target\r\n                                    p: true                 // is forward relation\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (path in inverseOverlays) {\r\n                if (path === prefix || path.substr(0, prefix2.length) === prefix2) {\r\n                    for (name in inverseOverlays[path]) {\r\n                        for (i = 0; i < inverseOverlays[path][name].length; i += 1) {\r\n                            list.push({\r\n                                s: inverseOverlays[path][name][i],\r\n                                n: name,\r\n                                t: path,\r\n                                p: false\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return list;\r\n        };\r\n\r\n        this.overlayInsert = function (node, source, name, target) {\r\n            ASSERT(self.isValidNode(node));\r\n            ASSERT(innerCore.isValidPath(source) && innerCore.isValidPath(target) && self.isPointerName(name));\r\n            ASSERT(innerCore.getCommonPathPrefixData(source, target).common === '');\r\n\r\n            var currentOverlayInfo = self.overlayInquiry(node, source, name),\r\n                overlays,\r\n                overlay;\r\n\r\n            ASSERT(currentOverlayInfo.value === null);\r\n\r\n            if (hasShardedOverlays(node) === false && shouldHaveShardedOverlays(node)) {\r\n                transformOverlays(node);\r\n            }\r\n\r\n            if (hasShardedOverlays(node) === true) {\r\n                putEntryIntoShardedOverlays(node, source, name, target);\r\n            } else {\r\n                overlays = self.getChild(node, CONSTANTS.OVERLAYS_PROPERTY);\r\n                overlay = self.getChild(overlays, source);\r\n\r\n                self.setProperty(overlay, name, target);\r\n            }\r\n\r\n            //Now we check if we need to mutate the inverse overlays\r\n            if (node.inverseOverlays) {\r\n                if (node.inverseOverlaysMutable !== true) {\r\n                    node.inverseOverlays = JSON.parse(JSON.stringify(node.inverseOverlays));\r\n                    node.inverseOverlaysMutable = true;\r\n                }\r\n\r\n                node.inverseOverlays[target] = node.inverseOverlays[target] || {};\r\n                node.inverseOverlays[target][name] = node.inverseOverlays[target][name] || [];\r\n                node.inverseOverlays[target][name].push(source);\r\n            }\r\n        };\r\n\r\n        this.createNode = function (parameters, takenRelids, relidLength) {\r\n            parameters = parameters || {};\r\n            var relid = parameters.relid,\r\n                parent = parameters.parent;\r\n\r\n            ASSERT(!parent || self.isValidNode(parent));\r\n            // ASSERT(!relid || typeof relid === 'string');\r\n\r\n            var node;\r\n            if (parent) {\r\n                if (relid) {\r\n                    if ((takenRelids && takenRelids[relid]) || self.getChildrenRelids(parent).indexOf(relid) > -1) {\r\n                        throw new Error('Given relid already used in parent \"' + relid + '\".');\r\n                    } else {\r\n                        node = innerCore.getChild(parent, relid);\r\n                        parent.childrenRelids = null;\r\n                    }\r\n                } else {\r\n                    node = self.createChild(parent, takenRelids, relidLength);\r\n                }\r\n\r\n                innerCore.setHashed(node, true);\r\n            } else {\r\n                node = innerCore.createRoot();\r\n            }\r\n\r\n            // As we just created the node, we can allocate an empty inverse object, that is appropriate this time\r\n            node.inverseOverlays = {};\r\n            node.inverseOverlayMutable = true;\r\n            return node;\r\n        };\r\n\r\n        this.deleteNode = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var parent = innerCore.getParent(node);\r\n\r\n            ASSERT(parent !== null);\r\n            self.deleteChild(parent, innerCore.getRelid(node));\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param {Node} node - Node containing the child.\r\n         * @param {string} relid - Relid of the child to be removed.\r\n         */\r\n        this.deleteChild = function (parent, relid) {\r\n            var prefix = CONSTANTS.PATH_SEP + relid;\r\n            innerCore.deleteProperty(parent, relid);\r\n            innerCore.removeChildFromCache(parent, relid);\r\n            if (parent.childrenRelids) {\r\n                parent.childrenRelids = null;\r\n            }\r\n\r\n            while (parent) {\r\n\r\n                var list = self.overlayQuery(parent, prefix);\r\n                for (var i = 0; i < list.length; ++i) {\r\n                    var entry = list[i];\r\n                    self.overlayRemove(parent, entry.s, entry.n, entry.t);\r\n                }\r\n\r\n                prefix = CONSTANTS.PATH_SEP + innerCore.getRelid(parent) + prefix;\r\n                parent = innerCore.getParent(parent);\r\n            }\r\n        };\r\n\r\n        this.createChild = function (parent, takenRelids, relidLength) {\r\n            var child = innerCore.createChild(parent, takenRelids, relidLength);\r\n\r\n            parent.childrenRelids = null;\r\n\r\n            return child;\r\n        };\r\n\r\n        this.copyNode = function (node, parent, takenRelids, relidLength) {\r\n            ASSERT(self.isValidNode(node));\r\n            ASSERT(!parent || self.isValidNode(parent));\r\n            var newNode,\r\n                ancestor,\r\n                ancestorNewPath,\r\n                nodeToChangeOverlay,\r\n                base,\r\n                baseOldPath,\r\n                aboveAncestor,\r\n                list,\r\n                tempAncestor,\r\n                i,\r\n                entry,\r\n                relativePath,\r\n                source,\r\n                target;\r\n\r\n            node = innerCore.normalize(node);\r\n\r\n            if (parent) {\r\n                ancestor = innerCore.getAncestor(node, parent);\r\n\r\n                // cannot copy inside of itself\r\n                if (ancestor === node) {\r\n                    return null;\r\n                }\r\n\r\n                newNode = self.createChild(parent, takenRelids, relidLength);\r\n                innerCore.setHashed(newNode, true);\r\n                innerCore.setData(newNode, innerCore.copyData(node));\r\n\r\n                ancestorNewPath = innerCore.getPath(newNode, ancestor);\r\n\r\n                base = innerCore.getParent(node);\r\n                baseOldPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node);\r\n                aboveAncestor = 1;\r\n\r\n                while (base) {\r\n                    list = self.overlayQuery(base, baseOldPath);\r\n                    tempAncestor = innerCore.getAncestor(base, ancestor);\r\n\r\n                    aboveAncestor = (base === ancestor ? 0 : tempAncestor === base ? 1 : -1);\r\n\r\n                    relativePath = aboveAncestor < 0 ?\r\n                        innerCore.getPath(base, ancestor) : innerCore.getPath(ancestor, base);\r\n\r\n                    for (i = 0; i < list.length; ++i) {\r\n                        entry = list[i];\r\n\r\n                        if (entry.p) {\r\n                            ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\r\n                            ASSERT(entry.s === baseOldPath ||\r\n                                entry.s.charAt(baseOldPath.length) === CONSTANTS.PATH_SEP);\r\n\r\n                            if (aboveAncestor < 0) {\r\n                                //below ancestor node - further from root\r\n                                source = ancestorNewPath + entry.s.substr(baseOldPath.length);\r\n                                target = innerCore.joinPaths(relativePath, entry.t);\r\n                                nodeToChangeOverlay = ancestor;\r\n                            } else if (aboveAncestor === 0) {\r\n                                //at ancestor node\r\n                                var data = innerCore.getCommonPathPrefixData(ancestorNewPath, entry.t);\r\n\r\n                                nodeToChangeOverlay = newNode;\r\n                                while (data.firstLength-- > 0) {\r\n                                    nodeToChangeOverlay = innerCore.getParent(nodeToChangeOverlay);\r\n                                }\r\n\r\n                                source = innerCore.joinPaths(data.first, entry.s.substr(baseOldPath.length));\r\n                                target = data.second;\r\n                            } else {\r\n                                //above ancestor node - closer to root\r\n                                ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\r\n\r\n                                source = relativePath + ancestorNewPath + entry.s.substr(baseOldPath.length);\r\n                                target = entry.t;\r\n                                nodeToChangeOverlay = base;\r\n                            }\r\n\r\n                            self.overlayInsert(nodeToChangeOverlay, source, entry.n, target);\r\n                        }\r\n                    }\r\n\r\n                    baseOldPath = CONSTANTS.PATH_SEP + innerCore.getRelid(base) + baseOldPath;\r\n                    base = innerCore.getParent(base);\r\n                }\r\n            } else {\r\n                newNode = innerCore.createRoot();\r\n                innerCore.setData(newNode, innerCore.copyData(node));\r\n            }\r\n\r\n            if (node.inverseOverlaysMutable) {\r\n                newNode.inverseOverlays = JSON.parse(JSON.stringify(node.inverseOverlays));\r\n            } else {\r\n                newNode.inverseOverlays = node.inverseOverlays;\r\n            }\r\n            newNode.inverseOverlaysMutable = node.inverseOverlaysMutable;\r\n\r\n            if (hasShardedOverlays(node)) {\r\n                // Copy the shards-info for nodes with sharded overlay #1343\r\n                newNode.overlays = JSON.parse(JSON.stringify(node.overlays));\r\n                newNode.overlayMutations = JSON.parse(JSON.stringify(node.overlayMutations));\r\n                newNode.minimalOverlayShardId = node.minimalOverlayShardId;\r\n            }\r\n\r\n            var root = self.getRoot(newNode);\r\n            root.initial[self.getPath(newNode)] = root.initial[self.getPath(node)];\r\n            return newNode;\r\n        };\r\n\r\n        this.gatherRelationsAmongSubtrees = function (sourceRoot, targetRoot) {\r\n            var relationInformation = [],\r\n                overlaysToCheck,\r\n                commonParent, i,\r\n                commonPathInformation = innerCore.getCommonPathPrefixData(\r\n                    self.getPath(sourceRoot),\r\n                    self.getPath(targetRoot));\r\n\r\n            commonParent = sourceRoot;\r\n            while (self.getPath(commonParent) !== commonPathInformation.common) {\r\n                commonParent = self.getParent(commonParent);\r\n            }\r\n\r\n            overlaysToCheck = self.overlayQuery(commonParent, commonPathInformation.first);\r\n            for (i = 0; i < overlaysToCheck.length; i += 1) {\r\n                if (self.isPathInSubTree(overlaysToCheck[i].t, commonPathInformation.second)) {\r\n                    relationInformation.push({\r\n                        source: innerCore.joinPaths(commonPathInformation.common, overlaysToCheck[i].s),\r\n                        sourceBase: innerCore.joinPaths(commonPathInformation.common,\r\n                            commonPathInformation.first),\r\n                        target: innerCore.joinPaths(commonPathInformation.common, overlaysToCheck[i].t),\r\n                        targetBase: innerCore.joinPaths(commonPathInformation.common,\r\n                            commonPathInformation.second),\r\n                        name: overlaysToCheck[i].n\r\n                    });\r\n                }\r\n            }\r\n\r\n            return relationInformation;\r\n        };\r\n\r\n        this.gatherRelationsOfSubtree = function (root, sourceRelPath, targetRelPath) {\r\n            var relationInformation = [],\r\n                rootPath = self.getPath(root),\r\n                overlaysToCheck, i;\r\n\r\n            overlaysToCheck = self.overlayQuery(root, sourceRelPath);\r\n            for (i = 0; i < overlaysToCheck.length; i += 1) {\r\n                if (self.isPathInSubTree(overlaysToCheck[i].t, targetRelPath)) {\r\n                    relationInformation.push({\r\n                        source: innerCore.joinPaths(rootPath, overlaysToCheck[i].s),\r\n                        sourceBase: innerCore.joinPaths(rootPath, sourceRelPath),\r\n                        target: innerCore.joinPaths(rootPath, overlaysToCheck[i].t),\r\n                        targetBase: innerCore.joinPaths(rootPath, targetRelPath),\r\n                        name: overlaysToCheck[i].n\r\n                    });\r\n                }\r\n            }\r\n\r\n            return relationInformation;\r\n        };\r\n\r\n        this.copyNodes = function (nodes, parent, takenRelids, relidLength) {\r\n            var old2NewPath = {},\r\n                paths = [],\r\n                relationsToCopyOver = [],\r\n                copies = [],\r\n                source, target, oldTarget,\r\n                gatherRelations = function (commonPathInformation, firstNode) {\r\n                    var commonParent,\r\n                        overlaysToCheck,\r\n                        i;\r\n\r\n                    commonParent = firstNode;\r\n                    while (self.getPath(commonParent) !== commonPathInformation.common) {\r\n                        commonParent = self.getParent(commonParent);\r\n                    }\r\n\r\n                    // first -> second\r\n                    overlaysToCheck = self.overlayQuery(commonParent, commonPathInformation.first);\r\n                    for (i = 0; i < overlaysToCheck.length; i += 1) {\r\n                        if (self.isPathInSubTree(overlaysToCheck[i].t, commonPathInformation.second)) {\r\n                            relationsToCopyOver.push({\r\n                                source: innerCore.joinPaths(commonPathInformation.common, overlaysToCheck[i].s),\r\n                                sourceBase: innerCore.joinPaths(commonPathInformation.common,\r\n                                    commonPathInformation.first),\r\n                                target: innerCore.joinPaths(commonPathInformation.common, overlaysToCheck[i].t),\r\n                                targetBase: innerCore.joinPaths(commonPathInformation.common,\r\n                                    commonPathInformation.second),\r\n                                name: overlaysToCheck[i].n\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                i, j;\r\n\r\n            //first we collect the relations that we need to preserve\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                paths.push(self.getPath(nodes[i]));\r\n            }\r\n\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                for (j = 0; j < nodes.length; j += 1) {\r\n                    if (j !== i) {\r\n                        gatherRelations(innerCore.getCommonPathPrefixData(paths[i], paths[j]), nodes[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //do the actual copying\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                copies.push(self.copyNode(nodes[i], parent, takenRelids, relidLength));\r\n                old2NewPath[paths[i]] = self.getPath(copies[i]);\r\n                if (takenRelids) {\r\n                    takenRelids[self.getRelid(copies[i])] = true;\r\n                }\r\n            }\r\n\r\n            // create the relations, that have to be preserved\r\n            for (i = 0; i < relationsToCopyOver.length; i += 1) {\r\n                source = relationsToCopyOver[i].source.replace(\r\n                    relationsToCopyOver[i].sourceBase,\r\n                    old2NewPath[relationsToCopyOver[i].sourceBase]\r\n                );\r\n                target = relationsToCopyOver[i].target.replace(\r\n                    relationsToCopyOver[i].targetBase,\r\n                    old2NewPath[relationsToCopyOver[i].targetBase]\r\n                );\r\n\r\n                oldTarget = self.overlayInquiry(parent, source, relationsToCopyOver[i].name);\r\n                if (oldTarget !== null && typeof oldTarget.value === 'string') {\r\n                    self.overlayRemove(parent, source, relationsToCopyOver[i].name, oldTarget.value);\r\n                }\r\n                self.overlayInsert(parent, source, relationsToCopyOver[i].name, target);\r\n            }\r\n\r\n            return copies;\r\n        };\r\n\r\n        // this.copyNodes = function (nodes, parent, takenRelids, relidLength) {\r\n        //     //copying multiple nodes at once for keeping their internal relations\r\n        //     var paths = [],\r\n        //         i, j, index, names, pointer, newNode,\r\n        //         copiedNodes = [],\r\n        //         // Every single element will be an object with the\r\n        //         // internally pointing relations and the index of the target.\r\n        //         internalRelationPaths = [];\r\n        //\r\n        //     for (i = 0; i < nodes.length; i++) {\r\n        //         paths.push(innerCore.getPath(nodes[i]));\r\n        //     }\r\n        //\r\n        //     for (i = 0; i < nodes.length; i++) {\r\n        //         names = self.getPointerNames(nodes[i]);\r\n        //         pointer = {};\r\n        //         for (j = 0; j < names.length; j++) {\r\n        //             index = paths.indexOf(self.getPointerPath(nodes[i], names[j]));\r\n        //             if (index !== -1) {\r\n        //                 pointer[names[j]] = index;\r\n        //             }\r\n        //         }\r\n        //         internalRelationPaths.push(pointer);\r\n        //     }\r\n        //\r\n        //     //now we use our simple copy\r\n        //     for (i = 0; i < nodes.length; i++) {\r\n        //         newNode = self.copyNode(nodes[i], parent, takenRelids, relidLength);\r\n        //         copiedNodes.push(newNode);\r\n        //         if (takenRelids) {\r\n        //             takenRelids[self.getRelid(newNode)] = true;\r\n        //         }\r\n        //     }\r\n        //\r\n        //     //and now back to the relations\r\n        //     for (i = 0; i < internalRelationPaths.length; i++) {\r\n        //         names = Object.keys(internalRelationPaths[i]);\r\n        //         for (j = 0; j < names.length; j++) {\r\n        //             self.setPointer(copiedNodes[i], names[j], copiedNodes[internalRelationPaths[i][names[j]]]);\r\n        //         }\r\n        //     }\r\n        //\r\n        //     return copiedNodes;\r\n        // };\r\n\r\n        this.moveNode = function (node, parent, takenRelids, relidLength, newRelid) {\r\n            ASSERT(self.isValidNode(node) && self.isValidNode(parent));\r\n\r\n            var ancestor,\r\n                base,\r\n                baseOldPath,\r\n                aboveAncestor,\r\n                ancestorNewPath,\r\n                list,\r\n                tempAncestor,\r\n                relativePath,\r\n                i,\r\n                source,\r\n                target,\r\n                nodeToModifyOverlays,\r\n                entry,\r\n                tmp;\r\n\r\n            node = innerCore.normalize(node);\r\n            ancestor = innerCore.getAncestor(node, parent);\r\n\r\n            // cannot move inside of itself\r\n            if (ancestor === node) {\r\n                return null;\r\n            }\r\n\r\n            base = innerCore.getParent(node);\r\n            baseOldPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node);\r\n            aboveAncestor = 1;\r\n\r\n            var oldNode = node;\r\n            if (typeof newRelid === 'string') {\r\n                node = innerCore.getChild(parent, newRelid);\r\n            } else {\r\n                if (takenRelids) {\r\n                    if (takenRelids[innerCore.getRelid(oldNode)]) {\r\n                        node = innerCore.createChild(parent, takenRelids, relidLength);\r\n                    } else {\r\n                        node = innerCore.getChild(parent, innerCore.getRelid(oldNode));\r\n                    }\r\n                } else {\r\n                    node = innerCore.getChild(parent, innerCore.getRelid(oldNode));\r\n                    if (!innerCore.isEmpty(node)) {\r\n                        // we have to change the relid of the node, to fit into its new\r\n                        // place...\r\n                        node = innerCore.createChild(parent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            parent.childrenRelids = null;\r\n\r\n            innerCore.setHashed(node, true);\r\n            innerCore.setData(node, innerCore.copyData(oldNode));\r\n\r\n            ancestorNewPath = innerCore.getPath(node, ancestor);\r\n\r\n            while (base) {\r\n                list = self.overlayQuery(base, baseOldPath);\r\n                tempAncestor = innerCore.getAncestor(base, ancestor);\r\n\r\n                aboveAncestor = (base === ancestor ? 0 : tempAncestor === base ? 1 : -1);\r\n\r\n                relativePath = aboveAncestor < 0 ?\r\n                    innerCore.getPath(base, ancestor) : innerCore.getPath(ancestor, base);\r\n\r\n                for (i = 0; i < list.length; ++i) {\r\n                    entry = list[i];\r\n\r\n                    self.overlayRemove(base, entry.s, entry.n, entry.t);\r\n\r\n                    if (!entry.p) {\r\n                        tmp = entry.s;\r\n                        entry.s = entry.t;\r\n                        entry.t = tmp;\r\n                    }\r\n\r\n                    ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\r\n                    ASSERT(entry.s === baseOldPath || entry.s.charAt(baseOldPath.length) === CONSTANTS.PATH_SEP);\r\n\r\n                    if (aboveAncestor < 0) {\r\n                        //below ancestor node\r\n                        source = ancestorNewPath + entry.s.substr(baseOldPath.length);\r\n                        target = innerCore.joinPaths(relativePath, entry.t);\r\n                        nodeToModifyOverlays = ancestor;\r\n                    } else if (aboveAncestor === 0) {\r\n                        //at ancestor node\r\n                        var data = innerCore.getCommonPathPrefixData(ancestorNewPath, entry.t);\r\n\r\n                        nodeToModifyOverlays = node;\r\n                        while (data.firstLength-- > 0) {\r\n                            nodeToModifyOverlays = innerCore.getParent(nodeToModifyOverlays);\r\n                        }\r\n\r\n                        source = innerCore.joinPaths(data.first, entry.s.substr(baseOldPath.length));\r\n                        target = data.second;\r\n                    } else {\r\n                        //above ancestor node\r\n                        ASSERT(entry.s.substr(0, baseOldPath.length) === baseOldPath);\r\n\r\n                        source = relativePath + ancestorNewPath + entry.s.substr(baseOldPath.length);\r\n                        target = entry.t;\r\n                        nodeToModifyOverlays = base;\r\n                    }\r\n\r\n                    if (!entry.p) {\r\n                        tmp = entry.s;\r\n                        entry.s = entry.t;\r\n                        entry.t = tmp;\r\n\r\n                        tmp = source;\r\n                        source = target;\r\n                        target = tmp;\r\n                    }\r\n\r\n                    //console.log(source, target);\r\n                    self.overlayInsert(nodeToModifyOverlays, source, entry.n, target);\r\n                }\r\n\r\n                baseOldPath = CONSTANTS.PATH_SEP + innerCore.getRelid(base) + baseOldPath;\r\n                base = innerCore.getParent(base);\r\n            }\r\n\r\n            var root = self.getRoot(node);\r\n            root.initial[self.getPath(node)] = root.initial[self.getPath(oldNode)];\r\n            self.deleteNode(oldNode);\r\n\r\n            return node;\r\n        };\r\n\r\n        this.getChildrenRelids = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            // Check if they are already cached by the node\r\n            if (!node.childrenRelids) {\r\n                node.childrenRelids = innerCore.getKeys(node, self.isValidRelid);\r\n            }\r\n\r\n            return node.childrenRelids;\r\n        };\r\n\r\n        this.getChildrenPaths = function (node) {\r\n            var path = innerCore.getPath(node),\r\n                relids = self.getChildrenRelids(node),\r\n                result = [],\r\n                i;\r\n\r\n            for (i = 0; i < relids.length; i += 1) {\r\n                result.push(path + CONSTANTS.PATH_SEP + relids[i]);\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.loadChildren = function (node) {\r\n            var children = self.getChildrenRelids(node),\r\n                result = [],\r\n                i;\r\n\r\n            for (i = 0; i < children.length; i += 1) {\r\n                result.push(self.loadChild(node, children[i]));\r\n            }\r\n\r\n            return TASYNC.lift(result);\r\n        };\r\n\r\n        this.getPointerNames = function (node) {\r\n            return self.getPointerNamesFrom(node, '');\r\n        };\r\n\r\n        this.getPointerNamesFrom = function (node, source) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var names = [],\r\n                name,\r\n                overlayInfo;\r\n\r\n            do {\r\n                overlayInfo = self.overlayInquiry(node, source);\r\n                if (overlayInfo.value !== null) {\r\n                    for (name in overlayInfo.value) {\r\n                        ASSERT(names.indexOf(name) === -1);\r\n                        if (self.isPointerName(name)) {\r\n                            names.push(name);\r\n                        }\r\n                    }\r\n                }\r\n                source = CONSTANTS.PATH_SEP + innerCore.getRelid(node) + source;\r\n                node = innerCore.getParent(node);\r\n            } while (node);\r\n\r\n            return names;\r\n        };\r\n\r\n        this.getPointerPath = function (node, name) {\r\n            return self.getPointerPathFrom(node, '', name);\r\n        };\r\n\r\n        this.getPointerPathFrom = function (node, source, name) {\r\n            var res = getRelativePointerPathFrom(node, source, name),\r\n                target;\r\n\r\n            if (res.target !== undefined) {\r\n                target = innerCore.joinPaths(innerCore.getPath(res.node), res.target);\r\n            }\r\n\r\n            return target;\r\n        };\r\n\r\n        this.loadPointer = function (node, name) {\r\n            var res = getRelativePointerPathFrom(node, '', name);\r\n\r\n            if (res.target !== undefined) {\r\n                return self.loadByPath(res.node, res.target);\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.getCollectionNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            var names = [],\r\n                target = '',\r\n                name,\r\n                inverseOverlays;\r\n\r\n            do {\r\n                inverseOverlays = self.getInverseOverlayOfNode(node);\r\n                if (inverseOverlays[target]) {\r\n                    for (name in inverseOverlays[target]) {\r\n                        if (names.indexOf(name) === -1) {\r\n                            names.push(name);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\r\n                node = self.getParent(node);\r\n            } while (node);\r\n\r\n            return names;\r\n        };\r\n\r\n        this.loadCollection = function (node, name) {\r\n            ASSERT(self.isValidNode(node) && self.isPointerName(name));\r\n\r\n            var collection = [],\r\n                target = '',\r\n                i,\r\n                inverseOverlays;\r\n\r\n            do {\r\n                inverseOverlays = self.getInverseOverlayOfNode(node);\r\n\r\n                if (inverseOverlays[target] && inverseOverlays[target][name]) {\r\n                    for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\r\n                        collection.push(self.loadByPath(node, inverseOverlays[target][name][i]));\r\n                    }\r\n                }\r\n\r\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\r\n                node = self.getParent(node);\r\n            } while (node);\r\n\r\n            return TASYNC.lift(collection);\r\n        };\r\n\r\n        this.getCollectionPaths = function (node, name) {\r\n            ASSERT(self.isValidNode(node) && self.isPointerName(name));\r\n\r\n            var result = [],\r\n                target = '',\r\n                inverseOverlays,\r\n                i,\r\n                prefix = '';\r\n\r\n            do {\r\n                inverseOverlays = self.getInverseOverlayOfNode(node);\r\n                if (inverseOverlays[target] && inverseOverlays[target][name]) {\r\n                    prefix = self.getPath(node);\r\n                    for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\r\n                        result.push(prefix + inverseOverlays[target][name][i]);\r\n                    }\r\n                }\r\n\r\n                target = CONSTANTS.PATH_SEP + self.getRelid(node) + target;\r\n                node = self.getParent(node);\r\n            } while (node);\r\n\r\n            return result;\r\n        };\r\n\r\n        this.deletePointer = function (node, name) {\r\n            ASSERT(self.isValidNode(node) && typeof name === 'string');\r\n\r\n            var source = '',\r\n                overlayInfo;\r\n\r\n            do {\r\n                overlayInfo = self.overlayInquiry(node, source, name);\r\n                if (typeof overlayInfo.value === 'string') {\r\n                    self.overlayRemove(node, source, name, overlayInfo.value);\r\n                    break;\r\n                }\r\n                source = CONSTANTS.PATH_SEP + self.getRelid(node) + source;\r\n                node = self.getParent(node);\r\n            } while (node);\r\n\r\n            return false;\r\n        };\r\n\r\n        this.setPointer = function (node, name, target) {\r\n            ASSERT(self.isValidNode(node) && typeof name === 'string' && (!target || self.isValidNode(target)));\r\n\r\n            var ancestor,\r\n                targetPath,\r\n                sourcePath;\r\n\r\n            self.deletePointer(node, name);\r\n\r\n            if (target) {\r\n                ancestor = innerCore.getAncestor(node, target);\r\n\r\n                sourcePath = innerCore.getPath(node, ancestor);\r\n                targetPath = innerCore.getPath(target, ancestor);\r\n\r\n                self.overlayInsert(ancestor, sourcePath, name, targetPath);\r\n            }\r\n        };\r\n\r\n        this.renamePointer = function (node, oldName, newName) {\r\n            ASSERT(self.isValidNode(node) && typeof oldName === 'string' && typeof newName === 'string');\r\n            var targetPath = self.getPointerPath(node, oldName),\r\n                sourcePath = self.getPath(node),\r\n                pointerNames = self.getPointerNames(node),\r\n                commonInfo;\r\n\r\n            ASSERT(targetPath !== undefined);\r\n\r\n            if (pointerNames.indexOf(newName) !== -1) {\r\n                self.deletePointer(node, newName);\r\n            }\r\n\r\n            commonInfo = innerCore.getCommonPathPrefixData(sourcePath, targetPath);\r\n\r\n            while (commonInfo.firstLength-- > 0) {\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            self.overlayRemove(node, commonInfo.first, oldName, commonInfo.second);\r\n            self.overlayInsert(node, commonInfo.first, newName, commonInfo.second);\r\n        };\r\n\r\n        this.getChildrenHashes = function (node) {\r\n            var keys = self.getChildrenRelids(node),\r\n                i, hashes = {};\r\n\r\n            for (i = 0; i < keys.length; i++) {\r\n                hashes[keys[i]] = innerCore.getChildHash(node, keys[i]);\r\n            }\r\n\r\n            return hashes;\r\n        };\r\n\r\n        this.isValidRelid = RANDOM.isValidRelid;\r\n\r\n        this.isContainerPath = function (path, parentPath) {\r\n            var pathArray = (path || '').split(CONSTANTS.PATH_SEP),\r\n                parentArray = (parentPath || '').split(CONSTANTS.PATH_SEP),\r\n                i;\r\n\r\n            for (i = 0; i < parentArray.length; i += 1) {\r\n                if (parentArray[i] !== pathArray[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // by default the function removes any 'sub-node' relations\r\n        this.getRawOverlayInformation = function (node) {\r\n            var completeOverlayInfo = {},\r\n                shardId,\r\n                source,\r\n                complexOverlayObject,\r\n                name;\r\n\r\n            if (hasShardedOverlays(node)) {\r\n                complexOverlayObject = node.overlays;\r\n            } else {\r\n                complexOverlayObject = {single: {items: self.getProperty(node, CONSTANTS.OVERLAYS_PROPERTY) || {}}};\r\n            }\r\n\r\n            for (shardId in complexOverlayObject) {\r\n                for (source in complexOverlayObject[shardId].items) {\r\n                    if (source.indexOf('_') === -1) {\r\n                        completeOverlayInfo[source] = {};\r\n                        for (name in complexOverlayObject[shardId].items[source]) {\r\n                            if (name.indexOf('_') === -1) {\r\n                                if (complexOverlayObject[shardId].items[source][name] === '/_nullptr') {\r\n                                    completeOverlayInfo[source][name] = null;\r\n                                } else if (complexOverlayObject[shardId].items[source][name].indexOf('_') === -1) {\r\n                                    completeOverlayInfo[source][name] =\r\n                                        complexOverlayObject[shardId].items[source][name];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return completeOverlayInfo;\r\n        };\r\n        //</editor-fold>\r\n    }\r\n\r\n    return CoreRel;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/setcore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/constants',\r\n    'common/core/tasync'\r\n], function (ASSERT, CONSTANTS, TASYNC) {\r\n    'use strict';\r\n\r\n    function SetCore(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized SetCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function setModified(node) {\r\n            innerCore.setRegistry(node, CONSTANTS.SET_MODIFIED_REGISTRY,\r\n                (innerCore.getRegistry(node, CONSTANTS.SET_MODIFIED_REGISTRY) || 0) + 1);\r\n        }\r\n\r\n        function getSetNodeByName(node, setName) {\r\n            return innerCore.getChild(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName);\r\n        }\r\n\r\n        function getSetInfoByName(node, setName) {\r\n            ASSERT(typeof setName === 'string');\r\n            var setsInfo = innerCore.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\r\n\r\n            return setsInfo && setsInfo[setName];\r\n        }\r\n\r\n        function getRelativeMemberPath(ownerPath, memberPath) {\r\n            if (self.isPathInSubTree(memberPath, ownerPath)) {\r\n                return self.getCommonPathPrefixData(ownerPath, memberPath).second;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getOwnMemberRelId(node, setName, memberPath) {\r\n            var setInfo,\r\n                keys,\r\n                i;\r\n\r\n            setInfo = getSetInfoByName(node, setName);\r\n            if (setInfo) {\r\n                keys = self.getRawKeys(setInfo, self.isValidRelid);\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (innerCore.getPointerPathFrom(node,\r\n                        '/' + CONSTANTS.ALL_SETS_PROPERTY + '/' + setName + '/' + keys[i],\r\n                        CONSTANTS.MEMBER_RELATION) === memberPath) {\r\n\r\n                        return keys[i];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getMemberRelId(node, setName, memberPath) {\r\n            var relid = null,\r\n                relativeMemberPath = null;\r\n\r\n            do {\r\n                if (relativeMemberPath !== null) {\r\n                    relid = getOwnMemberRelId(node, setName, self.getPath(node) + relativeMemberPath);\r\n                    if (relid) {\r\n                        return relid;\r\n                    }\r\n                }\r\n                relid = getOwnMemberRelId(node, setName, memberPath);\r\n                if (relid) {\r\n                    return relid;\r\n                }\r\n\r\n                typeof memberPath === 'string' ?\r\n                    relativeMemberPath = getRelativeMemberPath(self.getPath(node), memberPath) : null;\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return relid;\r\n        }\r\n\r\n        function getSetMemberNode(node, setName, memberPath) {\r\n            var memberRelId = getMemberRelId(node, setName, memberPath);\r\n\r\n            return typeof memberRelId === 'string' && innerCore.getChild(getSetNodeByName(node, setName), memberRelId);\r\n        }\r\n\r\n        function getOwnSetMemberNode(node, setName, memberPath) {\r\n            var memberRelId = getOwnMemberRelId(node, setName, memberPath);\r\n\r\n            return typeof memberRelId === 'string' && innerCore.getChild(getSetNodeByName(node, setName), memberRelId);\r\n        }\r\n\r\n        function collectOwnSetNames(node) {\r\n            var sets = [],\r\n                setsInfo,\r\n                keys,\r\n                i;\r\n\r\n            setsInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\r\n            if (setsInfo &&\r\n                setsInfo[CONSTANTS.OVERLAYS_PROPERTY] &&\r\n                setsInfo[CONSTANTS.OVERLAYS_PROPERTY]['']) {\r\n\r\n                keys = Object.keys(setsInfo[CONSTANTS.OVERLAYS_PROPERTY]['']);\r\n\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (keys[i] !== CONSTANTS.MUTABLE_PROPERTY && sets.indexOf(keys[i]) === -1) {\r\n                        sets.push(keys[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return sets;\r\n        }\r\n\r\n        function collectSetNames(node) {\r\n            var sets = [],\r\n                keys,\r\n                i;\r\n\r\n            do {\r\n                keys = collectOwnSetNames(node);\r\n\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (sets.indexOf(keys[i]) === -1) {\r\n                        sets.push(keys[i]);\r\n                    }\r\n                }\r\n\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return sets;\r\n        }\r\n\r\n        function hasOwnSet(node, setName) {\r\n            ASSERT(typeof setName === 'string');\r\n            var setsInfo = self.getProperty(node, CONSTANTS.ALL_SETS_PROPERTY);\r\n            if (setsInfo &&\r\n                setsInfo[CONSTANTS.OVERLAYS_PROPERTY] &&\r\n                setsInfo[CONSTANTS.OVERLAYS_PROPERTY][''] &&\r\n                setsInfo[CONSTANTS.OVERLAYS_PROPERTY][''][setName]) {\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasSet(node, setName) {\r\n            do {\r\n                if (hasOwnSet(node, setName)) {\r\n                    return true;\r\n                }\r\n\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return false;\r\n        }\r\n\r\n        function collectInternalMemberRelids(node, setName) {\r\n            var setInfo,\r\n                relids = [],\r\n                keys,\r\n                i;\r\n\r\n            do {\r\n                setInfo = getSetInfoByName(node, setName);\r\n                if (setInfo) {\r\n\r\n                    keys = self.getRawKeys(setInfo, self.isValidRelid);\r\n\r\n                    for (i = 0; i < keys.length; i += 1) {\r\n                        if (relids.indexOf(keys[i]) === -1) {\r\n                            relids.push(keys[i]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return relids;\r\n        }\r\n\r\n        function getContainerNodePath(node) {\r\n            var ownPath = self.getPath(node);\r\n            return ownPath.substring(0, ownPath.indexOf('/_'));\r\n        }\r\n\r\n        function collectMemberPath(node, setName, innerRelid) {\r\n            var source = '/' + CONSTANTS.ALL_SETS_PROPERTY + '/' + setName + '/' + innerRelid,\r\n                path,\r\n                tempPath;\r\n\r\n            do {\r\n                tempPath = innerCore.getPointerPathFrom(node, source, CONSTANTS.MEMBER_RELATION);\r\n                if (tempPath !== undefined) {\r\n                    path = tempPath;\r\n                    if (path !== getContainerNodePath(node)) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return path;\r\n        }\r\n\r\n        function getPropertyCollectionInfo(node, propertyCollectionName, setName, memberPath) {\r\n            var setInfo = getSetInfoByName(node, setName),\r\n                propertyCollectionInfo,\r\n                relid;\r\n\r\n            if (setInfo) {\r\n                if (typeof memberPath === 'string') {\r\n                    relid = getOwnMemberRelId(node, setName, memberPath);\r\n                    propertyCollectionInfo = relid && setInfo[relid] && setInfo[relid][propertyCollectionName];\r\n                } else {\r\n                    propertyCollectionInfo = setInfo[propertyCollectionName];\r\n                }\r\n            }\r\n\r\n            return propertyCollectionInfo;\r\n        }\r\n\r\n        function collectOwnPropertyNames(node, propertyCollectionName, setName, memberPath) {\r\n            var propertyCollectionInfo = getPropertyCollectionInfo(node, propertyCollectionName, setName, memberPath);\r\n\r\n            return propertyCollectionInfo ? innerCore.getRawKeys(propertyCollectionInfo) : [];\r\n        }\r\n\r\n        function collectPropertyNames(node, propertyCollectionName, setName, memberPath) {\r\n            var names = [],\r\n                keys,\r\n                relativeMemberPath = null,\r\n                i;\r\n\r\n            do {\r\n                if (relativeMemberPath !== null) {\r\n                    keys = collectOwnPropertyNames(node, propertyCollectionName, setName,\r\n                        self.getPath(node) + relativeMemberPath);\r\n                    if (keys.length === 0) {\r\n                        keys = collectOwnPropertyNames(node, propertyCollectionName, setName, memberPath);\r\n                    } else {\r\n                        memberPath = self.getPath(node) + relativeMemberPath;\r\n                    }\r\n                } else {\r\n                    keys = collectOwnPropertyNames(node, propertyCollectionName, setName, memberPath);\r\n                }\r\n\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (names.indexOf(keys[i]) === -1) {\r\n                        names.push(keys[i]);\r\n                    }\r\n                }\r\n\r\n                relativeMemberPath = typeof memberPath === 'string' ?\r\n                    getRelativeMemberPath(self.getPath(node), memberPath) : null;\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return names;\r\n        }\r\n\r\n        function getOwnPropertyValue(node, propertyCollectionName, propertyName, setName, memberPath) {\r\n            var propertyCollectionInfo = getPropertyCollectionInfo(node, propertyCollectionName, setName, memberPath);\r\n\r\n            return propertyCollectionInfo ? propertyCollectionInfo[propertyName] : undefined;\r\n        }\r\n\r\n        function getPropertyValue(node, propertyCollectionName, propertyName, setName, memberPath) {\r\n            var value,\r\n                relativeMemberPath = null;\r\n\r\n            do {\r\n                if (relativeMemberPath !== null) {\r\n                    value = getOwnPropertyValue(node, propertyCollectionName, propertyName, setName,\r\n                        self.getPath(node) + relativeMemberPath);\r\n                    if (value === undefined) {\r\n                        value = getOwnPropertyValue(node, propertyCollectionName, propertyName, setName, memberPath);\r\n                    } else {\r\n                        memberPath = self.getPath(node) + relativeMemberPath;\r\n                    }\r\n                } else {\r\n                    value = getOwnPropertyValue(node, propertyCollectionName, propertyName, setName, memberPath);\r\n                }\r\n                if (value !== undefined) {\r\n                    return value;\r\n                }\r\n\r\n                relativeMemberPath = typeof memberPath === 'string' ?\r\n                    getRelativeMemberPath(self.getPath(node), memberPath) : null;\r\n                node = self.getBase(node);\r\n            } while (node);\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function createSetOnDemand(node, setName) {\r\n            //the function checks if there is no set defined on the node's level and create it\r\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY);\r\n            if (innerCore.getOwnPointerPath(setsNode, setName) === undefined) {\r\n                self.createSet(node, setName);\r\n            }\r\n        }\r\n\r\n        function loadNodesOfPaths(root, paths) {\r\n            var nodes = [],\r\n                i,\r\n                rootHash = self.getHash(root);\r\n\r\n            return TASYNC.call(function () {\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    nodes[i] = self.loadByPath(root, paths[i]);\r\n                }\r\n                return TASYNC.call(function (n) {\r\n                    var newn = [];\r\n                    for (var i = 0; i < n.length; i++) {\r\n                        if (n[i] !== null) {\r\n                            newn.push(n[i]);\r\n                        }\r\n                    }\r\n                    return newn;\r\n                }, TASYNC.lift(nodes));\r\n            }, self.loadPaths(rootHash, paths));\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.getCollectionNames = function (node) {\r\n            var result = innerCore.getCollectionNames(node),\r\n                i;\r\n\r\n            for (i = 0; i < result.length; i++) {\r\n                // The member collection is coming from being a member of a set and is not a defined relationship.\r\n                if (result[i] === CONSTANTS.MEMBER_RELATION) {\r\n                    result.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.getSetNames = function (node) {\r\n            return collectSetNames(node);\r\n        };\r\n\r\n        this.getOwnSetNames = function (node) {\r\n            return collectOwnSetNames(node);\r\n        };\r\n\r\n        this.createSet = function (node, setName) {\r\n            var setNode = getSetNodeByName(node, setName);\r\n            innerCore.setPointer(innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY), setName, null);\r\n            // Ensure the set-node is not deleted at persist.\r\n            innerCore.setRegistry(setNode, '_', '_');\r\n            setModified(node);\r\n        };\r\n\r\n        this.deleteSet = function (node, setName) {\r\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY),\r\n                setNode = innerCore.getChild(setsNode, setName);\r\n\r\n            innerCore.deletePointer(setsNode, setName);\r\n            innerCore.deleteNode(setNode, true);\r\n            setModified(node);\r\n        };\r\n\r\n        this.renameSet = function (node, oldName, newName) {\r\n            var setsNode = innerCore.getChild(node, CONSTANTS.ALL_SETS_PROPERTY),\r\n                setNode = innerCore.getChild(setsNode, oldName),\r\n                ownSetNames = self.getOwnSetNames(node);\r\n\r\n            if (ownSetNames.indexOf(newName) !== -1) {\r\n                self.deleteSet(node, newName);\r\n            }\r\n            innerCore.renamePointer(setsNode, oldName, newName);\r\n            innerCore.moveNode(setNode, setsNode, undefined, newName);\r\n            setModified(node);\r\n        };\r\n\r\n        this.isMemberOf = function (node) {\r\n            //TODO we should find a proper way to do this - or at least some support from lower layers would be fine\r\n            var coll = self.getCollectionPaths(node, CONSTANTS.MEMBER_RELATION);\r\n            var sets = {};\r\n            for (var i = 0; i < coll.length; i++) {\r\n                var pathArray = coll[i].split('/');\r\n                if (pathArray.indexOf(CONSTANTS.META_NODE) === -1) {\r\n                    //now we simply skip META sets...\r\n                    var index = pathArray.indexOf(CONSTANTS.ALL_SETS_PROPERTY);\r\n                    if (index > 0 && pathArray.length > index + 1) {\r\n                        //otherwise it is not a real set\r\n                        var ownerPath = pathArray.slice(0, index).join('/');\r\n                        if (sets[ownerPath] === undefined) {\r\n                            sets[ownerPath] = [];\r\n                        }\r\n                        sets[ownerPath].push(pathArray[index + 1]);\r\n                    }\r\n                }\r\n            }\r\n            return sets;\r\n        };\r\n\r\n        this.isFullyOverriddenMember = function (node, setName, memberPath) {\r\n            var setNames = collectSetNames(node),\r\n                ownRelId,\r\n                baseRelId;\r\n\r\n            if (setNames.indexOf(setName) === -1) {\r\n                return false;\r\n            }\r\n\r\n            if (innerCore.getBase(node) === null) {\r\n                return false;\r\n            }\r\n\r\n            ownRelId = getMemberRelId(node, setName, memberPath);\r\n            baseRelId = getMemberRelId(innerCore.getBase(node), setName, memberPath);\r\n\r\n            if (ownRelId && baseRelId && ownRelId !== baseRelId) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getMemberPaths = function (node, setName) {\r\n            var memberRelids = collectInternalMemberRelids(node, setName),\r\n                //pathPrefix = '/' + CONSTANTS.ALL_SETS_PROPERTY + '/' + setName + '/',\r\n                i, path,\r\n                memberPaths = [];\r\n            for (i = 0; i < memberRelids.length; i += 1) {\r\n                path = collectMemberPath(node, setName, memberRelids[i]);\r\n                if (path !== undefined && memberPaths.indexOf(path) === -1) { //null and '' are valid targets\r\n                    memberPaths.push(path);\r\n                }\r\n            }\r\n            return memberPaths;\r\n        };\r\n\r\n        this.getOwnMemberPaths = function (node, setName) {\r\n            var setInfo = getSetInfoByName(node, setName),\r\n                relids = setInfo ? self.getRawKeys(setInfo, self.isValidRelid) : [],\r\n                allPaths = self.getMemberPaths(node, setName),\r\n                paths = [],\r\n                i;\r\n\r\n            for (i = 0; i < allPaths.length; i += 1) {\r\n                if (relids.indexOf(getMemberRelId(node, setName, allPaths[i])) !== -1) {\r\n                    paths.push(allPaths[i]);\r\n                }\r\n            }\r\n\r\n            return paths;\r\n        };\r\n\r\n        this.delMember = function (node, setName, memberPath) {\r\n            var setMemberNode;\r\n\r\n            setMemberNode = getOwnSetMemberNode(node, setName, memberPath);\r\n            if (setMemberNode) {\r\n                innerCore.deleteNode(setMemberNode, true);\r\n            }\r\n        };\r\n\r\n        this.addMember = function (node, setName, member) {\r\n            var setNode = getSetNodeByName(node, setName),\r\n                setMemberRelId = getMemberRelId(node, setName, self.getPath(member)),\r\n                setMemberNode;\r\n\r\n            if (setMemberRelId === null) {\r\n                createSetOnDemand(node, setName);\r\n                setMemberNode = innerCore.createChild(setNode, CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH + 1);\r\n            } else if (!self.isFullyOverriddenMember(node, setName, self.getPath(member))) {\r\n                //it was an inherited member, now we override it\r\n                // TODO: We pin down the expected behavior here..\r\n                setMemberNode = innerCore.copyNode(innerCore.getChild(setNode, setMemberRelId),\r\n                    setNode, CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH + 1);\r\n                innerCore.deleteNode(innerCore.getChild(setNode, setMemberRelId), true);\r\n            }\r\n\r\n            if (setMemberNode) {\r\n                innerCore.setPointer(setMemberNode, CONSTANTS.MEMBER_RELATION, member);\r\n\r\n                // Ensure the member-node entry is not deleted at persist.\r\n                innerCore.setRegistry(setMemberNode, '_', '_');\r\n                setModified(node);\r\n            } else {\r\n                logger.warn('member already in set');\r\n            }\r\n        };\r\n\r\n        this.getMemberAttributeNames = function (node, setName, memberPath) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return collectPropertyNames(node, CONSTANTS.ATTRIBUTES_PROPERTY, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberOwnAttributeNames = function (node, setName, memberPath) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return collectOwnPropertyNames(node, CONSTANTS.ATTRIBUTES_PROPERTY, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberAttribute = function (node, setName, memberPath, attrName) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return getPropertyValue(node, CONSTANTS.ATTRIBUTES_PROPERTY, attrName, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberOwnAttribute = function (node, setName, memberPath, attrName) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return getOwnPropertyValue(node, CONSTANTS.ATTRIBUTES_PROPERTY, attrName, setName, memberPath);\r\n        };\r\n\r\n        this.setMemberAttribute = function (node, setName, memberPath, attrName, attrValue) {\r\n            ASSERT(attrValue !== undefined);\r\n            var setMemberNode = getSetMemberNode(node, setName, memberPath);\r\n\r\n            if (setMemberNode) {\r\n                innerCore.setAttribute(setMemberNode, attrName, attrValue);\r\n                setModified(node);\r\n            }\r\n        };\r\n\r\n        this.delMemberAttribute = function (node, setName, memberPath, attrName) {\r\n            var setMemberNode = getOwnSetMemberNode(node, setName, memberPath);\r\n\r\n            if (setMemberNode) {\r\n                innerCore.delAttribute(setMemberNode, attrName);\r\n            }\r\n        };\r\n\r\n        this.getMemberRegistryNames = function (node, setName, memberPath) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return collectPropertyNames(node, CONSTANTS.REGISTRY_PROPERTY, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberOwnRegistryNames = function (node, setName, memberPath) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return collectOwnPropertyNames(node, CONSTANTS.REGISTRY_PROPERTY, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberRegistry = function (node, setName, memberPath, regName) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return getPropertyValue(node, CONSTANTS.REGISTRY_PROPERTY, regName, setName, memberPath);\r\n        };\r\n\r\n        this.getMemberOwnRegistry = function (node, setName, memberPath, regName) {\r\n            ASSERT(typeof memberPath === 'string');\r\n            return getOwnPropertyValue(node, CONSTANTS.REGISTRY_PROPERTY, regName, setName, memberPath);\r\n        };\r\n\r\n        this.setMemberRegistry = function (node, setName, memberPath, regName, regValue) {\r\n            ASSERT(regValue !== undefined);\r\n            var setMemberNode = getSetMemberNode(node, setName, memberPath);\r\n\r\n            if (setMemberNode) {\r\n                innerCore.setRegistry(setMemberNode, regName, regValue);\r\n                setModified(node);\r\n            }\r\n        };\r\n\r\n        this.delMemberRegistry = function (node, setName, memberPath, regName) {\r\n            var setMemberNode = getOwnSetMemberNode(node, setName, memberPath);\r\n\r\n            if (setMemberNode) {\r\n                innerCore.delRegistry(setMemberNode, regName);\r\n            }\r\n        };\r\n\r\n        this.getSetAttributeNames = function (node, setName) {\r\n            return collectPropertyNames(node, CONSTANTS.ATTRIBUTES_PROPERTY, setName);\r\n        };\r\n\r\n        this.getOwnSetAttributeNames = function (node, setName) {\r\n            return collectOwnPropertyNames(node, CONSTANTS.ATTRIBUTES_PROPERTY, setName);\r\n        };\r\n\r\n        this.getSetAttribute = function (node, setName, attrName) {\r\n            return getPropertyValue(node, CONSTANTS.ATTRIBUTES_PROPERTY, attrName, setName);\r\n        };\r\n\r\n        this.getOwnSetAttribute = function (node, setName, attrName) {\r\n            return getOwnPropertyValue(node, CONSTANTS.ATTRIBUTES_PROPERTY, attrName, setName);\r\n        };\r\n\r\n        this.setSetAttribute = function (node, setName, attrName, attrValue) {\r\n            if (hasSet(node, setName)) {\r\n                self.setAttribute(getSetNodeByName(node, setName), attrName, attrValue);\r\n                setModified(node);\r\n            }\r\n        };\r\n\r\n        this.delSetAttribute = function (node, setName, attrName) {\r\n            var setInfo = getSetInfoByName(node, setName);\r\n            if (setInfo) {\r\n                self.delAttribute(getSetNodeByName(node, setName), attrName);\r\n            }\r\n        };\r\n\r\n        this.getSetRegistryNames = function (node, setName) {\r\n            return collectPropertyNames(node, CONSTANTS.REGISTRY_PROPERTY, setName);\r\n        };\r\n\r\n        this.getOwnSetRegistryNames = function (node, setName) {\r\n            return collectOwnPropertyNames(node, CONSTANTS.REGISTRY_PROPERTY, setName);\r\n        };\r\n\r\n        this.getSetRegistry = function (node, setName, regName) {\r\n            return getPropertyValue(node, CONSTANTS.REGISTRY_PROPERTY, regName, setName);\r\n        };\r\n\r\n        this.getOwnSetRegistry = function (node, setName, regName) {\r\n            return getOwnPropertyValue(node, CONSTANTS.REGISTRY_PROPERTY, regName, setName);\r\n        };\r\n\r\n        this.setSetRegistry = function (node, setName, regName, regValue) {\r\n            if (hasSet(node, setName)) {\r\n                self.setRegistry(getSetNodeByName(node, setName), regName, regValue);\r\n                setModified(node);\r\n            }\r\n        };\r\n\r\n        this.delSetRegistry = function (node, setName, regName) {\r\n            var setInfo = getSetInfoByName(node, setName);\r\n            if (setInfo) {\r\n                self.delRegistry(getSetNodeByName(node, setName), regName);\r\n            }\r\n        };\r\n\r\n        this.loadMembers = function (node, setName) {\r\n            return loadNodesOfPaths(self.getRoot(node), self.getMemberPaths(node, setName));\r\n        };\r\n\r\n        this.loadOwnMembers = function (node, setName) {\r\n            return loadNodesOfPaths(self.getRoot(node), self.getOwnMemberPaths(node, setName));\r\n        };\r\n\r\n        // it only works for own members\r\n        // if the target set has the same member, it will be removed first\r\n        this.moveMember = function (node, memberPath, oldSetName, newSetName) {\r\n            var oldSetNode = getSetNodeByName(node, oldSetName),\r\n                oldMemberRelid = getOwnMemberRelId(node, oldSetName, memberPath),\r\n                oldMemberNode,\r\n                setNames = self.getSetNames(node),\r\n                newMemberRelid = getOwnMemberRelId(node, newSetName, memberPath),\r\n                newSetNode;\r\n\r\n            ASSERT(oldMemberRelid !== null, 'Only own member can be moved!');\r\n\r\n            if (setNames.indexOf(newSetName) === -1) {\r\n                self.createSet(node, newSetName);\r\n            }\r\n\r\n            oldMemberNode = self.getChild(oldSetNode, oldMemberRelid);\r\n            newSetNode = getSetNodeByName(node, newSetName);\r\n\r\n            if (newMemberRelid !== null) {\r\n                self.delMember(node, newSetName, memberPath);\r\n            }\r\n\r\n            self.moveNode(oldMemberNode, newSetNode);\r\n\r\n            if (self.getOwnMemberPaths(node, oldSetName).length === 0) {\r\n                self.deleteSet(node, oldSetName);\r\n            }\r\n        };\r\n        //</editor-fold>\r\n    }\r\n\r\n    return SetCore;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint no-bitwise: 0*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/guidcore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/regexp',\r\n    'common/util/random',\r\n    'common/core/constants',\r\n], function (ASSERT, TASYNC, REGEXP, RANDOM, CONSTANTS) {\r\n\r\n    'use strict';\r\n\r\n    var relidToInteger = RANDOM.relidToInteger,\r\n        GUID = RANDOM.generateGuid;\r\n\r\n    function GuidCore(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized GuidCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function toInternalGuid(myGuid) {\r\n            return myGuid.replace(/-/g, '');\r\n        }\r\n\r\n        function toExternalGuid(myGuid) {\r\n            return myGuid.substr(0, 8) + '-' + myGuid.substr(8, 4) + '-' +\r\n                myGuid.substr(12, 4) + '-' + myGuid.substr(16, 4) + '-' + myGuid.substr(20);\r\n        }\r\n\r\n        function guidToArray(guid) {\r\n            if (guid === null || guid === undefined) {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0];\r\n            }\r\n            var array = new Array(8);\r\n            for (var i = 0; i < guid.length / 4; i += 1) {\r\n                array[i] = parseInt(guid.substr(4 * i, 4), 16);\r\n            }\r\n            return array;\r\n        }\r\n\r\n        function getRelidGuid(node) {\r\n            //TODO we always should know what structure we should expect as a relid -\r\n            // now we think it is a number so it can be converted to 0xsomething\r\n            var relid = self.getRelid(node);\r\n            //relid = Number(relid);\r\n            relid = relidToInteger(relid);\r\n            if (relid === 'NaN') {\r\n                return null;\r\n            }\r\n\r\n            relid = relid.toString(16);\r\n\r\n            //now we should fill up with 0's in the beggining\r\n            while (relid.length < 32) {\r\n                relid = relid + '0';\r\n            }\r\n            return relid;\r\n        }\r\n\r\n        function xorGuids(a, b) {\r\n            var arrayA = guidToArray(a);\r\n            var arrayB = guidToArray(b);\r\n\r\n            ASSERT(arrayA.length === arrayB.length);\r\n\r\n            var arrayOut = [];\r\n            for (var i = 0; i < arrayA.length; i++) {\r\n                arrayOut.push(arrayA[i] ^ arrayB[i]);\r\n            }\r\n            for (i = 0; i < arrayOut.length; i++) {\r\n                arrayOut[i] = Number(arrayOut[i]).toString(16);\r\n                var difi = 4 - arrayOut[i].length;\r\n                while (difi > 0) {\r\n                    arrayOut[i] = '0' + arrayOut[i];\r\n                    difi--;\r\n                }\r\n            }\r\n            return arrayOut.join('');\r\n        }\r\n\r\n        function setDataGuid(node, guid) {\r\n            self.setAttribute(node, CONSTANTS.OWN_GUID,\r\n                xorGuids(\r\n                    toInternalGuid(guid),\r\n                    xorGuids(\r\n                        getRelidGuid(node),\r\n                        toInternalGuid(\r\n                            self.getGuid(\r\n                                self.getParent(node)\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.createNode = function (parameters) {\r\n            parameters = parameters || {};\r\n\r\n            var guid = parameters.guid || GUID(),\r\n                node;\r\n\r\n            ASSERT(REGEXP.GUID.test(guid));\r\n\r\n            node = innerCore.createNode(parameters);\r\n\r\n            setDataGuid(node, guid);\r\n\r\n            return node;\r\n        };\r\n\r\n        this.moveNode = function (node, parent) {\r\n            var oldGuid = self.getGuid(node);\r\n\r\n            node = innerCore.moveNode(node, parent);\r\n\r\n            setDataGuid(node, oldGuid);\r\n\r\n            return node;\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.getGuid = function (node) {\r\n            if (node) {\r\n                return self.getDeducedGuid(node, self.getGuid(self.getParent(node)));\r\n            } else {\r\n                return CONSTANTS.NULL_GUID;\r\n            }\r\n        };\r\n\r\n        this.setGuid = function (node, guid) {\r\n            ASSERT(REGEXP.GUID.test(guid));\r\n            return TASYNC.call(function (children) {\r\n                var i,\r\n                    childrenGuids = [];\r\n\r\n                //save children guids\r\n                for (i = 0; i < children.length; i += 1) {\r\n                    childrenGuids.push(self.getGuid(children[i]));\r\n                }\r\n\r\n                //setting own dataGuid\r\n                setDataGuid(node, guid);\r\n\r\n                //changing children data guids\r\n                for (i = 0; i < children.length; i += 1) {\r\n                    setDataGuid(children[i], childrenGuids[i]);\r\n                }\r\n            }, self.loadChildren(node));\r\n        };\r\n\r\n        this.getDataGuid = function (node) {\r\n            return toExternalGuid(self.getAttribute(node, CONSTANTS.OWN_GUID));\r\n        };\r\n\r\n        this.getDeducedGuid = function (node, baseGuid) {\r\n            if (node && REGEXP.GUID.test(baseGuid)) {\r\n                return toExternalGuid(\r\n                    xorGuids(\r\n                        getRelidGuid(node),\r\n                        xorGuids(\r\n                            self.getAttribute(node, CONSTANTS.OWN_GUID),\r\n                            toInternalGuid(baseGuid)\r\n                        )\r\n                    )\r\n                );\r\n            } else {\r\n                return CONSTANTS.NULL_GUID;\r\n            }\r\n        };\r\n\r\n        this.copyNode = function (node, parent) {\r\n            var newNode = innerCore.copyNode(node, parent);\r\n\r\n            // Generate new guid at copy #1344\r\n            setDataGuid(newNode, GUID());\r\n\r\n            return newNode;\r\n        };\r\n\r\n        this.copyNodes = function (nodes, parent) {\r\n            var newNodes = innerCore.copyNodes(nodes, parent),\r\n                i;\r\n\r\n            // Generate new guids at copy #1344\r\n            for (i = 0; i < newNodes.length; i += 1) {\r\n                setDataGuid(newNodes[i], GUID());\r\n            }\r\n\r\n            return newNodes;\r\n        };\r\n        //</editor-fold>\r\n    }\r\n\r\n    return GuidCore;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/nullpointercore',['common/core/CoreAssert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\r\n    'use strict';\r\n\r\n    function NullPointerCore(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized NullPointerCore');\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.setPointer = function (node, name, target) {\r\n            if (target === null) {\r\n                var nullChild = innerCore.getChild(node, CONSTANTS.NULLPTR_RELID);\r\n                innerCore.setAttribute(nullChild, 'name', CONSTANTS.NULLPTR_NAME);\r\n                innerCore.setPointer(node, name, nullChild);\r\n            } else {\r\n                innerCore.setPointer(node, name, target);\r\n            }\r\n        };\r\n\r\n        this.getPointerPath = function (node, name) {\r\n            var path = innerCore.getPointerPath(node, name);\r\n            if (path && path.indexOf(CONSTANTS.NULLPTR_RELID) !== -1) {\r\n                return null;\r\n            } else {\r\n                return path;\r\n            }\r\n        };\r\n\r\n        this.loadPointer = function (node, name) {\r\n            var path = self.getPointerPath(node, name);\r\n            if (path === null) {\r\n                return null;\r\n            } else {\r\n                return innerCore.loadPointer(node, name);\r\n            }\r\n        };\r\n\r\n        this.renamePointer = function (node, oldName, newName) {\r\n            var oldPath = self.getPointerPath(node, oldName);\r\n            if (oldPath === null) {\r\n                self.deletePointer(node, oldName);\r\n                self.setPointer(node, newName, null);\r\n            } else {\r\n                innerCore.renamePointer(node, oldName, newName);\r\n            }\r\n        };\r\n\r\n        //</editor-fold>\r\n\r\n        return self;\r\n    }\r\n\r\n    return NullPointerCore;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/core/coreunwrap',['common/core/CoreAssert', 'common/core/tasync'], function (ASSERT, TASYNC) {\r\n    'use strict';\r\n\r\n    // ----------------- CoreUnwrap -----------------\r\n\r\n    var CoreUnwrap = function (innercore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n        var logger = options.logger.fork('coreunwrap');\r\n\r\n        function checkNode(node) {\r\n            if (node === null || innercore.isValidNode(node)) {\r\n                return node;\r\n            } else {\r\n                throw new Error('Invalid result node');\r\n            }\r\n        }\r\n\r\n        function checkNodes(nodes) {\r\n            ASSERT(nodes instanceof Array);\r\n\r\n            var i;\r\n            for (i = 0; i < nodes.length; ++i) {\r\n                if (!innercore.isValidNode(nodes[i])) {\r\n                    throw new Error('Invalid result node array');\r\n                }\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n\r\n        // copy all operations\r\n        var core = {};\r\n        for (var key in innercore) {\r\n            core[key] = innercore[key];\r\n        }\r\n        logger.debug('initialized');\r\n        core.loadRoot = TASYNC.unwrap(innercore.loadRoot);\r\n        //core.persist = TASYNC.unwrap(oldcore.persist);\r\n\r\n        // core.loadChild = TASYNC.unwrap(oldcore.loadChild);\r\n        core.loadChild = TASYNC.unwrap(function (node, relid) {\r\n            return TASYNC.call(checkNode, innercore.loadChild(node, relid));\r\n        });\r\n\r\n        // core.loadByPath = TASYNC.unwrap(oldcore.loadByPath);\r\n        core.loadByPath = TASYNC.unwrap(function (node, path) {\r\n            return TASYNC.call(checkNode, innercore.loadByPath(node, path));\r\n        });\r\n\r\n        // core.loadChildren = TASYNC.unwrap(oldcore.loadChildren);\r\n        core.loadChildren = TASYNC.unwrap(function (node) {\r\n            return TASYNC.call(checkNodes, innercore.loadChildren(node));\r\n        });\r\n\r\n        // core.loadOwnChildren = TASYNC.unwrap(oldcore.loadOwnChildren);\r\n        core.loadOwnChildren = TASYNC.unwrap(function (node) {\r\n            return TASYNC.call(checkNodes, innercore.loadOwnChildren(node));\r\n        });\r\n\r\n        core.loadPointer = TASYNC.unwrap(innercore.loadPointer);\r\n        core.loadCollection = TASYNC.unwrap(innercore.loadCollection);\r\n\r\n        core.loadSubTree = TASYNC.unwrap(innercore.loadSubTree);\r\n        core.loadOwnSubTree = TASYNC.unwrap(innercore.loadOwnSubTree);\r\n        core.loadTree = TASYNC.unwrap(innercore.loadTree);\r\n        core.traverse = TASYNC.unwrap(innercore.traverse);\r\n\r\n        core.setGuid = TASYNC.unwrap(innercore.setGuid);\r\n\r\n        //core diff async functions\r\n        if (typeof innercore.generateTreeDiff === 'function') {\r\n            core.generateTreeDiff = TASYNC.unwrap(innercore.generateTreeDiff);\r\n        }\r\n\r\n        if (typeof innercore.generateLightTreeDiff === 'function') {\r\n            core.generateLightTreeDiff = TASYNC.unwrap(innercore.generateLightTreeDiff);\r\n        }\r\n\r\n        if (typeof innercore.applyTreeDiff === 'function') {\r\n            core.applyTreeDiff = TASYNC.unwrap(innercore.applyTreeDiff);\r\n        }\r\n\r\n        //library functions\r\n\r\n        core.addLibrary = TASYNC.unwrap(innercore.addLibrary);\r\n        core.updateLibrary = TASYNC.unwrap(innercore.updateLibrary);\r\n\r\n        // core.loadInstances = TASYNC.unwrap(oldcore.loadInstances);\r\n        core.loadInstances = TASYNC.unwrap(function (node) {\r\n            return TASYNC.call(checkNodes, innercore.loadInstances(node));\r\n        });\r\n\r\n        core.loadMembers = TASYNC.unwrap(innercore.loadMembers);\r\n        core.loadOwnMembers = TASYNC.unwrap(innercore.loadOwnMembers);\r\n\r\n        return core;\r\n    };\r\n\r\n    return CoreUnwrap;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * CoreIllegalOperationError should be thrown if the set of input parameters are correct but the request\r\n * or the operation do not apply to the current context. Here we followed the basic javascript principles\r\n * in terms that whenever the user try to access a 'field' of a 'field' that does not exist, we throw.\r\n * For example if someone tries to get the member attributes of an non-existing member.\r\n * Trying to modify read-only nodes are captured within this category.\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/CoreIllegalOperationError',[], function () {\r\n    'use strict';\r\n    function CoreIllegalOperationError() {\r\n        var error = Error.apply(this, arguments);\r\n        error.name = this.name = 'CoreIllegalOperationError';\r\n        this.message = error.message;\r\n        this.stack = error.stack;\r\n\r\n        return error;\r\n    }\r\n\r\n    CoreIllegalOperationError.prototype = Object.create(Error.prototype);\r\n    CoreIllegalOperationError.prototype.constructor = CoreIllegalOperationError;\r\n\r\n    return CoreIllegalOperationError;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/core/coretype',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/core/constants',\r\n    'common/core/CoreIllegalOperationError'\r\n], function (ASSERT, TASYNC, CONSTANTS, CoreIllegalOperationError) {\r\n    'use strict';\r\n\r\n    var CoreType = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        // //isPointerName should be removed from API at this level\r\n        // delete self.isPointerName;\r\n\r\n        logger.debug('initialized CoreType');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function test(text, cond) {\r\n            if (!cond) {\r\n                throw new Error(text);\r\n            }\r\n        }\r\n\r\n        function isFalseNode(node) {\r\n            //TODO this hack should be removed, but now it seems just fine :)\r\n            return innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER) === undefined;\r\n        }\r\n\r\n        function loadRoot2(node) {\r\n            ASSERT(node.base === undefined || node.base === null);\r\n            //kecso - TODO it should be undefined, but maybe because of the cache it can be null\r\n\r\n            node.base = null;\r\n            return node;\r\n        }\r\n\r\n        function loadBase2(node, target) {\r\n            if (node.base !== null && typeof node.base === 'object' &&\r\n                (innerCore.getPath(node.base) === innerCore.getPath(target))) {\r\n                //TODO somehow the object already loaded properly and we do no know about it!!!\r\n                return node;\r\n            } else {\r\n                ASSERT(node.base === undefined || node.base === null); //kecso\r\n\r\n                if (target === null) {\r\n                    // At this point the base node should be a valid node\r\n                    logger.warn('node [' + innerCore.getPath(node) +\r\n                        '] removed due to missing base in inheritance chain');\r\n                    innerCore.deleteNode(node);\r\n                    //core.persist(core.getRoot(node));\r\n                    return null;\r\n                }\r\n\r\n                node.base = target;\r\n\r\n                if (!target) {\r\n                    logger.error('No target in loadBase2', target);\r\n                }\r\n\r\n                return node;\r\n            }\r\n        }\r\n\r\n        function loadBase(node) {\r\n            var path = innerCore.getPath(node);\r\n            ASSERT(node === null || node.base === undefined || typeof node.base === 'object');\r\n\r\n            if (node.base === undefined) {\r\n                if (self.isEmpty(node)) {\r\n                    //empty nodes do not have a base\r\n                    node.base = null;\r\n                    return node;\r\n                } else if (isFalseNode(node)) {\r\n                    innerCore.deleteNode(node);\r\n                    //core.persist(core.getRoot(node));\r\n                    //TODO a notification should be generated towards the user\r\n                    logger.warn('node [' + path + '] removed due to missing base');\r\n\r\n                    //TODO check if some identification can be passed\r\n                    return null;\r\n                } else {\r\n                    var basePath = innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER);\r\n                    ASSERT(basePath !== undefined);\r\n                    if (basePath === null) {\r\n                        node.base = null;\r\n                        return node;\r\n                    } else if (self.isContainerPath(basePath, path)) {\r\n                        //contained base error\r\n                        logger.error('node [' + path + '] contains its own base!');\r\n                        innerCore.deleteNode(node);\r\n                        //core.persist(core.getRoot(node));\r\n                        return null;\r\n                    } else {\r\n                        return TASYNC.call(loadBase2, node, self.loadByPath(self.getRoot(node), basePath));\r\n                    }\r\n                }\r\n            } else {\r\n                //TODO can the base change at this point???\r\n                return node;\r\n            }\r\n        }\r\n\r\n        function loadChild(node, relid) {\r\n            var child = null,\r\n                base = self.getBase(node),\r\n                basechild = null;\r\n            if (base) {\r\n                //the parent is inherited\r\n                if (self.getChildrenRelids(base, true)[relid]) {\r\n                    //inherited child\r\n                    if (innerCore.getChildrenRelids(node).indexOf(relid) !== -1) {\r\n                        //but it is overwritten so we should load it\r\n                        child = innerCore.loadChild(node, relid);\r\n                    }\r\n                    basechild = self.loadChild(base, relid);\r\n                    return TASYNC.call(function (b, c, n, r) {\r\n                        if (c) {\r\n                            child = c;\r\n                            child.base = b;\r\n                            return child;\r\n                        } else {\r\n                            child = innerCore.getChild(n, r);\r\n                            self.setHashed(child, true, true);\r\n                            child.base = b;\r\n\r\n                            return child;\r\n                        }\r\n                    }, basechild, child, node, relid);\r\n                }\r\n            }\r\n            //normal child - as every node should have a base, it is normally mean a direct child of the ROOT\r\n            if (self.getChildrenRelids(node, true)[relid] !== true) {\r\n                return null;\r\n            }\r\n\r\n            return TASYNC.call(loadBase, innerCore.loadChild(node, relid));\r\n        }\r\n\r\n        function loadDescendantByPath(node, pathArray, index) {\r\n            if (node === null || index === pathArray.length) {\r\n                return node;\r\n            }\r\n\r\n            var child = self.loadChild(node, pathArray[index]);\r\n            return TASYNC.call(loadDescendantByPath, child, pathArray, index + 1);\r\n        }\r\n\r\n        function isInheritedChild(node) {\r\n            var parent = self.getParent(node),\r\n                base = self.getBase(node),\r\n                parentBase = parent ? self.getBase(parent) : null,\r\n                baseParent = base ? self.getParent(base) : null;\r\n\r\n            if (baseParent && parentBase && self.getPath(baseParent) === self.getPath(parentBase)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getInstanceRoot(node) {\r\n\r\n            while (isInheritedChild(node)) {\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        /**\r\n         * This function collects the inherited collection names.\r\n         * Although there is no collection inheritance, we know that if a model is instantiated its internal structure\r\n         * is not duplicated or no new data will be created. This means that in a sense, to keep the prototypical\r\n         * inheritance correct, we need to build the internal relations on the fly. This means that whenever the user\r\n         * has a question about the inverse relations of an internal part of the instance, we have to check the\r\n         * prototype for such 'internal' relations and provide them - like in case of inherited attributes.\r\n         * The function goes up on the inheritance chain of the questioned node.\r\n         * At every step, it searches the root of instantiation (the node that is the instance) and collect inverse\r\n         * relation names that exist in the prototype structure and has purely internal endpoints.\r\n         *\r\n         * @param node - the node in question\r\n         * @returns {Array} - the list of names of relations that has the node as target\r\n         */\r\n        function getInheritedCollectionNames(node) {\r\n            var names = [],\r\n                startNode = node,\r\n                actualNode = node,\r\n                endNode,\r\n                inverseOverlays,\r\n                name,\r\n                target;\r\n\r\n            while (startNode) {\r\n                actualNode = self.getBase(startNode);\r\n                endNode = self.getBase(getInstanceRoot(startNode));\r\n                target = '';\r\n                if (actualNode && endNode) {\r\n                    while (actualNode && actualNode !== self.getParent(endNode)) {\r\n                        inverseOverlays = innerCore.getInverseOverlayOfNode(actualNode);\r\n                        if (inverseOverlays[target]) {\r\n                            for (name in inverseOverlays[target]) {\r\n                                if (names.indexOf(name) === -1) {\r\n                                    names.push(name);\r\n                                }\r\n                            }\r\n                        }\r\n                        target = CONSTANTS.PATH_SEP + self.getRelid(actualNode) + target;\r\n                        actualNode = self.getParent(actualNode);\r\n                    }\r\n                }\r\n                startNode = self.getBase(startNode);\r\n            }\r\n\r\n            return names;\r\n        }\r\n\r\n        /**\r\n         * This function gathers the paths of the nodes that are pointing to the questioned node. The set of relations\r\n         * that are checked is the 'inherited' inverse relations.\r\n         *\r\n         * The method of this function is identical to getInheritedCollectionNames, except this function collects the\r\n         * sources of the given relations and not just the name of all such relation. To return a correct path (as\r\n         * the data exists in some bases of the actual nodes) the function always convert it back to the place of\r\n         * inquiry.\r\n         * @param node - the node in question\r\n         * @param name - name of the relation that we are interested in\r\n         * @returns {Array} - list of paths of sources of inherited relations by the given name\r\n         */\r\n        function getInheritedCollectionPaths(node, name) {\r\n            var paths = [],\r\n                startNode = node,\r\n                actualNode = node,\r\n                endNode,\r\n                prefixNode,\r\n                i,\r\n                inverseOverlays,\r\n                target;\r\n\r\n            while (startNode) {\r\n                actualNode = self.getBase(startNode);\r\n                endNode = self.getBase(getInstanceRoot(startNode));\r\n                target = '';\r\n                if (actualNode && endNode) {\r\n                    prefixNode = node;\r\n                    while (actualNode && actualNode !== self.getParent(endNode)) {\r\n                        inverseOverlays = innerCore.getInverseOverlayOfNode(actualNode);\r\n                        if (inverseOverlays[target] && inverseOverlays[target][name]) {\r\n                            for (i = 0; i < inverseOverlays[target][name].length; i += 1) {\r\n                                paths.push(self.joinPaths(self.getPath(prefixNode), inverseOverlays[target][name][i]));\r\n                            }\r\n                        }\r\n                        target = CONSTANTS.PATH_SEP + self.getRelid(actualNode) + target;\r\n                        actualNode = self.getParent(actualNode);\r\n                        prefixNode = self.getParent(prefixNode);\r\n                    }\r\n                }\r\n                startNode = self.getBase(startNode);\r\n            }\r\n\r\n            return paths;\r\n        }\r\n\r\n        function isValidNodeThrow(node) {\r\n            test('corerel', innerCore.isValidNode(node));\r\n            test('base', typeof node.base === 'object');\r\n        }\r\n\r\n        // function getProperty(node, name) {\r\n        //     var property;\r\n        //     while (property === undefined && node !== null) {\r\n        //         property = innerCore.getProperty(node, name);\r\n        //         node = self.getBase(node);\r\n        //     }\r\n        //     return property;\r\n        // }\r\n\r\n        function isBase(node, compareNode) {\r\n            while (compareNode) {\r\n                if (compareNode === node) {\r\n                    return true;\r\n                }\r\n\r\n                compareNode = self.getBase(compareNode);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isParent(node, compareNode) {\r\n            while (compareNode) {\r\n                if (compareNode === node) {\r\n                    return true;\r\n                }\r\n\r\n                compareNode = self.getParent(compareNode);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isParentOrBaseRec(node, compareNode, visited, traverseContainment) {\r\n            var comparePath = self.getPath(compareNode);\r\n\r\n            if (traverseContainment) {\r\n                if (visited.containment[comparePath]) {\r\n                    //console.log('breaking recursion', traverseContainment, basePath);\r\n                    return false;\r\n                }\r\n\r\n                visited.containment[comparePath] = true;\r\n                compareNode = self.getParent(compareNode);\r\n            } else {\r\n                if (visited.inheritance[comparePath]) {\r\n                    //console.log('breaking recursion', traverseContainment, basePath);\r\n                    return false;\r\n                }\r\n\r\n                visited.inheritance[comparePath] = true;\r\n                compareNode = self.getBase(compareNode);\r\n            }\r\n\r\n            while (compareNode) {\r\n                //console.log('comparing with node', traverseContainment, basePath);\r\n                if (node === compareNode || isParentOrBaseRec(node, compareNode, visited, !traverseContainment)) {\r\n                    //console.log('Found one!');\r\n                    return true;\r\n                }\r\n\r\n                if (traverseContainment) {\r\n                    compareNode = self.getParent(compareNode);\r\n                } else {\r\n                    compareNode = self.getBase(compareNode);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getBaseAncestor(node, otherNode) {\r\n            var bases = [],\r\n                base;\r\n\r\n            base = node;\r\n            while (base) {\r\n                bases.push(base);\r\n                base = self.getBase(base);\r\n            }\r\n\r\n            base = otherNode;\r\n            while (base) {\r\n                if (bases.indexOf(base) > -1) {\r\n                    return base;\r\n                }\r\n\r\n                base = self.getBase(base);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function childHasSameOrigin(node, otherNode, childRelid) {\r\n            var ancestor = getBaseAncestor(node, otherNode),\r\n                result = false;\r\n\r\n            if (ancestor) {\r\n                result = Object.hasOwn(self.getChildrenRelids(ancestor, true), childRelid);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function processNewRelidLength(node, newMinLength) {\r\n            var currMinLength;\r\n\r\n            if (newMinLength > CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH + 1) {\r\n                logger.debug('Minimum relid length surpassed threshold, not propagating at all', newMinLength);\r\n                return;\r\n            } else if (newMinLength > CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH) {\r\n                newMinLength = CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH;\r\n                logger.debug('Minimum relid length reached threshold, only propagating threshold', newMinLength);\r\n            }\r\n\r\n            node = node.base;\r\n            while (node) {\r\n                currMinLength = innerCore.getProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY) || 0;\r\n                if (currMinLength >= newMinLength) {\r\n                    return;\r\n                }\r\n\r\n                // TODO: Check for library element here??\r\n                innerCore.setProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY, newMinLength);\r\n                node = node.base;\r\n            }\r\n        }\r\n\r\n        function collectInheritanceInternalRelations(sourceRoot, targetRoot) {\r\n            var sourceBases = [],\r\n                sourceBaseInfo = [],\r\n                node, originalNode, nodePath, relPath, originalRelPath,\r\n                targetBase = null,\r\n                targetRelPath = '',\r\n                relationsToCheck, i, index,\r\n                originalSourcePath = self.getPath(sourceRoot),\r\n                originalTargetPath = self.getPath(targetRoot),\r\n                relations = [];\r\n\r\n            node = sourceRoot;\r\n            relPath = '';\r\n            originalNode = sourceRoot;\r\n            originalRelPath = '';\r\n            while (node) {\r\n                while (innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER) === undefined) {\r\n                    relPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node);\r\n                    originalSourcePath = self.getParentPath(originalSourcePath);\r\n                    originalRelPath = CONSTANTS.PATH_SEP + self.getRelid(originalNode) + originalRelPath;\r\n                    originalNode = self.getParent(originalNode);\r\n\r\n                    node = innerCore.getParent(node);\r\n                }\r\n                sourceBases.push(node);\r\n                sourceBaseInfo.push({\r\n                    originalPath: originalSourcePath,\r\n                    relPath: relPath,\r\n                    originalRelPath: originalRelPath\r\n                });\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            node = targetRoot;\r\n            originalNode = targetRoot;\r\n            originalRelPath = '';\r\n            // while (node && targetBase === null) {\r\n            //     while (innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER) === undefined) {\r\n            //         targetRelPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node);\r\n            //         originalTargetPath = self.getParentPath(originalTargetPath);\r\n            //         originalRelPath = CONSTANTS.PATH_SEP + self.getRelid(originalNode) + originalRelPath;\r\n            //         originalNode = self.getParent(originalNode);\r\n            //         node = innerCore.getParent(node);\r\n            //     }\r\n            //     if (sourceBases.indexOf(node) !== -1) {\r\n            //         targetBase = node;\r\n            //     }\r\n            //     node = self.getBase(node);\r\n            // }\r\n            while (innerCore.getPointerPath(node, CONSTANTS.BASE_POINTER) === undefined) {\r\n                targetRelPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node);\r\n                originalTargetPath = self.getParentPath(originalTargetPath);\r\n                originalRelPath = CONSTANTS.PATH_SEP + self.getRelid(originalNode) + originalRelPath;\r\n                originalNode = self.getParent(originalNode);\r\n                node = innerCore.getParent(node);\r\n            }\r\n            if (sourceBases.indexOf(node) !== -1) {\r\n                targetBase = node;\r\n            }\r\n\r\n            if (targetBase === null) {\r\n                return relations;\r\n            }\r\n\r\n            // We know that there is a common base/container that can hold inherited information...\r\n            node = targetBase;\r\n            index = sourceBases.indexOf(node);\r\n\r\n            while (node) {\r\n                relationsToCheck = innerCore.gatherRelationsOfSubtree(node,\r\n                    sourceBaseInfo[index].relPath, targetRelPath);\r\n                nodePath = self.getPath(node);\r\n                for (i = 0; i < relationsToCheck.length; i += 1) {\r\n                    relationsToCheck[i].source =\r\n                        relationsToCheck[i].source.replace(\r\n                            nodePath + sourceBaseInfo[index].relPath,\r\n                            sourceBaseInfo[index].originalPath + sourceBaseInfo[index].originalRelPath);\r\n                    relationsToCheck[i].sourceBase =\r\n                        relationsToCheck[i].sourceBase.replace(\r\n                            nodePath + sourceBaseInfo[index].relPath,\r\n                            sourceBaseInfo[index].originalPath + sourceBaseInfo[index].originalRelPath);\r\n                    relationsToCheck[i].target =\r\n                        relationsToCheck[i].target.replace(\r\n                            nodePath + targetRelPath,\r\n                            originalTargetPath + originalRelPath);\r\n                    relationsToCheck[i].targetBase =\r\n                        relationsToCheck[i].targetBase.replace(\r\n                            nodePath + targetRelPath,\r\n                            originalTargetPath + originalRelPath);\r\n                }\r\n                relations = relationsToCheck.concat(relations);\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            return relations;\r\n        }\r\n\r\n        function getPointerPathFromRec(node, source, name) {\r\n            var path, instanceRootPath, instanceRootBasePath, commonPathInfo;\r\n            if (node === null) {\r\n                return undefined;\r\n            }\r\n\r\n            path = innerCore.getPointerPathFrom(node, source, name);\r\n\r\n            if (path !== undefined) {\r\n                return path;\r\n            }\r\n\r\n            path = getPointerPathFromRec(self.getBase(node), source, name);\r\n\r\n            if (typeof path !== 'string') {\r\n                return path;\r\n            }\r\n\r\n            instanceRootPath = self.getPath(getInstanceRoot(node));\r\n            instanceRootBasePath = self.getPath(self.getBase(getInstanceRoot(node)));\r\n\r\n            commonPathInfo = self.getCommonPathPrefixData(instanceRootBasePath, path);\r\n\r\n            if (commonPathInfo.common === instanceRootBasePath) {\r\n                return instanceRootPath + commonPathInfo.second;\r\n            }\r\n\r\n            return path;\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.isValidNode = function (node) {\r\n            try {\r\n                isValidNodeThrow(node);\r\n                return true;\r\n            } catch (error) {\r\n                logger.error(error.message, {stack: error.stack, node: node});\r\n                return false;\r\n            }\r\n        };\r\n\r\n        this.loadRoot = function (hash) {\r\n            return TASYNC.call(loadRoot2, innerCore.loadRoot(hash));\r\n        };\r\n\r\n        this.loadChild = function (node, relid) {\r\n            return TASYNC.call(function (child) {\r\n                if (child && self.isInheritanceContainmentCollision(child, self.getParent(child))) {\r\n                    logger.error('node[' + self.getPath(child) +\r\n                        '] was deleted due to inheritance-containment collision');\r\n                    self.deleteNode(child);\r\n                    //core.persist(core.getRoot(child));\r\n                    return null;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }, loadChild(node, relid));\r\n        };\r\n\r\n        this.loadByPath = function (node, path) {\r\n            ASSERT(self.isValidNode(node));\r\n            ASSERT(path === '' || path.charAt(0) === CONSTANTS.PATH_SEP);\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            return loadDescendantByPath(node, path, 1);\r\n        };\r\n\r\n        this.loadPointer = function (node, name) {\r\n            //TODO the pointer loading is totally based upon the loadByPath...\r\n            var pointerPath = self.getPointerPath(node, name),\r\n                root = self.getRoot(node);\r\n\r\n            if (pointerPath === undefined) {\r\n                return undefined;\r\n            }\r\n            if (pointerPath === null) {\r\n                return null;\r\n            }\r\n            return TASYNC.call(function () {\r\n                return self.loadByPath(root, pointerPath);\r\n            }, self.loadPaths(self.getHash(root), [pointerPath]));\r\n        };\r\n\r\n        this.getChild = function (node, relid) {\r\n            ASSERT(self.isValidNode(node) && (node.base === undefined || typeof node.base === 'object'));\r\n            var child = innerCore.getChild(node, relid);\r\n            if (node.base !== null && node.base !== undefined) {\r\n                if (child.base === null || child.base === undefined) {\r\n                    child.base = self.getChild(node.base, relid);\r\n                }\r\n            } else {\r\n                child.base = null;\r\n            }\r\n            return child;\r\n        };\r\n\r\n        this.getChildrenRelids = function (node, asObject) {\r\n            ASSERT(self.isValidNode(node));\r\n            var base = node,\r\n                relids,\r\n                i;\r\n\r\n            function basesHaveSameRelids() {\r\n                var b = node,\r\n                    cnt = 0,\r\n                    len = node.allChildrenRelids.bases.length;\r\n\r\n                while (b) {\r\n                    if (cnt === len || b.childrenRelids !== node.allChildrenRelids.bases[cnt]) {\r\n                        return false;\r\n                    }\r\n\r\n                    b = b.base;\r\n                    cnt += 1;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            if (!node.allChildrenRelids || basesHaveSameRelids() === false) {\r\n                // If there is no cache or the childrenRelids caches are outdated,\r\n                // rebuild the cache.\r\n                node.allChildrenRelids = {\r\n                    cached: {},\r\n                    bases: []\r\n                };\r\n\r\n                while (base) {\r\n                    relids = innerCore.getChildrenRelids(base);\r\n                    node.allChildrenRelids.bases.push(relids);\r\n\r\n                    for (i = 0; i < relids.length; i += 1) {\r\n                        node.allChildrenRelids.cached[relids[i]] = true;\r\n                    }\r\n\r\n                    base = base.base;\r\n                }\r\n            }\r\n\r\n            return asObject ? node.allChildrenRelids.cached : Object.keys(node.allChildrenRelids.cached);\r\n        };\r\n\r\n        this.loadChildren = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            var relids = self.getChildrenRelids(node);\r\n            var children = [];\r\n            for (var i = 0; i < relids.length; i++) {\r\n                children[i] = self.loadChild(node, relids[i]);\r\n            }\r\n            return TASYNC.call(function (n) {\r\n                var newn = [];\r\n                for (var i = 0; i < n.length; i++) {\r\n                    if (n[i] !== null) {\r\n                        newn.push(n[i]);\r\n                    }\r\n                }\r\n                return newn;\r\n            }, TASYNC.lift(children));\r\n        };\r\n\r\n        this.setPointer = function (node, name, target) {\r\n            innerCore.setPointer(node, name, target);\r\n\r\n            if (isInheritedChild(node)) {\r\n                self.setProperty(node, CONSTANTS.INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY, true);\r\n                // #1232\r\n\r\n                self.processRelidReservation(self.getParent(node), self.getRelid(node));\r\n            }\r\n\r\n            if (isInheritedChild(target)) {\r\n                self.setProperty(target, CONSTANTS.INHERITED_CHILD_HAS_OWN_RELATION_PROPERTY, true);\r\n                // #1232\r\n                self.processRelidReservation(self.getParent(target), self.getRelid(target));\r\n            }\r\n        };\r\n\r\n        this.getCollectionNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            var ownNames = innerCore.getCollectionNames(node),\r\n                inhNames = getInheritedCollectionNames(node),\r\n                i;\r\n            for (i = 0; i < ownNames.length; i++) {\r\n                if (inhNames.indexOf(ownNames[i]) < 0) {\r\n                    inhNames.push(ownNames[i]);\r\n                }\r\n            }\r\n\r\n            return inhNames;\r\n        };\r\n\r\n        this.getCollectionPaths = function (node, name) {\r\n            ASSERT(self.isValidNode(node) && name);\r\n            var ownPaths = innerCore.getCollectionPaths(node, name),\r\n                inhPaths = getInheritedCollectionPaths(node, name);\r\n\r\n            inhPaths = inhPaths.concat(ownPaths);\r\n\r\n            return inhPaths;\r\n        };\r\n\r\n        this.loadCollection = function (node, name) {\r\n            var root = self.getRoot(node),\r\n                paths = self.getCollectionPaths(node, name),\r\n                nodes = [],\r\n                i,\r\n                rootHash = self.getHash(root);\r\n\r\n            return TASYNC.call(function () {\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    nodes[i] = self.loadByPath(root, paths[i]);\r\n                }\r\n                return TASYNC.lift(nodes);\r\n            }, self.loadPaths(rootHash, paths));\r\n        };\r\n\r\n        this.createChild = function (parent, relidLength) {\r\n            var node = innerCore.createChild(parent, self.getChildrenRelids(parent, true), relidLength);\r\n\r\n            this.processRelidReservation(parent, this.getRelid(node));\r\n\r\n            return self.getChild(parent, this.getRelid(node));\r\n        };\r\n\r\n        this.createNode = function (parameters, relidLength) {\r\n            parameters = parameters || {};\r\n            var base = parameters.base || null,\r\n                parent = parameters.parent,\r\n                node,\r\n                takenRelids;\r\n\r\n            ASSERT(!parent || self.isValidNode(parent));\r\n            ASSERT(!base || self.isValidNode(base));\r\n\r\n            if (self.isValidNewChild(parent, base) === false) {\r\n                throw new CoreIllegalOperationError('Not allowed to create node that would cause loop in the ' +\r\n                    'combined containment inheritance graph.');\r\n            }\r\n\r\n\r\n            if (parent) {\r\n                takenRelids = self.getChildrenRelids(parent, true);\r\n                relidLength = relidLength || innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\r\n            }\r\n\r\n            node = innerCore.createNode(parameters, takenRelids, relidLength);\r\n            node.base = base;\r\n            innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\r\n\r\n            if (parent) {\r\n                this.processRelidReservation(parent, this.getRelid(node));\r\n\r\n                // Addition to #1232\r\n                if (isInheritedChild(parent)) {\r\n                    self.processRelidReservation(self.getParent(parent), self.getRelid(parent));\r\n                }\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        this.isValidNewChild = function (parentNode, baseNode) {\r\n            ASSERT(!parentNode || self.isValidNode(parentNode));\r\n            ASSERT(!baseNode || self.isValidNode(baseNode));\r\n            // When we look for a loop, we see relationship parent and instance as edges\r\n            // The intended new node would make a path base->parent, if the node would cause a loop,\r\n            // then there should already be a path parent->base\r\n\r\n            if (!parentNode || !baseNode) {\r\n                return true;\r\n            }\r\n\r\n            while (parentNode) {\r\n                if (self.isInstanceOf(baseNode, parentNode)) {\r\n                    return false;\r\n                }\r\n                parentNode = self.getParent(parentNode);\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        this.isValidNewParent = function (node, parent) {\r\n            ASSERT(self.isValidNode(node) && self.isValidNode(parent));\r\n            var visited = {\r\n                    containment: {},\r\n                    inheritance: {}\r\n                },\r\n                result = true;\r\n\r\n            if (isBase(parent, node)) {\r\n                result = false;\r\n            } else if (isParentOrBaseRec(node, parent, visited, true)) {\r\n                result = false;\r\n            } else if (isParentOrBaseRec(node, parent, visited, false)) {\r\n                result = false;\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.moveNode = function (node, parent, relidLength, newRelid) {\r\n            var minRelidLength = innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY),\r\n                takenRelids = self.getChildrenRelids(parent, true),\r\n                currRelid = this.getRelid(node),\r\n                base = node.base,\r\n                moved;\r\n\r\n            if (self.isValidNewParent(node, parent) === false) {\r\n                throw new CoreIllegalOperationError('New parent would create loop in containment/inheritance tree.');\r\n            }\r\n            if (typeof minRelidLength === 'number' && currRelid.length < minRelidLength) {\r\n                takenRelids[currRelid] = true;\r\n            } else if (typeof relidLength === 'number' && currRelid.length < relidLength) {\r\n                takenRelids[currRelid] = true;\r\n            }\r\n\r\n            moved = innerCore.moveNode(node, parent, takenRelids, relidLength || minRelidLength, newRelid);\r\n            moved.base = base;\r\n\r\n            this.processRelidReservation(parent, this.getRelid(moved));\r\n\r\n            // Addition to #1232\r\n            if (isInheritedChild(parent)) {\r\n                self.processRelidReservation(self.getParent(parent), self.getRelid(parent));\r\n            }\r\n\r\n            return moved;\r\n        };\r\n\r\n        this.copyNode = function (node, parent, relidLength) {\r\n            var newNode,\r\n                base = self.getBase(node);\r\n\r\n            if (base !== null && self.isValidNewChild(parent, base) === false) {\r\n                throw new CoreIllegalOperationError('Not allowed to copy the node under a parent that would ' +\r\n                    'cause loop in the combined containment inheritance graph.');\r\n            }\r\n\r\n            relidLength = relidLength || innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\r\n            newNode = innerCore.copyNode(node, parent, self.getChildrenRelids(parent, true), relidLength);\r\n            newNode.base = node.base;\r\n            if (typeof self.getPointerPath(node, CONSTANTS.BASE_POINTER) === 'string') {\r\n                innerCore.setPointer(newNode, CONSTANTS.BASE_POINTER, node.base);\r\n            }\r\n\r\n            // The copy does not have any instances at this point -> reset the property.\r\n            innerCore.deleteProperty(newNode, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\r\n\r\n            this.processRelidReservation(parent, this.getRelid(newNode));\r\n\r\n            // Addition to #1232\r\n            if (isInheritedChild(parent)) {\r\n                self.processRelidReservation(self.getParent(parent), self.getRelid(parent));\r\n            }\r\n\r\n            return newNode;\r\n        };\r\n\r\n        this.copyNodes = function (nodes, parent, relidLength) {\r\n            // Due to inheritance we have 3 types of relations, that needs to be preserved:\r\n            // 1. Direct relations among any two subtrees involved in the copy (same as corerel level)\r\n            // 2. Inherited relations that goes between affected subtrees but remain the scope of the copy\r\n            // This option means that both ends of the relation is inside an inheritance that defines the\r\n            // relation (Example: You have inherited child A that points to inherited child B, you copy them\r\n            // together under the same parent. If their relationship would not be flatten, then copyA would\r\n            // point to B instead of copy B).\r\n            // 3. Inherited relationship, when the original target is in the copy. (Example: inherited child A\r\n            // points to container B, we copy the container of A and B as well. We expect copyA to point to copyB\r\n            // instead of the original container B).\r\n            // +1. If for some reason we copy an inherited child, then its base should be set properly (otherwise\r\n            // it would lose base information).\r\n\r\n            var copiedNodes = [],\r\n                old2NewPath = {},\r\n                source,\r\n                target,\r\n                oldTarget,\r\n                relationsToPreserve = [],\r\n                longestNewRelid = 0,\r\n                relations = [],\r\n                basePath,\r\n                nodePath,\r\n                node,\r\n                tempParent, tempSrc,\r\n                i, j, k;\r\n\r\n            // check for loop\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                if (self.isValidNewChild(parent, self.getBase(nodes[i])) === false) {\r\n                    throw new CoreIllegalOperationError('Not allowed to copy the node under a parent that would ' +\r\n                        'cause loop in the combined containment inheritance graph.');\r\n                }\r\n            }\r\n            // This collects 1 and 3\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                node = nodes[i];\r\n                basePath = self.getPath(node);\r\n                for (j = 0; j < nodes.length; j += 1) {\r\n                    if (i === j) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (nodes[i] === nodes[j]) {\r\n                        continue;\r\n                    }\r\n\r\n                    node = nodes[i];\r\n                    basePath = self.getPath(node);\r\n\r\n                    while (node) {\r\n                        relations = innerCore.gatherRelationsAmongSubtrees(node, nodes[j]);\r\n                        nodePath = self.getPath(node);\r\n                        if (basePath !== nodePath) {\r\n                            for (k = 0; k < relations.length; k += 1) {\r\n                                relations[k].source = relations[k].source.replace(nodePath, basePath);\r\n                                relations[k].sourceBase = relations[k].sourceBase.replace(nodePath, basePath);\r\n                            }\r\n                        }\r\n\r\n                        relationsToPreserve = relations.concat(relationsToPreserve);\r\n                        node = self.getBase(node);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Then collecting 2\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                for (j = 0; j < nodes.length; j += 1) {\r\n                    if (i === j) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (nodes[i] === nodes[j]) {\r\n                        continue;\r\n                    }\r\n\r\n                    relationsToPreserve = collectInheritanceInternalRelations(nodes[i], nodes[j])\r\n                        .concat(relationsToPreserve);\r\n                }\r\n            }\r\n\r\n            // The actual copy of nodes\r\n            relidLength = relidLength || innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                node = innerCore.copyNode(nodes[i], parent, self.getChildrenRelids(parent, true), relidLength);\r\n                copiedNodes.push(node);\r\n                old2NewPath[self.getPath(nodes[i])] = CONSTANTS.PATH_SEP + self.getRelid(node);\r\n                j = (self.getRelid(node) || '').length;\r\n                if (j > longestNewRelid) {\r\n                    longestNewRelid = j;\r\n                }\r\n            }\r\n\r\n            self.processRelidReservation(parent, longestNewRelid);\r\n\r\n            // Setting the preserved relations\r\n            // create the relations, that have to be preserved\r\n            for (i = 0; i < relationsToPreserve.length; i += 1) {\r\n                if (Object.hasOwn(old2NewPath, relationsToPreserve[i].sourceBase) &&\r\n                    Object.hasOwn(old2NewPath, relationsToPreserve[i].targetBase)) {\r\n                    source = relationsToPreserve[i].source.replace(\r\n                        relationsToPreserve[i].sourceBase,\r\n                        old2NewPath[relationsToPreserve[i].sourceBase]\r\n                    );\r\n                    target = relationsToPreserve[i].target.replace(\r\n                        relationsToPreserve[i].targetBase,\r\n                        old2NewPath[relationsToPreserve[i].targetBase]\r\n                    );\r\n\r\n                    tempParent = parent;\r\n                    tempSrc = source;\r\n                    while (tempParent !== null) {\r\n                        oldTarget = self.overlayInquiry(tempParent, tempSrc, relationsToPreserve[i].name);\r\n                        if (oldTarget !== null && typeof oldTarget.value === 'string') {\r\n                            self.overlayRemove(tempParent, tempSrc, relationsToPreserve[i].name, oldTarget.value);\r\n                            tempParent = null;\r\n                        } else {\r\n                            tempSrc = CONSTANTS.PATH_SEP + self.getRelid(tempParent) + tempSrc;\r\n                            tempParent = self.getParent(tempParent);\r\n                        }\r\n                    }\r\n                    self.overlayInsert(parent, source, relationsToPreserve[i].name, target);\r\n                }\r\n            }\r\n\r\n            // Setting bases\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                innerCore.setPointer(copiedNodes[i], CONSTANTS.BASE_POINTER, self.getBase(nodes[i]));\r\n                copiedNodes[i].base = nodes[i].base;\r\n                innerCore.deleteProperty(copiedNodes[i], CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY);\r\n            }\r\n\r\n            // Addition to #1232\r\n            if (isInheritedChild(parent)) {\r\n                self.processRelidReservation(self.getParent(parent), self.getRelid(parent));\r\n            }\r\n\r\n            return copiedNodes;\r\n        };\r\n\r\n        this.deleteNode = function (node, technical) {\r\n            //currently we only check if the node is inherited from its parents children\r\n            if (node && (node.base !== null || technical === true)) {\r\n                var parent = self.getParent(node),\r\n                    parentsBase = parent ? self.getBase(node) : null,\r\n                    base = self.getBase(node),\r\n                    basesParent = base ? self.getParent(node) : null;\r\n\r\n                if (parent && parentsBase && base && basesParent) {\r\n                    if (self.getPath(parentsBase) !== self.getPath(basesParent)) {\r\n                        innerCore.deleteNode(node);\r\n                    }\r\n                } else {\r\n                    innerCore.deleteNode(node);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getAttributeNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var merged = {};\r\n            do {\r\n                var names = innerCore.getAttributeNames(node);\r\n                for (var i = 0; i < names.length; ++i) {\r\n                    if (!(names[i] in merged)) {\r\n                        merged[names[i]] = true;\r\n                    }\r\n                }\r\n\r\n                node = node.base;\r\n            } while (node);\r\n\r\n            return Object.keys(merged);\r\n        };\r\n\r\n        this.getRegistryNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var merged = {};\r\n            do {\r\n                var names = innerCore.getRegistryNames(node);\r\n                for (var i = 0; i < names.length; ++i) {\r\n                    if (!(names[i] in merged)) {\r\n                        merged[names[i]] = true;\r\n                    }\r\n                }\r\n\r\n                node = node.base;\r\n            } while (node);\r\n\r\n            return Object.keys(merged);\r\n        };\r\n\r\n        this.getAttribute = function (node, name) {\r\n            ASSERT(self.isValidNode(node));\r\n            var value;\r\n            do {\r\n                value = innerCore.getAttribute(node, name);\r\n                node = node.base;\r\n            } while (value === undefined && node !== null);\r\n\r\n            return value;\r\n        };\r\n\r\n        this.getRegistry = function (node, name) {\r\n            ASSERT(self.isValidNode(node));\r\n            var value;\r\n            do {\r\n                value = innerCore.getRegistry(node, name);\r\n                node = node.base;\r\n            } while (value === undefined && node !== null);\r\n\r\n            return value;\r\n        };\r\n\r\n        this.getPointerNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            return self.getPointerNamesFrom(node, '');\r\n            //var merged = {};\r\n            //do {\r\n            //    var names = oldcore.getPointerNames(node);\r\n            //    for (var i = 0; i < names.length; ++i) {\r\n            //        if (!(names[i] in merged)) {\r\n            //            merged[names[i]] = true;\r\n            //        }\r\n            //    }\r\n            //\r\n            //    node = node.base;\r\n            //} while (node);\r\n            //\r\n            //return Object.keys(merged);\r\n        };\r\n\r\n        this.getPointerNamesFrom = function (node, source) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var merged = {};\r\n            do {\r\n                var names = innerCore.getPointerNamesFrom(node, source);\r\n                for (var i = 0; i < names.length; ++i) {\r\n                    if (!(names[i] in merged)) {\r\n                        merged[names[i]] = true;\r\n                    }\r\n                }\r\n\r\n                node = node.base;\r\n            } while (node);\r\n\r\n            return Object.keys(merged);\r\n        };\r\n\r\n        this.getPointerPathFrom = function (node, source, name) {\r\n            ASSERT(self.isValidNode(node) && typeof name === 'string');\r\n\r\n            return getPointerPathFromRec(node, source, name);\r\n        };\r\n\r\n        this.getPointerPath = function (node, name) {\r\n            return self.getPointerPathFrom(node, '', name);\r\n        };\r\n\r\n        this.getChildrenPaths = function (node) {\r\n            var path = self.getPath(node);\r\n\r\n            var relids = self.getChildrenRelids(node);\r\n            // Remark: It's fine to mutate this array since we're using Object.keys on the cached object..\r\n            for (var i = 0; i < relids.length; ++i) {\r\n                relids[i] = path + CONSTANTS.PATH_SEP + relids[i];\r\n            }\r\n\r\n            return relids;\r\n        };\r\n\r\n        this.setAttribute = function (node, name, value) {\r\n            innerCore.setAttribute(node, name, value);\r\n\r\n            // #1232\r\n            if (isInheritedChild(node)) {\r\n                self.processRelidReservation(self.getParent(node), self.getRelid(node));\r\n            }\r\n        };\r\n\r\n        this.setRegistry = function (node, name, value) {\r\n            innerCore.setRegistry(node, name, value);\r\n\r\n            // #1232\r\n            if (isInheritedChild(node)) {\r\n                self.processRelidReservation(self.getParent(node), self.getRelid(node));\r\n            }\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n\r\n        //check of inheritance chain and containment hierarchy collision\r\n        this.isInheritanceContainmentCollision = function (node, parent) {\r\n            var bases = [];\r\n\r\n            while (node) {\r\n                bases.push(self.getPath(node));\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            while (parent) {\r\n                if (bases.indexOf(self.getPath(parent)) !== -1) {\r\n                    return true;\r\n                }\r\n                parent = self.getParent(parent);\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.getBase = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            // TODO: check if base has moved\r\n            return node.base;\r\n        };\r\n\r\n        this.isValidNewBase = function (node, base) {\r\n            ASSERT(self.isValidNode(node) && (base === undefined || base === null || self.isValidNode(base)));\r\n            var visited = {\r\n                    containment: {},\r\n                    inheritance: {}\r\n                },\r\n                result = true;\r\n\r\n            if (!base) {\r\n                result = true;\r\n            } else if (isParent(base, node)) {\r\n                result = false;\r\n            } else if (isParentOrBaseRec(node, base, visited, true)) {\r\n                result = false;\r\n            } else if (isParentOrBaseRec(node, base, visited, false)) {\r\n                result = false;\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.setBase = function (node, base) {\r\n\r\n            if (self.isValidNewBase(node, base) === false) {\r\n                throw new CoreIllegalOperationError('New base would create loop in containment/inheritance tree.');\r\n            }\r\n\r\n            if (base) {\r\n                //TODO maybe this is not the best way, needs to be double checked\r\n                var parent = self.getParent(node),\r\n                    nodeChildren = self.getOwnChildrenRelids(node), // We're only interested in the children with data.\r\n                    minRelidLength = innerCore.getProperty(node, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY) || 0,\r\n                    baseChildren = self.getChildrenRelids(base, true),\r\n                    parentBase,\r\n                    baseParent,\r\n                    i;\r\n\r\n                if (parent) {\r\n                    parentBase = self.getBase(parent);\r\n                    baseParent = self.getParent(base);\r\n                    if (self.getPath(parentBase) !== self.getPath(baseParent)) {\r\n                        //we have to set an exact pointer only if it is not inherited child\r\n                        innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\r\n\r\n                        for (i = 0; i < nodeChildren.length; i += 1) {\r\n                            if (baseChildren[nodeChildren[i]] && childHasSameOrigin(node, base, nodeChildren[i])) {\r\n                                // Currently we only keep the children data for children with same origin.\r\n                                // Meaning we delete all other children (including those that were created in node).\r\n                            } else {\r\n                                innerCore.deleteChild(node, nodeChildren[i]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        innerCore.deletePointer(node, CONSTANTS.BASE_POINTER); //we remove the pointer just in case\r\n                    }\r\n                } else {\r\n                    //if for some reason the node doesn't have a parent it is surely not an inherited child\r\n                    innerCore.setPointer(node, CONSTANTS.BASE_POINTER, base);\r\n                }\r\n\r\n                node.base = base;\r\n\r\n                // Handle the minimal new length propagation to the new base chain.\r\n                for (i = 0; i < nodeChildren.length; i += 1) {\r\n                    // Do not account for old relids..\r\n                    if (nodeChildren[i].length <= CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH) {\r\n                        minRelidLength = nodeChildren[i].length + 1 > minRelidLength ?\r\n                            nodeChildren[i].length + 1 : minRelidLength;\r\n                    }\r\n                }\r\n\r\n                if (minRelidLength >= 2) {\r\n                    processNewRelidLength(node, minRelidLength);\r\n                }\r\n            } else {\r\n                innerCore.setPointer(node, CONSTANTS.BASE_POINTER, null);\r\n                node.base = null;\r\n            }\r\n        };\r\n\r\n        // FIXME: Do we really need both of these??\r\n        this.getBaseRoot = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            while (node.base !== null) {\r\n                node = node.base;\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        this.getTypeRoot = function (node) {\r\n            if (node.base) {\r\n                while (node.base !== null) {\r\n                    node = self.getBase(node);\r\n                }\r\n                return node;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.getOwnChildrenRelids = function (node) {\r\n            return innerCore.getChildrenRelids(node);\r\n        };\r\n\r\n        this.loadOwnChildren = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            var relids = self.getOwnChildrenRelids(node);\r\n            var children = [];\r\n            for (var i = 0; i < relids.length; i++) {\r\n                children[i] = self.loadChild(node, relids[i]);\r\n            }\r\n            return TASYNC.call(function (n) {\r\n                var newn = [];\r\n                for (var i = 0; i < n.length; i++) {\r\n                    if (n[i] !== null) {\r\n                        newn.push(n[i]);\r\n                    }\r\n                }\r\n                return newn;\r\n            }, TASYNC.lift(children));\r\n        };\r\n\r\n        this.getOwnAttributeNames = function (node) {\r\n            return innerCore.getAttributeNames(node);\r\n        };\r\n\r\n        this.getOwnRegistryNames = function (node) {\r\n            return innerCore.getRegistryNames(node);\r\n        };\r\n\r\n        this.getOwnAttribute = function (node, name) {\r\n            return innerCore.getAttribute(node, name);\r\n        };\r\n\r\n        this.getOwnRegistry = function (node, name) {\r\n            return innerCore.getRegistry(node, name);\r\n        };\r\n\r\n        this.getOwnPointerNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            return innerCore.getPointerNames(node);\r\n        };\r\n\r\n        this.getOwnPointerNamesFrom = function (node, source) {\r\n            return innerCore.getPointerNamesFrom(node, source);\r\n        };\r\n\r\n        this.getOwnPointerPath = function (node, name) {\r\n            return innerCore.getPointerPath(node, name);\r\n        };\r\n\r\n        this.getOwnPointerPathFrom = function (node, source, name) {\r\n            return innerCore.getPointerPathFrom(node, source, name);\r\n        };\r\n\r\n        this.getOwnChildrenPaths = function (node) {\r\n            return innerCore.getChildrenPaths(node);\r\n        };\r\n\r\n        this.processRelidReservation = function (node, relid) {\r\n            if (!CONSTANTS.DOES_NOT_HAVE_RELID_CHILDREN[self.getRelid(node)] && innerCore.isValidRelid(relid)) {\r\n                // We do not process relids for e.g. _sets and _meta.\r\n                processNewRelidLength(node, relid.length + 1);\r\n            }\r\n        };\r\n\r\n        this.isInstanceOf = function (node, baseNodeOrPath) {\r\n            var typePath = typeof baseNodeOrPath === 'string' ? baseNodeOrPath : self.getPath(baseNodeOrPath);\r\n\r\n            while (node) {\r\n                if (typePath === self.getPath(node)) {\r\n                    return true;\r\n                }\r\n\r\n                node = node.base;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getInstancePaths = function (node) {\r\n            var instances = [],\r\n                directCollectionPaths,\r\n                relPath = '',\r\n                i;\r\n\r\n            while (node) {\r\n                directCollectionPaths = innerCore.getCollectionPaths(node, CONSTANTS.BASE_POINTER);\r\n                for (i = 0; i < directCollectionPaths.length; i += 1) {\r\n                    instances.push(directCollectionPaths[i] + relPath);\r\n                }\r\n                relPath = CONSTANTS.PATH_SEP + innerCore.getRelid(node) + relPath;\r\n                node = innerCore.getParent(node);\r\n            }\r\n\r\n            return instances;\r\n        };\r\n\r\n        this.loadInstances = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            var instancePaths = self.getInstancePaths(node),\r\n                instances = [],\r\n                root = self.getRoot(node),\r\n                i;\r\n\r\n            for (i = 0; i < instancePaths.length; i += 1) {\r\n                instances[i] = self.loadByPath(root, instancePaths[i]);\r\n            }\r\n\r\n            return TASYNC.lift(instances);\r\n        };\r\n        //</editor-fold>\r\n    };\r\n\r\n    return CoreType;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n *\r\n * example constraint structure for the outside world:\r\n * {\r\n *  script:string,\r\n *  priority:integer,\r\n *  name:string,\r\n *  message:string\r\n * }\r\n * provided API:\r\n * getConstraint(node,name) -> constraintObj\r\n * setConstraint(node,constraintObj)\r\n * getConstraintNames(node)\r\n * delConstraint(node,name)\r\n */\r\n\r\ndefine('common/core/constraintcore',['common/util/assert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\r\n    'use strict';\r\n\r\n    function ConstraintCore(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized ConstraintCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function getConstraintRelId(constraintsNode, name) {\r\n            var relIds = innerCore.getChildrenRelids(constraintsNode);\r\n            var relId;\r\n            for (var i = 0; i < relIds.length; i++) {\r\n                if (name === innerCore.getAttribute(innerCore.getChild(constraintsNode, relIds[i]), 'name')) {\r\n                    relId = relIds[i];\r\n                    break;\r\n                }\r\n            }\r\n            return relId;\r\n        }\r\n\r\n        function getRegConstName(name) {\r\n            return CONSTANTS.CONSTRAINT_REGISTRY_PREFIX + name;\r\n        }\r\n\r\n        function getContraintNames(node, onlyOwn) {\r\n            ASSERT(self.isValidNode(node));\r\n            var constraintsNode = self.getChild(node, CONSTANTS.CONSTRAINTS_RELID),\r\n                relIds = onlyOwn ? self.getOwnChildrenRelids(constraintsNode) : self.getChildrenRelids(constraintsNode),\r\n                names = [];\r\n\r\n            for (var i = 0; i < relIds.length; i += 1) {\r\n                names.push(self.getAttribute(self.getChild(constraintsNode, relIds[i]), 'name'));\r\n            }\r\n            return names;\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.getConstraint = function (node, name) {\r\n            ASSERT(innerCore.isValidNode(node));\r\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID);\r\n            var constRelId = getConstraintRelId(constraintsNode, name);\r\n            if (constRelId) {\r\n                var constraintNode = innerCore.getChild(constraintsNode, constRelId);\r\n                return {\r\n                    script: innerCore.getAttribute(constraintNode, 'script'),\r\n                    priority: innerCore.getAttribute(constraintNode, 'priority'),\r\n                    info: innerCore.getAttribute(constraintNode, 'info')\r\n                };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.setConstraint = function (node, name, constraintObj) {\r\n            ASSERT(innerCore.isValidNode(node));\r\n            ASSERT(typeof constraintObj === 'object' && typeof name === 'string');\r\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID),\r\n                constRelId = getConstraintRelId(constraintsNode, name),\r\n                constraintNode;\r\n\r\n            if (constRelId) {\r\n                constraintNode = innerCore.getChild(constraintsNode, constRelId);\r\n            } else {\r\n                constraintNode = innerCore.createChild(constraintsNode, CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH + 1);\r\n            }\r\n\r\n            constraintObj.priority = constraintObj.priority || CONSTANTS.C_DEF_PRIORITY;\r\n            constraintObj.script = constraintObj.script || 'console.log(\"empty constraint\");';\r\n            constraintObj.info = constraintObj.info || '';\r\n            innerCore.setAttribute(constraintNode, 'name', name);\r\n            innerCore.setAttribute(constraintNode, 'script', constraintObj.script);\r\n            innerCore.setAttribute(constraintNode, 'priority', constraintObj.priority);\r\n            innerCore.setAttribute(constraintNode, 'info', constraintObj.info);\r\n            innerCore.setRegistry(node, getRegConstName(name),\r\n                (innerCore.getRegistry(node, getRegConstName(name)) || 0) + 1);\r\n        };\r\n\r\n        this.delConstraint = function (node, name) {\r\n            ASSERT(innerCore.isValidNode(node));\r\n            var constraintsNode = innerCore.getChild(node, CONSTANTS.CONSTRAINTS_RELID);\r\n            var constRelId = getConstraintRelId(constraintsNode, name);\r\n            if (constRelId) {\r\n                var constraintNode = innerCore.getChild(constraintsNode, constRelId);\r\n                innerCore.deleteNode(constraintNode, true);\r\n            }\r\n\r\n            innerCore.delRegistry(node, getRegConstName(name));\r\n        };\r\n\r\n        this.getConstraintNames = function (node) {\r\n            return getContraintNames(node, false);\r\n        };\r\n\r\n        //TODO this means we always have to have this layer above type/inheritance layer\r\n        this.getOwnConstraintNames = function (node) {\r\n            return getContraintNames(node, true);\r\n        };\r\n        //</editor-fold>\r\n    }\r\n\r\n    return ConstraintCore;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/core/convertData',['common/core/constants', 'common/storage/constants'], function (CORE_CONSTANTS, STORAGE_CONSTANTS) {\r\n    'use strict';\r\n\r\n    var dataConverters,\r\n        APP_VERSION = STORAGE_CONSTANTS.VERSION,\r\n        MAJOR_APP_VERSION = APP_VERSION.split('.')[0];\r\n\r\n    function isCollectionName(name) {\r\n        if (name.length > CORE_CONSTANTS.COLLECTION_NAME_SUFFIX.length &&\r\n            CORE_CONSTANTS.COLLECTION_NAME_SUFFIX === name.slice(-CORE_CONSTANTS.COLLECTION_NAME_SUFFIX.length)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function clearOvrOfInvRelations(overlay) {\r\n        var sourcePath,\r\n            relationName;\r\n\r\n        for (sourcePath in overlay) {\r\n            for (relationName in overlay[sourcePath]) {\r\n                if (isCollectionName(relationName)) {\r\n                    delete overlay[sourcePath][relationName];\r\n                }\r\n            }\r\n\r\n            // Remove all empty overlay entries\r\n            if (Object.keys(overlay[sourcePath]).length === 0) {\r\n                delete overlay[sourcePath];\r\n            }\r\n        }\r\n    }\r\n\r\n    // 0.0.0 --> 1.0.0\r\n    // - every inverse relation has to be removed from the overlay\r\n    function zeroToOne(dataObject) {\r\n\r\n        clearOvrOfInvRelations(dataObject[CORE_CONSTANTS.OVERLAYS_PROPERTY] || {});\r\n\r\n        dataObject.__v = '1.0.0';\r\n        return dataObject;\r\n    }\r\n\r\n    function oneToOnePointOne(dataObject) {\r\n        var currentSet,\r\n            metaEntry,\r\n            key;\r\n\r\n        // Clear direct _sets of inverse overlay relations.\r\n        currentSet = dataObject[CORE_CONSTANTS.ALL_SETS_PROPERTY] || {};\r\n        clearOvrOfInvRelations(currentSet[CORE_CONSTANTS.OVERLAYS_PROPERTY] || {});\r\n\r\n        metaEntry = dataObject[CORE_CONSTANTS.META_NODE] || {};\r\n        clearOvrOfInvRelations(metaEntry[CORE_CONSTANTS.OVERLAYS_PROPERTY] || {});\r\n\r\n        for (key in metaEntry) {\r\n            currentSet = metaEntry[key];\r\n            currentSet = currentSet[CORE_CONSTANTS.ALL_SETS_PROPERTY] || {};\r\n            clearOvrOfInvRelations(currentSet[CORE_CONSTANTS.OVERLAYS_PROPERTY] || {});\r\n        }\r\n\r\n        dataObject.__v = '1.1.0';\r\n\r\n        return dataObject;\r\n    }\r\n\r\n    dataConverters = {\r\n        '0.0.0': {\r\n            '1.0.0': zeroToOne,\r\n            '1.1.0': function (dataObject) {\r\n                return oneToOnePointOne(zeroToOne(dataObject));\r\n            },\r\n            '1.2.0': function (dataObject) {\r\n                return oneToOnePointOne(zeroToOne(dataObject));\r\n            }\r\n        },\r\n        '1.0.0': {\r\n            '1.1.0': oneToOnePointOne,\r\n            '1.2.0': oneToOnePointOne\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Converts the passed dataObject to an object (a copy) of the current app version unless the same version.\r\n     * @param {object} dataObject\r\n     * @returns {object} A new object if converted, otherwise the passed dataObject.\r\n     */\r\n    function convertData(dataObject) {\r\n        var dataVersion = dataObject.__v || '0.0.0',\r\n            majorDataVersion = dataVersion.split('.')[0];\r\n\r\n        if (majorDataVersion > MAJOR_APP_VERSION) {\r\n            throw new Error('Trying to load data of incompatible version. Current version \"' +\r\n                APP_VERSION + '\", data version \"' + dataVersion + '\".');\r\n        }\r\n\r\n        if (dataVersion !== APP_VERSION &&\r\n            dataConverters[dataVersion] &&\r\n            typeof dataConverters[dataVersion][APP_VERSION] === 'function') {\r\n\r\n            return dataConverters[dataVersion][APP_VERSION](JSON.parse(JSON.stringify(dataObject)));\r\n        }\r\n\r\n        return dataObject;\r\n    }\r\n\r\n    return convertData;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * CoreIllegalArgumentError should be thrown if the type of the input parameters is not what it should be.\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/CoreIllegalArgumentError',[], function () {\r\n    'use strict';\r\n    function CoreIllegalArgumentError() {\r\n        var error = Error.apply(this, arguments);\r\n        error.name = this.name = 'CoreIllegalArgumentError';\r\n        this.message = error.message;\r\n        this.stack = error.stack;\r\n\r\n        return error;\r\n    }\r\n\r\n    CoreIllegalArgumentError.prototype = Object.create(Error.prototype);\r\n    CoreIllegalArgumentError.prototype.constructor = CoreIllegalArgumentError;\r\n\r\n    return CoreIllegalArgumentError;\r\n});\n",
    "/*globals define*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/util/util',[], function () {\r\n    'use strict';\r\n\r\n    function isTrueObject(value) {\r\n        return typeof value === 'object' && value !== null && value instanceof Array === false;\r\n    }\r\n\r\n    /**\r\n     * Overwrites/augments values in toData with values from fromData.\r\n     *\r\n     * @param {object} toData - Object that will be updated with matched keys from toData.\r\n     * @param {object} fromData - Object that will overwrite the keys of toData.\r\n     */\r\n    function updateFieldsRec(toData, fromData) {\r\n        var keys = Object.keys(fromData),\r\n            i;\r\n\r\n        for (i = 0; i < keys.length; i += 1) {\r\n            if (isTrueObject(fromData[keys[i]]) && isTrueObject(toData[keys[i]])) {\r\n                updateFieldsRec(toData[keys[i]], fromData[keys[i]]);\r\n            } else {\r\n                toData[keys[i]] = fromData[keys[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function orderStringArrayByElementLength(strArray) {\r\n        var ordered = [],\r\n            i, j, index;\r\n\r\n        for (i = 0; i < strArray.length; i += 1) {\r\n            index = -1;\r\n            j = 0;\r\n            while (index === -1 && j < ordered.length) {\r\n                if (ordered[j].length > strArray[i].length) {\r\n                    index = j;\r\n                }\r\n\r\n                j += 1;\r\n            }\r\n\r\n            if (index === -1) {\r\n                ordered.push(strArray[i]);\r\n            } else {\r\n                ordered.splice(index, 0, strArray[i]);\r\n            }\r\n        }\r\n\r\n        return ordered;\r\n    }\r\n\r\n    function indexOfUntil(items, item, maxIndex) {\r\n        var len = items.length > maxIndex ? maxIndex : items.length;\r\n        while (len--) {\r\n            if (items[len] === item) {\r\n                return len;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function indexOfUntilInObjectArray(items, item, maxIndex, key) {\r\n        var len = items.length > maxIndex ? maxIndex : items.length;\r\n        while (len--) {\r\n            if (items[len][key] === item[key]) {\r\n                return len;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function extendArrayUnique(base, extension) {\r\n        var originalLength = base.length,\r\n            extensionLen = extension.length,\r\n            item;\r\n\r\n        while (extensionLen--) {\r\n            item = extension[extensionLen];\r\n            if (indexOfUntil(base, item, originalLength) === -1) {\r\n                base.push(item);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function extendObjectArrayUnique(base, extension, key) {\r\n        var originalLength = base.length,\r\n            extensionLen = extension.length,\r\n            item;\r\n\r\n        while (extensionLen--) {\r\n            item = extension[extensionLen];\r\n            if (indexOfUntilInObjectArray(base, item, originalLength, key) === -1) {\r\n                base.push(item);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        isTrueObject: isTrueObject,\r\n        updateFieldsRec: updateFieldsRec,\r\n        orderStringArrayByElementLength: orderStringArrayByElementLength,\r\n        extendArrayUnique: extendArrayUnique,\r\n        extendObjectArrayUnique: extendObjectArrayUnique\r\n    };\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/core/coretree',[\r\n    'common/core/CoreAssert',\r\n    'common/util/key',\r\n    'common/core/tasync',\r\n    'common/util/random',\r\n    'common/regexp',\r\n    'common/core/constants',\r\n    'common/storage/constants',\r\n    'common/core/convertData',\r\n    'common/core/CoreIllegalArgumentError',\r\n    'common/util/util',\r\n], function (ASSERT,\r\n             generateKey,\r\n             TASYNC,\r\n             RANDOM,\r\n             REGEXP,\r\n             CONSTANTS,\r\n             STORAGE_CONSTANTS,\r\n             convertData,\r\n             IllegalArgumentError,\r\n             UTIL) {\r\n\r\n    'use strict';\r\n\r\n    var rootCounter = 0;\r\n\r\n    function CoreTree(storage, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var gmeConfig = options.globConf,\r\n            logger = options.logger.fork('core'),\r\n            ID_NAME = storage.ID_NAME,\r\n            roots = [],\r\n            ticks = 0,\r\n            mutateCount = 0,\r\n            self = this;\r\n\r\n        this.loadObject = TASYNC.wrap(function (hash, callback) {\r\n            storage.loadObject(hash, function (err, resultObject) {\r\n                if (err) {\r\n                    callback(err, null);\r\n                    return;\r\n                }\r\n                if (resultObject && resultObject.type === STORAGE_CONSTANTS.COMMIT_TYPE) {\r\n                    err = new IllegalArgumentError('Cannot load commit object [' + hash + '] as a root node.');\r\n                    resultObject = null;\r\n                }\r\n                callback(err, resultObject);\r\n            });\r\n        });\r\n\r\n        this.loadPaths = TASYNC.wrap(storage.loadPaths);\r\n        this.insertObject = storage.insertObject;\r\n        this.logger = logger;\r\n\r\n        this.ID_NAME = ID_NAME;\r\n\r\n        // ------- memory management\r\n\r\n        function __detachChildren(node) {\r\n            ASSERT(UTIL.isTrueObject(node.children));\r\n            ASSERT(node.age >= CONSTANTS.MAX_AGE - 1);\r\n\r\n            var children = node.children;\r\n            node.children = null;\r\n            node.age = CONSTANTS.MAX_AGE;\r\n\r\n            for (var child in children) {\r\n                __detachChildren(children[child]);\r\n            }\r\n        }\r\n\r\n        function __ageNodes(nodes) {\r\n            ASSERT(UTIL.isTrueObject(nodes));\r\n\r\n            var keys = Object.keys(nodes),\r\n                node,\r\n                i;\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                node = nodes[keys[i]];\r\n                ASSERT(node.age < CONSTANTS.MAX_AGE);\r\n                if (++node.age >= CONSTANTS.MAX_AGE) {\r\n                    delete nodes[keys[i]];\r\n                    __detachChildren(node);\r\n                } else {\r\n                    __ageNodes(node.children);\r\n                }\r\n            }\r\n        }\r\n\r\n        function __ageRoots() {\r\n            var root,\r\n                i;\r\n            if (++ticks >= CONSTANTS.MAX_TICKS) {\r\n                ticks = 0;\r\n                i = roots.length;\r\n                while (--i >= 0) {\r\n                    root = roots[i];\r\n                    ASSERT(root.age < CONSTANTS.MAX_AGE);\r\n                    if (++root.age >= CONSTANTS.MAX_AGE) {\r\n                        roots.splice(i, 1);\r\n                        __detachChildren(root);\r\n                    } else {\r\n                        __ageNodes(root.children);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function __getChildNode(children, relid) {\r\n            ASSERT(UTIL.isTrueObject(children));\r\n            ASSERT(typeof relid === 'string');\r\n\r\n            if (Object.hasOwn(children, relid)) {\r\n                children[relid].age = 0;\r\n                return children[relid];\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function __getEmptyData() {\r\n            return {};\r\n        }\r\n\r\n        function __getChildData(data, relid) {\r\n            ASSERT(typeof relid === 'string');\r\n\r\n            if (typeof data === 'object' && data !== null) {\r\n                data = data[relid];\r\n                return data === undefined ? __getEmptyData() : data;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function __isMutableData(data) {\r\n            return typeof data === 'object' && data !== null && data[CONSTANTS.MUTABLE_PROPERTY] === true;\r\n        }\r\n\r\n        function __isEmptyData(data) {\r\n            if (typeof data === 'string') {\r\n                return false;\r\n            } else if (typeof data === 'object' && Object.keys(data).length === 0) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function __areEquivalent(data1, data2) {\r\n            return data1 === data2 || (typeof data1 === 'string' && data1 === __getChildData(data2, ID_NAME)) ||\r\n                (__isEmptyData(data1) && __isEmptyData(data2));\r\n        }\r\n\r\n        function __reloadChildrenData(node) {\r\n            var key,\r\n                child;\r\n\r\n            for (key in node.children) {\r\n                child = node.children[key];\r\n\r\n                var data = __getChildData(node.data, child.relid);\r\n                if (!REGEXP.DB_HASH.test(data) || data !== __getChildData(child.data, ID_NAME)) {\r\n                    child.data = data;\r\n                    __reloadChildrenData(child);\r\n                }\r\n            }\r\n        }\r\n\r\n        function __noUnderscore(relid) {\r\n            ASSERT(typeof relid === 'string');\r\n            return relid.charAt(0) !== '_';\r\n        }\r\n\r\n        function __saveData(data, root, path, stackedObjects) {\r\n            ASSERT(__isMutableData(data));\r\n            var cleanData;\r\n\r\n            var done = __getEmptyData(),\r\n                keys,\r\n                key,\r\n                i, child, sub, hash;\r\n\r\n            delete data[CONSTANTS.MUTABLE_PROPERTY];\r\n            keys = Object.keys(data);\r\n\r\n            for (i = 0; i < keys.length; i++) {\r\n                key = keys[i];\r\n                child = data[key];\r\n                if (__isMutableData(child)) {\r\n                    sub = __saveData(child, root, path + CONSTANTS.PATH_SEP + key, stackedObjects);\r\n                    if (JSON.stringify(sub) === JSON.stringify(__getEmptyData())) {\r\n                        delete data[key];\r\n                    } else {\r\n                        done = sub;\r\n                        if (typeof child[ID_NAME] === 'string') {\r\n                            data[key] = child[ID_NAME];\r\n                        }\r\n                    }\r\n                } else {\r\n                    done = undefined;\r\n                }\r\n            }\r\n\r\n            if (done !== __getEmptyData()) {\r\n                hash = data[ID_NAME];\r\n                ASSERT(hash === '' || hash === undefined);\r\n\r\n                if (hash === '') {\r\n                    data.__v = STORAGE_CONSTANTS.VERSION;\r\n                    //TODO: This is a temporary fix. We should modify CANON.\r\n                    cleanData = JSON.parse(JSON.stringify(data));\r\n                    hash = '#' + generateKey(cleanData, gmeConfig);\r\n                    data[ID_NAME] = hash;\r\n                    cleanData[ID_NAME] = hash;\r\n\r\n                    done = cleanData;\r\n\r\n                    storage.insertObject(cleanData, stackedObjects);\r\n                    stackedObjects[hash] = {\r\n                        newHash: hash,\r\n                        newData: cleanData,\r\n                        oldHash: root.initial[path] && root.initial[path].hash,\r\n                        oldData: root.initial[path] && root.initial[path].data\r\n                    };\r\n\r\n                    root.initial[path] = {\r\n                        hash: hash,\r\n                        data: cleanData\r\n                    };\r\n                    //stackedObjects[hash] = data;\r\n                }\r\n            }\r\n\r\n            return done;\r\n        }\r\n\r\n        function __loadRoot2(data) {\r\n            var root = {\r\n                parent: null,\r\n                relid: null,\r\n                age: 0,\r\n                children: {},\r\n                data: null,\r\n                initial: {\r\n                    '': {\r\n                        hash: data[storage.ID_NAME],\r\n                        data: data\r\n                    }\r\n                },\r\n                rootid: ++rootCounter\r\n            };\r\n\r\n            // Ensure we get the correct version of the data.\r\n            root.data = convertData(data);\r\n\r\n            roots.push(root);\r\n\r\n            __ageRoots();\r\n            return root;\r\n        }\r\n\r\n        function __loadChild2(node, newdata) {\r\n            var root = self.getRoot(node),\r\n                path = self.getPath(node);\r\n\r\n            node = self.normalize(node);\r\n\r\n            // TODO: this is a hack, we should avoid loading it multiple times\r\n            if (REGEXP.DB_HASH.test(node.data)) {\r\n                ASSERT(node.data === newdata[ID_NAME]);\r\n\r\n                root.initial[path] = {\r\n                    hash: node.data,\r\n                    data: newdata\r\n                };\r\n\r\n                // Ensure we get the correct version of the data.\r\n                node.data = convertData(newdata);\r\n                __reloadChildrenData(node);\r\n            } else {\r\n                // TODO: if this bites you, use the Cache\r\n                /*if(node.data !== newdata){\r\n                 console.log('kecso',node);\r\n                 }\r\n                 ASSERT(node.data === newdata);*/\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        function __loadDescendantByPath2(node, path, index) {\r\n            if (node === null || index === path.length) {\r\n                return node;\r\n            }\r\n\r\n            var child = self.loadChild(node, path[index]);\r\n            return TASYNC.call(__loadDescendantByPath2, child, path, index + 1);\r\n        }\r\n\r\n        // function __printNode(node) {\r\n        //     var str = '{';\r\n        //     str += 'age:' + node.age;\r\n        //\r\n        //     if (typeof node.relid === 'string') {\r\n        //         str += ', relid: \"' + node.relid + '\"';\r\n        //     }\r\n        //\r\n        //     str += ', children:';\r\n        //     if (node.children === null) {\r\n        //         str += 'null';\r\n        //     } else {\r\n        //         str += '[';\r\n        //         for (var i = 0; i < node.children.length; ++i) {\r\n        //             if (i !== 0) {\r\n        //                 str += ', ';\r\n        //             }\r\n        //             str += __printNode(node.children[i]);\r\n        //         }\r\n        //         str += ']';\r\n        //     }\r\n        //\r\n        //     str += '}';\r\n        //     return str;\r\n        // }\r\n\r\n        function __test(text, cond) {\r\n            if (!cond) {\r\n                throw new Error(text);\r\n            }\r\n        }\r\n\r\n        function isValidNodeThrow(node) {\r\n            __test('object', typeof node === 'object' && node !== null);\r\n            __test('object 2', Object.hasOwn(node, 'parent') && Object.hasOwn(node, 'relid'));\r\n            __test('parent', typeof node.parent === 'object');\r\n            __test('relid', typeof node.relid === 'string' || node.relid === null);\r\n            __test('parent 2', (node.parent === null) === (node.relid === null));\r\n            __test('age', node.age >= 0 && node.age <= CONSTANTS.MAX_AGE);\r\n            //__test('children', node.children === null || node.children instanceof Array);\r\n            __test('children 2', (node.age === CONSTANTS.MAX_AGE) === (node.children === null));\r\n            __test('data', typeof node.data === 'object' || typeof node.data === 'string' ||\r\n                typeof node.data === 'number');\r\n\r\n            if (node.parent !== null) {\r\n                __test('age 2', node.age >= node.parent.age);\r\n                __test('mutable', !__isMutableData(node.data) || __isMutableData(node.parent.data));\r\n            }\r\n        }\r\n\r\n        // ------- static methods\r\n        this.copyIfObject = function (val) {\r\n            return typeof val === 'object' && val !== null ? JSON.parse(JSON.stringify(val)) : val;\r\n        };\r\n\r\n        this.getParent = function (node) {\r\n            ASSERT(typeof node.parent === 'object');\r\n\r\n            return node.parent;\r\n        };\r\n\r\n        this.getRelid = function (node) {\r\n            ASSERT(node.relid === null || typeof node.relid === 'string');\r\n\r\n            return node.relid;\r\n        };\r\n\r\n        this.getLevel = function (node) {\r\n            var level = 0;\r\n            while (node.parent !== null) {\r\n                ++level;\r\n                node = node.parent;\r\n            }\r\n            return level;\r\n        };\r\n\r\n        this.getRoot = function (node) {\r\n            while (node.parent !== null) {\r\n                node = node.parent;\r\n            }\r\n            return node;\r\n        };\r\n\r\n        this.getPath = function (node, base) {\r\n            if (node === null) {\r\n                return null;\r\n            }\r\n\r\n            var path = '';\r\n            while (node.relid !== null && node !== base) {\r\n                path = CONSTANTS.PATH_SEP + node.relid + path;\r\n                node = node.parent;\r\n            }\r\n            return path;\r\n        };\r\n\r\n        this.isValidPath = function (path) {\r\n            return typeof path === 'string' && (path === '' || path.charAt(0) === CONSTANTS.PATH_SEP);\r\n        };\r\n\r\n        this.splitPath = function (path) {\r\n            ASSERT(self.isValidPath(path));\r\n\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            path.splice(0, 1);\r\n\r\n            return path;\r\n        };\r\n\r\n        this.getParentPath = function (path) {\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            path.splice(-1, 1);\r\n            return path.join(CONSTANTS.PATH_SEP);\r\n        };\r\n\r\n        this.buildPath = function (path) {\r\n            ASSERT(path instanceof Array);\r\n\r\n            return path.length === 0 ? '' : CONSTANTS.PATH_SEP + path.join(CONSTANTS.PATH_SEP);\r\n        };\r\n\r\n        this.joinPaths = function (first, second) {\r\n            ASSERT(self.isValidPath(first) && self.isValidPath(second));\r\n\r\n            return first + second;\r\n        };\r\n\r\n        this.getCommonPathPrefixData = function (first, second) {\r\n            ASSERT(typeof first === 'string' && typeof second === 'string');\r\n\r\n            first = self.splitPath(first);\r\n            second = self.splitPath(second);\r\n\r\n            var common = [];\r\n            for (var i = 0; first[i] === second[i] && i < first.length; ++i) {\r\n                common.push(first[i]);\r\n            }\r\n\r\n            return {\r\n                common: self.buildPath(common),\r\n                first: self.buildPath(first.slice(i)),\r\n                firstLength: first.length - i,\r\n                second: self.buildPath(second.slice(i)),\r\n                secondLength: second.length - i\r\n            };\r\n        };\r\n\r\n        this.isPathInSubTree = function (path, subTreeRoot) {\r\n            return path === subTreeRoot || path.indexOf(subTreeRoot + CONSTANTS.PATH_SEP) === 0;\r\n        };\r\n\r\n        this.normalize = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            // console.log('normalize start', printNode(getRoot(node)));\r\n\r\n            var parent;\r\n\r\n            if (node.children === null) {\r\n                ASSERT(node.age === CONSTANTS.MAX_AGE);\r\n\r\n                if (node.parent !== null) {\r\n                    parent = self.normalize(node.parent);\r\n\r\n                    var temp = __getChildNode(parent.children, node.relid);\r\n                    if (temp !== null) {\r\n                        // TODO: make the current node close to the returned one\r\n\r\n                        // console.log('normalize end1',\r\n                        // printNode(getRoot(temp)));\r\n                        return temp;\r\n                    }\r\n\r\n                    ASSERT(node.parent.children === null || __getChildNode(node.parent.children, node.relid) === null);\r\n                    ASSERT(__getChildNode(parent.children, node.relid) === null);\r\n\r\n                    node.parent = parent;\r\n                    parent.children[node.relid] = node;\r\n\r\n                    temp = __getChildData(parent.data, node.relid);\r\n                    if (!REGEXP.DB_HASH.test(temp) || temp !== __getChildData(node.data, ID_NAME)) {\r\n                        node.data = temp;\r\n                    }\r\n                } else {\r\n                    roots.push(node);\r\n                }\r\n\r\n                node.age = 0;\r\n                node.children = {};\r\n            } else if (node.age !== 0) {\r\n                parent = node;\r\n                do {\r\n                    parent.age = 0;\r\n                    parent = parent.parent;\r\n                } while (parent !== null && parent.age !== 0);\r\n            }\r\n\r\n            // console.log('normalize end2', printNode(getRoot(node)));\r\n            return node;\r\n        };\r\n\r\n        // ------- hierarchy\r\n\r\n        this.getAncestor = function (first, second) {\r\n            ASSERT(self.getRoot(first) === self.getRoot(second));\r\n\r\n            first = self.normalize(first);\r\n            second = self.normalize(second);\r\n\r\n            var a = [];\r\n            do {\r\n                a.push(first);\r\n                first = first.parent;\r\n            } while (first !== null);\r\n\r\n            var b = [];\r\n            do {\r\n                b.push(second);\r\n                second = second.parent;\r\n            } while (second !== null);\r\n\r\n            var i = a.length - 1;\r\n            var j = b.length - 1;\r\n            while (i !== 0 && j !== 0 && a[i - 1] === b[j - 1]) {\r\n                --i;\r\n                --j;\r\n            }\r\n\r\n            ASSERT(a[i] === b[j]);\r\n            return a[i];\r\n        };\r\n\r\n        this.isAncestor = function (node, ancestor) {\r\n            ASSERT(self.getRoot(node) === self.getRoot(ancestor));\r\n\r\n            node = self.normalize(node);\r\n            ancestor = self.normalize(ancestor);\r\n\r\n            do {\r\n                if (node === ancestor) {\r\n                    return true;\r\n                }\r\n\r\n                node = node.parent;\r\n            } while (node !== null);\r\n\r\n            return false;\r\n        };\r\n\r\n        this.createRoot = function () {\r\n            var root = {\r\n                parent: null,\r\n                relid: null,\r\n                age: 0,\r\n                children: {},\r\n                data: {\r\n                    _mutable: true\r\n                },\r\n                initial: {\r\n                    '': null\r\n                },\r\n                rootid: ++rootCounter\r\n            };\r\n            root.data[ID_NAME] = '';\r\n            roots.push(root);\r\n\r\n            __ageRoots();\r\n            return root;\r\n        };\r\n\r\n        this.getChild = function (node, relid) {\r\n            ASSERT(typeof relid === 'string' && relid !== ID_NAME);\r\n\r\n            node = self.normalize(node);\r\n\r\n            var child = __getChildNode(node.children, relid);\r\n            if (child !== null) {\r\n                return child;\r\n            }\r\n\r\n            child = {\r\n                parent: node,\r\n                relid: relid,\r\n                age: 0,\r\n                children: {},\r\n                data: __getChildData(node.data, relid)\r\n            };\r\n            node.children[relid] = child;\r\n\r\n            __ageRoots();\r\n            return child;\r\n        };\r\n\r\n        this.childLoaded = function (node, relid) {\r\n            ASSERT(typeof relid === 'string' && relid !== ID_NAME);\r\n            node = self.normalize(node);\r\n            return __getChildNode(node.children, relid) !== null;\r\n        };\r\n\r\n        this.createChild = function (node, takenRelids, minimumLength) {\r\n            node = self.normalize(node);\r\n\r\n            if (typeof node.data !== 'object' || node.data === null) {\r\n                throw new Error('invalid node data');\r\n            }\r\n\r\n            return self.getChild(node, RANDOM.generateRelid(takenRelids || node.data, minimumLength));\r\n        };\r\n\r\n        // ------- data manipulation\r\n\r\n        this.isMutable = function (node) {\r\n            node = self.normalize(node);\r\n            return __isMutableData(node.data);\r\n        };\r\n\r\n        this.isEmpty = function (node) {\r\n            node = self.normalize(node);\r\n            if (typeof node.data !== 'object' || node.data === null) {\r\n                return false;\r\n            } else if (node.data === __getEmptyData()) {\r\n                return true;\r\n            }\r\n\r\n            return __isEmptyData(node.data);\r\n        };\r\n\r\n        this.mutate = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            node = self.normalize(node);\r\n            var data = node.data;\r\n\r\n            if (typeof data !== 'object' || data === null) {\r\n                return false;\r\n            } else if (data[CONSTANTS.MUTABLE_PROPERTY] === true) {\r\n                return true;\r\n            }\r\n\r\n            // TODO: infinite cycle if MAX_MUTATE is smaller than depth!\r\n            // gmeConfig.storage.autoPersist is removed and always false\r\n            var autoPersist = false;\r\n            if (autoPersist && ++mutateCount > CONSTANTS.MAX_MUTATE) {\r\n                mutateCount = 0;\r\n\r\n                for (var i = 0; i < roots.length; ++i) {\r\n                    if (__isMutableData(roots[i].data)) {\r\n                        __saveData(roots[i].data, roots[i], '');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (node.parent !== null && !self.mutate(node.parent)) {\r\n                // this should never happen\r\n                return false;\r\n            }\r\n\r\n            var copy = __getEmptyData();\r\n\r\n            for (var key in data) {\r\n                copy[key] = data[key];\r\n            }\r\n            copy[CONSTANTS.MUTABLE_PROPERTY] = true;\r\n\r\n            if (typeof data[ID_NAME] === 'string') {\r\n                copy[ID_NAME] = '';\r\n            }\r\n\r\n            if (node.parent !== null) {\r\n                //inherited child doesn't have an entry in the parent as long as it has not been modified\r\n                ASSERT(node.parent.data[node.relid] === undefined ||\r\n                    __areEquivalent(__getChildData(node.parent.data, node.relid), node.data));\r\n                node.parent.data[node.relid] = copy;\r\n            }\r\n\r\n            node.data = copy;\r\n            return true;\r\n        };\r\n\r\n        this.getData = function (node) {\r\n            node = self.normalize(node);\r\n\r\n            ASSERT(!__isMutableData(node.data));\r\n            return node.data;\r\n        };\r\n\r\n        this.setData = function (node, data) {\r\n            ASSERT(data !== null && typeof data !== 'undefined');\r\n\r\n            node = self.normalize(node);\r\n            if (node.parent !== null) {\r\n                if (!self.mutate(node.parent)) {\r\n                    throw new Error('incorrect node data');\r\n                }\r\n\r\n                node.parent.data[node.relid] = data;\r\n            }\r\n\r\n            node.data = data;\r\n            __reloadChildrenData(node);\r\n        };\r\n\r\n        this.deleteData = function (node) {\r\n            node = self.normalize(node);\r\n\r\n            if (node.parent !== null) {\r\n                if (!self.mutate(node.parent)) {\r\n                    throw new Error('incorrect node data');\r\n                }\r\n\r\n                delete node.parent.data[node.relid];\r\n            }\r\n\r\n            var data = node.data;\r\n\r\n            node.data = __getEmptyData();\r\n            __reloadChildrenData(node);\r\n\r\n            return data;\r\n        };\r\n\r\n        this.copyData = function (node) {\r\n            node = self.normalize(node);\r\n\r\n            if (typeof node.data !== 'object' || node.data === null) {\r\n                return node.data;\r\n            }\r\n\r\n            // TODO: return immutable data without coping\r\n            return JSON.parse(JSON.stringify(node.data));\r\n        };\r\n\r\n        this.getProperty = function (node, name) {\r\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\r\n\r\n            var data;\r\n            node = self.normalize(node);\r\n\r\n            if (typeof node.data === 'object' && node.data !== null) {\r\n                data = node.data[name];\r\n            }\r\n\r\n            // TODO: corerel uses getProperty to get the overlay content which can get mutable\r\n            // ASSERT(!__isMutableData(data));\r\n            return data;\r\n        };\r\n\r\n        this.setProperty = function (node, name, data) {\r\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\r\n            ASSERT(!__isMutableData(data) /*&& data !== null*/ && data !== undefined);\r\n            //TODO is the 'null' really can be a value of a property???\r\n\r\n            node = self.normalize(node);\r\n            if (!self.mutate(node)) {\r\n                throw new Error('incorrect node data');\r\n            }\r\n\r\n            node.data[name] = data;\r\n\r\n            var child = __getChildNode(node.children, name);\r\n            if (child !== null) {\r\n                child.data = data;\r\n                __reloadChildrenData(child);\r\n            }\r\n        };\r\n\r\n        this.deleteProperty = function (node, name) {\r\n            ASSERT(typeof name === 'string' && name !== ID_NAME);\r\n\r\n            node = self.normalize(node);\r\n            if (!self.mutate(node)) {\r\n                throw new Error('incorrect node data');\r\n            }\r\n\r\n            delete node.data[name];\r\n\r\n            var child = __getChildNode(node.children, name);\r\n            if (child !== null) {\r\n                child.data = __getEmptyData();\r\n                __reloadChildrenData(child);\r\n            }\r\n        };\r\n\r\n        this.renameProperty = function (node, oldName, newName) {\r\n            self.setProperty(node, newName, self.getProperty(node, oldName));\r\n            self.deleteProperty(node, oldName);\r\n        };\r\n\r\n        this.getKeys = function (node, predicate) {\r\n            var result;\r\n            node = self.normalize(node);\r\n\r\n            if (typeof node.data !== 'object' || node.data === null) {\r\n                return null;\r\n            }\r\n\r\n            result = self.getRawKeys(node.data, predicate);\r\n            return result;\r\n        };\r\n\r\n        this.getRawKeys = function (object, predicate) {\r\n            predicate = predicate || __noUnderscore;\r\n\r\n            var keys = Object.keys(object);\r\n\r\n            var i = keys.length;\r\n            while (--i >= 0 && !predicate(keys[i])) {\r\n                keys.pop();\r\n            }\r\n\r\n            while (--i >= 0) {\r\n                if (!predicate(keys[i])) {\r\n                    keys[i] = keys.pop();\r\n                }\r\n            }\r\n\r\n            return keys;\r\n        };\r\n\r\n        // ------- persistence\r\n\r\n        this.getHash = function (node) {\r\n            if (node === null) {\r\n                return null;\r\n            }\r\n\r\n            var hash;\r\n            node = self.normalize(node);\r\n            if (typeof node.data === 'object' && node.data !== null) {\r\n                hash = node.data[ID_NAME];\r\n            }\r\n\r\n            ASSERT(typeof hash === 'string' || hash === undefined);\r\n            return hash;\r\n        };\r\n\r\n        this.isHashed = function (node) {\r\n            node = self.normalize(node);\r\n            return typeof node.data === 'object' && node.data !== null && typeof node.data[ID_NAME] === 'string';\r\n        };\r\n\r\n        this.setHashed = function (node, hashed, noMutate) {\r\n            ASSERT(typeof hashed === 'boolean');\r\n\r\n            node = self.normalize(node);\r\n            if (!noMutate) {\r\n                if (!self.mutate(node)) {\r\n                    throw new Error('incorrect node data');\r\n                }\r\n            }\r\n\r\n            if (hashed) {\r\n                node.data[ID_NAME] = '';\r\n            } else {\r\n                delete node.data[ID_NAME];\r\n            }\r\n\r\n            ASSERT(node.children[ID_NAME] === undefined);\r\n        };\r\n\r\n        this.persist = function (node, stackedObjects) {\r\n            var updated = false,\r\n                result;\r\n\r\n            stackedObjects = stackedObjects || {};\r\n            node = self.normalize(node);\r\n\r\n            //currently there is no reason to call the persist on a non-root object\r\n            node = self.getRoot(node);\r\n\r\n            if (!__isMutableData(node.data)) {\r\n                return {rootHash: node.data[ID_NAME], objects: {}};\r\n            }\r\n\r\n            updated = __saveData(node.data, node, '', stackedObjects);\r\n            if (updated !== __getEmptyData()) {\r\n                result = {};\r\n                result.objects = stackedObjects;\r\n                result.rootHash = node.data[ID_NAME];\r\n            } else {\r\n                result = {rootHash: node.data[ID_NAME], objects: {}};\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.loadRoot = function (hash) {\r\n            ASSERT(REGEXP.DB_HASH.test(hash));\r\n            return TASYNC.call(__loadRoot2, self.loadObject(hash));\r\n        };\r\n\r\n        this.loadChild = function (node, relid) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            node = self.getChild(node, relid);\r\n\r\n            if (typeof node.data === 'object') {\r\n                return node.data !== null ? node : null;\r\n            } else if (REGEXP.DB_HASH.test(node.data)) {\r\n                // TODO: this is a hack, we should avoid loading it multiple\r\n                // times\r\n                return TASYNC.call(__loadChild2, node, self.loadObject(node.data));\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.getChildHash = function (node, relid) {\r\n            ASSERT(self.isValidNode(node));\r\n\r\n            node = self.getChild(node, relid);\r\n\r\n            if (typeof node.data === 'object') {\r\n                return node.data !== null ? self.getHash(node) : null;\r\n            } else if (REGEXP.DB_HASH.test(node.data)) {\r\n                // TODO: this is a hack, we should avoid loading it multiple\r\n                // times\r\n                return node.data;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.loadByPath = function (node, path) {\r\n            ASSERT(self.isValidNode(node));\r\n            ASSERT(path === '' || path.charAt(0) === CONSTANTS.PATH_SEP);\r\n\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            return __loadDescendantByPath2(node, path, 1);\r\n        };\r\n\r\n        // ------- valid -------\r\n        this.isValidNode = function (node) {\r\n            try {\r\n                isValidNodeThrow(node);\r\n                return true;\r\n            } catch (error) {\r\n                logger.error(error.message, {stack: error.stack, node: node});\r\n                return false;\r\n            }\r\n        };\r\n\r\n        this.removeChildFromCache = function (node, relid) {\r\n            delete node.children[relid];\r\n\r\n            return node;\r\n        };\r\n    }\r\n\r\n    return CoreTree;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/*eslint  no-console: 0*/\r\n\r\n/**\r\n * @author mmaroti / https://github.com/mmaroti\r\n */\r\n\r\ndefine('common/core/metacore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/util/canon',\r\n    'common/core/constants'\r\n], function (ASSERT, TASYNC, CANON, CONSTANTS) {\r\n    'use strict';\r\n\r\n    var MetaCore = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized MetaCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function getMetaNode(node) {\r\n            return self.getChild(node, CONSTANTS.META_NODE);\r\n        }\r\n\r\n        function getMetaChildrenNode(node) {\r\n            return self.getChild(getMetaNode(node), CONSTANTS.META_CHILDREN);\r\n        }\r\n\r\n        function getMetaPointerNode(node, name) {\r\n            var meta = getMetaNode(node),\r\n                pointerNames = self.getPointerNames(meta) || [];\r\n            if (pointerNames.indexOf(name) !== -1) {\r\n                return self.getChild(meta, CONSTANTS.META_POINTER_PREFIX + name);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function metaPointerNode(node, name) {\r\n            //this function always gives back a node, use this if you just want to create the node as well\r\n            self.setPointer(getMetaNode(node), name, null);\r\n            return self.getChild(getMetaNode(node), CONSTANTS.META_POINTER_PREFIX + name);\r\n        }\r\n\r\n        function getMetaAspectsNode(node) {\r\n            return self.getChild(getMetaNode(node), CONSTANTS.META_ASPECTS);\r\n        }\r\n\r\n        function getMetaAspectNode(node, name) {\r\n            var aspectNode = getMetaAspectsNode(node),\r\n                names = self.getPointerNames(aspectNode) || [];\r\n            if (names.indexOf(name) !== -1) {\r\n                return self.getChild(aspectNode, CONSTANTS.META_ASPECT_PREFIX + name);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function metaAspectNode(node, name) {\r\n            //this function always gives back a node, use this if you just want to create the node as well\r\n            var aspectNode = self.getChild(getMetaNode(node), CONSTANTS.META_ASPECTS);\r\n\r\n            self.setPointer(aspectNode, name, null);\r\n            return self.getChild(aspectNode, CONSTANTS.META_ASPECT_PREFIX + name);\r\n        }\r\n\r\n        //type related extra query functions\r\n        function isOnMetaSheet(node) {\r\n            //MetaAspectSet\r\n            var sets = self.isMemberOf(node);\r\n\r\n            if (sets && sets[''] && sets[''].indexOf(CONSTANTS.META_SET_NAME) !== -1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function isMetaNode(node) {\r\n            var metaNodes = innerCore.getRoot(node).metaNodes;\r\n\r\n            if (metaNodes) {\r\n                return Object.hasOwn(metaNodes, innerCore.getPath(node));\r\n            } else {\r\n                // The meta-cache layer is not used - fallback to check if it's a member of the MetaAspectSet.\r\n                return isOnMetaSheet(node);\r\n            }\r\n        }\r\n\r\n        function getRelationDefinitionInfo(node, name, target) {\r\n            var targetPath,\r\n                result = {},\r\n                definedTarget,\r\n                validTargets;\r\n\r\n            while (node) {\r\n                if (self.isValidTargetOf(target, node, name)) {\r\n                    result.ownerNode = node;\r\n                    result.ownerPath = self.getPath(node);\r\n                    validTargets = self.getOwnValidTargetPaths(node, name);\r\n                    definedTarget = target;\r\n                    while (definedTarget) {\r\n                        targetPath = self.getPath(definedTarget);\r\n                        if (validTargets.indexOf(targetPath) !== -1) {\r\n                            result.targetPath = targetPath;\r\n                            result.targetNode = definedTarget;\r\n                            return result;\r\n                        }\r\n                        definedTarget = self.getBase(definedTarget);\r\n                    }\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.isTypeOf = function (node, typeNodeOrNode) {\r\n            return innerCore.isInstanceOf(node, typeNodeOrNode);\r\n        };\r\n\r\n        this.isValidChildOf = function (node, parentNode) {\r\n            var validChildTypePaths = self.getMemberPaths(getMetaChildrenNode(parentNode), CONSTANTS.SET_ITEMS) || [];\r\n            while (node) {\r\n                if (validChildTypePaths.indexOf(self.getPath(node)) !== -1) {\r\n                    return true;\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.getValidPointerNames = function (node) {\r\n            var metaDefNode = getMetaNode(node),\r\n                validNames = self.getPointerNames(metaDefNode) || [],\r\n                i,\r\n                validPointerNames = [],\r\n                metaPointerNode, max;\r\n\r\n            for (i = 0; i < validNames.length; i++) {\r\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\r\n                max = self.getAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\r\n                if (max === 1) {\r\n                    //TODO Specify what makes something a pointer and what a set???\r\n                    //TODO Can you extend a pointer to a set????\r\n                    validPointerNames.push(validNames[i]);\r\n                }\r\n            }\r\n\r\n            return validPointerNames;\r\n        };\r\n\r\n        this.getOwnValidPointerNames = function (node) {\r\n            var metaDefNode = getMetaNode(node),\r\n                validNames = self.getOwnPointerNames(metaDefNode) || [],\r\n                i,\r\n                validPointerNames = [],\r\n                metaPointerNode, max;\r\n\r\n            for (i = 0; i < validNames.length; i++) {\r\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\r\n                max = self.getOwnAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\r\n                if (max === 1) {\r\n                    //TODO Specify what makes something a pointer and what a set???\r\n                    //TODO Can you extend a pointer to a set????\r\n                    validPointerNames.push(validNames[i]);\r\n                }\r\n            }\r\n\r\n            return validPointerNames;\r\n        };\r\n\r\n        this.getValidSetNames = function (node) {\r\n            var metaDefNode = getMetaNode(node),\r\n                validNames = self.getPointerNames(metaDefNode) || [],\r\n                i,\r\n                validSetNames = [],\r\n                metaPointerNode, max;\r\n\r\n            for (i = 0; i < validNames.length; i++) {\r\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\r\n                max = self.getAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\r\n\r\n                // FIXME: max seems to always be undefined - there is no such attribute on the set definitions\r\n                if (max === undefined || max === -1 || max > 1) {\r\n                    //TODO specify what makes something a pointer and what a set???\r\n                    //TODO can you extend a pointer to a set????\r\n                    validSetNames.push(validNames[i]);\r\n                }\r\n            }\r\n\r\n            return validSetNames;\r\n        };\r\n\r\n        this.getOwnValidSetNames = function (node) {\r\n            var metaDefNode = getMetaNode(node),\r\n                validNames = self.getOwnPointerNames(metaDefNode) || [],\r\n                i,\r\n                validSetNames = [],\r\n                metaPointerNode, max;\r\n\r\n            for (i = 0; i < validNames.length; i++) {\r\n                metaPointerNode = self.getChild(metaDefNode, CONSTANTS.META_POINTER_PREFIX + validNames[i]);\r\n                max = self.getOwnAttribute(metaPointerNode, CONSTANTS.SET_ITEMS_MAX);\r\n\r\n                // FIXME: max seems to always be undefined - there is no such attribute on the set definitions\r\n                if (max === undefined || max === -1 || max > 1) {\r\n                    //TODO specify what makes something a pointer and what a set???\r\n                    //TODO can you extend a pointer to a set????\r\n                    validSetNames.push(validNames[i]);\r\n                }\r\n            }\r\n\r\n            return validSetNames;\r\n        };\r\n\r\n        this.isValidTargetOf = function (node, source, name) {\r\n            var pointerMetaNode = getMetaPointerNode(source, name);\r\n\r\n            if (pointerMetaNode) {\r\n                var validTargetTypePaths = self.getMemberPaths(pointerMetaNode, CONSTANTS.SET_ITEMS) || [];\r\n                while (node) {\r\n                    if (validTargetTypePaths.indexOf(self.getPath(node)) !== -1) {\r\n                        return true;\r\n                    }\r\n                    node = self.getBase(node);\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.getValidAttributeNames = function (node) {\r\n            return self.getAttributeNames(getMetaNode(node)) || [];\r\n        };\r\n\r\n        this.getOwnValidAttributeNames = function (node) {\r\n            return self.getOwnAttributeNames(getMetaNode(node)) || [];\r\n        };\r\n\r\n        this.isValidAttributeValueOf = function (node, name, value) {\r\n            var typedValue;\r\n\r\n            if (self.getValidAttributeNames(node).indexOf(name) === -1) {\r\n                return false;\r\n            }\r\n            var meta = self.getAttribute(getMetaNode(node), name);\r\n\r\n            if (meta.enum && meta.enum instanceof Array) {\r\n                return meta.enum.indexOf(value) !== -1; //TODO should we check type beforehand?\r\n            }\r\n\r\n            switch (meta.type) {\r\n                case CONSTANTS.ATTRIBUTE_TYPES.BOOLEAN:\r\n                    if (value === true || value === false) {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                case CONSTANTS.ATTRIBUTE_TYPES.STRING:\r\n                    if (typeof value === 'string') {\r\n                        if (meta.regexp) {\r\n                            return (new RegExp(meta.regexp).test(value));\r\n                        }\r\n                        return true;\r\n                    }\r\n                    break;\r\n                case CONSTANTS.ATTRIBUTE_TYPES.ASSET:\r\n                    if (typeof value === 'string') {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                case CONSTANTS.ATTRIBUTE_TYPES.INTEGER:\r\n                    typedValue = parseInt(value);\r\n                    if (!isNaN(typedValue) && parseFloat(value) === typedValue) {\r\n                        if ((typeof meta.min !== 'number' || typedValue >= meta.min) &&\r\n                            (typeof meta.max !== 'number' || typedValue <= meta.max)) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case CONSTANTS.ATTRIBUTE_TYPES.FLOAT:\r\n                    typedValue = parseFloat(value);\r\n                    if (!isNaN(typedValue)) {\r\n                        if ((typeof meta.min !== 'number' || typedValue >= meta.min) &&\r\n                            (typeof meta.max !== 'number' || typedValue <= meta.max)) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getValidAspectNames = function (node) {\r\n            return self.getPointerNames(getMetaAspectsNode(node)) || [];\r\n        };\r\n\r\n        this.getOwnValidAspectNames = function (node) {\r\n            return self.getOwnPointerNames(getMetaAspectsNode(node)) || [];\r\n        };\r\n\r\n        this.getAspectMeta = function (node, name) {\r\n            return self.getMemberPaths(getMetaAspectNode(node, name), CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        //additional meta functions for getting meta definitions\r\n        this.getJsonMeta = function (node) {\r\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\r\n                tempNode,\r\n                names,\r\n                pointer,\r\n                i, j;\r\n\r\n            //fill children part\r\n            tempNode = getMetaChildrenNode(node);\r\n\r\n            meta.children.minItems = [];\r\n            meta.children.maxItems = [];\r\n            meta.children.items = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\r\n            for (i = 0; i < meta.children.items.length; i++) {\r\n                meta.children.minItems.push(\r\n                    self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\r\n                        CONSTANTS.SET_ITEMS_MIN) || -1);\r\n\r\n                meta.children.maxItems.push(\r\n                    self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\r\n                        CONSTANTS.SET_ITEMS_MAX) || -1);\r\n            }\r\n            meta.children.min = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\r\n            meta.children.max = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\r\n\r\n            //attributes\r\n            names = self.getValidAttributeNames(node);\r\n            for (i = 0; i < names.length; i++) {\r\n                meta.attributes[names[i]] = self.copyIfObject(self.getAttribute(getMetaNode(node), names[i]));\r\n            }\r\n\r\n            //pointers\r\n            names = self.getPointerNames(getMetaNode(node));\r\n            for (i = 0; i < names.length; i++) {\r\n                tempNode = getMetaPointerNode(node, names[i]);\r\n                pointer = {};\r\n\r\n                pointer.items = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\r\n                pointer.min = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\r\n                pointer.max = self.getAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\r\n                pointer.minItems = [];\r\n                pointer.maxItems = [];\r\n\r\n                for (j = 0; j < pointer.items.length; j++) {\r\n                    pointer.minItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\r\n                        CONSTANTS.SET_ITEMS_MIN) || -1);\r\n                    pointer.maxItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\r\n                        CONSTANTS.SET_ITEMS_MAX) || -1);\r\n\r\n                }\r\n\r\n                meta.pointers[names[i]] = pointer;\r\n            }\r\n\r\n            //aspects\r\n            names = self.getValidAspectNames(node);\r\n\r\n            for (i = 0; i < names.length; i++) {\r\n                tempNode = getMetaAspectNode(node, names[i]);\r\n                meta.aspects[names[i]] = self.getMemberPaths(tempNode, CONSTANTS.SET_ITEMS) || [];\r\n            }\r\n\r\n            //constraints\r\n            names = self.getConstraintNames(node);\r\n            for (i = 0; i < names.length; i++) {\r\n                meta.constraints[names[i]] = self.getConstraint(node, names[i]);\r\n            }\r\n\r\n            return meta;\r\n        };\r\n\r\n        this.getOwnJsonMeta = function (node) {\r\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\r\n                tempNode,\r\n                metaNode = getMetaNode(node),\r\n                childrenNode = self.getChild(metaNode, CONSTANTS.META_CHILDREN),\r\n                aspectsNode = self.getChild(metaNode, CONSTANTS.META_ASPECTS),\r\n                names,\r\n                pointer,\r\n                i, j;\r\n\r\n            //fill children part\r\n\r\n            meta.children.minItems = [];\r\n            meta.children.maxItems = [];\r\n            meta.children.items = self.getOwnMemberPaths(childrenNode, CONSTANTS.SET_ITEMS);\r\n            if (meta.children.items.length > 0) {\r\n                for (i = 0; i < meta.children.items.length; i++) {\r\n                    meta.children.minItems.push(\r\n                        self.getMemberAttribute(childrenNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\r\n                            CONSTANTS.SET_ITEMS_MIN) || -1);\r\n\r\n                    meta.children.maxItems.push(\r\n                        self.getMemberAttribute(childrenNode, CONSTANTS.SET_ITEMS, meta.children.items[i],\r\n                            CONSTANTS.SET_ITEMS_MAX) || -1);\r\n                }\r\n                names = self.getOwnAttributeNames(childrenNode);\r\n                if (names.indexOf('min') !== -1) {\r\n                    meta.children.min = self.getAttribute(childrenNode, CONSTANTS.SET_ITEMS_MIN);\r\n                }\r\n                if (names.indexOf('max') !== -1) {\r\n                    meta.children.max = self.getAttribute(childrenNode, CONSTANTS.SET_ITEMS_MAX);\r\n                }\r\n            } else {\r\n                delete meta.children;\r\n            }\r\n            //attributes\r\n            names = self.getOwnAttributeNames(metaNode) || [];\r\n            if (names.length > 0) {\r\n                for (i = 0; i < names.length; i++) {\r\n                    meta.attributes[names[i]] = self.copyIfObject(self.getOwnAttribute(metaNode, names[i]));\r\n                }\r\n            } else {\r\n                delete meta.attributes;\r\n            }\r\n\r\n            //pointers\r\n            names = self.getOwnPointerNames(metaNode);\r\n            if (names.length > 0) {\r\n                for (i = 0; i < names.length; i++) {\r\n                    tempNode = self.getChild(metaNode, CONSTANTS.META_POINTER_PREFIX + names[i]);\r\n                    pointer = {};\r\n\r\n                    pointer.items = self.getOwnMemberPaths(tempNode, CONSTANTS.SET_ITEMS);\r\n                    pointer.min = self.getOwnAttribute(tempNode, CONSTANTS.SET_ITEMS_MIN);\r\n                    pointer.max = self.getOwnAttribute(tempNode, CONSTANTS.SET_ITEMS_MAX);\r\n                    pointer.minItems = [];\r\n                    pointer.maxItems = [];\r\n\r\n                    for (j = 0; j < pointer.items.length; j++) {\r\n                        pointer.minItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\r\n                            CONSTANTS.SET_ITEMS_MIN) || -1);\r\n                        pointer.maxItems.push(self.getMemberAttribute(tempNode, CONSTANTS.SET_ITEMS, pointer.items[j],\r\n                            CONSTANTS.SET_ITEMS_MAX) || -1);\r\n\r\n                    }\r\n\r\n                    meta.pointers[names[i]] = pointer;\r\n                }\r\n            } else {\r\n                delete meta.pointers;\r\n            }\r\n\r\n            //aspects\r\n            names = self.getOwnPointerNames(aspectsNode) || [];\r\n\r\n            if (names.length > 0) {\r\n                for (i = 0; i < names.length; i++) {\r\n                    tempNode = self.getChild(aspectsNode, CONSTANTS.META_ASPECT_PREFIX + names[i]);\r\n                    meta.aspects[names[i]] = self.getOwnMemberPaths(tempNode, CONSTANTS.SET_ITEMS) || [];\r\n                }\r\n            } else {\r\n                delete meta.aspects;\r\n            }\r\n\r\n            //constraints\r\n            names = self.getOwnConstraintNames(node);\r\n\r\n            if (names.length > 0) {\r\n                for (i = 0; i < names.length; i++) {\r\n                    meta.constraints[names[i]] = self.getConstraint(node, names[i]);\r\n                }\r\n            } else {\r\n                delete meta.constraints;\r\n            }\r\n\r\n            return meta;\r\n        };\r\n\r\n        this.clearMetaRules = function (node) {\r\n            self.deleteNode(getMetaNode(node), true);\r\n        };\r\n\r\n        this.setAttributeMeta = function (node, name, value) {\r\n            var defaultValue;\r\n\r\n            if (Object.hasOwn(value, 'default')) {\r\n                defaultValue = value.default;\r\n                value = JSON.parse(JSON.stringify(value));\r\n                delete value.default;\r\n            }\r\n\r\n            self.setAttribute(getMetaNode(node), name, value);\r\n\r\n            if (typeof defaultValue !== 'undefined') {\r\n                self.setAttribute(node, name, defaultValue);\r\n            }\r\n        };\r\n\r\n        this.renameAttributeMeta = function (node, oldName, newName) {\r\n            self.setAttributeMeta(node, newName, self.getAttributeMeta(node, oldName));\r\n            self.delAttributeMeta(node, oldName);\r\n            if (self.getOwnAttributeNames(node).indexOf(oldName) !== -1) {\r\n                self.renameAttribute(node, oldName, newName);\r\n            }\r\n        };\r\n\r\n        this.delAttributeMeta = function (node, name) {\r\n            self.delAttribute(getMetaNode(node), name);\r\n        };\r\n\r\n        this.getAttributeMeta = function (node, name) {\r\n            return self.getAttribute(getMetaNode(node), name);\r\n        };\r\n\r\n        this.getValidChildrenPaths = function (node) {\r\n            return self.getMemberPaths(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.getOwnValidChildrenPaths = function (node) {\r\n            return self.getOwnMemberPaths(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.getChildrenMeta = function (node) {\r\n            var cMetaNode = getMetaChildrenNode(node),\r\n                childrenMeta = {\r\n                    min: self.getAttribute(cMetaNode, CONSTANTS.SET_ITEMS_MIN),\r\n                    max: self.getAttribute(cMetaNode, CONSTANTS.SET_ITEMS_MAX)\r\n                },\r\n                paths = self.getMemberPaths(cMetaNode, CONSTANTS.SET_ITEMS),\r\n                i;\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                childrenMeta[paths[i]] = {\r\n                    min: self.getMemberAttribute(cMetaNode, CONSTANTS.SET_ITEMS, paths[i], CONSTANTS.SET_ITEMS_MIN),\r\n                    max: self.getMemberAttribute(cMetaNode, CONSTANTS.SET_ITEMS, paths[i], CONSTANTS.SET_ITEMS_MAX)\r\n                };\r\n            }\r\n\r\n            if (paths.length > 0) {\r\n                return childrenMeta;\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        this.setChildMeta = function (node, child, min, max) {\r\n            self.addMember(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, child);\r\n            min = min || -1;\r\n            max = max || -1;\r\n            self.setMemberAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, self.getPath(child),\r\n                CONSTANTS.SET_ITEMS_MIN, min);\r\n            self.setMemberAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, self.getPath(child),\r\n                CONSTANTS.SET_ITEMS_MAX, max);\r\n        };\r\n\r\n        this.delChildMeta = function (node, childPath) {\r\n            self.delMember(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS, childPath);\r\n        };\r\n\r\n        this.setChildrenMetaLimits = function (node, min, max) {\r\n            if (min) {\r\n                self.setAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS_MIN, min);\r\n            }\r\n            if (max) {\r\n                self.setAttribute(getMetaChildrenNode(node), CONSTANTS.SET_ITEMS_MAX, max);\r\n            }\r\n        };\r\n\r\n        this.setPointerMetaTarget = function (node, name, target, min, max) {\r\n            self.addMember(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, target);\r\n            min = min === 0 ? 0 : (min || -1);\r\n            self.setMemberAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, self.getPath(target),\r\n                CONSTANTS.SET_ITEMS_MIN, min);\r\n            max = max === 0 ? 0 : (max || -1);\r\n            self.setMemberAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS, self.getPath(target),\r\n                CONSTANTS.SET_ITEMS_MAX, max);\r\n        };\r\n\r\n        this.movePointerMetaTarget = function (node, target, oldName, newName) {\r\n            var targetPath = self.getPath(target),\r\n                min, max;\r\n\r\n            if (self.getOwnValidTargetPaths(node, newName).length === 0) {\r\n                // The move introduces the newName relation\r\n                min = self.getAttribute(metaPointerNode(node, oldName), CONSTANTS.SET_ITEMS_MIN);\r\n                max = self.getAttribute(metaPointerNode(node, oldName), CONSTANTS.SET_ITEMS_MAX);\r\n                self.setPointerMetaLimits(node, newName, min, max);\r\n            }\r\n\r\n            min = self.getMemberAttribute(metaPointerNode(node, oldName),\r\n                CONSTANTS.SET_ITEMS, targetPath, CONSTANTS.SET_ITEMS_MIN);\r\n            max = self.getMemberAttribute(metaPointerNode(node, oldName),\r\n                CONSTANTS.SET_ITEMS, targetPath, CONSTANTS.SET_ITEMS_MAX);\r\n            self.setPointerMetaTarget(node, newName, target, min, max);\r\n            self.delPointerMetaTarget(node, oldName, targetPath);\r\n\r\n            if (self.getOwnValidTargetPaths(node, oldName).length === 0) {\r\n                self.delPointerMeta(node, oldName);\r\n            }\r\n        };\r\n\r\n        this.delPointerMetaTarget = function (node, name, targetPath) {\r\n            var metaNode = getMetaPointerNode(node, name);\r\n            if (metaNode) {\r\n                self.delMember(metaNode, CONSTANTS.SET_ITEMS, targetPath);\r\n            }\r\n        };\r\n\r\n        this.setPointerMetaLimits = function (node, name, min, max) {\r\n            if (min || min === 0) {\r\n                self.setAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS_MIN, min);\r\n            }\r\n            if (max || max === 0) {\r\n                self.setAttribute(metaPointerNode(node, name), CONSTANTS.SET_ITEMS_MAX, max);\r\n            }\r\n        };\r\n\r\n        this.delPointerMeta = function (node, name) {\r\n            self.deleteNode(metaPointerNode(node, name), true);\r\n            self.deletePointer(getMetaNode(node), name);\r\n        };\r\n\r\n        this.getPointerMeta = function (node, name) {\r\n            var pointerMeta = {},\r\n                members,\r\n                member,\r\n                i,\r\n                pointerMetaNode = getMetaPointerNode(node, name);\r\n\r\n            if (pointerMetaNode === null) {\r\n                return null;\r\n            }\r\n\r\n            //min\r\n            pointerMeta.min = self.getAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS_MIN);\r\n            if (pointerMeta.min === undefined) {\r\n                pointerMeta.min = -1;\r\n            }\r\n\r\n            //max\r\n            pointerMeta.max = self.getAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS_MAX);\r\n            if (pointerMeta.max === undefined) {\r\n                pointerMeta.max = -1;\r\n            }\r\n\r\n            members = self.getMemberPaths(pointerMetaNode, CONSTANTS.SET_ITEMS);\r\n            for (i = 0; i < members.length; i++) {\r\n                member = {\r\n                    min: self.getMemberAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS, members[i],\r\n                        CONSTANTS.SET_ITEMS_MIN),\r\n                    max: self.getMemberAttribute(pointerMetaNode, CONSTANTS.SET_ITEMS, members[i],\r\n                        CONSTANTS.SET_ITEMS_MAX)\r\n                };\r\n                if (member.min === undefined) {\r\n                    member.min = -1;\r\n                }\r\n                if (member.max === undefined) {\r\n                    member.max = -1;\r\n                }\r\n\r\n                pointerMeta[members[i]] = member;\r\n            }\r\n\r\n            return pointerMeta;\r\n        };\r\n\r\n        this.getValidTargetPaths = function (node, name) {\r\n            var pointerNode = getMetaPointerNode(node, name);\r\n            if (pointerNode === null) {\r\n                return [];\r\n            }\r\n            return self.getMemberPaths(pointerNode, CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.getOwnValidTargetPaths = function (node, name) {\r\n            var pointerNode = getMetaPointerNode(node, name);\r\n            if (pointerNode === null) {\r\n                return [];\r\n            }\r\n            return self.getOwnMemberPaths(pointerNode, CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.setAspectMetaTarget = function (node, name, target) {\r\n            self.addMember(metaAspectNode(node, name), CONSTANTS.SET_ITEMS, target);\r\n        };\r\n\r\n        this.moveAspectMetaTarget = function (node, target, oldName, newName) {\r\n            self.delAspectMetaTarget(node, oldName, self.getPath(target));\r\n            self.setAspectMetaTarget(node, newName, target);\r\n        };\r\n\r\n        this.delAspectMetaTarget = function (node, name, targetPath) {\r\n            var metaNode = getMetaAspectNode(node, name);\r\n            if (metaNode) {\r\n                self.delMember(metaNode, CONSTANTS.SET_ITEMS, targetPath);\r\n\r\n                if (self.getOwnMemberPaths(metaNode, CONSTANTS.SET_ITEMS).length === 0) {\r\n                    self.delAspectMeta(node, name);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.delAspectMeta = function (node, name) {\r\n            self.deleteNode(metaAspectNode(node, name), true);\r\n            self.deletePointer(getMetaAspectsNode(node), name);\r\n        };\r\n\r\n        this.getValidAspectTargetPaths = function (node, name) {\r\n            var aspectNode = getMetaAspectNode(node, name);\r\n            if (aspectNode === null) {\r\n                return [];\r\n            }\r\n            return self.getMemberPaths(aspectNode, CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.getOwnValidAspectTargetPaths = function (node, name) {\r\n            var aspectNode = getMetaAspectNode(node, name);\r\n            if (aspectNode === null) {\r\n                return [];\r\n            }\r\n            return self.getOwnMemberPaths(aspectNode, CONSTANTS.SET_ITEMS);\r\n        };\r\n\r\n        this.isValidAspectMemberOf = function (node, parent, name) {\r\n            var validPaths = self.getValidAspectTargetPaths(parent, name);\r\n\r\n            if (self.getValidAspectNames(parent).indexOf(name) === -1) {\r\n                return false;\r\n            }\r\n\r\n            while (node) {\r\n                if (validPaths.indexOf(self.getPath(node)) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getBaseType = function (node) {\r\n            //TODO this functions now uses the fact that we think of META as the MetaSetContainer of the ROOT\r\n            while (node) {\r\n                if (isMetaNode(node)) {\r\n                    return node;\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this.isInstanceOfDeprecated = function (node, name) {\r\n            console.warn('Passing a name to isInstanceOf of is deprecated and will eventually be removed!');\r\n            node = self.getBase(node);\r\n            while (node) {\r\n                if (self.getAttribute(node, 'name') === name) {\r\n                    return true;\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getAttributeDefinitionOwner = function (node, name) {\r\n            while (node) {\r\n                if (self.getOwnValidAttributeNames(node).indexOf(name) !== -1) {\r\n                    return node;\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        this.getPointerDefinitionInfo = function (node, name, target) {\r\n            return getRelationDefinitionInfo(node, name, target);\r\n        };\r\n\r\n        this.getSetDefinitionInfo = function (node, name, target) {\r\n            return getRelationDefinitionInfo(node, name, target);\r\n        };\r\n\r\n        this.getAspectDefinitionInfo = function (node, name, target) {\r\n            var result = {},\r\n                validTargets,\r\n                definedTarget,\r\n                targetPath;\r\n\r\n            while (node) {\r\n                if (self.getOwnValidAspectNames(node).indexOf(name) !== -1) {\r\n                    result.ownerPath = self.getPath(node);\r\n                    result.ownerNode = node;\r\n                    validTargets = self.getOwnValidAspectTargetPaths(node, name);\r\n                    definedTarget = target;\r\n                    while (definedTarget) {\r\n                        targetPath = self.getPath(definedTarget);\r\n                        if (validTargets.indexOf(targetPath) !== -1) {\r\n                            result.targetPath = targetPath;\r\n                            result.targetNode = definedTarget;\r\n                            return result;\r\n                        }\r\n                        definedTarget = self.getBase(definedTarget);\r\n                    }\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this.getAspectDefinitionOwner = function (node, name) {\r\n\r\n            while (node) {\r\n                if (self.getOwnValidAspectNames(node).indexOf(name) !== -1) {\r\n                    break;\r\n                }\r\n\r\n                node = self.getBase(node);\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        this.getChildDefinitionInfo = function (node, child) {\r\n            var result = {},\r\n                validPaths,\r\n                definedChild,\r\n                childPath;\r\n\r\n            while (node) {\r\n                if (self.isValidChildOf(child, node)) {\r\n                    validPaths = self.getOwnValidChildrenPaths(node);\r\n                    result.ownerNode = node;\r\n                    result.ownerPath = self.getPath(node);\r\n                    definedChild = child;\r\n                    while (definedChild) {\r\n                        childPath = self.getPath(definedChild);\r\n                        if (validPaths.indexOf(childPath) !== -1) {\r\n                            result.targetPath = childPath;\r\n                            result.targetNode = definedChild;\r\n                            return result;\r\n                        }\r\n                        definedChild = self.getBase(definedChild);\r\n                    }\r\n\r\n                }\r\n                node = self.getBase(node);\r\n            }\r\n            return null;\r\n        };\r\n        //</editor-fold>\r\n    };\r\n\r\n    return MetaCore;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/coretreeloader',['common/core/CoreAssert', 'common/core/tasync'], function (ASSERT, TASYNC) {\r\n    'use strict';\r\n\r\n    var CoreTreeLoader = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized CoreTreeLoader');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function loadSubTree(root, own) {\r\n            var loadSubTrees = function (nodes) {\r\n                    for (var i = 0; i < nodes.length; i++) {\r\n                        nodes[i] = self.loadSubTree(nodes[i], own);\r\n                    }\r\n                    return TASYNC.lift(nodes);\r\n\r\n                },\r\n                childLoading = own === true ? self.loadOwnChildren : self.loadChildren;\r\n            return TASYNC.call(function (children) {\r\n                if (children.length < 1) {\r\n                    return [root];\r\n                } else {\r\n                    return TASYNC.call(function (subArrays) {\r\n                        var nodes = [],\r\n                            i;\r\n                        for (i = 0; i < subArrays.length; i++) {\r\n                            nodes = nodes.concat(subArrays[i]);\r\n                        }\r\n                        nodes.unshift(root);\r\n                        return nodes;\r\n                    }, loadSubTrees(children));\r\n                }\r\n            }, childLoading(root));\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.loadTree = function (rootHash) {\r\n            return TASYNC.call(self.loadSubTree, self.loadRoot(rootHash));\r\n        };\r\n\r\n        this.loadSubTree = function (root) {\r\n            return loadSubTree(root, false);\r\n        };\r\n\r\n        this.loadOwnSubTree = function (root) {\r\n            return loadSubTree(root, true);\r\n        };\r\n\r\n        function traverse(root, options, visitFn, callback) {\r\n            ASSERT(self.isValidNode(root) && typeof visitFn === 'function' && typeof callback === 'function');\r\n\r\n            var loadQueue = [],\r\n                ongoingVisits = 0,\r\n                error = null,\r\n                projectRoot = self.getRoot(root),\r\n                timerId,\r\n                addToQueue,\r\n                loadByPath = TASYNC.unwrap(self.loadByPath),\r\n                extendLoadQueue = function (node) {\r\n                    var keys = self.getChildrenPaths(node),\r\n                        i;\r\n\r\n                    if (self.getPath(node) !== self.getPath(root)) {\r\n                        for (i = 0; i < keys.length; i += 1) {\r\n                            addToQueue.call(loadQueue, keys[i]);\r\n                        }\r\n                    }\r\n\r\n                },\r\n                visitNext = function (err) {\r\n                    error = error || err;\r\n                    ongoingVisits -= 1;\r\n                    if (error && options.stopOnError) {\r\n                        loadQueue = [];\r\n                    }\r\n                },\r\n                nodeLoaded = function (err, node) {\r\n                    error = error || err;\r\n                    if (!err && node) {\r\n                        extendLoadQueue(node);\r\n                    }\r\n\r\n                    if (!node) {\r\n                        visitNext(err);\r\n                    } else {\r\n                        visitFn(node, visitNext);\r\n                    }\r\n                };\r\n\r\n            options = options || {};\r\n            options.maxParallelLoad = options.maxParallelLoad || 100; //the amount of nodes we preload\r\n            options.excludeRoot = options.excludeRoot === true || false;\r\n            options.stopOnError = options.stopOnError === false ? false : true;\r\n\r\n            if (options.order === 'DFS') {\r\n                addToQueue = loadQueue.unshift;\r\n            } else {\r\n                addToQueue = loadQueue.push;\r\n            }\r\n\r\n            if (options.maxParallelLoad < 1 || options.order === 'DFS') {\r\n                options.maxParallelLoad = 1;\r\n            }\r\n\r\n            loadQueue = self.getChildrenPaths(root);\r\n\r\n            if (options.excludeRoot === false) {\r\n                loadQueue.unshift(self.getPath(root));\r\n            }\r\n\r\n            timerId = setInterval(function () {\r\n                if (loadQueue.length === 0 && ongoingVisits === 0) {\r\n                    clearInterval(timerId);\r\n                    callback(error);\r\n                } else if (loadQueue.length > 0 && ongoingVisits < options.maxParallelLoad &&\r\n                    (!error || options.stopOnError === false)) {\r\n                    ongoingVisits += 1;\r\n                    loadByPath(projectRoot, loadQueue.shift(), nodeLoaded);\r\n                }\r\n            }, 0);\r\n\r\n        }\r\n\r\n        this.traverse = TASYNC.wrap(traverse);\r\n        //</editor-fold>\r\n    };\r\n\r\n    return CoreTreeLoader;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\ndefine('common/util/diff',['common/core/CoreAssert', 'common/core/constants'], function (ASSERT, CONSTANTS) {\r\n    'use strict';\r\n\r\n    var FORBIDDEN_WORDS = {\r\n        guid: true,\r\n        hash: true,\r\n        attr: true,\r\n        reg: true,\r\n        pointer: true,\r\n        set: true,\r\n        meta: true,\r\n        removed: true,\r\n        movedFrom: true,\r\n        childrenListChanged: true,\r\n        oGuids: true,\r\n        ooGuids: true,\r\n        oBaseGuids: true,\r\n        ooBaseGuids: true,\r\n        min: true,\r\n        max: true,\r\n        collidingRelid: true\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} path - arbitrary string where the legs of the path are separated with '/' character.\r\n     * @return {object} The function returns an object with processed information about the path.\r\n     *\r\n     * @example\r\n     * {\r\n     *  full: \"/a/b/set/mySet//a/c//reg/position\",\r\n     *  node: \"/a/b\",\r\n     *  embededdNode: \"/a/c\",\r\n     *  pathArray:[\"a\",\"b\",\"set\",\"mySet\",\"/a/c\",\"reg\",\"position\"]\r\n     *  }\r\n     *\r\n     */\r\n    function pathToObject(path) {\r\n        var object = {\r\n                full: path,\r\n                node: null,\r\n                embeddedNode: null,\r\n                pathArray: []\r\n            },\r\n            firstRun = path.split(CONSTANTS.PATH_SEP + CONSTANTS.PATH_SEP),\r\n            i;\r\n\r\n        ASSERT(firstRun.length >= 1 && firstRun.length <= 3);\r\n\r\n        if (firstRun.length === 3) {\r\n            object.embeddedNode = firstRun[1].length === 0 ? '' : CONSTANTS.PATH_SEP + firstRun[1];\r\n            object.pathArray = firstRun[2].split(CONSTANTS.PATH_SEP);\r\n            object.pathArray.unshift(object.embeddedNode);\r\n            object.pathArray = firstRun[0].split(CONSTANTS.PATH_SEP).concat(object.pathArray);\r\n        } else if (firstRun.length === 2) {\r\n            object.embeddedNode = firstRun[1].length === 0 ? '' : CONSTANTS.PATH_SEP + firstRun[1];\r\n            object.pathArray = firstRun[0].split(CONSTANTS.PATH_SEP);\r\n            object.pathArray.push(object.embeddedNode);\r\n        } else {\r\n            object.pathArray = path.split(CONSTANTS.PATH_SEP);\r\n        }\r\n        object.pathArray.shift();\r\n\r\n        object.node = '';\r\n        for (i = 0; i < object.pathArray.length; i += 1) {\r\n            if (FORBIDDEN_WORDS[object.pathArray[i]] !== true && object.pathArray[i].length > 0) {\r\n                object.node += CONSTANTS.PATH_SEP + object.pathArray[i];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return object;\r\n    }\r\n\r\n    function getSetValueFromNode(core, node, memberPath, pathArray) {\r\n        var setName = pathArray[0];\r\n\r\n        if (typeof memberPath === 'string') {\r\n            switch (pathArray[2]) {\r\n                case 'attr':\r\n                    return core.getMemberOwnAttribute(node, setName, memberPath, pathArray[3]);\r\n                case 'reg':\r\n                    return core.getMemberOwnRegistry(node, setName, memberPath, pathArray[3]);\r\n            }\r\n        } else {\r\n            switch (pathArray[1]) {\r\n                case 'attr':\r\n                    return core.getOwnSetAttribute(node, setName, pathArray[2]);\r\n                case 'reg':\r\n                    return core.getOwnSetRegistry(node, setName, pathArray[2]);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    function getObjectValue(object, pathArray) {\r\n        var value = object;\r\n        while (value !== null && value !== undefined && pathArray.length > 0) {\r\n            value = value[pathArray.shift()];\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    function getMetaValueFromNode(core, node, embeddedPath, pathArray) {\r\n        switch (pathArray[0]) {\r\n            case 'children':\r\n                return getObjectValue(core.getChildrenMeta(node), pathArray.slice(1));\r\n            case 'pointers':\r\n                return getObjectValue(core.getPointerMeta(node, pathArray[1]), pathArray.slice(2));\r\n            case 'attributes':\r\n                return getObjectValue(core.getAttributeMeta(node, pathArray[1]), pathArray.slice(2));\r\n            case 'aspects':\r\n                // aspect changes cannot generate conflicts\r\n                break;\r\n            case 'constraints':\r\n                return getObjectValue((core.getConstraint(node, pathArray[1])), pathArray.slice(2));\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} core - the core object that allows access to the Core API\r\n     * @param (module:Core~Node) node - the node whose value we are interested in\r\n     * @param {string} subNodePath - a string that has the path structure and represents the sub-node location\r\n     * of the value we are interested in.\r\n     * @returns {undefined|*} - if the value is undefined, that means there is no such value, otherwise the value will\r\n     * be returned back.\r\n     */\r\n    function getValueFromNode(core, node, subNodePath) {\r\n        var pathObject = pathToObject(subNodePath);\r\n\r\n        ASSERT(pathObject.node === '');\r\n        ASSERT(FORBIDDEN_WORDS[pathObject.pathArray[0]] === true);\r\n\r\n        switch (pathObject.pathArray[0]) {\r\n            case 'guid':\r\n                return core.getGuid(node);\r\n            case 'attr':\r\n                return core.getOwnAttribute(node, pathObject.pathArray[1]);\r\n            case 'reg':\r\n                return core.getOwnRegistry(node, pathObject.pathArray[1]);\r\n            case 'pointer':\r\n                return core.getOwnPointerPath(node, pathObject.pathArray[1]);\r\n            case 'set':\r\n                return getSetValueFromNode(core, node, pathObject.embeddedNode, pathObject.pathArray.slice(1));\r\n            case 'meta':\r\n                return getMetaValueFromNode(core, node, pathObject.embeddedNode, pathObject.pathArray.slice(1));\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} completeDiff - a diff object, that we would like to process and gather information from.\r\n     * @returns {string[]} An array of string of the paths of the affected nodes are returned. No partial update nodes\r\n     * are returned as we cannot gather that intel completely.\r\n     */\r\n    function getChangedNodePaths(completeDiff) {\r\n        var changedNodes = {},\r\n            recGetNodePath = function (path, diff) {\r\n                var key;\r\n\r\n                changedNodes[path] = true;\r\n\r\n                for (key in diff) {\r\n                    if (FORBIDDEN_WORDS[key] !== true) {\r\n                        recGetNodePath(path + CONSTANTS.PATH_SEP + key, diff[key]);\r\n                    }\r\n                }\r\n            };\r\n\r\n        recGetNodePath('', completeDiff);\r\n        return Object.keys(changedNodes);\r\n    }\r\n\r\n    return {\r\n        pathToObject: pathToObject,\r\n        getValueFromNode: getValueFromNode,\r\n        getChangedNodePaths: getChangedNodePaths,\r\n        FORBIDDEN_WORDS: FORBIDDEN_WORDS\r\n    };\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/corediff',[\r\n    'common/util/canon',\r\n    'common/core/tasync',\r\n    'common/core/CoreAssert',\r\n    'common/regexp',\r\n    'common/util/random',\r\n    'common/core/constants',\r\n    'common/util/diff'\r\n], function (CANON, TASYNC, ASSERT, REGEXP, RANDOM, CONSTANTS, DIFF) {\r\n    'use strict';\r\n\r\n    function DiffCore(innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key,\r\n            _conflictMine,\r\n            _conflictTheirs,\r\n            _concatBase,\r\n            _concatExtension,\r\n            _concatBaseRemovals,\r\n            _concatMoves;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized DiffCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function compareRelids(a, b) {\r\n            var aRel = self.getRelid(a),\r\n                bRel = self.getRelid(b);\r\n\r\n            if (aRel < bRel) {\r\n                return -1;\r\n            } else if (aRel > bRel) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        function normalize(obj) {\r\n            // TODO: Does this really need to be called as many times as it is?\r\n            if (!obj) {\r\n                return obj;\r\n            }\r\n            var keys = Object.keys(obj),\r\n                i;\r\n\r\n            if (JSON.stringify(obj.set) === JSON.stringify({})) {\r\n                delete obj.set;\r\n            }\r\n\r\n            for (i = 0; i < keys.length; i++) {\r\n                /*if (Array.isArray(obj[keys[i]])) {\r\n                 if (obj[keys[i]].length === 0) {\r\n                 delete obj[keys[i]];\r\n                 }*/\r\n                if (Array.isArray(obj[keys[i]])) {\r\n                    //do nothing, leave the array as is\r\n                } else if (obj[keys[i]] === undefined) {\r\n                    delete obj[keys[i]]; //there cannot be undefined in the object\r\n                } else if (keys[i] === 'set') {\r\n                    //do nothing with set as it can include empty set's as well\r\n                } else if (typeof obj[keys[i]] === 'object') {\r\n                    normalize(obj[keys[i]]);\r\n                    if (obj[keys[i]] && Object.keys(obj[keys[i]]).length === 0) {\r\n                        delete obj[keys[i]];\r\n                    }\r\n                }\r\n            }\r\n            keys = JSON.parse(JSON.stringify(obj));\r\n            delete keys.guid;\r\n            delete keys.oGuids;\r\n            delete keys.ooGuids;\r\n            delete keys.oBaseGuids;\r\n            delete keys.ooBaseGuids;\r\n            if (Object.keys(keys).length === 0) {\r\n                // it did not have additional information\r\n                delete obj.guid;\r\n                delete obj.oGuids;\r\n                delete obj.ooGuids;\r\n                delete obj.oBaseGuids;\r\n                delete obj.ooBaseGuids;\r\n            }\r\n        }\r\n\r\n        function attrDiff(source, target) {\r\n            var sNames = self.getOwnAttributeNames(source),\r\n                tNames = self.getOwnAttributeNames(target),\r\n                diff = {},\r\n                sAttr,\r\n                tAttr,\r\n                i;\r\n\r\n            for (i = 0; i < sNames.length; i++) {\r\n                if (tNames.indexOf(sNames[i]) === -1) {\r\n                    diff[sNames[i]] = CONSTANTS.TO_DELETE_STRING;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < tNames.length; i++) {\r\n                sAttr = self.getOwnAttribute(source, tNames[i]);\r\n                tAttr = self.getOwnAttribute(target, tNames[i]);\r\n\r\n                if (CANON.stringify(sAttr) !== CANON.stringify(tAttr)) {\r\n                    diff[tNames[i]] = tAttr;\r\n                }\r\n            }\r\n\r\n            return diff;\r\n        }\r\n\r\n        function regDiff(source, target) {\r\n            var sNames = self.getOwnRegistryNames(source),\r\n                tNames = self.getOwnRegistryNames(target),\r\n                diff = {},\r\n                sReg,\r\n                tReg,\r\n                i;\r\n\r\n            for (i = 0; i < sNames.length; i++) {\r\n                if (tNames.indexOf(sNames[i]) === -1) {\r\n                    diff[sNames[i]] = CONSTANTS.TO_DELETE_STRING;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < tNames.length; i++) {\r\n                sReg = self.getOwnRegistry(source, tNames[i]);\r\n                tReg = self.getOwnRegistry(target, tNames[i]);\r\n                if (CANON.stringify(sReg) !== CANON.stringify(tReg)) {\r\n                    diff[tNames[i]] = tReg;\r\n                }\r\n            }\r\n\r\n            return diff;\r\n        }\r\n\r\n        function childrenDiff(source, target) {\r\n            var sRelids = self.getChildrenRelids(source, true),\r\n                tRelids = self.getChildrenRelids(target, true),\r\n                tHashes = self.getChildrenHashes(target),\r\n                sHashes = self.getChildrenHashes(source),\r\n                relid,\r\n                diff = {added: [], removed: []};\r\n\r\n            for (relid in sRelids) {\r\n                if (Object.hasOwn(tRelids, relid) === false) {\r\n                    diff.removed.push({relid: relid, hash: sHashes[relid]});\r\n                }\r\n            }\r\n\r\n            for (relid in tRelids) {\r\n                if (Object.hasOwn(sRelids, relid) === false) {\r\n                    diff.added.push({relid: relid, hash: tHashes[relid]});\r\n                }\r\n            }\r\n\r\n            return diff;\r\n        }\r\n\r\n        function pointerDiff(source, target) {\r\n            // FIXME: Shouldn't these be ownPointerNames?\r\n            var getPointerData = function (node) {\r\n                    var data = {},\r\n                        names = self.getPointerNames(node),\r\n                        i;\r\n                    for (i = 0; i < names.length; i++) {\r\n                        data[names[i]] = self.getPointerPath(node, names[i]);\r\n                    }\r\n                    return data;\r\n                },\r\n                sPointer = getPointerData(source),\r\n                tPointer = getPointerData(target);\r\n\r\n            if (CANON.stringify(sPointer) !== CANON.stringify(tPointer)) {\r\n                return {source: sPointer, target: tPointer};\r\n            }\r\n            return {};\r\n        }\r\n\r\n        function setDiff(source, target) {\r\n            var getSetData = function (node) {\r\n                    var data = {},\r\n                        names, targets, keys, i, j, k;\r\n\r\n                    names = self.getSetNames(node);\r\n                    for (i = 0; i < names.length; i++) {\r\n                        data[names[i]] = {attr: {}, reg: {}};\r\n                        keys = self.getOwnSetAttributeNames(node, names[i]);\r\n                        for (j = 0; j < keys.length; j += 1) {\r\n                            data[names[i]].attr[keys[j]] = self.getOwnSetAttribute(node, names[i], keys[j]);\r\n                        }\r\n                        keys = self.getOwnSetRegistryNames(node, names[i]);\r\n                        for (j = 0; j < keys.length; j += 1) {\r\n                            data[names[i]].reg[keys[j]] = self.getOwnSetRegistry(node, names[i], keys[j]);\r\n                        }\r\n\r\n                        targets = self.getMemberPaths(node, names[i]);\r\n                        for (j = 0; j < targets.length; j++) {\r\n                            data[names[i]][targets[j]] = {attr: {}, reg: {}};\r\n                            keys = self.getMemberOwnAttributeNames(node, names[i], targets[j]);\r\n                            for (k = 0; k < keys.length; k++) {\r\n                                data[names[i]][targets[j]].attr[keys[k]] = self.getMemberAttribute(node,\r\n                                    names[i], targets[j], keys[k]);\r\n                            }\r\n                            keys = self.getMemberRegistryNames(node, names[i], targets[j]);\r\n                            for (k = 0; k < keys.length; k++) {\r\n                                data[names[i]][targets[j]].reg[keys[k]] = self.getMemberRegistry(node,\r\n                                    names[i], targets[j], keys[k]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return data;\r\n\r\n                },\r\n                sSet = getSetData(source),\r\n                tSet = getSetData(target);\r\n\r\n            if (CANON.stringify(sSet) !== CANON.stringify(tSet)) {\r\n                return {source: sSet, target: tSet};\r\n            }\r\n            return {};\r\n        }\r\n\r\n        function ovrDiff(source, target) {\r\n            var sOvr = self.getRawOverlayInformation(source),\r\n                tOvr = self.getRawOverlayInformation(target);\r\n\r\n            if (CANON.stringify(sOvr) !== CANON.stringify(tOvr)) {\r\n                return {source: sOvr, target: tOvr};\r\n            }\r\n            return {};\r\n        }\r\n\r\n        function metaDiff(source, target) {\r\n            var convertJsonMeta = function (jsonMeta) {\r\n                    var i, j, names, itemsObject;\r\n                    //children\r\n                    if (jsonMeta.children) {\r\n                        itemsObject = jsonMeta.children;\r\n                        for (i = 0; i < itemsObject.items.length; i += 1) {\r\n                            itemsObject[itemsObject.items[i]] = {\r\n                                min: itemsObject.minItems[i],\r\n                                max: itemsObject.maxItems[i]\r\n                            };\r\n                        }\r\n                        delete itemsObject.items;\r\n                        delete itemsObject.minItems;\r\n                        delete itemsObject.maxItems;\r\n                    }\r\n                    //ptr\r\n                    if (jsonMeta.pointers) {\r\n                        names = Object.keys(jsonMeta.pointers);\r\n\r\n                        for (j = 0; j < names.length; j += 1) {\r\n                            itemsObject = jsonMeta.pointers[names[j]];\r\n                            for (i = 0; i < itemsObject.items.length; i += 1) {\r\n                                itemsObject[itemsObject.items[i]] = {\r\n                                    min: itemsObject.minItems[i],\r\n                                    max: itemsObject.maxItems[i]\r\n                                };\r\n                            }\r\n                            delete itemsObject.items;\r\n                            delete itemsObject.minItems;\r\n                            delete itemsObject.maxItems;\r\n                        }\r\n                    }\r\n                    return jsonMeta;\r\n                },\r\n                sMeta = convertJsonMeta(self.getOwnJsonMeta(source)),\r\n                tMeta = convertJsonMeta(self.getOwnJsonMeta(target));\r\n            if (CANON.stringify(sMeta) !== CANON.stringify(tMeta)) {\r\n                return {source: sMeta, target: tMeta};\r\n            }\r\n            return {};\r\n        }\r\n\r\n        function combineMoveIntoMetaDiff(diff, diffMoves) {\r\n            var keys = Object.keys(diff),\r\n                i;\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (diffMoves[keys[i]]) {\r\n                    diff[diffMoves[keys[i]]] = diff[keys[i]];\r\n                    delete diff[keys[i]];\r\n                } else if (typeof diff[keys[i]] === 'object') {\r\n                    combineMoveIntoMetaDiff(diff[keys[i]], diffMoves);\r\n                }\r\n            }\r\n        }\r\n\r\n        function combineMoveIntoPointerDiff(diff, diffMoves) {\r\n            var keys = Object.keys(diff),\r\n                i;\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (diffMoves[diff[keys[i]]]) {\r\n                    diff[keys[i]] = diffMoves[diff[keys[i]]];\r\n                }\r\n            }\r\n        }\r\n\r\n        function getDiffChildrenRelids(diff) {\r\n            var keys = Object.keys(diff || {}),\r\n                i,\r\n                filteredKeys = [];\r\n\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (DIFF.FORBIDDEN_WORDS[keys[i]] !== true) {\r\n                    filteredKeys.push(keys[i]);\r\n                }\r\n            }\r\n            return filteredKeys;\r\n        }\r\n\r\n        function arrayDiff(source, target) {\r\n            var i,\r\n                diff = {};\r\n            for (i = 0; i < source.length; i += 1) {\r\n                if (target.indexOf(source[i]) === -1) {\r\n                    diff[source[i]] = CONSTANTS.TO_DELETE_STRING;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < target.length; i += 1) {\r\n                if (source.indexOf(target[i])) {\r\n                    diff[target[i]] = true;\r\n                }\r\n            }\r\n            return diff;\r\n        }\r\n\r\n        function diffObjects(source, target) {\r\n            var diff = {},\r\n                sKeys = Object.keys(source),\r\n                tKeys = Object.keys(target),\r\n                tDiff, i;\r\n            for (i = 0; i < sKeys.length; i++) {\r\n                if (tKeys.indexOf(sKeys[i]) === -1) {\r\n                    diff[sKeys[i]] = CONSTANTS.TO_DELETE_STRING;\r\n                }\r\n            }\r\n            for (i = 0; i < tKeys.length; i++) {\r\n                if (sKeys.indexOf(tKeys[i]) === -1) {\r\n                    diff[tKeys[i]] = target[tKeys[i]];\r\n                } else {\r\n                    if (typeof target[tKeys[i]] === typeof source[tKeys[i]]) {\r\n                        tDiff = {};\r\n                        if (source[tKeys[i]] instanceof Array && target[tKeys[i]] instanceof Array) {\r\n                            tDiff = arrayDiff(source[tKeys[i]], target[tKeys[i]]);\r\n                        } else if (typeof target[tKeys[i]] === 'object' &&\r\n                            target[tKeys[i]] !== null && source[tKeys[i]] !== null) {\r\n                            tDiff = diffObjects(source[tKeys[i]], target[tKeys[i]]);\r\n                        } else if (source[tKeys[i]] !== target[tKeys[i]]) {\r\n                            diff[tKeys[i]] = target[tKeys[i]];\r\n                        }\r\n\r\n                        if (Object.keys(tDiff).length > 0) {\r\n                            diff[tKeys[i]] = tDiff;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return diff;\r\n        }\r\n\r\n        function finalizeMetaDiff(diff, diffMoves) {\r\n            // At this point diff is ready and the diffMoves are complete.\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i, sMeta, tMeta;\r\n            if (diff.meta) {\r\n                sMeta = diff.meta.source || {};\r\n                tMeta = diff.meta.target || {};\r\n                combineMoveIntoMetaDiff(sMeta, diffMoves);\r\n                diff.meta = diffObjects(sMeta, tMeta);\r\n            }\r\n            for (i = 0; i < relids.length; i++) {\r\n                finalizeMetaDiff(diff[relids[i]], diffMoves);\r\n            }\r\n        }\r\n\r\n        function finalizePointerDiff(diff, diffMoves) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i, sPointer, tPointer;\r\n            if (diff.pointer) {\r\n                sPointer = diff.pointer.source || {};\r\n                tPointer = diff.pointer.target || {};\r\n                /*if(diff.movedFrom && !sPointer.base && tPointer.base){\r\n                 delete tPointer.base;\r\n                 }*/\r\n                combineMoveIntoPointerDiff(sPointer, diffMoves);\r\n                diff.pointer = diffObjects(sPointer, tPointer);\r\n            }\r\n            for (i = 0; i < relids.length; i++) {\r\n                finalizePointerDiff(diff[relids[i]], diffMoves);\r\n            }\r\n        }\r\n\r\n        function finalizeSetDiff(diff, diffMoves) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i, sSet, tSet;\r\n            if (diff.set) {\r\n                sSet = diff.set.source || {};\r\n                tSet = diff.set.target || {};\r\n                combineMoveIntoMetaDiff(sSet, diffMoves);\r\n                diff.set = diffObjects(sSet, tSet);\r\n            }\r\n            for (i = 0; i < relids.length; i++) {\r\n                finalizeSetDiff(diff[relids[i]], diffMoves);\r\n            }\r\n        }\r\n\r\n        function finalizeDiff(diff, diffMoves) {\r\n            finalizeMetaDiff(diff, diffMoves);\r\n            finalizePointerDiff(diff, diffMoves);\r\n            finalizeSetDiff(diff, diffMoves);\r\n            normalize(diff);\r\n        }\r\n\r\n        function isEmptyNodeDiff(diff) {\r\n            // TODO: This could probably be reversed and optimized.\r\n            if (\r\n                Object.keys(diff.children || {}).length > 0 ||\r\n                Object.keys(diff.attr || {}).length > 0 ||\r\n                Object.keys(diff.reg || {}).length > 0 ||\r\n                Object.keys(diff.pointer || {}).length > 0 ||\r\n                Object.keys(diff.set || {}).length > 0 ||\r\n                diff.meta\r\n            ) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function getPathOfDiff(diff, path) {\r\n            var pathArray = path.split('/'),\r\n                i;\r\n            pathArray.shift();\r\n            for (i = 0; i < pathArray.length; i++) {\r\n                diff[pathArray[i]] = diff[pathArray[i]] || {};\r\n                diff = diff[pathArray[i]];\r\n            }\r\n\r\n            return diff;\r\n        }\r\n\r\n        function extendDiffWithOvr(diff, oDiff) {\r\n            var i, paths, names, j, tDiff,\r\n                onlyBaseRemoved = function (path) {\r\n                    var sCopy = JSON.parse(JSON.stringify(oDiff.source[path] || {})),\r\n                        tCopy = JSON.parse(JSON.stringify(oDiff.target[path] || {}));\r\n\r\n                    if (tCopy.base) {\r\n                        return false;\r\n                    }\r\n\r\n                    delete sCopy.base;\r\n\r\n                    return CANON.stringify(sCopy) === CANON.stringify(tCopy);\r\n                };\r\n\r\n            //first extend sources\r\n            paths = Object.keys(oDiff.source || {});\r\n            for (i = 0; i < paths.length; i++) {\r\n                tDiff = getPathOfDiff(diff, paths[i]);\r\n                if (tDiff.removed !== true && !onlyBaseRemoved(paths[i])) {\r\n                    tDiff.pointer = tDiff.pointer || {source: {}, target: {}};\r\n                    tDiff.pointer.source = tDiff.pointer.source || {};\r\n                    tDiff.pointer.target = tDiff.pointer.target || {};\r\n                    names = Object.keys(oDiff.source[paths[i]]);\r\n                    for (j = 0; j < names.length; j++) {\r\n                        tDiff.pointer.source[names[j]] = oDiff.source[paths[i]][names[j]];\r\n                    }\r\n                }\r\n            }\r\n            //then targets\r\n            paths = Object.keys(oDiff.target || {});\r\n            for (i = 0; i < paths.length; i++) {\r\n                tDiff = getPathOfDiff(diff, paths[i]);\r\n                if (tDiff.removed !== true && !onlyBaseRemoved(paths[i])) {\r\n                    tDiff.pointer = tDiff.pointer || {source: {}, target: {}};\r\n                    names = Object.keys(oDiff.target[paths[i]]);\r\n                    for (j = 0; j < names.length; j++) {\r\n                        tDiff.pointer.target[names[j]] = oDiff.target[paths[i]][names[j]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function gatherObstructiveGuids(node) {\r\n            var result = {all: {}, bases: {}},\r\n                putParents = function (n) {\r\n                    result.bases[self.getGuid(n)] = true;\r\n                    while (n) {\r\n                        result.all[self.getGuid(n)] = true;\r\n                        n = self.getParent(n);\r\n                    }\r\n                };\r\n            while (node) {\r\n                putParents(node);\r\n                node = self.getBase(node);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function fillMissingGuid(root, sRoot, path, diff) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i,\r\n                done,\r\n                subComputationFinished = function (cDiff, relid) {\r\n                    diff[relid] = cDiff;\r\n                    return null;\r\n                };\r\n\r\n            for (i = 0; i < relids.length; i++) {\r\n                done = TASYNC.call(subComputationFinished,\r\n                    fillMissingGuid(root, sRoot, path + '/' + relids[i], diff[relids[i]]), relids[i], done);\r\n            }\r\n\r\n            return TASYNC.call(function () {\r\n                return TASYNC.call(function (child, sChild) {\r\n                    if (!child) {\r\n                        child = sChild;\r\n                    }\r\n                    diff.guid = self.getGuid(child);\r\n                    diff.hash = self.getHash(child);\r\n                    diff.oGuids = gatherObstructiveGuids(child);\r\n                    diff.oBaseGuids = diff.oGuids.bases;\r\n                    diff.oGuids = diff.oGuids.all;\r\n                    return diff;\r\n                }, self.loadByPath(root, path), self.loadByPath(sRoot, path));\r\n            }, done);\r\n        }\r\n\r\n        function mergeObjects(source, target) {\r\n            var merged = {},\r\n                sKeys = Object.keys(source),\r\n                tKeys = Object.keys(target),\r\n                i;\r\n            for (i = 0; i < sKeys.length; i++) {\r\n                merged[sKeys[i]] = source[sKeys[i]];\r\n            }\r\n            for (i = 0; i < tKeys.length; i++) {\r\n                if (sKeys.indexOf(tKeys[i]) === -1) {\r\n                    merged[tKeys[i]] = target[tKeys[i]];\r\n                } else {\r\n                    if (typeof target[tKeys[i]] === typeof source[tKeys[i]] &&\r\n                        typeof target[tKeys[i]] === 'object' && !(target instanceof Array)) {\r\n                        merged[tKeys[i]] = mergeObjects(source[tKeys[i]], target[tKeys[i]]);\r\n                    } else {\r\n                        merged[tKeys[i]] = target[tKeys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return merged;\r\n        }\r\n\r\n        function updateDiff(sourceRoot, targetRoot, yetToCompute) {\r\n            var diff = self.nodeDiff(sourceRoot, targetRoot) || {},\r\n                oDiff = ovrDiff(sourceRoot, targetRoot),\r\n                getChild = function (childArray, relid) {\r\n                    // TODO: This seems computational expensive - maybe core.loadChild is faster?\r\n                    // TODO: Alt. created maps for sChildren and tChildren\r\n                    for (var i = 0; i < childArray.length; i++) {\r\n                        if (self.getRelid(childArray[i]) === relid) {\r\n                            return childArray[i];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n\r\n            return TASYNC.call(function (sChildren, tChildren) {\r\n                ASSERT(sChildren.length >= 0 && tChildren.length >= 0);\r\n\r\n                sChildren.sort(compareRelids);\r\n                tChildren.sort(compareRelids);\r\n\r\n                var i, child, done, tDiff, guid, base,\r\n                    childComputationFinished = function (cDiff, relid/*, d*/) {\r\n                        diff[relid] = cDiff;\r\n                        return null;\r\n                    };\r\n\r\n                tDiff = diff.children ? diff.children.removed || [] : [];\r\n                for (i = 0; i < tDiff.length; i++) {\r\n                    diff.childrenListChanged = true;\r\n                    child = getChild(sChildren, tDiff[i].relid);\r\n                    if (child) {\r\n                        guid = self.getGuid(child);\r\n                        // FIXME: Isn't the hash already given at childrenDiff?\r\n                        diff[tDiff[i].relid] = {guid: guid, removed: true, hash: self.getHash(child)};\r\n                        yetToCompute[guid] = yetToCompute[guid] || {};\r\n                        yetToCompute[guid].from = child;\r\n                        yetToCompute[guid].fromExpanded = false;\r\n                    }\r\n                }\r\n\r\n                tDiff = diff.children ? diff.children.added || [] : [];\r\n                for (i = 0; i < tDiff.length; i++) {\r\n                    diff.childrenListChanged = true;\r\n                    child = getChild(tChildren, tDiff[i].relid);\r\n                    if (child) {\r\n                        guid = self.getGuid(child);\r\n                        base = self.getBase(child);\r\n                        diff[tDiff[i].relid] = {\r\n                            guid: guid,\r\n                            removed: false,\r\n                            hash: self.getHash(child),\r\n                            pointer: {source: {}, target: {base: base === null ? null : self.getPath(base)}}\r\n                        };\r\n                        yetToCompute[guid] = yetToCompute[guid] || {};\r\n                        yetToCompute[guid].to = child;\r\n                        yetToCompute[guid].toExpanded = false;\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < tChildren.length; i++) {\r\n                    child = getChild(sChildren, self.getRelid(tChildren[i]));\r\n                    if (child && self.getHash(tChildren[i]) !== self.getHash(child)) {\r\n                        done = TASYNC.call(childComputationFinished,\r\n                            updateDiff(child, tChildren[i], yetToCompute), self.getRelid(child), done);\r\n                    }\r\n                }\r\n\r\n                return TASYNC.call(function () {\r\n                    delete diff.children;\r\n                    extendDiffWithOvr(diff, oDiff);\r\n\r\n                    normalize(diff);\r\n\r\n                    if (Object.keys(diff).length > 0) {\r\n                        diff.guid = self.getGuid(targetRoot);\r\n                        diff.hash = self.getHash(targetRoot);\r\n                        diff.oGuids = gatherObstructiveGuids(targetRoot);\r\n                        diff.oBaseGuids = diff.oGuids.bases;\r\n                        diff.oGuids = diff.oGuids.all;\r\n                        return TASYNC.call(function (finalDiff) {\r\n                            return finalDiff;\r\n                        }, fillMissingGuid(targetRoot, sourceRoot, '', diff));\r\n                    } else {\r\n                        return diff;\r\n                    }\r\n\r\n                }, done);\r\n            }, self.loadChildren(sourceRoot), self.loadChildren(targetRoot));\r\n        }\r\n\r\n        function expandDiff(root, isDeleted, yetToCompute) {\r\n            var diff = {\r\n                guid: self.getGuid(root),\r\n                hash: self.getHash(root),\r\n                removed: isDeleted === true\r\n            };\r\n            return TASYNC.call(function (children) {\r\n                var guid;\r\n                for (var i = 0; i < children.length; i++) {\r\n                    guid = self.getGuid(children[i]);\r\n                    diff[self.getRelid(children[i])] = {\r\n                        guid: guid,\r\n                        hash: self.getHash(children[i]),\r\n                        removed: isDeleted === true\r\n                    };\r\n\r\n                    if (isDeleted) {\r\n                        yetToCompute[guid] = yetToCompute[guid] || {};\r\n                        yetToCompute[guid].from = children[i];\r\n                        yetToCompute[guid].fromExpanded = false;\r\n                    } else {\r\n                        yetToCompute[guid] = yetToCompute[guid] || {};\r\n                        yetToCompute[guid].to = children[i];\r\n                        yetToCompute[guid].toExpanded = false;\r\n                    }\r\n                }\r\n                return diff;\r\n            }, self.loadChildren(root));\r\n        }\r\n\r\n        function insertIntoDiff(path, diff, sDiff) {\r\n            var pathObject = DIFF.pathToObject(path),\r\n                pathArray = pathObject.pathArray,\r\n                relid = pathArray.pop(),\r\n                i;\r\n\r\n            for (i = 0; i < pathArray.length; i++) {\r\n                sDiff = sDiff[pathArray[i]];\r\n            }\r\n            //sDiff[relid] = diff;\r\n            sDiff[relid] = mergeObjects(sDiff[relid], diff);\r\n        }\r\n\r\n        function removePathFromDiff(diff, path) {\r\n            var relId, i,\r\n                pathObject = DIFF.pathToObject(path),\r\n                pathArray = pathObject.pathArray;\r\n\r\n            relId = pathArray.pop();\r\n            for (i = 0; i < pathArray.length; i++) {\r\n                diff = diff[pathArray[i]];\r\n            }\r\n            delete diff[relId];\r\n        }\r\n\r\n        function shrinkDiff(rootDiff) {\r\n            var _shrink = function (diff) {\r\n                if (diff) {\r\n                    var keys = getDiffChildrenRelids(diff),\r\n                        i;\r\n                    if (typeof diff.movedFrom === 'string') {\r\n                        removePathFromDiff(rootDiff, diff.movedFrom);\r\n                    }\r\n\r\n                    if (diff.removed !== false || typeof diff.movedFrom === 'string') {\r\n                        delete diff.hash;\r\n                    }\r\n\r\n                    if (diff.removed === true) {\r\n                        for (i = 0; i < keys.length; i++) {\r\n                            delete diff[keys[i]];\r\n                        }\r\n                    } else {\r\n\r\n                        for (i = 0; i < keys.length; i++) {\r\n                            _shrink(diff[keys[i]]);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            _shrink(rootDiff);\r\n        }\r\n\r\n        function insertAtPath(diff, path, object) {\r\n            ASSERT(typeof path === 'string');\r\n            var i, base,\r\n                pathObject = DIFF.pathToObject(path),\r\n                relid = pathObject.pathArray.pop();\r\n\r\n            base = diff;\r\n            for (i = 0; i < pathObject.pathArray.length; i += 1) {\r\n                base[pathObject.pathArray[i]] = base[pathObject.pathArray[i]] || {};\r\n                base = base[pathObject.pathArray[i]];\r\n            }\r\n            base[relid] = JSON.parse(JSON.stringify(object));\r\n            return;\r\n        }\r\n\r\n        function checkRound(yetToCompute, diff, diffMoves, needChecking) {\r\n            var guids = Object.keys(yetToCompute),\r\n                done,\r\n                ytc,\r\n                i,\r\n                computingMove = function (mDiff, info) {\r\n                    mDiff.guid = self.getGuid(info.from);\r\n                    mDiff.movedFrom = self.getPath(info.from);\r\n                    mDiff.ooGuids = gatherObstructiveGuids(info.from);\r\n                    mDiff.ooBaseGuids = mDiff.ooGuids.bases;\r\n                    mDiff.ooGuids = mDiff.ooGuids.all;\r\n                    diffMoves[self.getPath(info.from)] = self.getPath(info.to);\r\n                    insertAtPath(diff, self.getPath(info.to), mDiff);\r\n                    return null;\r\n                },\r\n                expandFrom = function (mDiff, info) {\r\n                    mDiff.hash = self.getHash(info.from);\r\n                    mDiff.removed = true;\r\n                    insertIntoDiff(self.getPath(info.from), mDiff, diff);\r\n                    return null;\r\n                },\r\n                expandTo = function (mDiff, info) {\r\n                    if (!mDiff.hash) {\r\n                        mDiff.hash = self.getHash(info.to);\r\n                    }\r\n                    mDiff.removed = false;\r\n                    insertIntoDiff(self.getPath(info.to), mDiff, diff);\r\n                    return null;\r\n                };\r\n\r\n            if (needChecking !== true || guids.length < 1) {\r\n                shrinkDiff(diff);\r\n                finalizeDiff(diff, diffMoves);\r\n                return JSON.parse(JSON.stringify(diff));\r\n            }\r\n\r\n            needChecking = false;\r\n            for (i = 0; i < guids.length; i++) {\r\n                ytc = yetToCompute[guids[i]];\r\n                if (ytc.from && ytc.to) {\r\n                    //move\r\n                    needChecking = true;\r\n                    delete yetToCompute[guids[i]];\r\n                    done = TASYNC.call(computingMove, updateDiff(ytc.from, ytc.to, yetToCompute), ytc, done);\r\n                } else {\r\n                    if (ytc.from && ytc.fromExpanded === false) {\r\n                        //expand from\r\n                        ytc.fromExpanded = true;\r\n                        needChecking = true;\r\n                        done = TASYNC.call(expandFrom, expandDiff(ytc.from, true, yetToCompute), ytc, done);\r\n                    } else if (ytc.to && ytc.toExpanded === false) {\r\n                        //expand to\r\n                        ytc.toExpanded = true;\r\n                        needChecking = true;\r\n                        done = TASYNC.call(expandTo, expandDiff(ytc.to, false, yetToCompute), ytc, done);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return TASYNC.call(checkRound, yetToCompute, diff, diffMoves, needChecking, done);\r\n        }\r\n\r\n        function hasRealChange(diffNode) {\r\n            var keys = Object.keys(diffNode || {}),\r\n                searchedKeywords = {\r\n                    hash: true,\r\n                    attr: true,\r\n                    reg: true,\r\n                    pointer: true,\r\n                    set: true,\r\n                    meta: true,\r\n                    movedFrom: true,\r\n                    removed: true,\r\n                    childrenListChanged: true\r\n                },\r\n                i;\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (searchedKeywords[keys[i]]) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getMoveSources(diff, path, toFrom, fromTo) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i;\r\n\r\n            for (i = 0; i < relids.length; i++) {\r\n                getMoveSources(diff[relids[i]], path + '/' + relids[i], toFrom, fromTo);\r\n            }\r\n\r\n            if (typeof diff.movedFrom === 'string') {\r\n                toFrom[path] = diff.movedFrom;\r\n                fromTo[diff.movedFrom] = path;\r\n            }\r\n        }\r\n\r\n        function getParentPath(path) {\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            path.splice(-1, 1);\r\n            return path.join(CONSTANTS.PATH_SEP);\r\n        }\r\n\r\n        function getNodeByGuid(diff, guid) {\r\n            var relids, i, node;\r\n\r\n            if (REGEXP.GUID.test(guid) !== true) {\r\n                return null;\r\n            }\r\n\r\n            if (diff.guid === guid) {\r\n                return diff;\r\n            }\r\n\r\n            relids = getDiffChildrenRelids(diff);\r\n            for (i = 0; i < relids.length; i++) {\r\n                node = getNodeByGuid(diff[relids[i]], guid);\r\n                if (node) {\r\n                    return node;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function _getPathOfGuidR(diff, guid, path) {\r\n            var relids, i, result;\r\n\r\n            if (diff.guid === guid) {\r\n                return path;\r\n            }\r\n\r\n            relids = getDiffChildrenRelids(diff);\r\n            for (i = 0; i < relids.length; i++) {\r\n                result = _getPathOfGuidR(diff[relids[i]], guid, path + CONSTANTS.PATH_SEP + relids[i]);\r\n                if (result !== null) {\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getPathOfGuid(diff, guid) {\r\n\r\n            if (REGEXP.GUID.test(guid) !== true) {\r\n                return null;\r\n            }\r\n            return _getPathOfGuidR(diff, guid, '');\r\n        }\r\n\r\n        function getRelidFromPath(path) {\r\n            path = path.split(CONSTANTS.PATH_SEP);\r\n            return path.splice(-1, 1)[0];\r\n        }\r\n\r\n        function getParentGuid(diff, path) {\r\n            return getPathOfDiff(diff, getParentPath(path)).guid || null;\r\n        }\r\n\r\n        function fixInheritanceCollision(path, diffBase, diffExtension, moveBase) {\r\n            // a generic approach to check for complex collisions, when the same\r\n            // path is being created by changes in the base of some container and\r\n            // inside the container by either move or creation\r\n            // also it moves new nodes whenever any of its container changed base -\r\n            // not necessarily able to figure out, so it is safer to reallocate relid in this rare case\r\n            var i,\r\n                diff = getPathOfDiff(diffBase, path),\r\n                keys = getDiffChildrenRelids(diff),\r\n                newRelid,\r\n                newPath,\r\n                parent,\r\n                src2dst,\r\n                dst2src,\r\n                checkContainer = function (containerGuid, relativePath) {\r\n                    var usedDiff, path, containerDiff, baseGuids, i, baseDiff, dataKnownInExtension;\r\n\r\n                    containerDiff = getNodeByGuid(diffExtension, containerGuid);\r\n                    if (containerDiff === null) {\r\n                        containerDiff = getNodeByGuid(diffBase, containerGuid);\r\n                        usedDiff = diffBase;\r\n                        path = getPathOfGuid(usedDiff, containerGuid);\r\n                    } else {\r\n                        dataKnownInExtension = true;\r\n                        usedDiff = diffExtension;\r\n                        path = getPathOfGuid(usedDiff, containerGuid);\r\n                    }\r\n\r\n                    baseGuids = Object.keys(containerDiff.oBaseGuids || {})\r\n                        .concat(Object.keys(containerDiff.ooBaseGuids || {}));\r\n\r\n                    for (i = 0; i < baseGuids.length; i += 1) {\r\n                        baseDiff = getPathOfDiff(getNodeByGuid(diffExtension, baseGuids[i]) || {}, relativePath);\r\n                        if (baseDiff.removed === false || typeof baseDiff.movedFrom === 'string') {\r\n                            //the base exists / changed and new at the given path\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    if (dataKnownInExtension &&\r\n                        containerDiff.pointer &&\r\n                        typeof containerDiff.pointer.base === 'string') {\r\n                        // the container changed its base\r\n                        return true;\r\n                    }\r\n                    //this parent was fine, so let's go to the next one - except the root, that we do not have to check\r\n                    relativePath = CONSTANTS.PATH_SEP + getRelidFromPath(path) + relativePath;\r\n                    if (getParentPath(path)) {\r\n                        // we should stop before the ROOT\r\n                        return checkContainer(\r\n                            getParentGuid(diffExtension, path) || getParentGuid(diffBase, path), \r\n                            relativePath\r\n                        );\r\n                    }\r\n\r\n                    return false;\r\n                };\r\n\r\n            if (diff.removed === false || typeof diff.movedFrom === 'string') {\r\n                // this is a new node at the given place, so let's check for base collisions\r\n                if (checkContainer(getParentGuid(diffBase, path), CONSTANTS.PATH_SEP + getRelidFromPath(path))) {\r\n                    // we have to move the node\r\n                    if (moveBase === true) {\r\n                        dst2src = _concatMoves.getBaseSourceFromDestination;\r\n                        src2dst = _concatMoves.getBaseDestinationFromSource;\r\n                    } else {\r\n                        dst2src = _concatMoves.getExtensionSourceFromDestination;\r\n                        src2dst = _concatMoves.getExtensionDestinationFromSource;\r\n                    }\r\n\r\n                    //TODO is there a safer way to ensure no collision with the new relid\r\n                    newRelid = RANDOM.generateRelid({}, CONSTANTS.MAXIMUM_STARTING_RELID_LENGTH);\r\n                    newPath = getParentPath(path) + '/' + newRelid;\r\n\r\n                    //now the actual place switching\r\n                    parent = getPathOfDiff(diffBase, getParentPath(path));\r\n                    parent[newRelid] = diff;\r\n                    parent[newRelid].collidingRelid = getRelidFromPath(path);\r\n                    delete parent[getRelidFromPath(path)];\r\n                    dst2src[newPath] = dst2src[path];\r\n                    delete dst2src[path];\r\n                    src2dst[dst2src[newPath]] = newPath;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                fixInheritanceCollision(path + CONSTANTS.PATH_SEP + keys[i], diffBase, diffExtension, moveBase);\r\n            }\r\n        }\r\n\r\n        function fixCollision(path, relid, diffBase, diffExtension) {\r\n            //a generic approach, to check if both diff has the same path\r\n            // but for a different node\r\n            //there is three types of path equality:\r\n            //1. same guids -> same node\r\n            //2. both was moved -> different nodes\r\n            //3. one was moved and the other is created ->different nodes (here we always have to generate\r\n            // new relid to the moved one)\r\n            //4. both was created (we have to generate relid to one of them)\r\n            var i,\r\n                keys = getDiffChildrenRelids(diffBase),\r\n                globalDiff,\r\n                newRelid,\r\n                newPath,\r\n                nodeDiff,\r\n                relids,\r\n                dst2src,\r\n                src2dst,\r\n                relidObj = {},\r\n                parent;\r\n\r\n            if (diffBase.guid !== diffExtension.guid &&\r\n                (typeof diffBase.guid === 'string' && typeof diffExtension.guid === 'string')) {\r\n                if (diffBase.movedFrom && diffExtension.movedFrom) {\r\n                    //relocate the extension\r\n                    globalDiff = _concatExtension;\r\n                    nodeDiff = diffExtension;\r\n                    dst2src = _concatMoves.getExtensionSourceFromDestination;\r\n                    src2dst = _concatMoves.getExtensionDestinationFromSource;\r\n                } else if (diffBase.movedFrom && diffExtension.removed === false) {\r\n                    globalDiff = _concatBase;\r\n                    nodeDiff = diffBase;\r\n                    dst2src = _concatMoves.getBaseSourceFromDestination;\r\n                    src2dst = _concatMoves.getBaseDestinationFromSource;\r\n                } else if (diffExtension.movedFrom && diffBase.removed === false) {\r\n                    globalDiff = _concatExtension;\r\n                    nodeDiff = diffExtension;\r\n                    dst2src = _concatMoves.getExtensionSourceFromDestination;\r\n                    src2dst = _concatMoves.getExtensionDestinationFromSource;\r\n                } else if (diffBase.removed === false && diffExtension.removed === false) {\r\n                    globalDiff = _concatExtension;\r\n                    nodeDiff = diffExtension;\r\n                    dst2src = _concatMoves.getExtensionSourceFromDestination;\r\n                    src2dst = _concatMoves.getExtensionDestinationFromSource;\r\n                } else {\r\n                    throw new Error('there is a guid mismatch among the two diffs: ' +\r\n                        diffBase.guid + ' vs ' + diffExtension.guid);\r\n                }\r\n\r\n                relids = getDiffChildrenRelids(getPathOfDiff(_concatBase, getParentPath(path)))\r\n                    .concat(getDiffChildrenRelids(getPathOfDiff(_concatExtension, getParentPath(path))));\r\n\r\n                relidObj = {};\r\n                for (i = 0; i < relids.length; i += 1) {\r\n                    relidObj[relids[i]] = {};\r\n                }\r\n                // TODO: Could this lead to collisions on bases/instances?\r\n                newRelid = RANDOM.generateRelid(relidObj);\r\n                newPath = getParentPath(path) + '/' + newRelid;\r\n\r\n                //now the actual place switching\r\n                parent = getPathOfDiff(globalDiff, getParentPath(path));\r\n                parent[newRelid] = nodeDiff;\r\n                parent[newRelid].collidingRelid = relid;\r\n                delete parent[relid];\r\n                dst2src[newPath] = dst2src[path];\r\n                delete dst2src[path];\r\n                src2dst[dst2src[newPath]] = newPath;\r\n            }\r\n\r\n            //recursive calls - only if there were no replacement due to collision\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (diffExtension[keys[i]]) {\r\n                    fixCollision(path + '/' + keys[i], keys[i], diffBase[keys[i]], diffExtension[keys[i]]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getAncestorPath(onePath, otherPath) {\r\n            var ancestorPath = '',\r\n                onePathArray = onePath.split('/'),\r\n                otherPathArray = otherPath.split('/'),\r\n                i = 0;\r\n            onePathArray.shift();\r\n            otherPathArray.shift();\r\n            if (onePathArray.length > 0 && otherPathArray.length > 0) {\r\n                while (i < onePathArray.length && onePathArray[i] === otherPathArray[i]) {\r\n                    ancestorPath += '/' + onePathArray[i];\r\n                    i += 1;\r\n                }\r\n            }\r\n            return ancestorPath;\r\n        }\r\n\r\n        function setBaseOfNewNode(root, nodePath, basePath) {\r\n            var ancestorPath = getAncestorPath(nodePath, basePath);\r\n            return TASYNC.call(function (node) {\r\n                var sourcePath = nodePath.substr(ancestorPath.length),\r\n                    targetPath = basePath.substr(ancestorPath.length);\r\n                innerCore.overlayInsert(node, sourcePath, 'base', targetPath);\r\n            }, self.loadByPath(root, ancestorPath));\r\n        }\r\n\r\n        function getOrderedRelids(diffObject) {\r\n            //those nodes that were changing relid as a result of move should be handled last\r\n            var keys = getDiffChildrenRelids(diffObject),\r\n                i,\r\n                ordered = [],\r\n                sourceRelid;\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (diffObject[keys[i]].movedFrom) {\r\n                    sourceRelid = diffObject[keys[i]].movedFrom;\r\n                    sourceRelid = sourceRelid.split('/');\r\n                    sourceRelid = sourceRelid[sourceRelid.length - 1];\r\n                    if (sourceRelid !== keys[i]) {\r\n                        ordered.push(keys[i]);\r\n                    } else {\r\n                        ordered.unshift(keys[i]);\r\n                    }\r\n                } else {\r\n                    ordered.unshift(keys[i]);\r\n                }\r\n            }\r\n            return ordered;\r\n        }\r\n\r\n        function makeInitialContainmentChanges(node, diff) {\r\n            var relids = getOrderedRelids(diff),\r\n                i, done, child, moved,\r\n                moving = function (n, di, r, p, m, a/*, d*/) {\r\n                    var nRelid;\r\n                    if (m === true) {\r\n                        n = self.moveNode(n, p);\r\n                        nRelid = self.getRelid(n);\r\n\r\n                        if (r !== nRelid) {\r\n                            //we have to make additional changes to our move table\r\n                            diff[nRelid] = JSON.parse(JSON.stringify(diff[r]));\r\n                            delete diff[r];\r\n                        }\r\n                    }\r\n                    return makeInitialContainmentChanges(n, di, a);\r\n                };\r\n\r\n            for (i = 0; i < relids.length; i++) {\r\n                moved = false;\r\n                if (diff[relids[i]].movedFrom) {\r\n                    //moved node\r\n                    moved = true;\r\n                    child = self.loadByPath(self.getRoot(node), diff[relids[i]].movedFrom);\r\n                    done = TASYNC.call(moving, child, diff[relids[i]], relids[i], node, moved, done);\r\n                } else if (diff[relids[i]].removed === false) {\r\n                    //added node\r\n                    if (diff[relids[i]].hash) {\r\n                        self.setProperty(node, relids[i], diff[relids[i]].hash);\r\n                        node.childrenRelids = null;\r\n                    }\r\n                } else {\r\n                    //simple node\r\n                    child = self.loadChild(node, relids[i]);\r\n                    done = TASYNC.call(moving, child, diff[relids[i]], relids[i], node, moved, done);\r\n                }\r\n            }\r\n\r\n            return TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n        }\r\n\r\n        function setBaseRelationsOfNewNodes(root, path, diff, added) {\r\n            var relids = getOrderedRelids(diff),\r\n                i,\r\n                children = [],\r\n                newNode = false;\r\n\r\n            for (i = 0; i < relids.length; i += 1) {\r\n                if ((diff[relids[i]].removed === false || added) &&\r\n                    diff[relids[i]].pointer && diff[relids[i]].pointer.base) {\r\n                    newNode = true;\r\n                    children[i] = TASYNC.join(\r\n                        setBaseOfNewNode(root, path + '/' + relids[i], diff[relids[i]].pointer.base),\r\n                        setBaseRelationsOfNewNodes(root, path + '/' + relids[i], diff[relids[i]], added || newNode)\r\n                    );\r\n                } else {\r\n                    children[i] = TASYNC.call(\r\n                        setBaseRelationsOfNewNodes, root, path + '/' + relids[i], diff[relids[i]], added\r\n                    );\r\n                }\r\n            }\r\n\r\n            return TASYNC.lift(children);\r\n        }\r\n\r\n        function applyAttributeChanges(node, attrDiff) {\r\n            var i, keys;\r\n            keys = Object.keys(attrDiff);\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (attrDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.delAttribute(node, keys[i]);\r\n                } else {\r\n                    self.setAttribute(node, keys[i], attrDiff[keys[i]]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function applyRegistryChanges(node, regDiff) {\r\n            var i, keys;\r\n            keys = Object.keys(regDiff);\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (regDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.delRegistry(node, keys[i]);\r\n                } else {\r\n                    self.setRegistry(node, keys[i], regDiff[keys[i]]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function setPointer(node, name, target) {\r\n            var targetNode;\r\n            if (target === null) {\r\n                targetNode = null;\r\n            } else {\r\n                targetNode = self.loadByPath(self.getRoot(node), target);\r\n            }\r\n            return TASYNC.call(function (t) {\r\n                //TODO watch if handling of base changes!!!\r\n                self.setPointer(node, name, t);\r\n                return;\r\n            }, targetNode);\r\n        }\r\n\r\n        function applyPointerChanges(node, diff) {\r\n            var done,\r\n                pointerDiff = diff.pointer || {},\r\n                keys = Object.keys(pointerDiff),\r\n                i;\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (pointerDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.deletePointer(node, keys[i]);\r\n                } else if (diff.removed !== false || keys[i] !== 'base') {\r\n                    done = setPointer(node, keys[i], pointerDiff[keys[i]], done);\r\n                }\r\n            }\r\n\r\n            return TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n\r\n        }\r\n\r\n        function addMember(node, name, target, data) {\r\n            var memberAttrSetting = function (diff) {\r\n                    var keys, i;\r\n\r\n                    keys = Object.keys(diff);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (diff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            self.delMemberAttribute(node, name, target, keys[i]);\r\n                        } else {\r\n                            self.setMemberAttribute(node, name, target, keys[i], diff[keys[i]]);\r\n                        }\r\n                    }\r\n                },\r\n                memberRegSetting = function (diff) {\r\n                    var keys, i;\r\n\r\n                    keys = Object.keys(diff);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (diff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            self.delMemberRegistry(node, name, target, keys[i]);\r\n                        } else {\r\n                            self.setMemberRegistry(node, name, target, keys[i], diff[keys[i]]);\r\n                        }\r\n                    }\r\n                };\r\n            return TASYNC.call(function (t) {\r\n                self.addMember(node, name, t);\r\n                memberAttrSetting(data.attr || {});\r\n                memberRegSetting(data.reg || {});\r\n                return;\r\n            }, self.loadByPath(self.getRoot(node), target));\r\n        }\r\n\r\n        function applySetChanges(node, setDiff) {\r\n            var done,\r\n                setNames = Object.keys(setDiff),\r\n                elements, i, j;\r\n            for (i = 0; i < setNames.length; i++) {\r\n                if (setDiff[setNames[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.deleteSet(node, setNames[i]);\r\n                } else {\r\n                    self.createSet(node, setNames[i]);\r\n                    if (Object.keys(setDiff[setNames[i]].attr || {}).length > 0) {\r\n                        elements = Object.keys(setDiff[setNames[i]].attr);\r\n                        for (j = 0; j < elements.length; j += 1) {\r\n                            if (setDiff[setNames[i]].attr[elements[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                                self.delSetAttribute(node, setNames[i], elements[j]);\r\n                            } else {\r\n                                self.setSetAttribute(node, setNames[i], elements[j],\r\n                                    setDiff[setNames[i]].attr[elements[j]]);\r\n                            }\r\n                        }\r\n                    }\r\n                    if ((Object.keys(setDiff[setNames[i]].reg || {})).length > 0) {\r\n                        elements = Object.keys(setDiff[setNames[i]].reg);\r\n                        for (j = 0; j < elements.length; j += 1) {\r\n                            if (setDiff[setNames[i]].reg[elements[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                                self.delSetRegistry(node, setNames[i], elements[j]);\r\n                            } else {\r\n                                self.setSetRegistry(node, setNames[i], elements[j],\r\n                                    setDiff[setNames[i]].reg[elements[j]]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    elements = Object.keys(setDiff[setNames[i]]);\r\n                    for (j = 0; j < elements.length; j++) {\r\n                        if (RANDOM.isValidPath(elements[j])) {\r\n                            if (setDiff[setNames[i]][elements[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                                self.delMember(node, setNames[i], elements[j]);\r\n                            } else {\r\n                                done = addMember(node, setNames[i], elements[j], setDiff[setNames[i]][elements[j]],\r\n                                    done);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n\r\n        }\r\n\r\n        function jsonConcat(base, extension) {\r\n            var baseKeys = Object.keys(base),\r\n                extKeys = Object.keys(extension),\r\n                concat = JSON.parse(JSON.stringify(base)),\r\n                i;\r\n            for (i = 0; i < extKeys.length; i++) {\r\n                if (baseKeys.indexOf(extKeys[i]) === -1) {\r\n                    concat[extKeys[i]] = JSON.parse(JSON.stringify(extension[extKeys[i]]));\r\n                } else {\r\n                    if (typeof base[extKeys[i]] === 'object' && typeof extension[extKeys[i]] === 'object') {\r\n                        concat[extKeys[i]] = jsonConcat(base[extKeys[i]], extension[extKeys[i]]);\r\n                    } else { //either from value to object or object from value we go with the extension\r\n                        concat[extKeys[i]] = JSON.parse(JSON.stringify(extension[extKeys[i]]));\r\n                    }\r\n                }\r\n            }\r\n            return concat;\r\n        }\r\n\r\n        function applyMetaAttributes(node, metaAttrDiff) {\r\n            var i, keys, newValue;\r\n            if (metaAttrDiff === CONSTANTS.TO_DELETE_STRING) {\r\n                //we should delete all MetaAttributes\r\n                keys = self.getValidAttributeNames(node);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    self.delAttributeMeta(node, keys[i]);\r\n                }\r\n            } else {\r\n                keys = Object.keys(metaAttrDiff);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    if (metaAttrDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                        self.delAttributeMeta(node, keys[i]);\r\n                    } else {\r\n                        newValue = jsonConcat(self.getAttributeMeta(node, keys[i]) || {}, metaAttrDiff[keys[i]]);\r\n                        self.setAttributeMeta(node, keys[i], newValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function applyMetaConstraints(node, metaConDiff) {\r\n            var keys, i;\r\n            if (metaConDiff === CONSTANTS.TO_DELETE_STRING) {\r\n                //remove all constraints\r\n                keys = self.getConstraintNames(node);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    self.delConstraint(node, keys[i]);\r\n                }\r\n            } else {\r\n                keys = Object.keys(metaConDiff);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    if (metaConDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                        self.delConstraint(node, keys[i]);\r\n                    } else {\r\n                        self.setConstraint(node, keys[i], jsonConcat(self.getConstraint(node, keys[i]) || {},\r\n                            metaConDiff[keys[i]]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function applyMetaChildren(node, metaChildrenDiff) {\r\n            var keys, i, done,\r\n                setChild = function (target, data/*, d*/) {\r\n                    self.setChildMeta(node, target, data.min, data.max);\r\n                };\r\n            if (metaChildrenDiff === CONSTANTS.TO_DELETE_STRING) {\r\n                //remove all valid child\r\n                keys = self.getValidChildrenPaths(node);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    self.delChildMeta(node, keys[i]);\r\n                }\r\n            } else {\r\n                self.setChildrenMetaLimits(node, metaChildrenDiff.min, metaChildrenDiff.max);\r\n                delete metaChildrenDiff.max; //TODO we do not need it anymore, but maybe there is a better way\r\n                delete metaChildrenDiff.min;\r\n                keys = Object.keys(metaChildrenDiff);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    if (metaChildrenDiff[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                        self.delChildMeta(node, keys[i]);\r\n                    } else {\r\n                        done = TASYNC.call(setChild, self.loadByPath(self.getRoot(node), keys[i]),\r\n                            metaChildrenDiff[keys[i]], done);\r\n                    }\r\n                }\r\n            }\r\n\r\n            TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n        }\r\n\r\n        function applyMetaPointers(node, metaPointerDiff) {\r\n            var names, targets, i, j, done,\r\n                setPointer = function (name, target, data/*, d*/) {\r\n                    self.setPointerMetaTarget(node, name, target, data.min, data.max);\r\n                };\r\n            if (metaPointerDiff === CONSTANTS.TO_DELETE_STRING) {\r\n                //remove all pointers,sets and their targets\r\n                names = self.getValidPointerNames(node);\r\n                for (i = 0; i < names.length; i++) {\r\n                    self.delPointerMeta(node, names[i]);\r\n                }\r\n\r\n                names = self.getValidSetNames(node);\r\n                for (i = 0; i < names.length; i++) {\r\n                    self.delPointerMeta(node, names[i]);\r\n                }\r\n                return;\r\n            }\r\n\r\n            names = Object.keys(metaPointerDiff);\r\n            for (i = 0; i < names.length; i++) {\r\n                if (metaPointerDiff[names[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.delPointerMeta(node, names[i]);\r\n                } else {\r\n                    self.setPointerMetaLimits(node, names[i], metaPointerDiff[names[i]].min,\r\n                        metaPointerDiff[names[i]].max);\r\n                    //TODO we do not need it anymore, but maybe there is a better way\r\n                    delete metaPointerDiff[names[i]].max;\r\n                    delete metaPointerDiff[names[i]].min;\r\n                    targets = Object.keys(metaPointerDiff[names[i]]);\r\n                    for (j = 0; j < targets.length; j++) {\r\n                        if (metaPointerDiff[names[i]][targets[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            self.delPointerMetaTarget(node, names[i], targets[j]);\r\n                        } else {\r\n                            done = TASYNC.call(setPointer, names[i], self.loadByPath(self.getRoot(node), targets[j]),\r\n                                metaPointerDiff[names[i]][targets[j]], done);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n        }\r\n\r\n        function applyMetaAspects(node, metaAspectsDiff) {\r\n            var names, targets, i, j, done,\r\n                setAspect = function (name, target/*, d*/) {\r\n                    self.setAspectMetaTarget(node, name, target);\r\n                };\r\n            if (metaAspectsDiff === CONSTANTS.TO_DELETE_STRING) {\r\n                //remove all aspects\r\n                names = self.getValidAspectNames(node);\r\n                for (i = 0; i < names.length; i++) {\r\n                    self.delAspectMeta(node, names[i]);\r\n                }\r\n                return;\r\n            }\r\n\r\n            names = Object.keys(metaAspectsDiff);\r\n            for (i = 0; i < names.length; i++) {\r\n                if (metaAspectsDiff[names[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    self.delAspectMeta(node, names[i]);\r\n                } else {\r\n                    targets = metaAspectsDiff[names[i]];\r\n                    for (j = 0; j < targets.length; j++) {\r\n                        if (metaAspectsDiff[names[i]][targets[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            self.delAspectMetaTarget(node, names[i], targets[j]);\r\n                        } else {\r\n                            done = TASYNC.call(setAspect, names[i], self.loadByPath(self.getRoot(node), targets[j]),\r\n                                done);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n        }\r\n\r\n        function applyMetaChanges(node, metaDiff) {\r\n            var done;\r\n            applyMetaAttributes(node, metaDiff.attributes || CONSTANTS.TO_DELETE_STRING);\r\n            applyMetaConstraints(node, metaDiff.constraints || CONSTANTS.TO_DELETE_STRING);\r\n            done = applyMetaChildren(node, metaDiff.children || CONSTANTS.TO_DELETE_STRING);\r\n            done = TASYNC.call(applyMetaPointers, node, metaDiff.pointers || CONSTANTS.TO_DELETE_STRING, done);\r\n            done = TASYNC.call(applyMetaAspects, node, metaDiff.aspects || CONSTANTS.TO_DELETE_STRING, done);\r\n\r\n            TASYNC.call(function (/*d*/) {\r\n                return null;\r\n            }, done);\r\n        }\r\n\r\n        function applyNodeChange(root, path, nodeDiff) {\r\n            //check for move\r\n            var node;\r\n\r\n            node = self.loadByPath(root, path);\r\n\r\n            return TASYNC.call(function (n) {\r\n                var done,\r\n                    relids = getDiffChildrenRelids(nodeDiff),\r\n                    i;\r\n                if (n === null) {\r\n                    logger.warn('Missing node [' + path + '] during patch application. ' +\r\n                        'Could be a conflicting conflict resolution.');\r\n                    return;\r\n                }\r\n                if (nodeDiff.removed === true) {\r\n                    self.deleteNode(n);\r\n                    return;\r\n                }\r\n                applyAttributeChanges(n, nodeDiff.attr || {});\r\n                applyRegistryChanges(n, nodeDiff.reg || {});\r\n                done = applyPointerChanges(n, nodeDiff);\r\n                done = TASYNC.call(applySetChanges, n, nodeDiff.set || {}, done);\r\n                if (nodeDiff.meta) {\r\n                    delete nodeDiff.meta.empty;\r\n                    done = TASYNC.call(applyMetaChanges, n, nodeDiff.meta, done);\r\n                }\r\n                for (i = 0; i < relids.length; i++) {\r\n                    done = TASYNC.call(function () {\r\n                        return null;\r\n                    }, applyNodeChange(root, path + '/' + relids[i], nodeDiff[relids[i]]), done);\r\n                    // done = TASYNC.join(done, applyNodeChange(root, path + '/' + relids[i], nodeDiff[relids[i]]));\r\n                }\r\n                /*TASYNC.call(function (d) {\r\n                 return done;\r\n                 }, done);*/\r\n\r\n                //we should check for possible guid change and restore the expected guid\r\n                if (self.getGuid(n) !== nodeDiff.guid && nodeDiff.guid) {\r\n                    done = TASYNC.call(function () {\r\n                        return null;\r\n                    }, self.setGuid(n, nodeDiff.guid), done);\r\n                }\r\n                return done;\r\n            }, node);\r\n        }\r\n\r\n        function getSingleNode(node) {\r\n            //removes the children from the node\r\n            var result = JSON.parse(JSON.stringify(node)),\r\n                keys = getDiffChildrenRelids(result),\r\n                i;\r\n            for (i = 0; i < keys.length; i++) {\r\n                delete result[keys[i]];\r\n            }\r\n            //changeMovedPaths(result);\r\n            return result;\r\n        }\r\n\r\n        //FIXME are we going to use this function\r\n        //function getConflictByGuid(conflict, guid) {\r\n        //    var relids, i, result;\r\n        //    if (conflict.guid === guid) {\r\n        //        return conflict;\r\n        //    }\r\n        //    relids = getDiffChildrenRelids(conflict);\r\n        //    for (i = 0; i < relids.length; i++) {\r\n        //        result = getConflictByGuid(conflict[relids[i]], guid);\r\n        //        if (result) {\r\n        //            return result;\r\n        //        }\r\n        //    }\r\n        //    return null;\r\n        //}\r\n\r\n        //now we try a different approach, which maybe more simple\r\n        function getCommonPathForConcat(path) {\r\n            if (_concatMoves.getExtensionSourceFromDestination[path]) {\r\n                path = _concatMoves.getExtensionSourceFromDestination[path];\r\n            }\r\n            if (_concatMoves.getBaseDestinationFromSource[path]) {\r\n                path = _concatMoves.getBaseDestinationFromSource[path];\r\n            }\r\n            return path;\r\n        }\r\n\r\n        function getConcatBaseRemovals(diff) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                i;\r\n            if (diff.removed !== true) {\r\n                if (diff.movedFrom) {\r\n                    if (_concatBaseRemovals[diff.guid] !== undefined) {\r\n                        delete _concatBaseRemovals[diff.guid];\r\n                    } else {\r\n                        _concatBaseRemovals[diff.guid] = false;\r\n                    }\r\n                }\r\n                for (i = 0; i < relids.length; i++) {\r\n                    getConcatBaseRemovals(diff[relids[i]]);\r\n                }\r\n            } else {\r\n                if (_concatBaseRemovals[diff.guid] === false) {\r\n                    delete _concatBaseRemovals[diff.guid];\r\n                } else {\r\n                    _concatBaseRemovals[diff.guid] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        function completeConcatBase(baseDiff, extensionDiff) {\r\n            var recursiveComplete = function (base, extension, newItem) {\r\n                var i, keys;\r\n                if (newItem === true) {\r\n                    if (extension.guid) {\r\n                        base.guid = extension.guid;\r\n                    }\r\n                    if (extension.oGuids) {\r\n                        base.oGuids = extension.oGuids;\r\n                    }\r\n                    if (extension.ooGuids) {\r\n                        base.ooGuids = extension.ooGuids;\r\n                    }\r\n\r\n                    if (extension.oBaseGuids) {\r\n                        base.oBaseGuids = extension.oBaseGuids;\r\n                    }\r\n                    if (extension.ooBaseGuids) {\r\n                        base.ooBaseGuids = extension.ooBaseGuids;\r\n                    }\r\n\r\n                    if (typeof extension.removed === 'boolean' && !extension.removed) {\r\n                        base.removed = extension.removed;\r\n                    }\r\n\r\n                    if (extension.hash) {\r\n                        base.hash = extension.hash;\r\n                    }\r\n\r\n                    if (extension.childrenListChanged) {\r\n                        base.childrenListChanged = true;\r\n                    }\r\n                }\r\n\r\n                keys = getDiffChildrenRelids(extension);\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (base[keys[i]] === undefined) {\r\n                        if (typeof extension[keys[i]].movedFrom !== 'string') {\r\n                            base[keys[i]] = {};\r\n                            recursiveComplete(base[keys[i]], extension[keys[i]], true);\r\n                        }\r\n                    } else {\r\n                        recursiveComplete(base[keys[i]], extension[keys[i]], false);\r\n                    }\r\n                }\r\n            };\r\n\r\n            recursiveComplete(baseDiff, extensionDiff, Object.keys(baseDiff).length === 0);\r\n        }\r\n\r\n        function getObstructiveGuids(diffNode) {\r\n            var result = [],\r\n                keys, i;\r\n            keys = Object.keys(diffNode.oGuids || {});\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (_concatBaseRemovals[keys[i]]) {\r\n                    result.push(keys[i]);\r\n                }\r\n            }\r\n            keys = Object.keys(diffNode.ooGuids || {});\r\n            for (i = 0; i < keys.length; i++) {\r\n                if (_concatBaseRemovals[keys[i]]) {\r\n                    result.push(keys[i]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getWhomIObstructGuids(guid) {\r\n            //this function is needed when the extension contains a deletion where the base did not delete the node\r\n            var guids = [],\r\n                reachedItself = false,\r\n                checkNode = function (diffNode) {\r\n                    var relids, i;\r\n                    if ((diffNode.oGuids && diffNode.oGuids[guid]) || (diffNode.ooGuids && diffNode.ooGuids[guid])) {\r\n                        guids.push(diffNode.guid);\r\n                    }\r\n\r\n                    if (reachedItself) {\r\n                        guids.push(diffNode.guid);\r\n                    } else if (diffNode.guid === guid) {\r\n                        reachedItself = true;\r\n                    }\r\n\r\n                    relids = getDiffChildrenRelids(diffNode);\r\n                    for (i = 0; i < relids.length; i++) {\r\n                        checkNode(diffNode[relids[i]]);\r\n                    }\r\n                };\r\n            checkNode(_concatBase);\r\n            return guids;\r\n        }\r\n\r\n        function gatherFullMetaConflicts(diffMeta, mine, path, opposingPath) {\r\n            var conflict, opposingConflict,\r\n                relids, i, j, keys, tPath, key;\r\n\r\n            if (mine) {\r\n                conflict = _conflictMine;\r\n                opposingConflict = _conflictTheirs[opposingPath];\r\n            } else {\r\n                conflict = _conflictTheirs;\r\n                opposingConflict = _conflictMine[opposingPath];\r\n            }\r\n\r\n            if (diffMeta === CONSTANTS.TO_DELETE_STRING) {\r\n                conflict[path] = conflict[path] || {value: CONSTANTS.TO_DELETE_STRING, conflictingPaths: {}};\r\n                conflict[path].conflictingPaths[opposingPath] = true;\r\n                opposingConflict.conflictingPaths[path] = true;\r\n                return; //there is no other conflict\r\n            }\r\n\r\n            //children\r\n            if (diffMeta.children) {\r\n                if (diffMeta.children === CONSTANTS.TO_DELETE_STRING) {\r\n                    conflict[path + '/children'] = conflict[path + '/children'] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    conflict[path + '/children'].conflictingPaths[opposingPath] = true;\r\n                    opposingConflict.conflictingPaths[path + '/children'] = true;\r\n                } else {\r\n                    if (diffMeta.children.max) {\r\n                        conflict[path + '/children/max'] = conflict[path + '/children/max'] || {\r\n                            value: diffMeta.children.max,\r\n                            conflictingPaths: {}\r\n                        };\r\n                        conflict[path + '/children/max'].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[path + '/children/max'] = true;\r\n                    }\r\n                    if (diffMeta.children.min) {\r\n                        conflict[path + '/children/min'] = conflict[path + '/children/min'] || {\r\n                            value: diffMeta.children.min,\r\n                            conflictingPaths: {}\r\n                        };\r\n                        conflict[path + '/children/min'].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[path + '/children/min'] = true;\r\n                    }\r\n                    relids = getDiffChildrenRelids(diffMeta.children);\r\n                    for (i = 0; i < relids.length; i++) {\r\n                        conflict[path + '/children/' + relids[i]] = conflict[path + '/children/' + relids[i]] || {\r\n                            value: diffMeta.children[relids[i]],\r\n                            conflictingPaths: {}\r\n                        };\r\n                        conflict[path + '/children/' + relids[i]].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[path + '/children/' + relids[i]] = true;\r\n                    }\r\n                }\r\n            }\r\n            //attributes\r\n            if (diffMeta.attributes) {\r\n                if (diffMeta.attributes === CONSTANTS.TO_DELETE_STRING) {\r\n                    conflict[path + '/attributes'] = conflict[path + '/attributes'] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    conflict[path + '/attributes'].conflictingPaths[opposingPath] = true;\r\n                    opposingConflict.conflictingPaths[path + '/attributes'] = true;\r\n                } else {\r\n                    keys = Object.keys(diffMeta.attributes);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        key = path + '/attributes/' + keys[i];\r\n                        conflict[key] = conflict[key] || {\r\n                            value: diffMeta.attributes[keys[i]],\r\n                            conflictingPaths: {}\r\n                        };\r\n                        conflict[key].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[key] = true;\r\n                    }\r\n                }\r\n            }\r\n            //pointers\r\n            if (diffMeta.pointers) {\r\n                if (diffMeta.pointers === CONSTANTS.TO_DELETE_STRING) {\r\n                    conflict[path + '/pointers'] = conflict[path + '/pointers'] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    conflict[path + '/pointers'].conflictingPaths[opposingPath] = true;\r\n                    opposingConflict.conflictingPaths[path + '/pointers'] = true;\r\n                } else {\r\n                    keys = Object.keys(diffMeta.pointers);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (diffMeta.pointers[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            conflict[path + '/pointers/' + keys[i]] = conflict[path + '/pointers/' + keys[i]] || {\r\n                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            conflict[path + '/pointers/' + keys[i]].conflictingPaths[opposingPath] = true;\r\n                            opposingConflict.conflictingPaths[path + '/pointers/' + keys[i]] = true;\r\n                        } else {\r\n                            if (diffMeta.pointers[keys[i]].max) {\r\n                                conflict[path + '/pointers/' + keys[i] + '/max'] =\r\n                                    conflict[path + '/pointers/' + keys[i] + '/max'] || {\r\n                                        value: diffMeta.pointers[keys[i]].max,\r\n                                        conflictingPaths: {}\r\n                                    };\r\n                                conflict[path + '/pointers/' + keys[i] + '/max'].conflictingPaths[opposingPath] = true;\r\n                                opposingConflict.conflictingPaths[path + '/pointers/' + keys[i] + '/max'] = true;\r\n                            }\r\n                            if (diffMeta.pointers[keys[i]].min) {\r\n                                conflict[path + '/pointers/' + keys[i] + '/min'] =\r\n                                    conflict[path + '/pointers/' + keys[i] + '/min'] || {\r\n                                        value: diffMeta.pointers[keys[i]].min,\r\n                                        conflictingPaths: {}\r\n                                    };\r\n                                conflict[path + '/pointers/' + keys[i] + '/min'].conflictingPaths[opposingPath] = true;\r\n                                opposingConflict.conflictingPaths[path + '/pointers/' + keys[i] + '/min'] = true;\r\n                            }\r\n                            relids = getDiffChildrenRelids(diffMeta.pointers[keys[i]]);\r\n                            for (j = 0; j < relids.length; j++) {\r\n                                tPath = getCommonPathForConcat(relids[j]);\r\n                                conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//'] =\r\n                                    conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//'] || {\r\n                                        value: diffMeta.pointers[keys[i]][relids[j]],\r\n                                        conflictingPaths: {}\r\n                                    };\r\n                                conflict[path + '/pointers/' + keys[i] + '/' + tPath + '//']\r\n                                    .conflictingPaths[opposingPath] = true;\r\n                                opposingConflict.conflictingPaths[path + '/pointers/' +\r\n                                keys[i] + '/' + tPath + '//'] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //aspects\r\n            //TODO\r\n        }\r\n\r\n        function gatherFullSetConflicts(diffSet, mine, path, opposingPath) {\r\n            var relids = getDiffChildrenRelids(diffSet),\r\n                i, keys, j, conflict, opposingConflict;\r\n\r\n            //setting the conflicts\r\n            if (mine === true) {\r\n                conflict = _conflictMine;\r\n                opposingConflict = _conflictTheirs[opposingPath];\r\n            } else {\r\n                conflict = _conflictTheirs;\r\n                opposingConflict = _conflictMine[opposingPath];\r\n            }\r\n\r\n            //set attributes and registry entries\r\n            keys = Object.keys(diffSet.attr || {});\r\n            for (j = 0; j < keys.length; j++) {\r\n                conflict[path + '/attr/' + keys[j]] =\r\n                    conflict[path + '/attr/' + keys[j]] || {\r\n                        value: diffSet.attr[keys[j]],\r\n                        conflictingPaths: {}\r\n                    };\r\n                conflict[path + '/attr/' + keys[j]].conflictingPaths[opposingPath] = true;\r\n                opposingConflict.conflictingPaths[path + '/attr/' + keys[j]] = true;\r\n            }\r\n            keys = Object.keys(diffSet.reg || {});\r\n            for (j = 0; j < keys.length; j++) {\r\n                conflict[path + '/reg/' + keys[j]] =\r\n                    conflict[path + '/reg/' + keys[j]] || {\r\n                        value: diffSet.reg[keys[j]],\r\n                        conflictingPaths: {}\r\n                    };\r\n                conflict[path + '/reg/' + keys[j]].conflictingPaths[opposingPath] = true;\r\n                opposingConflict.conflictingPaths[path + '/reg/' + keys[j]] = true;\r\n            }\r\n\r\n            for (i = 0; i < relids.length; i++) {\r\n                if (diffSet[relids[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                    //single conflict as the element was removed\r\n                    conflict[path + '/' + relids[i] + '/'] = conflict[path + '/' + relids[i] + '/'] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    conflict[path + '/' + relids[i] + '/'].conflictingPaths[opposingPath] = true;\r\n                    opposingConflict.conflictingPaths[path + '/' + relids[i] + '/'] = true;\r\n                } else {\r\n                    keys = Object.keys(diffSet[relids[i]].attr || {});\r\n                    for (j = 0; j < keys.length; j++) {\r\n                        conflict[path + '/' + relids[i] + '//attr/' + keys[j]] =\r\n                            conflict[path + '/' + relids[i] + '//attr/' + keys[j]] || {\r\n                                value: diffSet[relids[i]].attr[keys[j]],\r\n                                conflictingPaths: {}\r\n                            };\r\n                        conflict[path + '/' + relids[i] + '//attr/' + keys[j]].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[path + '/' + relids[i] + '//attr/' + keys[j]] = true;\r\n                    }\r\n                    keys = Object.keys(diffSet[relids[i]].reg || {});\r\n                    for (j = 0; j < keys.length; j++) {\r\n                        conflict[path + '/' + relids[i] + '//reg/' + keys[j]] =\r\n                            conflict[path + '/' + relids[i] + '//reg/' + keys[j]] || {\r\n                                value: diffSet[relids[i]].reg[keys[j]],\r\n                                conflictingPaths: {}\r\n                            };\r\n                        conflict[path + '/' + relids[i] + '//reg/' + keys[j]].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[path + '/' + relids[i] + '//reg/' + keys[j]] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function gatherFullNodeConflicts(diffNode, mine, path, opposingPath) {\r\n            var conflict,\r\n                opposingConflict,\r\n                keys, i,\r\n                createSingleKeyValuePairConflicts = function (pathBase, data) {\r\n                    var keys, i;\r\n                    keys = Object.keys(data);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        conflict[pathBase + '/' + keys[i]] = conflict[pathBase + '/' + keys[i]] || {\r\n                            value: data[keys[i]],\r\n                            conflictingPaths: {}\r\n                        };\r\n                        conflict[pathBase + '/' + keys[i]].conflictingPaths[opposingPath] = true;\r\n                        opposingConflict.conflictingPaths[pathBase + '/' + keys[i]] = true;\r\n                    }\r\n                };\r\n\r\n            //setting the conflicts\r\n            if (mine === true) {\r\n                conflict = _conflictMine;\r\n                opposingConflict = _conflictTheirs[opposingPath];\r\n            } else {\r\n                conflict = _conflictTheirs;\r\n                opposingConflict = _conflictMine[opposingPath];\r\n            }\r\n            ASSERT(opposingConflict);\r\n            //if the node was moved we should make a conflict for the whole node as well\r\n            if (diffNode.movedFrom) {\r\n                conflict[path] = conflict[path] || {value: path, conflictingPaths: {}};\r\n                conflict[path].conflictingPaths[opposingPath] = true;\r\n                opposingConflict.conflictingPaths[path] = true;\r\n            }\r\n            createSingleKeyValuePairConflicts(path + '/attr', diffNode.attr || {});\r\n            createSingleKeyValuePairConflicts(path + '/reg', diffNode.reg || {});\r\n            createSingleKeyValuePairConflicts(path + '/pointer', diffNode.pointer || {});\r\n\r\n            if (diffNode.set) {\r\n                if (diffNode.set === CONSTANTS.TO_DELETE_STRING) {\r\n                    conflict[path + '/set'] = conflict[path + '/set'] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    conflict[path + '/set'].conflictingPaths[opposingPath] = true;\r\n                    opposingConflict.conflictingPaths[path + '/set'] = true;\r\n                } else {\r\n                    keys = Object.keys(diffNode.set);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (diffNode.set[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            conflict[path + '/set/' + keys[i]] = conflict[path + '/set/' + keys[i]] || {\r\n                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            conflict[path + '/set/' + keys[i]].conflictingPaths[opposingPath] = true;\r\n                            opposingConflict.conflictingPaths[path + '/set/' + keys[i]] = true;\r\n                        } else {\r\n                            gatherFullSetConflicts(diffNode.set[keys[i]], mine, path + '/set/' + keys[i], opposingPath);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (diffNode.meta) {\r\n                gatherFullMetaConflicts(diffNode.meta, mine, path + '/meta', opposingPath);\r\n            }\r\n\r\n            //if the opposing item is theirs, we have to recursively go down in our changes\r\n            if (mine) {\r\n                keys = getDiffChildrenRelids(diffNode);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    gatherFullNodeConflicts(diffNode[keys[i]], true, path + '/' + keys[i], opposingPath);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        function concatSingleKeyValuePairs(path, base, extension) {\r\n            var keys, i, temp;\r\n            keys = Object.keys(extension);\r\n            for (i = 0; i < keys.length; i++) {\r\n                temp = extension[keys[i]];\r\n                if (typeof temp === 'string' && temp !== CONSTANTS.TO_DELETE_STRING) {\r\n                    temp = getCommonPathForConcat(temp);\r\n                }\r\n                if (base[keys[i]] !== undefined && CANON.stringify(base[keys[i]]) !== CANON.stringify(temp)) {\r\n                    //conflict\r\n                    _conflictMine[path + '/' + keys[i]] = {value: base[keys[i]], conflictingPaths: {}};\r\n                    _conflictTheirs[path + '/' + keys[i]] = {value: extension[keys[i]], conflictingPaths: {}};\r\n                    _conflictMine[path + '/' + keys[i]].conflictingPaths[path + '/' + keys[i]] = true;\r\n                    _conflictTheirs[path + '/' + keys[i]].conflictingPaths[path + '/' + keys[i]] = true;\r\n                } else {\r\n                    base[keys[i]] = extension[keys[i]];\r\n                }\r\n            }\r\n        }\r\n\r\n        function concatSet(path, base, extension) {\r\n            var names = Object.keys(extension),\r\n                members, i, j, memberPath;\r\n\r\n            for (i = 0; i < names.length; i++) {\r\n                if (base[names[i]]) {\r\n                    if (base[names[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                        if (extension[names[i]] !== CONSTANTS.TO_DELETE_STRING) {\r\n                            //whole set conflict\r\n                            _conflictMine[path + '/' + names[i]] = {\r\n                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            gatherFullSetConflicts(extension[names[i]],\r\n                                false, path + '/' + names[i], path + '/' + names[i]);\r\n                        }\r\n                    } else {\r\n                        if (extension[names[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                            //whole set conflict\r\n                            _conflictTheirs[path + '/' + names[i]] = {\r\n                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            gatherFullSetConflicts(base[names[i]], true, path + '/' + names[i], path + '/' + names[i]);\r\n                        } else {\r\n                            //now check the set attribute and registry differences\r\n                            if (base[names[i]].attr && extension[names[i]].attr) {\r\n                                concatSingleKeyValuePairs(path + '/' + names[i] + '/attr',\r\n                                    base[names[i]].attr,\r\n                                    extension[names[i]].attr);\r\n                            }\r\n                            if (base[names[i]].reg && extension[names[i]].reg) {\r\n                                concatSingleKeyValuePairs(path + '/' + names[i] + '/reg',\r\n                                    base[names[i]].reg,\r\n                                    extension[names[i]].reg);\r\n                            }\r\n                            //now we can only have member or sub-member conflicts...\r\n                            members = getDiffChildrenRelids(extension[names[i]]);\r\n                            for (j = 0; j < members.length; j++) {\r\n                                memberPath = getCommonPathForConcat(members[j]);\r\n                                if (base[names[i]][memberPath]) {\r\n                                    if (base[names[i]][memberPath] === CONSTANTS.TO_DELETE_STRING) {\r\n                                        if (extension[names[i]][members[j]] !== CONSTANTS.TO_DELETE_STRING) {\r\n                                            //whole member conflict\r\n                                            _conflictMine[path + '/' + names[i] + '/' + memberPath + '//'] = {\r\n                                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                                conflictingPaths: {}\r\n                                            };\r\n                                            gatherFullNodeConflicts(extension[names[i]][members[j]],\r\n                                                false,\r\n                                                path + '/' + names[i] + '/' + memberPath + '//', path +\r\n                                                '/' + names[i] + '/' + memberPath + '//');\r\n                                        }\r\n                                    } else {\r\n                                        if (extension[names[i]][members[j]] === CONSTANTS.TO_DELETE_STRING) {\r\n                                            //whole member conflict\r\n                                            _conflictTheirs[path + '/' + names[i] + '/' + memberPath + '//'] = {\r\n                                                value: CONSTANTS.TO_DELETE_STRING,\r\n                                                conflictingPaths: {}\r\n                                            };\r\n                                            gatherFullNodeConflicts(base[names[i]][memberPath],\r\n                                                true,\r\n                                                path + '/' + names[i] + '/' + memberPath + '//', path +\r\n                                                '/' + names[i] + '/' + memberPath + '//');\r\n                                        } else {\r\n                                            if (extension[names[i]][members[j]].attr) {\r\n                                                if (base[names[i]][memberPath].attr) {\r\n                                                    concatSingleKeyValuePairs(\r\n                                                        path + '/' + names[i] + '/' + memberPath + '/' + '/attr',\r\n                                                        base[names[i]][memberPath].attr,\r\n                                                        extension[names[i]][members[j]].attr);\r\n                                                } else {\r\n                                                    base[names[i]][memberPath].attr =\r\n                                                        extension[names[i]][members[j]].attr;\r\n                                                }\r\n                                            }\r\n                                            if (extension[names[i]][members[j]].reg) {\r\n                                                if (base[names[i]][memberPath].reg) {\r\n                                                    concatSingleKeyValuePairs(\r\n                                                        path + '/' + names[i] + '/' + memberPath + '/' + '/reg',\r\n                                                        base[names[i]][memberPath].reg,\r\n                                                        extension[names[i]][members[j]].reg);\r\n                                                } else {\r\n                                                    base[names[i]][memberPath].reg =\r\n                                                        extension[names[i]][members[j]].reg;\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    //concat\r\n                                    base[names[i]][memberPath] = extension[names[i]][members[j]];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    //simple concatenation\r\n                    //TODO the path for members should be replaced here as well...\r\n                    base[names[i]] = extension[names[i]];\r\n                }\r\n            }\r\n        }\r\n\r\n        function concatMeta(path, base, extension) {\r\n            var keys, i, tPath, j, paths, t2Path,\r\n                mergeMetaItems = function (bPath, bData, eData) {\r\n                    var bKeys, tKeys, i, tPath, t2Path;\r\n                    //delete checks\r\n                    if (bData === CONSTANTS.TO_DELETE_STRING || eData === CONSTANTS.TO_DELETE_STRING) {\r\n                        if (CANON.stringify(bData) !== CANON.stringify(eData)) {\r\n                            _conflictMine[bPath] = _conflictMine[bPath] || {value: bData, conflictingPaths: {}};\r\n                            _conflictMine[bPath].conflictingPaths[bPath] = true;\r\n                            _conflictTheirs[bPath] = _conflictTheirs[bPath] || {value: eData, conflictingPaths: {}};\r\n                            _conflictTheirs[bPath].conflictingPaths[bPath] = true;\r\n                        }\r\n                    } else {\r\n                        //max\r\n                        if (eData.max) {\r\n                            if (bData.max && bData.max !== eData.max) {\r\n                                tPath = bPath + '/max';\r\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                    value: bData.max,\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                    value: eData.max,\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                            } else {\r\n                                bData.max = eData.max;\r\n                            }\r\n                        }\r\n                        //min\r\n                        if (eData.min) {\r\n                            if (bData.min && bData.min !== eData.min) {\r\n                                tPath = bPath + '/min';\r\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                    value: bData.min,\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                    value: eData.min,\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                            } else {\r\n                                bData.min = eData.min;\r\n                            }\r\n                        }\r\n                        //targets\r\n                        bKeys = getDiffChildrenRelids(bData);\r\n                        tKeys = getDiffChildrenRelids(eData);\r\n                        for (i = 0; i < tKeys.length; i++) {\r\n                            tPath = getCommonPathForConcat(tKeys[i]);\r\n                            if (bKeys.indexOf(tPath) !== -1 && CANON.stringify(bData[tPath]) !==\r\n                                CANON.stringify(eData[tKeys[i]])) {\r\n\r\n                                t2Path = tPath;\r\n                                tPath = bPath + '/' + tPath + '//';\r\n                                _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                    value: bData[t2Path],\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                    value: eData[tKeys[i]],\r\n                                    conflictingPaths: {}\r\n                                };\r\n                                _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                            } else {\r\n                                bData[tPath] = eData[tKeys[i]];\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            if (CANON.stringify(base) !== CANON.stringify(extension)) {\r\n                if (base === CONSTANTS.TO_DELETE_STRING) {\r\n                    _conflictMine[path] = _conflictMine[path] || {\r\n                        value: CONSTANTS.TO_DELETE_STRING,\r\n                        conflictingPaths: {}\r\n                    };\r\n                    gatherFullMetaConflicts(extension, false, path, path);\r\n                } else {\r\n                    if (extension === CONSTANTS.TO_DELETE_STRING) {\r\n                        _conflictTheirs[path] = _conflictTheirs[path] || {\r\n                            value: CONSTANTS.TO_DELETE_STRING,\r\n                            conflictingPaths: {}\r\n                        };\r\n                        gatherFullMetaConflicts(base, true, path, path);\r\n                    } else {\r\n                        //now check for sub-meta conflicts\r\n\r\n                        //children\r\n                        if (extension.children) {\r\n                            if (base.children) {\r\n                                mergeMetaItems(path + '/children', base.children, extension.children);\r\n                            } else {\r\n                                //we just simply merge the extension's\r\n                                base.children = extension.children;\r\n                            }\r\n                        }\r\n                        //pointers\r\n                        if (extension.pointers) {\r\n                            if (base.pointers) {\r\n                                //complete deletion\r\n                                if (base.pointers === CONSTANTS.TO_DELETE_STRING ||\r\n                                    extension.pointers === CONSTANTS.TO_DELETE_STRING) {\r\n                                    if (CANON.stringify(base.pointers) !== CANON.stringify(extension.pointers)) {\r\n                                        tPath = path + '/pointers';\r\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                            value: base.pointers,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                            value: extension.pointers,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                    }\r\n                                } else {\r\n                                    keys = Object.keys(extension.pointers);\r\n                                    for (i = 0; i < keys.length; i++) {\r\n                                        if (base.pointers[keys[i]]) {\r\n                                            mergeMetaItems(path + '/pointers/' + keys[i], base.pointers[keys[i]],\r\n                                                extension.pointers[keys[i]]);\r\n                                        } else {\r\n                                            base.pointers[keys[i]] = extension.pointers[keys[i]];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                base.pointers = extension.pointers;\r\n                            }\r\n                        }\r\n                        //attributes\r\n                        if (extension.attributes) {\r\n                            if (base.attributes) {\r\n                                if (extension.attributes === CONSTANTS.TO_DELETE_STRING ||\r\n                                    base.attributes === CONSTANTS.TO_DELETE_STRING) {\r\n                                    if (CANON.stringify(base.attributes) !== CANON.stringify(extension.attributes)) {\r\n                                        tPath = path + '/attributes';\r\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                            value: base.attributes,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                            value: extension.attributes,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                    }\r\n                                } else {\r\n                                    keys = Object.keys(extension.attributes);\r\n                                    for (i = 0; i < keys.length; i++) {\r\n                                        if (base.attributes[keys[i]]) {\r\n                                            if (extension.attributes[keys[i]] === CONSTANTS.TO_DELETE_STRING ||\r\n                                                base.attributes[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n\r\n                                                if (CANON.stringify(base.attributes[keys[i]]) !==\r\n                                                    CANON.stringify(extension.attributes[keys[i]])) {\r\n\r\n                                                    tPath = path + '/attributes/' + [keys[i]];\r\n                                                    _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                                        value: base.attributes[keys[i]],\r\n                                                        conflictingPaths: {}\r\n                                                    };\r\n                                                    _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                                    _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                                        value: extension.attributes[keys[i]],\r\n                                                        conflictingPaths: {}\r\n                                                    };\r\n                                                    _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                                }\r\n                                            } else {\r\n                                                concatSingleKeyValuePairs(path + '/attributes/' + keys[i],\r\n                                                    base.attributes[keys[i]], extension.attributes[keys[i]]);\r\n                                            }\r\n                                        } else {\r\n                                            base.attributes[keys[i]] = extension.attributes[keys[i]];\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            } else {\r\n                                base.attributes = extension.attributes;\r\n                            }\r\n                        }\r\n\r\n                        //aspects\r\n                        if (extension.aspects) {\r\n                            if (base.aspects) {\r\n                                if (extension.aspects === CONSTANTS.TO_DELETE_STRING ||\r\n                                    base.aspects === CONSTANTS.TO_DELETE_STRING) {\r\n                                    if (CANON.stringify(base.aspects) !== CANON.stringify(extension.aspects)) {\r\n                                        tPath = path + '/aspects';\r\n                                        _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                            value: base.aspects,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                            value: extension.aspects,\r\n                                            conflictingPaths: {}\r\n                                        };\r\n                                        _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                    }\r\n                                } else {\r\n                                    keys = Object.keys(extension.aspects);\r\n                                    for (i = 0; i < keys.length; i++) {\r\n                                        if (base.aspects[keys[i]]) {\r\n                                            if (extension.aspects[keys[i]] === CONSTANTS.TO_DELETE_STRING ||\r\n                                                base.aspects[keys[i]] === CONSTANTS.TO_DELETE_STRING) {\r\n                                                if (CANON.stringify(base.aspects[keys[i]]) !==\r\n                                                    CANON.stringify(extension.aspects[keys[i]])) {\r\n                                                    tPath = path + '/aspects/' + keys[i];\r\n                                                    _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                                        value: base.aspects[keys[i]],\r\n                                                        conflictingPaths: {}\r\n                                                    };\r\n                                                    _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                                    _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                                        value: extension.aspects[keys[i]],\r\n                                                        conflictingPaths: {}\r\n                                                    };\r\n                                                    _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                                }\r\n                                            } else {\r\n                                                paths = Object.keys(extension.aspects[keys[i]]);\r\n                                                for (j = 0; j < paths.length; j++) {\r\n                                                    tPath = getCommonPathForConcat(paths[j]);\r\n                                                    if (base.aspects[keys[i]][tPath]) {\r\n                                                        if (CANON.stringify(base.aspects[keys[i]][tPath]) !==\r\n                                                            CANON.stringify(extension.aspects[keys[i]][paths[j]])) {\r\n                                                            t2Path = tPath;\r\n                                                            tPath = path + '/aspects/' + keys[i] + '/' + tPath + '//';\r\n                                                            _conflictMine[tPath] = _conflictMine[tPath] || {\r\n                                                                value: base.aspects[keys[i]][t2Path],\r\n                                                                conflictingPaths: {}\r\n                                                            };\r\n                                                            _conflictMine[tPath].conflictingPaths[tPath] = true;\r\n                                                            _conflictTheirs[tPath] = _conflictTheirs[tPath] || {\r\n                                                                value: extension.aspects[keys[i]][paths[j]],\r\n                                                                conflictingPaths: {}\r\n                                                            };\r\n                                                            _conflictTheirs[tPath].conflictingPaths[tPath] = true;\r\n                                                        }\r\n                                                    } else {\r\n                                                        base.aspects[keys[i]][tPath] =\r\n                                                            extension.aspects[keys[i]][paths[j]];\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            base.aspects[keys[i]] = extension.aspects[keys[i]];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                base.aspects = extension.aspects;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function tryToConcatNodeChange(extNode, path) {\r\n            var guid = extNode.guid,\r\n                oGuids = getObstructiveGuids(extNode),\r\n                baseNode = getNodeByGuid(_concatBase, guid),\r\n                basePath = getPathOfGuid(_concatBase, guid),\r\n                realBaseNode = baseNode,\r\n                i, tPath,\r\n                relids = getDiffChildrenRelids(extNode);\r\n\r\n            if (extNode.removed === true) {\r\n                if (baseNode !== null && baseNode.removed !== true && hasRealChange(baseNode)) {\r\n                    // we cannot simply merge the removal data-wise\r\n                } else {\r\n                    //we simply concat the deletion\r\n                    insertAtPath(_concatBase, path, extNode);\r\n                }\r\n                //we still need to check if some instance go changed in the other branch\r\n                oGuids = getWhomIObstructGuids(guid);\r\n                ASSERT(oGuids.length > 0);\r\n                for (i = 0; i < oGuids.length; i++) {\r\n                    baseNode = getNodeByGuid(_concatBase, oGuids[i]);\r\n                    if (baseNode !== null && baseNode.removed !== true && hasRealChange(baseNode)) {\r\n                        tPath = path + '/removed';\r\n                        _conflictTheirs[tPath] = _conflictTheirs[tPath] || {value: true, conflictingPaths: {}};\r\n                        basePath = getPathOfGuid(_concatBase, oGuids[i]);\r\n                        gatherFullNodeConflicts(baseNode, true, basePath, tPath);\r\n                    }\r\n                }\r\n            } else {\r\n                if (oGuids.length > 0) {\r\n                    for (i = 0; i < oGuids.length; i++) {\r\n                        baseNode = getNodeByGuid(_concatBase, oGuids[i]);\r\n                        basePath = getPathOfGuid(_concatBase, oGuids[i]);\r\n                        if (hasRealChange(extNode)) {\r\n                            _conflictMine[basePath + '/removed'] = _conflictMine[basePath + '/removed'] || {\r\n                                value: true,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            gatherFullNodeConflicts(extNode, false, path, basePath + '/removed');\r\n                        } else {\r\n                            _conflictTheirs[basePath + '/removed'] = _conflictTheirs[basePath + '/removed'] || {\r\n                                value: true,\r\n                                conflictingPaths: {}\r\n                            };\r\n                            gatherFullNodeConflicts(realBaseNode, true, path, basePath + '/removed');\r\n                        }\r\n                    }\r\n                } else if (baseNode) {\r\n                    //here we are able to check the sub-node conflicts\r\n                    //check double moves - we do not care if they moved under the same parent\r\n                    if (extNode.movedFrom) {\r\n                        if (baseNode.movedFrom && path !== basePath) {\r\n                            _conflictMine[basePath] = _conflictMine[basePath] || {\r\n                                value: 'move',\r\n                                conflictingPaths: {}\r\n                            };\r\n                            _conflictTheirs[path] = _conflictTheirs[path] || {value: 'move', conflictingPaths: {}};\r\n                            _conflictMine[basePath].conflictingPaths[path] = true;\r\n                            _conflictTheirs[path].conflictingPaths[basePath] = true;\r\n                            //we keep the node where it is, but synchronize the paths\r\n                            path = basePath;\r\n                        } else if (path !== basePath) {\r\n                            //first we move the base object to its new path\r\n                            //we copy the moved from information right here\r\n                            baseNode.movedFrom = extNode.movedFrom;\r\n                            insertAtPath(_concatBase, path, baseNode);\r\n                            removePathFromDiff(_concatBase, basePath);\r\n                            baseNode = getNodeByGuid(_concatBase, guid);\r\n                            basePath = getPathOfGuid(_concatBase, guid);\r\n                            ASSERT(path === basePath);\r\n                        }\r\n                    }\r\n\r\n                    ASSERT(basePath === path || baseNode.movedFrom === path);\r\n                    path = basePath; //the base was moved\r\n\r\n                    //and now the sub-node conflicts\r\n                    if (extNode.attr) {\r\n                        if (baseNode.attr) {\r\n                            concatSingleKeyValuePairs(path + '/attr', baseNode.attr, extNode.attr);\r\n                        } else {\r\n                            insertAtPath(_concatBase, path + '/attr', extNode.attr);\r\n                        }\r\n                    }\r\n                    if (extNode.reg) {\r\n                        if (baseNode.reg) {\r\n                            concatSingleKeyValuePairs(path + '/reg', baseNode.reg, extNode.reg);\r\n                        } else {\r\n                            insertAtPath(_concatBase, path + '/reg', extNode.reg);\r\n                        }\r\n                    }\r\n                    if (extNode.pointer) {\r\n                        if (baseNode.pointer) {\r\n                            concatSingleKeyValuePairs(path + '/pointer', baseNode.pointer, extNode.pointer);\r\n                        } else {\r\n                            insertAtPath(_concatBase, path + '/pointer', extNode.pointer);\r\n                        }\r\n                    }\r\n                    if (extNode.set) {\r\n                        if (baseNode.set) {\r\n                            concatSet(path + '/set', baseNode.set, extNode.set);\r\n                        } else {\r\n                            insertAtPath(_concatBase, path + '/set', extNode.set);\r\n                        }\r\n                    }\r\n                    if (extNode.meta) {\r\n                        if (baseNode.meta) {\r\n                            concatMeta(path + '/meta', baseNode.meta, extNode.meta);\r\n                        } else {\r\n                            insertAtPath(_concatBase, path + '/meta', extNode.meta);\r\n                        }\r\n                    }\r\n                } else if (typeof path === 'string' && path.length > 0) {\r\n                    //there is no basenode so we can concat the whole node\r\n                    insertAtPath(_concatBase, path, getSingleNode(extNode));\r\n                }\r\n            }\r\n\r\n            //here comes the recursion\r\n            for (i = 0; i < relids.length; i++) {\r\n                tryToConcatNodeChange(extNode[relids[i]], path + CONSTANTS.PATH_SEP + relids[i]);\r\n            }\r\n\r\n        }\r\n\r\n        function generateConflictItems(mine, theirs) {\r\n            var items = [], item,\r\n                keys, i, j, conflicts, diffNode;\r\n            keys = Object.keys(_conflictMine);\r\n\r\n            for (i = 0; i < keys.length; i++) {\r\n                conflicts = Object.keys(_conflictMine[keys[i]].conflictingPaths || {});\r\n                ASSERT(conflicts.length > 0);\r\n                for (j = 0; j < conflicts.length; j++) {\r\n                    item = {\r\n                        selected: 'mine',\r\n                        mine: {\r\n                            path: keys[i],\r\n                            info: keys[i].replace(/\\//g, ' / '),\r\n                            value: _conflictMine[keys[i]].value,\r\n                            nodePath: DIFF.pathToObject(keys[i]).node\r\n                        },\r\n                        theirs: {\r\n                            path: conflicts[j],\r\n                            info: conflicts[j].replace(/\\//g, ' / '),\r\n                            value: _conflictTheirs[conflicts[j]].value,\r\n                            nodePath: DIFF.pathToObject(conflicts[j]).node\r\n                        }\r\n                    };\r\n                    diffNode = getPathOfDiff(mine, item.mine.nodePath);\r\n                    if (typeof diffNode.collidingRelid === 'string') {\r\n                        item.mine.originalNodePath = getParentPath(item.mine.nodePath) +\r\n                            CONSTANTS.PATH_SEP + diffNode.collidingRelid;\r\n                    }\r\n\r\n                    diffNode = getPathOfDiff(theirs, item.theirs.nodePath);\r\n                    if (typeof diffNode.collidingRelid === 'string') {\r\n                        item.theirs.originalNodePath = getParentPath(item.theirs.nodePath) +\r\n                            CONSTANTS.PATH_SEP + diffNode.collidingRelid;\r\n                    }\r\n                    items.push(item);\r\n\r\n                }\r\n            }\r\n            return items;\r\n        }\r\n\r\n        function harmonizeConflictPaths(diff) {\r\n            var relids = getDiffChildrenRelids(diff),\r\n                keys, i, members, j;\r\n\r\n            keys = Object.keys(diff.pointer || {});\r\n            for (i = 0; i < keys.length; i++) {\r\n                diff.pointer[keys[i]] = getCommonPathForConcat(diff.pointer[keys[i]]);\r\n            }\r\n            keys = Object.keys(diff.set || {});\r\n            for (i = 0; i < keys.length; i++) {\r\n                members = Object.keys(diff.set[keys[i]] || {});\r\n                for (j = 0; j < members.length; j++) {\r\n                    if (members[j] !== getCommonPathForConcat(members[j])) {\r\n                        diff.set[keys[i]][getCommonPathForConcat(members[j])] = diff.set[keys[i]][members[j]];\r\n                        delete diff.set[keys[i]][members[j]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            //TODO we have to do the meta as well\r\n            for (i = 0; i < relids.length; i++) {\r\n                harmonizeConflictPaths(diff[relids[i]]);\r\n            }\r\n        }\r\n\r\n        function depthOfPath(path) {\r\n            ASSERT(typeof path === 'string');\r\n            return path.split('/').length;\r\n        }\r\n\r\n        function resolveMoves(resolveObject) {\r\n            var i, moves = {},\r\n                filteredItems = [],\r\n                path,\r\n                moveBaseOfPath = function (path) {\r\n                    var keys = Object.keys(moves),\r\n                        i, maxDepth = -1,\r\n                        base = null;\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        if (path.indexOf(keys[i]) === 1 && depthOfPath(keys[i]) > maxDepth) {\r\n                            base = keys[i];\r\n                            maxDepth = depthOfPath(keys[i]);\r\n                        }\r\n                    }\r\n                    return base;\r\n                };\r\n            for (i = 0; i < resolveObject.items.length; i++) {\r\n                if (resolveObject.items[i].selected === 'theirs' && resolveObject.items[i].theirs.value === 'move') {\r\n                    moves[resolveObject.items[i].mine.path] = resolveObject.items[i].theirs.path;\r\n                    //and we also make the move\r\n                    insertAtPath(resolveObject.merge,\r\n                        resolveObject.items[i].theirs.path,\r\n                        getPathOfDiff(resolveObject.merge, resolveObject.items[i].mine.path));\r\n                    removePathFromDiff(resolveObject.merge, resolveObject.items[i].mine.path);\r\n                } else {\r\n                    filteredItems.push(resolveObject.items[i]);\r\n                }\r\n            }\r\n            resolveObject.items = filteredItems;\r\n\r\n            //in a second run we modify all sub-path of the moves paths\r\n            for (i = 0; i < resolveObject.items.length; i++) {\r\n                if (resolveObject.items[i].selected === 'theirs') {\r\n                    path = moveBaseOfPath(resolveObject.items[i].theirs.path);\r\n                    if (path) {\r\n                        resolveObject.items[i].theirs.path =\r\n                            resolveObject.items[i].theirs.path.replace(path, moves[path]);\r\n                    }\r\n                    path = moveBaseOfPath(resolveObject.items[i].mine.path);\r\n                    if (path) {\r\n                        resolveObject.items[i].mine.path = resolveObject.items[i].mine.path.replace(path, moves[path]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n\r\n        // FIXME: It really looks like the diff requires that no nodes are mutated. This must be documented somewhere.\r\n        // FIXME: Maybe checking for isMutated in core.js at the roots are enough..\r\n        this.nodeDiff = function (source, target) {\r\n            var diff = {\r\n                children: childrenDiff(source, target),\r\n                attr: attrDiff(source, target),\r\n                reg: regDiff(source, target),\r\n                pointer: pointerDiff(source, target),\r\n                set: setDiff(source, target),\r\n                meta: metaDiff(source, target)\r\n            };\r\n\r\n            normalize(diff);\r\n\r\n            return isEmptyNodeDiff(diff) ? null : diff;\r\n        };\r\n\r\n        this.generateTreeDiff = function (sRoot, tRoot) {\r\n            var yetToCompute = {},\r\n                diffMoves = {};\r\n\r\n            return TASYNC.call(function (diff) {\r\n\r\n                return checkRound(yetToCompute, diff, diffMoves, true);\r\n            }, updateDiff(sRoot, tRoot, yetToCompute));\r\n        };\r\n\r\n        this.generateLightTreeDiff = function (sRoot, tRoot) {\r\n            var yetToCompute = {};\r\n            return updateDiff(sRoot, tRoot, yetToCompute);\r\n        };\r\n\r\n        this.applyTreeDiff = function (root, diff) {\r\n            // return TASYNC.join(makeInitialContainmentChanges(root, diff), applyNodeChange(root, '', diff));\r\n            // return makeInitialContainmentChanges(root,diff);\r\n            var done = makeInitialContainmentChanges(root, diff);\r\n\r\n            done = TASYNC.call(setBaseRelationsOfNewNodes, root, '', diff, done);\r\n\r\n            return TASYNC.call(function () {\r\n                return applyNodeChange(root, '', diff);\r\n            }, done);\r\n            // done = TASYNC.call(applyNodeChange, root, '', diff, done);\r\n\r\n            // return done;\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param {object} base - diff1\r\n         * @param {object} extension - diff2\r\n         *\r\n         * @returns {object}\r\n         */\r\n        this.tryToConcatChanges = function (base, extension) {\r\n            var result = {};\r\n            _conflictMine = {};\r\n            _conflictTheirs = {};\r\n            _concatBase = JSON.parse(JSON.stringify(base));\r\n            _concatExtension = JSON.parse(JSON.stringify(extension));\r\n            _concatBaseRemovals = {};\r\n            _concatMoves = {\r\n                getBaseSourceFromDestination: {},\r\n                getBaseDestinationFromSource: {},\r\n                getExtensionSourceFromDestination: {},\r\n                getExtensionDestinationFromSource: {}\r\n            };\r\n\r\n            fixInheritanceCollision('', _concatBase, _concatExtension, true);\r\n            fixInheritanceCollision('', _concatExtension, _concatBase, false);\r\n            normalize(_concatBase);\r\n            normalize(_concatExtension);\r\n\r\n            completeConcatBase(_concatBase, _concatExtension);\r\n            getMoveSources(_concatBase,\r\n                '', _concatMoves.getBaseSourceFromDestination, _concatMoves.getBaseDestinationFromSource);\r\n            getMoveSources(_concatExtension,\r\n                '', _concatMoves.getExtensionSourceFromDestination, _concatMoves.getExtensionDestinationFromSource);\r\n            getConcatBaseRemovals(_concatBase);\r\n            getConcatBaseRemovals(_concatExtension);\r\n\r\n            fixCollision('', null, _concatBase, _concatExtension);\r\n            tryToConcatNodeChange(_concatExtension, '');\r\n\r\n            result.items = generateConflictItems(_concatBase, _concatExtension);\r\n            result.mine = _conflictMine;\r\n            result.theirs = _conflictTheirs;\r\n            result.merge = _concatBase;\r\n            harmonizeConflictPaths(result.merge);\r\n\r\n            return result;\r\n        };\r\n\r\n        this.applyResolution = function (conflictObject) {\r\n            //we apply conflict items to the merge and return it as a diff\r\n            var i;\r\n            resolveMoves(conflictObject);\r\n            for (i = 0; i < conflictObject.items.length; i++) {\r\n                if (conflictObject.items[i].selected !== 'mine') {\r\n                    removePathFromDiff(conflictObject.merge, conflictObject.items[i].mine.path);\r\n                    if (conflictObject.items[i].selected === 'theirs') {\r\n                        insertAtPath(conflictObject.merge,\r\n                            conflictObject.items[i].theirs.path, conflictObject.items[i].theirs.value);\r\n                    } else {\r\n                        insertAtPath(conflictObject.merge,\r\n                            conflictObject.items[i].other.path, conflictObject.items[i].other.value);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            return conflictObject.merge;\r\n        };\r\n        //</editor-fold>\r\n    }\r\n\r\n    return DiffCore;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/metacachecore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/core/constants'\r\n], function (ASSERT, TASYNC, CONSTANTS) {\r\n    'use strict';\r\n\r\n    var MetaCacheCore = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized MetaCacheCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function loadMetaSet(root) {\r\n            var paths = innerCore.getMemberPaths(root, CONSTANTS.META_SET_NAME),\r\n                i,\r\n                metaNodes = [];\r\n\r\n            return TASYNC.call(function () {\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    metaNodes.push(innerCore.loadByPath(root, paths[i]));\r\n                }\r\n\r\n                return TASYNC.lift(metaNodes);\r\n            }, self.loadPaths(self.getHash(root), JSON.parse(JSON.stringify(paths))));\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.loadRoot = function (hash) {\r\n            return TASYNC.call(function (root) {\r\n                return TASYNC.call(function (elements) {\r\n                    var i = 0;\r\n                    root.metaNodes = {};\r\n                    for (i = 0; i < elements.length; i += 1) {\r\n                        // It can happen that some elements just been removed during load because of missing base.\r\n                        if (elements[i]) {\r\n                            root.metaNodes[innerCore.getPath(elements[i])] = elements[i];\r\n                        }\r\n                    }\r\n                    return root;\r\n                }, loadMetaSet(root));\r\n            }, innerCore.loadRoot(hash));\r\n        };\r\n\r\n        //functions where the cache may needs to be updated\r\n        this.createNode = function (parameters) {\r\n            var node = innerCore.createNode(parameters);\r\n\r\n            if (!parameters || !parameters.parent) {\r\n                //a root just have been created\r\n                node.metaNodes = {};\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        this.addMember = function (node, setName, member) {\r\n            var root = self.getRoot(node);\r\n            innerCore.addMember(node, setName, member);\r\n\r\n            //check if our cache needs to be updated\r\n            if (setName === CONSTANTS.META_SET_NAME && self.getPath(node) === self.getPath(root)) {\r\n                root.metaNodes[self.getPath(member)] = member;\r\n            }\r\n        };\r\n\r\n        this.delMember = function (node, setName, memberPath) {\r\n            var root = self.getRoot(node);\r\n            innerCore.delMember(node, setName, memberPath);\r\n\r\n            //check if our cache needs to be updated\r\n            if (setName === CONSTANTS.META_SET_NAME && self.getPath(node) === self.getPath(root)) {\r\n                delete root.metaNodes[memberPath];\r\n            }\r\n        };\r\n\r\n        this.deleteNode = function (node, technical) {\r\n            var root = self.getRoot(node);\r\n            if (root.metaNodes[self.getPath(node)]) {\r\n                delete root.metaNodes[self.getPath(node)];\r\n            }\r\n            innerCore.deleteNode(node, technical);\r\n        };\r\n\r\n        this.moveNode = function (node, parent) {\r\n            var root = self.getRoot(node),\r\n                oldpath = self.getPath(node),\r\n                moved = innerCore.moveNode(node, parent);\r\n\r\n            if (root.metaNodes[oldpath]) {\r\n                delete root.metaNodes[oldpath];\r\n                root.metaNodes[self.getPath(moved)] = moved;\r\n            }\r\n\r\n            return moved;\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.isMetaNode = function (node) {\r\n            var root = self.getRoot(node);\r\n            if (root.metaNodes && root.metaNodes[self.getPath(node)]) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getAllMetaNodes = function (node) {\r\n            var root = self.getRoot(node);\r\n\r\n            if (root.metaNodes) {\r\n                return root.metaNodes;\r\n            }\r\n\r\n            return {};\r\n        };\r\n\r\n        this.getFCO = function (node) {\r\n            var root = self.getRoot(node),\r\n                key;\r\n\r\n            for (key in root.metaNodes) {\r\n                return self.getBaseRoot(root.metaNodes[key]);\r\n            }\r\n\r\n            return null; //if there is no object on META, there is no FCO!!! \r\n        };\r\n\r\n        //</editor-fold>\r\n    };\r\n\r\n    return MetaCacheCore;\r\n}\r\n);\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/mixincore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/util/canon',\r\n    'common/core/constants'\r\n], function (ASSERT, TASYNC, CANON, CONSTANTS) {\r\n    'use strict';\r\n\r\n    var MixinCore = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            key,\r\n            self = this;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized MixinCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n\r\n        function realNode(node) { //TODO we have to make some more sophisticated distinction\r\n            if (self.getPath(node).indexOf('_') !== -1) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function getOrderedMixinList(node, cache) {\r\n            var path = innerCore.getPath(node),\r\n                paths,\r\n                metaNodes,\r\n                helper,\r\n                orderedList,\r\n                guid,\r\n                i;\r\n\r\n            if (cache && cache.orderedMixinList && cache.orderedMixinList[path]) {\r\n                return cache.orderedMixinList[path];\r\n            }\r\n\r\n            paths = innerCore.getOwnMemberPaths(node, CONSTANTS.MIXINS_SET);\r\n            helper = {};\r\n            orderedList = [];\r\n\r\n            if (paths.length > 0) {\r\n                metaNodes = self.getAllMetaNodes(node);\r\n\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    if (metaNodes[paths[i]]) {\r\n                        guid = self.getGuid(metaNodes[paths[i]]);\r\n                        helper[guid] = paths[i];\r\n                        orderedList.push(guid);\r\n                    }\r\n\r\n                }\r\n\r\n                orderedList.sort();\r\n\r\n                for (i = 0; i < orderedList.length; i += 1) {\r\n                    orderedList[i] = metaNodes[helper[orderedList[i]]];\r\n                }\r\n            }\r\n\r\n            if (cache && cache.orderedMixinList) {\r\n                cache.orderedMixinList[path] = orderedList;\r\n            }\r\n\r\n            return orderedList;\r\n        }\r\n\r\n        function getNodeDictionary(node, paths) {\r\n            var allMetaNodes = self.getAllMetaNodes(node),\r\n                dictionary = {},\r\n                i;\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                if (allMetaNodes[paths[i]]) {\r\n                    dictionary[paths[i]] = allMetaNodes[paths[i]];\r\n                }\r\n            }\r\n\r\n            return dictionary;\r\n        }\r\n\r\n        function extendUniqueArray(base, extension) {\r\n            var i;\r\n\r\n            for (i = 0; i < extension.length; i += 1) {\r\n                if (base.indexOf(extension[i]) === -1) {\r\n                    base.push(extension[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getExtendedUniqueKeyedObject(base, extension) {\r\n            var extended = {},\r\n                key;\r\n            for (key in base) {\r\n                extended[key] = base[key];\r\n            }\r\n\r\n            for (key in extension) {\r\n                if (!base[key]) {\r\n                    extended[key] = extension[key];\r\n                }\r\n            }\r\n\r\n            return extended;\r\n        }\r\n\r\n        function getValidNames(node, getter, alreadyVisited) {\r\n            var base = self.getBase(node),\r\n                path = self.getPath(node),\r\n                names,\r\n                mixins = getOrderedMixinList(node),\r\n                i;\r\n\r\n            if (alreadyVisited[path]) {\r\n                return [];\r\n            }\r\n\r\n            if (base) {\r\n                names = getValidNames(base, getter, alreadyVisited);\r\n            } else {\r\n                names = [];\r\n            }\r\n\r\n            extendUniqueArray(names, getter(node));\r\n            alreadyVisited[path] = true;\r\n\r\n            for (i = 0; i < mixins.length; i += 1) {\r\n                extendUniqueArray(names, getValidNames(mixins[i], getter, alreadyVisited));\r\n            }\r\n\r\n            return names;\r\n        }\r\n\r\n        function getFirstMatchingRuleHolder(node, name, getter, alreadyVisited) {\r\n            var base = self.getBase(node),\r\n                path = self.getPath(node),\r\n                mixins = getOrderedMixinList(node),\r\n                ruleHolder = null,\r\n                i;\r\n\r\n            if (alreadyVisited[path]) {\r\n                return null;\r\n            }\r\n\r\n            //when it comes to rule holder, always the given node's own rule-set is the first\r\n            alreadyVisited[path] = true;\r\n            if (getter(node).indexOf(name) !== -1) {\r\n                return node;\r\n            }\r\n\r\n            if (base) {\r\n                ruleHolder = getFirstMatchingRuleHolder(base, name, getter, alreadyVisited);\r\n\r\n                if (ruleHolder) {\r\n                    return ruleHolder;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < mixins.length; i += 1) {\r\n                ruleHolder = getFirstMatchingRuleHolder(mixins[i], name, getter, alreadyVisited);\r\n                if (ruleHolder) {\r\n                    return ruleHolder;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getOwnRuleInfoTarget(target, validTargetPaths, alreadyVisited) {\r\n            var orderedMixins = getOrderedMixinList(target),\r\n                path = self.getPath(target),\r\n                base = self.getBase(target),\r\n                result,\r\n                i;\r\n            if (alreadyVisited[path]) {\r\n                return null;\r\n            }\r\n\r\n            alreadyVisited[path] = true;\r\n\r\n            if (validTargetPaths.indexOf(path) !== -1) {\r\n                return target;\r\n            }\r\n\r\n            if (base) {\r\n                result = getOwnRuleInfoTarget(base, validTargetPaths, alreadyVisited);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < orderedMixins.length; i += 1) {\r\n                result = getOwnRuleInfoTarget(orderedMixins[i], validTargetPaths, alreadyVisited);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getOwnRuleInfo(node, name, target, getter) {\r\n            var definedTarget = getOwnRuleInfoTarget(target, getter(node, name), {});\r\n\r\n            if (definedTarget) {\r\n                return {\r\n                    ownerNode: node,\r\n                    ownerPath: self.getPath(node),\r\n                    targetPath: self.getPath(definedTarget),\r\n                    targetNode: definedTarget\r\n                };\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getFirstMatchingRuleInfo(node, name, target, getter, alreadyVisited) {\r\n            var base = self.getBase(node),\r\n                path = self.getPath(node),\r\n                mixins = getOrderedMixinList(node),\r\n                info,\r\n                i;\r\n\r\n            if (alreadyVisited[path]) {\r\n                return null;\r\n            }\r\n\r\n            //when it comes to rule holder, always the given node's own rule-set is the first\r\n            alreadyVisited[path] = true;\r\n            info = getOwnRuleInfo(node, name, target, getter);\r\n            if (info) {\r\n                return info;\r\n            }\r\n\r\n            if (base) {\r\n                info = getFirstMatchingRuleInfo(base, name, target, getter, alreadyVisited);\r\n                if (info) {\r\n                    return info;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < mixins.length; i += 1) {\r\n                info = getFirstMatchingRuleInfo(mixins[i], name, target, getter, alreadyVisited);\r\n                if (info) {\r\n                    return info;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getAllMatchingRuleHolders(node, name, getter, alreadyVisited) {\r\n            var base = self.getBase(node),\r\n                path = self.getPath(node),\r\n                mixins = getOrderedMixinList(node),\r\n                ruleHolders = [],\r\n                i;\r\n\r\n            if (alreadyVisited[path]) {\r\n                return [];\r\n            }\r\n\r\n            //when it comes to rule holder, always the given node's own rule-set is the first\r\n            alreadyVisited[path] = true;\r\n            if (getter(node).indexOf(name) !== -1) {\r\n                ruleHolders.push(node);\r\n            }\r\n\r\n            if (base) {\r\n                ruleHolders = ruleHolders.concat(getAllMatchingRuleHolders(base, name, getter, alreadyVisited));\r\n            }\r\n\r\n            for (i = 0; i < mixins.length; i += 1) {\r\n                ruleHolders = ruleHolders.concat(getAllMatchingRuleHolders(mixins[i], name, getter, alreadyVisited));\r\n\r\n            }\r\n\r\n            return ruleHolders;\r\n        }\r\n\r\n        function getFirstMatchingMeta(node, name, matchFuction, getFunction) {\r\n            var metaRuleHolder = getFirstMatchingRuleHolder(node, name, matchFuction, {});\r\n\r\n            if (metaRuleHolder) {\r\n                return getFunction(metaRuleHolder, name);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        function allValidRelationsNameGetter(node) {\r\n            return innerCore.getOwnValidPointerNames(node).concat(innerCore.getOwnValidSetNames(node));\r\n        }\r\n\r\n        function containmentGetter(/*node*/) {\r\n            return ['containment'];\r\n        }\r\n\r\n        function isTypeOf(node, typePath, alreadyVisited, cache) {\r\n            var base, mixins, i,\r\n                path = self.getPath(node);\r\n\r\n            if (alreadyVisited[path]) {\r\n                return false;\r\n            }\r\n\r\n            alreadyVisited[path] = true;\r\n\r\n            if (path === typePath) {\r\n                return true;\r\n            }\r\n\r\n            base = self.getBase(node);\r\n            if (base && isTypeOf(base, typePath, alreadyVisited, cache)) {\r\n                return true;\r\n            }\r\n\r\n            mixins = getOrderedMixinList(node, cache);\r\n            for (i = 0; i < mixins.length; i += 1) {\r\n                if (isTypeOf(mixins[i], typePath, alreadyVisited, cache)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function convertRuleToItemizedArraySet(rule) {\r\n            var items = [],\r\n                minItems = [],\r\n                maxItems = [],\r\n                i;\r\n\r\n            for (i in rule) {\r\n                if (i !== 'min' && i !== 'max') {\r\n                    items.push(i);\r\n                    minItems.push(rule[i].min || -1);\r\n                    maxItems.push(rule[i].max || -1);\r\n                    delete rule[i];\r\n                }\r\n            }\r\n\r\n            rule.items = items;\r\n            rule.minItems = minItems;\r\n            rule.maxItems = maxItems;\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n\r\n        this.isTypeOf = function (node, typeNodeOrPath, cache) {\r\n            if (!realNode(node)) {\r\n                return false;\r\n            }\r\n\r\n            cache = cache || {};\r\n            cache.orderedMixinList = cache.orderedMixinList || {};\r\n\r\n            return isTypeOf(node,\r\n                typeof typeNodeOrPath === 'string' ? typeNodeOrPath : innerCore.getPath(typeNodeOrPath),\r\n                {},\r\n                cache);\r\n        };\r\n\r\n        this.isValidChildOf = function (node, parentNode, cache) {\r\n            if (!realNode(node)) {\r\n                return true;\r\n            }\r\n            var childrenPaths,\r\n                metaNodes,\r\n                i;\r\n\r\n            cache = cache || cache;\r\n\r\n            // TODO: this is only needed when the containment definition is outside of meta..\r\n            // TODO: (That is when it's defined between non-meta nodes)\r\n            if (innerCore.isValidChildOf(node, parentNode)) {\r\n                return true;\r\n            }\r\n\r\n            // Now we have to look deeper as containment rule may come from a mixin\r\n            childrenPaths = self.getValidChildrenPaths(parentNode, cache);\r\n            metaNodes = self.getAllMetaNodes(node);\r\n\r\n            for (i = 0; i < childrenPaths.length; i += 1) {\r\n                if (metaNodes[childrenPaths[i]] && self.isTypeOf(node, childrenPaths[i], cache)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.isValidTargetOf = function (node, source, name) {\r\n            if (!realNode(source) || node === null) {\r\n                return true;\r\n            }\r\n\r\n            var targetPaths,\r\n                metaNodes,\r\n                i;\r\n\r\n            // TODO: this is only needed when the set/pointer definition is outside of meta..\r\n            // TODO: (That is when it's defined between non-meta nodes)\r\n            if (innerCore.isValidTargetOf(node, source, name)) {\r\n                return true;\r\n            }\r\n\r\n            // Now we have to look deeper as pointer rule may come from a mixin\r\n            targetPaths = self.getValidTargetPaths(source, name);\r\n            metaNodes = self.getAllMetaNodes(node);\r\n\r\n            for (i = 0; i < targetPaths.length; i += 1) {\r\n                if (metaNodes[targetPaths[i]] && self.isTypeOf(node, metaNodes[targetPaths[i]])) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.isValidAttributeValueOf = function (node, name, value) {\r\n            if (!realNode(node)) {\r\n                return true;\r\n            }\r\n\r\n            var ruleHolder = getFirstMatchingRuleHolder(node, name, innerCore.getOwnValidAttributeNames, {}),\r\n                attributeDescriptor = self.getAttributeMeta(ruleHolder, name);\r\n\r\n\r\n            //issue #51 - readonly should be taken into account\r\n            if (attributeDescriptor.readonly && self.isMetaNode(node) === false) {\r\n                return false;\r\n            }\r\n\r\n            if (ruleHolder) {\r\n                return innerCore.isValidAttributeValueOf(ruleHolder, name, value);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getValidPointerNames = function (node) {\r\n            //console.count('getValidPointerNames');\r\n            return getValidNames(node, innerCore.getOwnValidPointerNames, {});\r\n        };\r\n\r\n        this.getValidSetNames = function (node) {\r\n            //console.count('getValidSetNames');\r\n            return getValidNames(node, innerCore.getOwnValidSetNames, {});\r\n        };\r\n\r\n        this.getValidAttributeNames = function (node) {\r\n            if (!realNode(node)) {\r\n                return [];\r\n            }\r\n\r\n            return getValidNames(node, innerCore.getOwnValidAttributeNames, {});\r\n        };\r\n\r\n        this.getValidAspectNames = function (node) {\r\n            //console.count('getValidAspectNames');\r\n            return getValidNames(node, innerCore.getOwnValidAspectNames, {});\r\n        };\r\n\r\n        this.getConstraintNames = function (node) {\r\n            return getValidNames(node, innerCore.getConstraintNames, {});\r\n        };\r\n\r\n        this.getConstraint = function (node, name) {\r\n            var constraintOwner = getFirstMatchingRuleHolder(node, name, innerCore.getOwnConstraintNames, {});\r\n\r\n            if (constraintOwner) {\r\n                return innerCore.getConstraint(constraintOwner, name);\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        this.getJsonMeta = function (node) {\r\n            var meta = {children: {}, attributes: {}, pointers: {}, aspects: {}, constraints: {}},\r\n                nullRule = {items: [], minItems: [], maxItems: []},\r\n                names,\r\n                i;\r\n\r\n            meta.children = self.getChildrenMeta(node);\r\n            if (meta.children) {\r\n                convertRuleToItemizedArraySet(meta.children);\r\n            } else {\r\n                meta.children = nullRule;\r\n            }\r\n\r\n            //attributes\r\n            names = self.getValidAttributeNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                meta.attributes[names[i]] = self.copyIfObject(self.getAttributeMeta(node, names[i]));\r\n            }\r\n\r\n            //pointers\r\n            names = self.getValidPointerNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                meta.pointers[names[i]] = self.getPointerMeta(node, names[i]);\r\n                convertRuleToItemizedArraySet(meta.pointers[names[i]]);\r\n            }\r\n\r\n            //sets\r\n            names = self.getValidSetNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                meta.pointers[names[i]] = self.getPointerMeta(node, names[i]);\r\n                convertRuleToItemizedArraySet(meta.pointers[names[i]]);\r\n            }\r\n\r\n            //aspects\r\n            names = self.getValidAspectNames(node);\r\n\r\n            for (i = 0; i < names.length; i += 1) {\r\n                meta.aspects[names[i]] = self.getAspectMeta(node, names[i]);\r\n            }\r\n\r\n            //constraints\r\n            names = self.getConstraintNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                meta.constraints[names[i]] = self.getConstraint(node, names[i]);\r\n            }\r\n\r\n            return meta;\r\n        };\r\n\r\n        this.getOwnJsonMeta = function (node) {\r\n            // We have to extend the meta definition by the mixins, but only if we talk about the own rule-set.\r\n            var jsonMeta = innerCore.getOwnJsonMeta(node),\r\n                mixins = this.getMixinPaths(node);\r\n\r\n            if (mixins.length > 0) {\r\n                jsonMeta.mixins = mixins;\r\n            }\r\n\r\n            return jsonMeta;\r\n        };\r\n\r\n        this.getValidChildrenPaths = function (node, cache) {\r\n            cache = cache || {};\r\n            cache.validChildrenPaths = cache.validChildrenPaths || {};\r\n\r\n            function wrapper(testNode) {\r\n                var path = innerCore.getPath(testNode);\r\n                if (!cache.validChildrenPaths[path]) {\r\n                    // getOwnValidChildrenPaths is slower\r\n                    cache.validChildrenPaths[path] = innerCore.getValidChildrenPaths(testNode);\r\n                }\r\n\r\n                return cache.validChildrenPaths[path];\r\n            }\r\n\r\n            return getValidNames(node, wrapper, {});\r\n        };\r\n\r\n        this.getChildrenMeta = function (node) {\r\n            var ruleHolders = getAllMatchingRuleHolders(node, 'containment', containmentGetter, {}),\r\n                childrenMeta = {},\r\n                i;\r\n\r\n            for (i = 0; i < ruleHolders.length; i += 1) {\r\n                childrenMeta = getExtendedUniqueKeyedObject(childrenMeta, innerCore.getChildrenMeta(ruleHolders[i]));\r\n            }\r\n\r\n            if (Object.keys(childrenMeta).length === 0) {\r\n                return null;\r\n            }\r\n\r\n            return childrenMeta;\r\n        };\r\n\r\n        this.getPointerMeta = function (node, name) {\r\n            var ruleHolders = getAllMatchingRuleHolders(node, name, allValidRelationsNameGetter, {}),\r\n                i,\r\n                pointerMeta = {};\r\n\r\n            if (ruleHolders.length === 0) {\r\n                return undefined;\r\n            }\r\n\r\n            for (i = 0; i < ruleHolders.length; i += 1) {\r\n                pointerMeta = getExtendedUniqueKeyedObject(pointerMeta, innerCore.getPointerMeta(ruleHolders[i], name));\r\n            }\r\n            return pointerMeta;\r\n        };\r\n\r\n        this.getValidTargetPaths = function (node, name) {\r\n            var getTargetPaths = function (getNode) {\r\n                return innerCore.getValidTargetPaths(getNode, name);\r\n            };\r\n\r\n            return getValidNames(node, getTargetPaths, {});\r\n        };\r\n\r\n        this.getAttributeMeta = function (node, name) {\r\n            return getFirstMatchingMeta(node, name, innerCore.getOwnValidAttributeNames, innerCore.getAttributeMeta);\r\n        };\r\n\r\n        this.getAspectMeta = function (node, name) {\r\n            return getFirstMatchingMeta(node, name, innerCore.getOwnValidAspectNames, innerCore.getAspectMeta);\r\n        };\r\n\r\n        this.isValidAspectMemberOf = function (node, parent, name) {\r\n            var aspectMeta = self.getAspectMeta(parent, name) || [],\r\n                i;\r\n\r\n            for (i = 0; i < aspectMeta.length; i += 1) {\r\n                if (self.isTypeOf(node, aspectMeta[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.getSetNames = function (node) {\r\n            var rawNames = innerCore.getSetNames(node),\r\n                index = rawNames.indexOf(CONSTANTS.MIXINS_SET);\r\n\r\n            if (index !== -1) {\r\n                rawNames.splice(index, 1);\r\n            }\r\n\r\n            return rawNames;\r\n        };\r\n\r\n        this.getAttributeDefinitionOwner = function (node, name) {\r\n            return getFirstMatchingRuleHolder(node, name, self.getOwnValidAttributeNames, {});\r\n        };\r\n\r\n        this.getAspectDefinitionOwner = function (node, name) {\r\n            return getFirstMatchingRuleHolder(node, name, self.getOwnValidAspectNames, {});\r\n        };\r\n\r\n        this.getAspectDefinitionInfo = function (node, name, member) {\r\n            return getFirstMatchingRuleInfo(node, name, member, self.getOwnValidAspectTargetPaths, {});\r\n        };\r\n\r\n        this.getPointerDefinitionInfo = function (node, name, target) {\r\n            return getFirstMatchingRuleInfo(node, name, target, self.getOwnValidTargetPaths, {});\r\n        };\r\n\r\n        this.getSetDefinitionInfo = function (node, name, target) {\r\n            return getFirstMatchingRuleInfo(node, name, target, self.getOwnValidTargetPaths, {});\r\n        };\r\n\r\n        this.getChildDefinitionInfo = function (node, child) {\r\n            return getFirstMatchingRuleInfo(node, undefined, child, self.getOwnValidChildrenPaths, {});\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n\r\n        this.getMixinErrors = function (node) {\r\n            var errors = [],\r\n                mixinPaths = self.getMixinPaths(node),\r\n                allMetaNodes = self.getAllMetaNodes(node),\r\n                mixinNodes = getOrderedMixinList(node),\r\n                targetNode,\r\n                targetInfoTxt,\r\n                definitions,\r\n                ownName = self.getAttribute(node, 'name'),\r\n                names,\r\n                base = self.getBase(node),\r\n                ownKeys,\r\n                keys,\r\n                name,\r\n                path,\r\n                i, j, k;\r\n\r\n            logger.debug('getMixinErrors(' + ownName + ')');\r\n\r\n            //mixin is missing from meta\r\n            for (i = 0; i < mixinPaths.length; i += 1) {\r\n                if (!allMetaNodes[mixinPaths[i]]) {\r\n                    logger.error('mixin node is missing from Meta [' + mixinPaths[i] + ']');\r\n                    errors.push({\r\n                        severity: 'error',\r\n                        nodeName: ownName,\r\n                        type: CONSTANTS.MIXIN_ERROR_TYPE.MISSING,\r\n                        targetInfo: mixinPaths[i],\r\n                        message: '[' + ownName + ']: mixin node \\'' + mixinPaths[i] + '\\' is missing from the Meta',\r\n                        hint: 'Remove mixin or add to the Meta'\r\n                    });\r\n                }\r\n            }\r\n\r\n            //attribute definition collisions\r\n            definitions = {};\r\n            ownKeys = [];\r\n            if (base) {\r\n                ownKeys = self.getValidAttributeNames(base);\r\n            }\r\n            extendUniqueArray(ownKeys, self.getOwnValidAttributeNames(node));\r\n\r\n            for (i = 0; i < mixinNodes.length; i += 1) {\r\n                name = self.getAttribute(mixinNodes[i], 'name');\r\n                path = self.getPath(mixinNodes[i]);\r\n                keys = self.getValidAttributeNames(mixinNodes[i]);\r\n\r\n                for (j = 0; j < keys.length; j += 1) {\r\n                    if (ownKeys.indexOf(keys[j]) === -1) {\r\n                        if (definitions[keys[j]]) {\r\n                            logger.warn('colliding attribute (' + keys[j] + ') definition [' +\r\n                                definitions[keys[j]].name + ']vs[' + name + ']');\r\n                            errors.push({\r\n                                severity: 'warning',\r\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.ATTRIBUTE_COLLISION,\r\n                                nodeName: ownName,\r\n                                ruleName: keys[j],\r\n                                collisionPaths: [definitions[keys[j]].path, path],\r\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\r\n                                message: '[' + ownName + ']: inherits attribute definition \\'' +\r\n                                keys[j] + '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\r\n                                hint: 'Remove one of the mixin relations'\r\n                            });\r\n                        } else {\r\n                            definitions[keys[j]] = {name: name, path: path, index: i};\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //containment collisions\r\n            definitions = {};\r\n            ownKeys = [];\r\n            if (base) {\r\n                ownKeys = self.getValidChildrenPaths(base);\r\n            }\r\n            extendUniqueArray(ownKeys, self.getOwnValidChildrenPaths(node));\r\n\r\n            for (i = 0; i < mixinNodes.length; i += 1) {\r\n                name = self.getAttribute(mixinNodes[i], 'name');\r\n                keys = self.getValidChildrenPaths(mixinNodes[i]);\r\n                path = self.getPath(mixinNodes[i]);\r\n\r\n                for (j = 0; j < keys.length; j += 1) {\r\n                    if (ownKeys.indexOf(keys[j]) === -1) {\r\n                        if (definitions[keys[j]]) {\r\n                            targetNode = allMetaNodes[keys[j]];\r\n                            if (targetNode) {\r\n                                targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\r\n                            } else {\r\n                                targetInfoTxt = '\\'' + keys[j] + '\\'';\r\n                            }\r\n                            logger.warn('colliding child (' + keys[j] + ') definition [' +\r\n                                definitions[keys[j]].name + ']vs[' + name + ']');\r\n                            errors.push({\r\n                                severity: 'warning',\r\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.CONTAINMENT_COLLISION,\r\n                                nodeName: ownName,\r\n                                targetInfo: keys[j],\r\n                                targetNode: targetNode,\r\n                                collisionPaths: [definitions[keys[j]].path, path],\r\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\r\n                                message: '[' + ownName + ']: inherits child definition for ' +\r\n                                targetInfoTxt + ' from [' + definitions[keys[j]].name + '] and [' + name + ']',\r\n                                hint: 'Remove one of the mixin relations'\r\n                            });\r\n                        } else {\r\n                            definitions[keys[j]] = {name: name, path: path, index: i};\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //pointer target collisions\r\n            names = this.getValidPointerNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                definitions = {};\r\n                ownKeys = [];\r\n                if (base) {\r\n                    ownKeys = self.getValidTargetPaths(base, names[i]);\r\n                }\r\n                extendUniqueArray(ownKeys, self.getOwnValidTargetPaths(node, names[i]));\r\n                for (j = 0; j < mixinNodes.length; j += 1) {\r\n                    keys = self.getValidTargetPaths(mixinNodes[j], names[i]);\r\n                    name = self.getAttribute(mixinNodes[j], 'name');\r\n                    path = self.getPath(mixinNodes[j]);\r\n                    for (k = 0; k < keys.length; k += 1) {\r\n                        if (ownKeys.indexOf(keys[k]) === -1 && keys[k] !== 'min' && keys[k] !== 'max') {\r\n                            if (definitions[keys[k]]) {\r\n                                targetNode = allMetaNodes[keys[k]];\r\n                                if (targetNode) {\r\n                                    targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\r\n                                } else {\r\n                                    targetInfoTxt = '\\'' + keys[k] + '\\'';\r\n                                }\r\n                                logger.warn('colliding pointer (' + names[i] + ') target (' + keys[k] +\r\n                                    ') definition [' + definitions[keys[k]].name + ']vs[' + name + ']');\r\n                                errors.push({\r\n                                    severity: 'warning',\r\n                                    type: CONSTANTS.MIXIN_ERROR_TYPE.POINTER_COLLISION,\r\n                                    nodeName: ownName,\r\n                                    ruleName: names[i],\r\n                                    targetInfo: keys[k],\r\n                                    targetNode: targetNode,\r\n                                    collisionPaths: [definitions[keys[k]].path, path],\r\n                                    collisionNodes: [mixinNodes[definitions[keys[k]].index], mixinNodes[j]],\r\n                                    message: '[' + ownName + ']: inherits pointer (' + names[i] +\r\n                                    ') target definition of ' + targetInfoTxt +\r\n                                    ' from [' + definitions[keys[k]].name + '] and [' + name + ']',\r\n                                    hint: 'Remove one of the mixin relations'\r\n                                });\r\n                            } else {\r\n                                definitions[keys[k]] = {name: name, path: path, index: i};\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //set member collisions\r\n            names = this.getValidSetNames(node);\r\n            for (i = 0; i < names.length; i += 1) {\r\n                definitions = {};\r\n                ownKeys = [];\r\n                if (base) {\r\n                    ownKeys = self.getValidTargetPaths(base, names[i]);\r\n                }\r\n                extendUniqueArray(ownKeys, self.getOwnValidTargetPaths(node, names[i]));\r\n                for (j = 0; j < mixinNodes.length; j += 1) {\r\n                    keys = self.getValidTargetPaths(mixinNodes[j], names[i]);\r\n                    name = self.getAttribute(mixinNodes[j], 'name');\r\n                    path = self.getPath(mixinNodes[j]);\r\n                    for (k = 0; k < keys.length; k += 1) {\r\n                        if (ownKeys.indexOf(keys[k]) === -1 && keys[k] !== 'min' && keys[k] !== 'max') {\r\n                            if (definitions[keys[k]]) {\r\n                                targetNode = allMetaNodes[keys[k]];\r\n                                if (targetNode) {\r\n                                    targetInfoTxt = '[' + self.getAttribute(targetNode, 'name') + ']';\r\n                                } else {\r\n                                    targetInfoTxt = '\\'' + keys[k] + '\\'';\r\n                                }\r\n                                logger.warn('colliding set (' + names[i] + ') member (' + keys[k] +\r\n                                    ') definition [' + definitions[keys[k]].name + ']vs[' + name + ']');\r\n                                errors.push({\r\n                                    severity: 'warning',\r\n                                    type: CONSTANTS.MIXIN_ERROR_TYPE.SET_COLLISION,\r\n                                    nodeName: ownName,\r\n                                    ruleName: names[i],\r\n                                    targetInfo: keys[k],\r\n                                    targetNode: targetNode,\r\n                                    collisionPaths: [definitions[keys[k]].path, path],\r\n                                    collisionNodes: [mixinNodes[definitions[keys[k]].index], mixinNodes[j]],\r\n                                    message: '[' + ownName + ']: inherits set (' + names[i] +\r\n                                    ') member definition of ' + targetInfoTxt +\r\n                                    ' from [' + definitions[keys[k]].name + '] and [' + name + ']',\r\n                                    hint: 'Remove one of the mixin relations'\r\n                                });\r\n                            } else {\r\n                                definitions[keys[k]] = {name: name, path: path, index: i};\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //aspect collisions\r\n            definitions = {};\r\n            ownKeys = [];\r\n            if (base) {\r\n                ownKeys = self.getValidAspectNames(base);\r\n            }\r\n            extendUniqueArray(ownKeys, self.getOwnValidAspectNames(node));\r\n            for (i = 0; i < mixinNodes.length; i += 1) {\r\n                keys = self.getValidAspectNames(mixinNodes[i]);\r\n                name = self.getAttribute(mixinNodes[i], 'name');\r\n                path = self.getPath(mixinNodes[i]);\r\n                for (j = 0; j < keys.length; j += 1) {\r\n                    if (ownKeys.indexOf(keys[j]) === -1) {\r\n                        if (definitions[keys[j]]) {\r\n                            logger.warn('colliding aspect (' + keys[j] + ') definition [' +\r\n                                definitions[keys[j]].name + ']vs[' + name + ']');\r\n                            errors.push({\r\n                                severity: 'warning',\r\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.ASPECT_COLLISION,\r\n                                nodeName: ownName,\r\n                                ruleName: keys[j],\r\n                                collisionPaths: [definitions[keys[j]].path, path],\r\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\r\n                                message: '[' + ownName + ']: inherits aspect definition \\'' + keys[j] +\r\n                                '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\r\n                                hint: 'Remove one of the mixin relations'\r\n                            });\r\n                        } else {\r\n                            definitions[keys[j]] = {name: name, path: path, index: i};\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //constraint collision\r\n            definitions = {};\r\n            ownKeys = [];\r\n            if (base) {\r\n                ownKeys = self.getConstraintNames(base);\r\n            }\r\n            extendUniqueArray(ownKeys, self.getOwnConstraintNames(node));\r\n            for (i = 0; i < mixinNodes.length; i += 1) {\r\n                keys = self.getConstraintNames(mixinNodes[i]);\r\n                name = self.getAttribute(mixinNodes[i], 'name');\r\n                for (j = 0; j < keys.length; j += 1) {\r\n                    if (ownKeys.indexOf(keys[j]) === -1) {\r\n                        if (definitions[keys[j]]) {\r\n                            logger.warn('colliding constraint (' + keys[j] + ') definition [' +\r\n                                definitions[keys[j]].name + ']vs[' + name + ']');\r\n                            errors.push({\r\n                                severity: 'warning',\r\n                                type: CONSTANTS.MIXIN_ERROR_TYPE.CONSTRAINT_COLLISION,\r\n                                nodeName: ownName,\r\n                                ruleName: keys[j],\r\n                                collisionPaths: [definitions[keys[j]].path, path],\r\n                                collisionNodes: [mixinNodes[definitions[keys[j]].index], mixinNodes[i]],\r\n                                message: '[' + ownName + ']: inherits constraint definition \\'' + keys[j] +\r\n                                '\\' from [' + definitions[keys[j]].name + '] and [' + name + ']',\r\n                                hint: 'Remove one of the mixin relations'\r\n                            });\r\n                        } else {\r\n                            definitions[keys[j]] = {name: name, path: path, index: i};\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            logger.debug('getMixinErrors(' + ownName + ') finished');\r\n            return errors;\r\n        };\r\n\r\n        this.getMixinPaths = function (node) {\r\n            var paths = [],\r\n                nodes = getOrderedMixinList(node),\r\n                raw = innerCore.getOwnMemberPaths(node, CONSTANTS.MIXINS_SET),\r\n                i;\r\n\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                paths.push(self.getPath(nodes[i]));\r\n            }\r\n\r\n            for (i = 0; i < raw.length; i += 1) {\r\n                if (paths.indexOf(raw[i]) === -1) {\r\n                    paths.push(raw[i]);\r\n                }\r\n            }\r\n\r\n            return paths;\r\n        };\r\n\r\n        this.getMixinNodes = function (node) {\r\n            var paths = self.getMixinPaths(node);\r\n            return getNodeDictionary(node, paths);\r\n        };\r\n\r\n        this.delMixin = function (node, mixinPath) {\r\n            // var metaNodes = innerCore.getAllMetaNodes(node);\r\n\r\n            innerCore.delMember(node, CONSTANTS.MIXINS_SET, mixinPath);\r\n        };\r\n\r\n        this.addMixin = function (node, mixinPath) {\r\n            var metaNodes = innerCore.getAllMetaNodes(node);\r\n\r\n            if (metaNodes[mixinPath]) {\r\n                innerCore.addMember(node, CONSTANTS.MIXINS_SET, metaNodes[mixinPath]);\r\n            }\r\n        };\r\n\r\n        this.clearMixins = function (node) {\r\n            self.deleteSet(node, CONSTANTS.MIXINS_SET);\r\n        };\r\n\r\n        this.getBaseTypes = function (node) {\r\n            var metaType = innerCore.getBaseType(node),\r\n                metaTypes = [];\r\n\r\n            if (metaType) {\r\n                metaTypes = getOrderedMixinList(metaType);\r\n                metaTypes.unshift(metaType);\r\n            }\r\n\r\n            return metaTypes;\r\n        };\r\n\r\n        this.canSetAsMixin = function (node, mixinPath) {\r\n            var result = {\r\n                    isOk: true,\r\n                    reason: ''\r\n                },\r\n                mixinNode = self.getAllMetaNodes(node)[mixinPath];\r\n\r\n            if (self.getPath(node) === mixinPath) {\r\n                result.isOk = false;\r\n                result.reason = 'Node cannot be mixin of itself!';\r\n            } else if (!mixinNode) {\r\n                result.isOk = false;\r\n                result.reason = 'Mixin must be on the Meta!';\r\n            } else if (innerCore.isTypeOf(node, mixinNode)) {\r\n                result.isOk = false;\r\n                result.reason = 'Base of node cannot be its mixin as well!';\r\n            }\r\n\r\n            return result;\r\n        };\r\n        //</editor-fold>\r\n    };\r\n\r\n    return MixinCore;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/metaquerycore',[\r\n    'common/core/CoreAssert'\r\n], function (ASSERT) {\r\n    'use strict';\r\n\r\n    var MetaQueryCore = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized MetaQueryCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function sensitiveFilter(validNodes) {\r\n            var i;\r\n\r\n            i = validNodes.length;\r\n            while (i--) {\r\n                if (self.isConnection(validNodes[i]) || self.isAbstract(validNodes[i])) {\r\n                    validNodes.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n        this.isAbstract = function (node) {\r\n            return self.getRegistry(node, 'isAbstract') === true;\r\n        };\r\n\r\n        this.isConnection = function (node) {\r\n            var validPtrNames = innerCore.getValidPointerNames(node);\r\n\r\n            return validPtrNames.indexOf('dst') !== -1 && validPtrNames.indexOf('src') !== -1;\r\n        };\r\n\r\n        this.getValidChildrenMetaNodes = function (parameters) {\r\n            var validNodes = [],\r\n                node = parameters.node,\r\n                metaNodes = self.getAllMetaNodes(node),\r\n                keys = Object.keys(metaNodes || {}),\r\n                validChildren = innerCore.getValidChildrenPaths(node),\r\n                i, j,\r\n                typeCounters = {},\r\n                children = parameters.children || [],\r\n                cache = parameters.cache || {},\r\n                rules,\r\n                inAspect;\r\n\r\n            rules = innerCore.getChildrenMeta(node) || {};\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                for (j = 0; j < validChildren.length; j += 1) {\r\n                    if (innerCore.isTypeOf(metaNodes[keys[i]], validChildren[j], cache)) {\r\n                        validNodes.push(metaNodes[keys[i]]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //before every next step we check if we still have potential nodes\r\n            if (validNodes.length === 0) {\r\n                return validNodes;\r\n            }\r\n\r\n            if (parameters.sensitive === true) {\r\n                sensitiveFilter(validNodes);\r\n            }\r\n\r\n            //before every next step we check if we still have potential nodes\r\n            if (validNodes.length === 0) {\r\n                return validNodes;\r\n            }\r\n\r\n            if (parameters.multiplicity === true) {\r\n                if (rules.max && rules.max > -1 && innerCore.getChildrenRelids(node).length >= rules.max) {\r\n                    validNodes = [];\r\n                    return validNodes;\r\n                }\r\n                if (children.length === 0) {\r\n                    return validNodes; //we cannot check type-multiplicity without children\r\n                }\r\n\r\n                delete rules.max;\r\n                delete rules.min;\r\n\r\n                keys = Object.keys(rules);\r\n                for (i = 0; i < children.length; i += 1) {\r\n                    for (j = 0; j < keys.length; j += 1) {\r\n                        if (innerCore.isTypeOf(children[i], keys[j])) {\r\n                            if (!typeCounters[keys[j]]) {\r\n                                typeCounters[keys[j]] = 0;\r\n                            }\r\n                            typeCounters[keys[j]] += 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                i = validNodes.length;\r\n                keys = Object.keys(typeCounters);\r\n                while (i--) {\r\n                    for (j = 0; j < keys.length; j += 1) {\r\n                        if (rules[keys[j]].max &&\r\n                            rules[keys[j]].max > -1 &&\r\n                            rules[keys[j]].max <= typeCounters[keys[j]] &&\r\n                            innerCore.isTypeOf(validNodes[i], keys[j])) {\r\n                            validNodes.splice(i, 1); //FIXME slow, use only push instead\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //before every next step we check if we still have potential nodes\r\n            if (validNodes.length === 0) {\r\n                return validNodes;\r\n            }\r\n\r\n            if (parameters.aspect) {\r\n                keys = innerCore.getAspectMeta(node, parameters.aspect) || [];\r\n                i = validNodes.length;\r\n\r\n                while (i--) {\r\n                    inAspect = false;\r\n                    for (j = 0; j < keys.length; j += 1) {\r\n                        if (innerCore.isTypeOf(validNodes[i], keys[j])) {\r\n                            inAspect = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!inAspect) {\r\n                        validNodes.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n            return validNodes;\r\n        };\r\n\r\n        this.getValidSetElementsMetaNodes = function (parameters) {\r\n            var validNodes = [],\r\n                node = parameters.node,\r\n                name = parameters.name,\r\n                metaNodes = self.getAllMetaNodes(node),\r\n                keys = Object.keys(metaNodes || {}),\r\n                i, j,\r\n                typeCounters = {},\r\n                members = parameters.members || [],\r\n                rules = self.getPointerMeta(node, name) || {};\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (metaNodes[keys[i]] && self.isValidTargetOf(metaNodes[keys[i]], node, name)) {\r\n                    validNodes.push(metaNodes[keys[i]]);\r\n                }\r\n            }\r\n\r\n            //before every next step we check if we still have potential nodes\r\n            if (validNodes.length === 0) {\r\n                return validNodes;\r\n            }\r\n\r\n            if (parameters.sensitive === true) {\r\n                sensitiveFilter(validNodes);\r\n            }\r\n\r\n            //before every next step we check if we still have potential nodes\r\n            if (validNodes.length === 0) {\r\n                return validNodes;\r\n            }\r\n\r\n            if (parameters.multiplicity === true) {\r\n                if (rules.max && rules.max > -1 && innerCore.getMemberPaths(node).length >= rules.max) {\r\n                    validNodes = [];\r\n                    return validNodes;\r\n                }\r\n\r\n                if (members.length === 0) {\r\n                    return validNodes; //we cannot check type-multiplicity without children\r\n                }\r\n\r\n                delete rules.max;\r\n                delete rules.min;\r\n\r\n                //we need to clear nodes that are not on the meta sheet\r\n                // and we have to initialize the counters\r\n                keys = Object.keys(rules);\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    if (!metaNodes[keys[i]]) {\r\n                        delete rules[keys[i]];\r\n                    } else {\r\n                        typeCounters[keys[i]] = 0;\r\n                    }\r\n                }\r\n\r\n                keys = Object.keys(rules);\r\n                for (i = 0; i < members.length; i += 1) {\r\n                    for (j = 0; j < keys.length; j += 1) {\r\n                        if (innerCore.isTypeOf(members[i], keys[j])) {\r\n                            typeCounters[keys[j]] += 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                i = validNodes.length;\r\n                keys = Object.keys(typeCounters);\r\n                while (i--) {\r\n                    for (j = 0; j < keys.length; j += 1) {\r\n                        if (rules[keys[j]].max &&\r\n                            rules[keys[j]].max > -1 &&\r\n                            rules[keys[j]].max <= typeCounters[keys[j]] &&\r\n                            innerCore.isTypeOf(validNodes[i], keys[j])) {\r\n                            validNodes.splice(i, 1); //FIXME slow, use only push instead\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return validNodes;\r\n        };\r\n        //</editor-fold>\r\n    };\r\n\r\n    return MetaQueryCore;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\n\r\ndefine('common/core/librarycore',[\r\n    'common/core/CoreAssert',\r\n    'common/core/tasync',\r\n    'common/core/constants',\r\n    'common/util/random',\r\n    'common/core/CoreIllegalOperationError'\r\n], function (ASSERT, TASYNC, CONSTANTS, RANDOM, CoreIllegalOperationError) {\r\n    'use strict';\r\n\r\n    var LibraryCore = function (innerCore, options) {\r\n        ASSERT(typeof options === 'object');\r\n        ASSERT(typeof options.globConf === 'object');\r\n        ASSERT(typeof options.logger !== 'undefined');\r\n\r\n        var logger = options.logger,\r\n            self = this,\r\n            key;\r\n\r\n        for (key in innerCore) {\r\n            this[key] = innerCore[key];\r\n        }\r\n\r\n        logger.debug('initialized LibraryCore');\r\n\r\n        //<editor-fold=Helper Functions>\r\n        function getAllLibraryRoots(node) {\r\n            var roots = [];\r\n            while (node) {\r\n                if (self.isLibraryRoot(node)) {\r\n                    roots.push(node);\r\n                }\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            return roots;\r\n        }\r\n\r\n        function getLibraryName(node) {\r\n            ASSERT(self.isValidNode(node));\r\n            var name = '';\r\n\r\n            node = self.getParent(node);\r\n\r\n            while (node) {\r\n                if (self.isLibraryRoot(node) && self.getParent(node) !== null) {\r\n                    name = self.getAttribute(node, 'name') + CONSTANTS.NAMESPACE_SEPARATOR + name;\r\n                }\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            return name;\r\n        }\r\n\r\n        function getLibraryRootsInfo(node) {\r\n            var allMetaNodes = self.getAllMetaNodes(node),\r\n                libraryRoots = {},\r\n                path,\r\n                roots,\r\n                i,\r\n                name;\r\n\r\n            for (path in allMetaNodes) {\r\n                roots = getAllLibraryRoots(allMetaNodes[path]);\r\n                for (i = 0; i < roots.length; i += 1) {\r\n                    name = getLibraryName(roots[i]) + self.getAttribute(roots[i], 'name');\r\n                    if (!libraryRoots[name]) {\r\n                        libraryRoots[name] = roots[i];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return libraryRoots;\r\n        }\r\n\r\n        function getRootOfLibrary(node, name) {\r\n            return self.getRoot(node).libraryRoots[name];\r\n        }\r\n\r\n        function getLibraryRoot(node) {\r\n            while (node) {\r\n                if (self.isLibraryRoot(node)) {\r\n                    return node;\r\n                }\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getLibraryInfo(libraryRootHashOrNode) {\r\n            var isNode = typeof libraryRootHashOrNode === 'object',\r\n                libraryName = '',\r\n                libraryNamePrefix = '',\r\n                getPath = function (node) {\r\n                    if (isNode) {\r\n                        return self.getPath(node, libraryRootHashOrNode);\r\n                    } else {\r\n                        return self.getPath(node);\r\n                    }\r\n                },\r\n                getName = function (node) {\r\n                    return self.getFullyQualifiedName(node).substr(libraryNamePrefix.length);\r\n                },\r\n                getGuid = function (node) {\r\n                    if (isNode) {\r\n                        return self.getLibraryGuid(node, libraryName);\r\n                    } else {\r\n                        return self.getGuid(node);\r\n                    }\r\n                },\r\n                load = function () {\r\n                    if (isNode) {\r\n                        return self.loadSubTree(libraryRootHashOrNode);\r\n                    } else {\r\n                        return self.loadTree(libraryRootHashOrNode);\r\n                    }\r\n                };\r\n\r\n            if (isNode) {\r\n                libraryName = self.getAttribute(libraryRootHashOrNode, 'name');\r\n                libraryNamePrefix = libraryName + '.';\r\n            }\r\n\r\n            return TASYNC.call(function (libraryNodes) {\r\n                var info = {},\r\n                    infoItem,\r\n                    i,\r\n                    inMeta = self.getMemberPaths(libraryNodes[0], CONSTANTS.META_SET_NAME);\r\n\r\n                for (i = 1; i < libraryNodes.length; i += 1) {\r\n                    infoItem = {\r\n                        path: getPath(libraryNodes[i]),\r\n                        hash: self.getHash(libraryNodes[i]),\r\n                        fcn: getName(libraryNodes[i]),\r\n                        isMeta: inMeta.indexOf(self.getPath(libraryNodes[i])) !== -1,\r\n                    };\r\n\r\n                    info[getGuid(libraryNodes[i])] = infoItem;\r\n                }\r\n\r\n                return info;\r\n            }, load());\r\n            //we use that the root of the library is always the first element\r\n        }\r\n\r\n        function removeLibraryRelations(root, path) {\r\n            var overlayItems = self.overlayQuery(root, path),\r\n                i;\r\n\r\n            for (i = 0; i < overlayItems.length; i += 1) {\r\n                if (overlayItems[i].s === path || overlayItems.t === path) {\r\n                    self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\r\n                }\r\n            }\r\n        }\r\n\r\n        function moveLibraryRelations(root, from, to) {\r\n            var overlayItems = self.overlayQuery(root, from),\r\n                i;\r\n\r\n            for (i = 0; i < overlayItems.length; i += 1) {\r\n                if (overlayItems[i].s === from) {\r\n                    self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\r\n                    self.overlayInsert(root, to, overlayItems[i].n, overlayItems[i].t);\r\n\r\n                } else if (overlayItems[i].t === from) {\r\n                    self.overlayRemove(root, overlayItems[i].s, overlayItems[i].n, overlayItems[i].t);\r\n                    self.overlayInsert(root, overlayItems[i].s, overlayItems[i].n, to);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        function isPathInSubTree(fullPath, subTreePath) {\r\n            if (fullPath === subTreePath) {\r\n                return true;\r\n            }\r\n            if (fullPath.indexOf(subTreePath + CONSTANTS.PATH_SEP) === 0) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function isClosureInternalTarget(targetPath, closureInfo) {\r\n            var selectionPath;\r\n\r\n            for (selectionPath in closureInfo.selection) {\r\n                if (isPathInSubTree(targetPath, selectionPath)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function collectBaseInformation(baseNode, closureInfo) {\r\n            var libraryRoots = getAllLibraryRoots(baseNode),\r\n                namespaceInfo = {},\r\n                i,\r\n                namespace;\r\n\r\n            for (i = 0; i < libraryRoots.length; i += 1) {\r\n                namespace = self.getFullyQualifiedName(libraryRoots[i]);\r\n                namespaceInfo[namespace] = {\r\n                    info: self.getLibraryInfo(libraryRoots[i], namespace),\r\n                    guid: self.getLibraryGuid(baseNode, namespace)\r\n                };\r\n                if (namespaceInfo[namespace].info && namespaceInfo[namespace].info.hash) {\r\n                    namespaceInfo[namespace].hash = namespaceInfo[namespace].info.hash;\r\n                }\r\n            }\r\n\r\n            closureInfo.bases[self.getGuid(baseNode)] = {\r\n                originGuid: libraryRoots.length > 0 ? self.getLibraryGuid(baseNode) : self.getGuid(baseNode),\r\n                name: self.getAttribute(baseNode, 'name'),\r\n                fullName: self.getFullyQualifiedName(baseNode),\r\n                namsespaces: namespaceInfo\r\n            };\r\n        }\r\n\r\n        function addRelationsFromNodeToClosureInfo(node, allMetaNodes, closureInfo) {\r\n            var basePath = self.getPath(node),\r\n                overlayInfo = self.getRawOverlayInformation(node),\r\n                overlayKey,\r\n                pointerName,\r\n                path,\r\n                targetPath;\r\n\r\n            for (overlayKey in overlayInfo) {\r\n                path = basePath + overlayKey;\r\n                if (isClosureInternalTarget(path, closureInfo)) {\r\n                    for (pointerName in overlayInfo[overlayKey]) {\r\n                        if (self.isPointerName(pointerName)) {\r\n                            targetPath = basePath + overlayInfo[overlayKey][pointerName];\r\n                            if (pointerName === CONSTANTS.BASE_POINTER) {\r\n                                if (allMetaNodes[targetPath]) {\r\n                                    collectBaseInformation(allMetaNodes[targetPath], closureInfo);\r\n                                    closureInfo.relations.preserved[path] =\r\n                                            closureInfo.relations.preserved[path] || {};\r\n                                    closureInfo.relations.preserved[path][CONSTANTS.BASE_POINTER] =\r\n                                            self.getGuid(allMetaNodes[targetPath]);\r\n                                } else if (isClosureInternalTarget(targetPath, closureInfo)) {\r\n                                    closureInfo.relations.preserved[path] =\r\n                                            closureInfo.relations.preserved[path] || {};\r\n                                    closureInfo.relations.preserved[path][CONSTANTS.BASE_POINTER] = targetPath;\r\n                                } else {\r\n                                    closureInfo.relations.lost[path] = closureInfo.relations.lost[path] || {};\r\n                                    closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER] = targetPath;\r\n                                }\r\n                            } else {\r\n                                if (isClosureInternalTarget(targetPath, closureInfo)) {\r\n                                    closureInfo.relations.preserved[path] =\r\n                                            closureInfo.relations.preserved[path] || {};\r\n                                    closureInfo.relations.preserved[path][pointerName] = targetPath;\r\n                                } else {\r\n                                    closureInfo.relations.lost[path] = closureInfo.relations.lost[path] || {};\r\n                                    closureInfo.relations.lost[path][pointerName] = targetPath;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function normalizeSelectionForClosure(nodes) {\r\n            var paths = [],\r\n                i, j,\r\n                nodesToKeep = [],\r\n                nodesToCut = {};\r\n\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                paths.push(self.getPath(nodes[i]));\r\n            }\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                for (j = 0; j < paths.length; j += 1) {\r\n                    if (i !== j && isPathInSubTree(paths[j], paths[i])) {\r\n                        nodesToCut[paths[j]] = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                if (nodesToCut[paths[i]] !== true) {\r\n                    nodesToKeep.push(nodes[i]);\r\n                }\r\n            }\r\n\r\n            return nodesToKeep;\r\n\r\n        }\r\n\r\n        function getBasePathOfPath(path, closureInfo) {\r\n            var basePath;\r\n\r\n            for (basePath in closureInfo.hashes) {\r\n                if (isPathInSubTree(path, basePath)) {\r\n                    return basePath;\r\n                }\r\n            }\r\n\r\n            return '';\r\n        }\r\n\r\n        function mapRelationEndings(closureInfo) {\r\n            var source,\r\n                sourceInfo,\r\n                name,\r\n                basePath;\r\n\r\n            for (source in closureInfo.relations.preserved) {\r\n                sourceInfo = closureInfo.relations.preserved[source];\r\n                for (name in sourceInfo) {\r\n                    if (!closureInfo.bases[sourceInfo[name]]) {\r\n                        basePath = getBasePathOfPath(sourceInfo[name], closureInfo);\r\n                        if (basePath) {\r\n                            sourceInfo[name] = sourceInfo[name].replace(basePath, closureInfo.hashes[basePath]);\r\n                        } else {\r\n                            logger.error('during closure generation unknown based target [' +\r\n                                    sourceInfo[name] + '] remained.');\r\n                            delete sourceInfo[name];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                basePath = getBasePathOfPath(source, closureInfo);\r\n                if (basePath) {\r\n                    closureInfo.relations.preserved[source.replace(basePath, closureInfo.hashes[basePath])] =\r\n                            closureInfo.relations.preserved[source];\r\n                    delete closureInfo.relations.preserved[source];\r\n                } else {\r\n                    logger.error('during closure generation unknown based source [' +\r\n                            source + '] remained.');\r\n                    delete closureInfo.relations.preserved[source];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function gatherOccurancesOfType(baseGuid, closureInformation, allMetaNodes) {\r\n            var keys = Object.keys(allMetaNodes),\r\n                occurrences = [],\r\n                i;\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if ((self.isLibraryElement(allMetaNodes[keys[i]]) &&\r\n                        closureInformation.bases[baseGuid].originGuid === self.getLibraryGuid(allMetaNodes[keys[i]])) ||\r\n                        closureInformation.bases[baseGuid].originGuid === self.getGuid(allMetaNodes[keys[i]])) {\r\n                    occurrences.push(allMetaNodes[keys[i]]);\r\n                }\r\n            }\r\n\r\n            return occurrences;\r\n        }\r\n\r\n        function checkClosure(allMetaNodes, closureInformation) {\r\n            var keys = Object.keys(allMetaNodes),\r\n                occurrences, i, j, errorTxt;\r\n\r\n            // First check against direct GUID matches..\r\n            closureInformation.destinationBases = {};\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                closureInformation.destinationBases[self.getGuid(allMetaNodes[keys[i]])] = keys[i];\r\n            }\r\n\r\n            keys = Object.keys(closureInformation.bases || {});\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (!closureInformation.destinationBases[keys[i]]) {\r\n                    // ... if no match try to find a unique match based on library GUIDs.\r\n                    occurrences = gatherOccurancesOfType(keys[i], closureInformation, allMetaNodes);\r\n                    if (occurrences.length === 0) {\r\n                        throw new CoreIllegalOperationError('Cannot find necessary base [' +\r\n                                closureInformation.bases[keys[i]].fullName + ' : ' + keys[i] + ']');\r\n                    } else if (occurrences.length === 1) {\r\n                        closureInformation.destinationBases[keys[i]] = self.getPath(occurrences[0]);\r\n                    } else {\r\n                        errorTxt = 'Ambiguous occurrences of base [' +\r\n                                closureInformation.bases[keys[i]].fullName + ' : ' + keys[i] + '] ( ';\r\n                        for (j = 0; j < occurrences.length; j += 1) {\r\n                            errorTxt += '[' + self.getFullyQualifiedName(occurrences[j]) +\r\n                                    ' : ' + self.getPath(occurrences[j]) + '] ';\r\n                        }\r\n                        errorTxt += ')';\r\n                        throw new CoreIllegalOperationError(errorTxt);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function getAncestor(node, from, to) {\r\n            var fromArray = from.split(CONSTANTS.PATH_SEP),\r\n                toArray = to.split(CONSTANTS.PATH_SEP),\r\n                commonAncestorPath = '',\r\n                i;\r\n\r\n            fromArray.shift();\r\n            toArray.shift();\r\n\r\n            for (i = 0; i < fromArray.length && i < toArray.length; i += 1) {\r\n                if (fromArray[i] === toArray[i]) {\r\n                    commonAncestorPath += CONSTANTS.PATH_SEP + fromArray[i];\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            while (self.getPath(node) !== commonAncestorPath && node !== null) {\r\n                node = self.getParent(node);\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        function addRelation(parent, from, to, name) {\r\n            var commonAncestor = getAncestor(parent, from, to),\r\n                relFrom, relTo;\r\n\r\n            if (commonAncestor) {\r\n                relFrom = from.substr(self.getPath(commonAncestor).length);\r\n                relTo = to.substr(self.getPath(commonAncestor).length);\r\n\r\n                self.overlayInsert(commonAncestor, relFrom, name, relTo);\r\n            } else {\r\n                logger.error('unable to add relation: ' + name + '(' + from + '->' + to + ')');\r\n            }\r\n        }\r\n\r\n        function getFinalPath(path, closureInformation) {\r\n            // #9ab4 1eaad 98572 de827 49f0d 54520 3ad99 6b564 7 => 41 char is the hash length\r\n            var hash = path.substr(0, 41),\r\n                resultPath = '';\r\n\r\n            if (closureInformation.relids[hash]) {\r\n                resultPath = closureInformation.parent + CONSTANTS.PATH_SEP + closureInformation.relids[hash];\r\n                resultPath += path.substr(41);\r\n            }\r\n\r\n            return resultPath;\r\n        }\r\n\r\n        function computePaths(closureInformation) {\r\n            var source, name, sourceInfo;\r\n\r\n            for (source in closureInformation.relations.preserved) {\r\n                sourceInfo = closureInformation.relations.preserved[source];\r\n                for (name in sourceInfo) {\r\n                    if (closureInformation.destinationBases[sourceInfo[name]]) {\r\n                        sourceInfo[name] = closureInformation.destinationBases[sourceInfo[name]];\r\n                    } else {\r\n                        sourceInfo[name] = getFinalPath(sourceInfo[name], closureInformation);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (source in closureInformation.relations.preserved) {\r\n                closureInformation.relations.preserved[getFinalPath(source, closureInformation)] =\r\n                        closureInformation.relations.preserved[source];\r\n                delete closureInformation.relations.preserved[source];\r\n            }\r\n        }\r\n\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Modified Methods>\r\n        this.loadRoot = function (hash) {\r\n            return TASYNC.call(function (root) {\r\n                root.libraryRoots = getLibraryRootsInfo(root);\r\n                return root;\r\n            }, innerCore.loadRoot(hash));\r\n        };\r\n\r\n        this.createNode = function (parameters) {\r\n            var node;\r\n\r\n            if (parameters && parameters.parent &&\r\n                    (self.isLibraryRoot(parameters.parent) || self.isLibraryElement(parameters.parent))) {\r\n                throw new CoreIllegalOperationError('Not allowed to create new node inside library.');\r\n            }\r\n\r\n            if (parameters && parameters.base && self.isLibraryRoot(parameters.base)) {\r\n                throw new CoreIllegalOperationError('Not allowed to instantiate library root.');\r\n            }\r\n\r\n            node = innerCore.createNode(parameters);\r\n            if (node.parent === null) {\r\n                node.libraryRoots = {};\r\n            }\r\n\r\n            return node;\r\n        };\r\n\r\n        this.deleteNode = function (node, technical) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to remove library node by simply deleting them.');\r\n\r\n            }\r\n\r\n            return innerCore.deleteNode(node, technical);\r\n        };\r\n\r\n        this.copyNode = function (node, parent) {\r\n            if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\r\n                throw new CoreIllegalOperationError('Not allowed to add nodes inside a library.');\r\n            }\r\n\r\n            if (self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to copy library root.');\r\n            }\r\n\r\n            return innerCore.copyNode(node, parent);\r\n        };\r\n\r\n        this.copyNodes = function (nodes, parent) {\r\n            var i;\r\n            if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\r\n                throw new CoreIllegalOperationError('Not allowed to add nodes inside a library.');\r\n            }\r\n\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                if (self.isLibraryRoot(nodes[i])) {\r\n                    throw new CoreIllegalOperationError('Not allowed to copy library root.');\r\n                }\r\n            }\r\n\r\n            return innerCore.copyNodes(nodes, parent);\r\n        };\r\n\r\n        this.moveNode = function (node, parent) {\r\n            if (self.isLibraryRoot(parent) || self.isLibraryElement(parent)) {\r\n                throw new CoreIllegalOperationError('Not allowed to add nodes inside a library.');\r\n            }\r\n\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to move library elements.');\r\n            }\r\n\r\n            return innerCore.moveNode(node, parent);\r\n        };\r\n\r\n        this.setAttribute = function (node, name, value) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setAttribute(node, name, value);\r\n        };\r\n\r\n        this.delAttribute = function (node, name) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delAttribute(node, name);\r\n        };\r\n\r\n        this.setRegistry = function (node, name, value) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setRegistry(node, name, value);\r\n        };\r\n\r\n        this.delRegistry = function (node, name) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delRegistry(node, name);\r\n        };\r\n\r\n        this.setPointer = function (node, name, target) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setPointer(node, name, target);\r\n        };\r\n\r\n        this.deletePointer = function (node, name) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.deletePointer(node, name);\r\n        };\r\n\r\n        this.setBase = function (node, base) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            if (base && self.isLibraryRoot(base)) {\r\n                throw new CoreIllegalOperationError('Not allowed to instantiate library root.');\r\n            }\r\n\r\n            return innerCore.setBase(node, base);\r\n        };\r\n\r\n        this.addMember = function (node, name, member) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.addMember(node, name, member);\r\n        };\r\n\r\n        this.delMember = function (node, name, path) {\r\n            if (self.isLibraryElement(node) || self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delMember(node, name, path);\r\n        };\r\n\r\n        this.setMemberAttribute = function (node, setName, memberPath, attrName, value) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.setMemberAttribute(node, setName, memberPath, attrName, value);\r\n        };\r\n\r\n        this.delMemberAttribute = function (node, setName, memberPath, attrName) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.delMemberAttribute(node, setName, memberPath, attrName);\r\n        };\r\n\r\n        this.setMemberRegistry = function (node, setName, memberPath, regName, value) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.setMemberRegistry(node, setName, memberPath, regName, value);\r\n        };\r\n\r\n        this.delMemberRegistry = function (node, setName, memberPath, regName) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.delMemberRegistry(node, setName, memberPath, regName);\r\n        };\r\n\r\n        this.createSet = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.createSet(node, name);\r\n        };\r\n\r\n        this.deleteSet = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.deleteSet(node, name);\r\n        };\r\n\r\n        this.setSetAttribute = function (node, setName, regName, regValue) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.setSetAttribute(node, setName, regName, regValue);\r\n        };\r\n\r\n        this.delSetAttribute = function (node, setName, regName) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.delSetAttribute(node, setName, regName);\r\n        };\r\n\r\n        this.setSetRegistry = function (node, setName, regName, regValue) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.setSetRegistry(node, setName, regName, regValue);\r\n        };\r\n\r\n        this.delSetRegistry = function (node, setName, regName) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.delSetRegistry(node, setName, regName);\r\n        };\r\n\r\n        this.setGuid = function (node, guid) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                //FIXME cannot return any error in async functions :/\r\n                // /throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            } else {\r\n                return innerCore.setGuid(node, guid);\r\n            }\r\n        };\r\n\r\n        this.setConstraint = function (node, name, constraint) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.setConstraint(node, name, constraint);\r\n        };\r\n\r\n        this.delConstraint = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n            return innerCore.delConstraint(node, name);\r\n        };\r\n\r\n        this.clearMetaRules = function (node) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.clearMetaRules(node);\r\n        };\r\n\r\n        this.setAttributeMeta = function (node, name, rule) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setAttributeMeta(node, name, rule);\r\n        };\r\n\r\n        this.delAttributeMeta = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delAttributeMeta(node, name);\r\n        };\r\n\r\n        this.setChildMeta = function (node, child, min, max) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            if (self.isLibraryRoot(child)) {\r\n                throw new CoreIllegalOperationError('Not allowed to use library root as valid child.');\r\n            }\r\n\r\n            return innerCore.setChildMeta(node, child, min, max);\r\n        };\r\n\r\n        this.delChildMeta = function (node, childPath) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delChildMeta(node, childPath);\r\n        };\r\n\r\n        this.setChildrenMetaLimits = function (node, min, max) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setChildrenMetaLimits(node, min, max);\r\n        };\r\n\r\n        this.setPointerMetaTarget = function (node, name, target, min, max) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setPointerMetaTarget(node, name, target, min, max);\r\n        };\r\n\r\n        this.delPointerMetaTarget = function (node, name, targetPath) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delPointerMetaTarget(node, name, targetPath);\r\n        };\r\n\r\n        this.setPointerMetaLimits = function (node, name, min, max) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setPointerMetaLimits(node, name, min, max);\r\n        };\r\n\r\n        this.delPointerMeta = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delPointerMeta(node, name);\r\n        };\r\n\r\n        this.setAspectMetaTarget = function (node, name, target) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.setAspectMetaTarget(node, name, target);\r\n        };\r\n\r\n        this.delAspectMetaTarget = function (node, name, targetPath) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delAspectMetaTarget(node, name, targetPath);\r\n        };\r\n\r\n        this.delAspectMeta = function (node, name) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delAspectMeta(node, name);\r\n        };\r\n\r\n        this.delMixin = function (node, mixinPath) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.delMixin(node, mixinPath);\r\n        };\r\n\r\n        this.addMixin = function (node, mixinPath) {\r\n            var libraryName,\r\n                root = self.getRoot(node);\r\n\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            for (libraryName in root.libraryRoots) {\r\n                if (self.getPath(root.libraryRoots[libraryName]) === mixinPath) {\r\n                    throw new CoreIllegalOperationError('Not allowed to use library root as mixin.');\r\n                }\r\n            }\r\n\r\n            return innerCore.addMixin(node, mixinPath);\r\n        };\r\n\r\n        this.clearMixins = function (node) {\r\n            if (self.isLibraryRoot(node) || self.isLibraryElement(node)) {\r\n                throw new CoreIllegalOperationError('Not allowed to modify library elements.');\r\n            }\r\n\r\n            return innerCore.clearMixins(node);\r\n        };\r\n        //</editor-fold>\r\n\r\n        //<editor-fold=Added Methods>\r\n\r\n        this.getLibraryRoot = function (node, name) {\r\n            var root = self.getRoot(node);\r\n\r\n            return root.libraryRoots[name] || null;\r\n        };\r\n\r\n        this.isLibraryElement = function (node) {\r\n            var parent = self.getParent(node);\r\n\r\n            while (parent) {\r\n                if (self.isLibraryRoot(parent)) {\r\n                    return true;\r\n                }\r\n                parent = self.getParent(parent);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.isLibraryRoot = function (node) {\r\n            if (innerCore.getAttribute(node, '_libraryInfo')) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.getNamespace = function (node) {\r\n            var libPrefix = getLibraryName(node);\r\n\r\n            if (libPrefix) {\r\n                // Trim the trailing dot..\r\n                libPrefix = libPrefix.substring(0, libPrefix.length - 1);\r\n            }\r\n\r\n            return libPrefix;\r\n        };\r\n\r\n        this.getFullyQualifiedName = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            return getLibraryName(node) + self.getAttribute(node, 'name');\r\n        };\r\n\r\n        this.getLibraryGuid = function (node, name) {\r\n            ASSERT(self.isValidNode(node));\r\n            var libraryRoot;\r\n\r\n            if (!self.isLibraryElement(node) && !self.isLibraryRoot(node)) {\r\n                throw new CoreIllegalOperationError('Node is not a library member');\r\n            }\r\n\r\n            if (!name) {\r\n                libraryRoot = getLibraryRoot(node);\r\n            } else {\r\n                libraryRoot = getRootOfLibrary(node, name);\r\n            }\r\n\r\n            if (!libraryRoot) {\r\n                throw new CoreIllegalOperationError('Unknown library was given');\r\n            }\r\n\r\n            if (self.getFullyQualifiedName(node).indexOf(self.getFullyQualifiedName(libraryRoot)) !== 0) {\r\n                throw new CoreIllegalOperationError('Node is not a member of the library');\r\n            }\r\n\r\n            if (self.isLibraryRoot(node) && self.getPath(node) === self.getPath(libraryRoot)) {\r\n                return innerCore.getDataGuid(node);\r\n            }\r\n\r\n            return innerCore.getDeducedGuid(node, self.getLibraryGuid(self.getParent(node), name));\r\n        };\r\n\r\n        this.addLibrary = function (node, name, libraryRootHash, libraryInfo) {\r\n            var root = self.getRoot(node),\r\n                libraryRelid = RANDOM.generateRelid(root.data);\r\n\r\n            innerCore.setProperty(root, libraryRelid, libraryRootHash);\r\n            root.childrenRelids = null;\r\n\r\n            return TASYNC.call(function (newLibraryRoot) {\r\n                return TASYNC.call(function (libraryNodes) {\r\n                    var inMeta = self.getMemberPaths(newLibraryRoot, CONSTANTS.META_SET_NAME),\r\n                        libraryInfoAttribute = libraryInfo;\r\n                        //remove the libraryRoot from the libraryNodes\r\n                    libraryNodes.shift();\r\n\r\n                    //set the name of the library root\r\n                    innerCore.setAttribute(newLibraryRoot, 'name', name);\r\n\r\n                    //add library_info\r\n                    libraryInfoAttribute.hash = libraryRootHash;\r\n                    innerCore.setAttribute(newLibraryRoot, '_libraryInfo', libraryInfoAttribute);\r\n\r\n                    if (libraryNodes.length > 0) {\r\n                        //connect the FCO as base of libraryFCO\r\n                        innerCore.setBase(self.getBaseRoot(libraryNodes[0]), self.getFCO(root));\r\n\r\n                        //adding nodes to the global META\r\n                        var i;\r\n                        for (i = 0; i < libraryNodes.length; i += 1) {\r\n                            if (inMeta.indexOf(self.getPath(libraryNodes[i])) !== -1) {\r\n                                innerCore.addMember(root, CONSTANTS.META_SET_NAME, libraryNodes[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    //refreshing libraryInfo\r\n                    root.libraryRoots[name] = newLibraryRoot;\r\n                }, self.loadSubTree(newLibraryRoot));\r\n            }, self.loadChild(root, libraryRelid));\r\n        };\r\n\r\n        this.updateLibrary = function (node, name, updatedLibraryRootHash, libraryInfo/*, updateInstructions*/) {\r\n            var logs = {added: {}, updated: {}, moved: {}, removed: {}},\r\n                root = self.getRoot(node),\r\n                libraryRoot = getRootOfLibrary(root, name),\r\n                relid,\r\n                FCO = self.getFCO(root);\r\n\r\n            if (!libraryRoot) { //do nothing if not valid library\r\n                return logs;\r\n            }\r\n\r\n            relid = self.getRelid(libraryRoot);\r\n\r\n            return TASYNC.call(function (oldInfo, newInfo) {\r\n                var newNodePaths = [],\r\n                    removedNodePaths = [],\r\n                    removedNodeInMeta = [],\r\n                    addedToMetaPaths = [],\r\n                    removedFromMetaPaths = [],\r\n                    i,\r\n                    moves = [],\r\n                    guid;\r\n\r\n                for (guid in newInfo) {\r\n                    if (!oldInfo[guid]) {\r\n                        newNodePaths.push('/' + relid + newInfo[guid].path);\r\n                    } else if (oldInfo[guid].path !== newInfo[guid].path) {\r\n                        moves.push({from: '/' + relid + oldInfo[guid].path, to: '/' + relid + newInfo[guid].path});\r\n                    }\r\n                }\r\n\r\n                for (guid in oldInfo) {\r\n                    if (!newInfo[guid]) {\r\n                        removedNodePaths.push('/' + relid + oldInfo[guid].path);\r\n                        removedNodeInMeta.push(oldInfo[guid].isMeta);\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < removedNodePaths.length; i += 1) {\r\n                    removeLibraryRelations(root, removedNodePaths[i]);\r\n                }\r\n\r\n                for (i = 0; i < moves.length; i += 1) {\r\n                    moveLibraryRelations(root, moves[i].from, moves[i].to);\r\n                }\r\n\r\n                //finally address the changes in the meta element of the library\r\n                for (guid in newInfo) {\r\n                    if (oldInfo[guid]) {\r\n                        if (newInfo[guid].isMeta && !oldInfo[guid].isMeta) {\r\n                            addedToMetaPaths.push('/' + relid + newInfo[guid].path);\r\n                        }\r\n                        if (!newInfo[guid].isMeta && oldInfo[guid].isMeta) {\r\n                            removedFromMetaPaths.push('/' + relid + newInfo[guid].path);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                innerCore.setProperty(root, relid, updatedLibraryRootHash);\r\n                root = self.removeChildFromCache(root, relid);\r\n                return TASYNC.call(function (newLibraryRoot) {\r\n                    return TASYNC.call(function (newLibraryNodes) {\r\n                        var i,\r\n                            inMeta = self.getMemberPaths(newLibraryRoot, CONSTANTS.META_SET_NAME),\r\n                            libraryInfoAttribute = libraryInfo,\r\n                            libraryFCO;\r\n\r\n                        newLibraryNodes.shift();\r\n                        //set the name of the library root\r\n                        innerCore.setAttribute(newLibraryRoot, 'name', name);\r\n\r\n                        //add library_info\r\n                        libraryInfoAttribute.hash = updatedLibraryRootHash;\r\n                        innerCore.setAttribute(newLibraryRoot, '_libraryInfo', libraryInfoAttribute);\r\n\r\n                        if (newLibraryNodes.length > 0) {\r\n                            //connect the FCO as base of libraryFCO, but be sure to remove the nullPtr\r\n\r\n                            libraryFCO = self.getBaseRoot(newLibraryNodes[0]);\r\n                            innerCore.deletePointer(libraryFCO, 'base');\r\n                            innerCore.setBase(libraryFCO, FCO);\r\n\r\n                            for (i = 0; i < newLibraryNodes.length; i += 1) {\r\n                                //adding new nodes to the global META\r\n                                if (newNodePaths.indexOf(self.getPath(newLibraryNodes[i])) !== -1 &&\r\n                                        inMeta.indexOf(self.getPath(newLibraryNodes[i])) !== -1) {\r\n                                    innerCore.addMember(root, CONSTANTS.META_SET_NAME, newLibraryNodes[i]);\r\n                                }\r\n                                //adding existing nodes to the global META\r\n                                if (addedToMetaPaths.indexOf(self.getPath(newLibraryNodes[i])) !== -1) {\r\n                                    innerCore.addMember(root, CONSTANTS.META_SET_NAME, newLibraryNodes[i]);\r\n                                }\r\n                                //removing existing nodes from the global META\r\n                                if (removedFromMetaPaths.indexOf(self.getPath(newLibraryNodes[i])) !== -1) {\r\n                                    innerCore.delMember(\r\n                                        root, \r\n                                        CONSTANTS.META_SET_NAME, \r\n                                        self.getPath(newLibraryNodes[i])\r\n                                    );\r\n                                    let sets = self.isMemberOf(newLibraryNodes[i]);\r\n                                    sets = sets[''] || [];\r\n                                    sets.forEach((set) => {\r\n                                        if (set.indexOf(CONSTANTS.META_SET_NAME) === 0) {\r\n                                            innerCore.addMember(\r\n                                                root, \r\n                                                CONSTANTS.META_SET_NAME, \r\n                                                newLibraryNodes[i]\r\n                                            );                                            \r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //for bookkeping purposes we need to remove the to-delete nodes from the all-META set\r\n                        if (removedNodePaths.length > 0) {\r\n                            for (i = 0; i < removedNodePaths.length; i += 1) {\r\n                                if (removedNodeInMeta[i]) {\r\n                                    innerCore.delMember(\r\n                                        root,\r\n                                        CONSTANTS.META_SET_NAME,\r\n                                        removedNodePaths[i]\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        root.libraryRoots[name] = newLibraryRoot;\r\n\r\n                        return logs;\r\n                    }, self.loadSubTree(newLibraryRoot));\r\n                }, self.loadChild(root, relid));\r\n            }, getLibraryInfo(libraryRoot), getLibraryInfo(updatedLibraryRootHash));\r\n\r\n        };\r\n\r\n        this.removeLibrary = function (node, name) {\r\n            ASSERT(self.isValidNode(node));\r\n            var root = self.getRoot(node),\r\n                libraryRoot = root.libraryRoots[name];\r\n\r\n            if (libraryRoot && !self.isLibraryElement(libraryRoot)) {\r\n                innerCore.deleteNode(root.libraryRoots[name], true);\r\n                delete root.libraryRoots[name];\r\n            }\r\n\r\n        };\r\n\r\n        this.renameLibrary = function (node, oldName, newName) {\r\n            ASSERT(self.isValidNode(node));\r\n            var root = self.getRoot(node);\r\n\r\n            ASSERT(typeof oldName === 'string' && typeof newName === 'string' &&\r\n                    oldName.indexOf(CONSTANTS.NAMESPACE_SEPARATOR) === -1 &&\r\n                    newName.indexOf(CONSTANTS.NAMESPACE_SEPARATOR) === -1 &&\r\n                    root.libraryRoots[oldName]);\r\n\r\n            if (oldName !== newName) {\r\n                ASSERT(!root.libraryRoots[newName], 'Library already exists [' + newName + ']');\r\n                innerCore.setAttribute(root.libraryRoots[oldName], 'name', newName);\r\n                root.libraryRoots[newName] = root.libraryRoots[oldName];\r\n                delete root.libraryRoots[oldName];\r\n            }\r\n        };\r\n\r\n        this.getLibraryNames = function (node) {\r\n            ASSERT(self.isValidNode(node));\r\n            return Object.keys(self.getRoot(node).libraryRoots);\r\n        };\r\n\r\n        this.getLibraryMetaNodes = function (node, name, onlyOwn) {\r\n            var allNodes = self.getAllMetaNodes(node),\r\n                libraryNodes = {},\r\n                path;\r\n\r\n            for (path in allNodes) {\r\n                try {\r\n                    if (onlyOwn) {\r\n                        if (self.getNamespace(allNodes[path]) === name) {\r\n                            libraryNodes[path] = allNodes[path];\r\n                        }\r\n                    } else {\r\n                        if (self.getNamespace(allNodes[path]).indexOf(name) === 0) {\r\n                            libraryNodes[path] = allNodes[path];\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // There is the occasional occurance that the list contains\r\n                    // already removed nodes, so they will throw exceptions...\r\n                }\r\n            }\r\n\r\n            return libraryNodes;\r\n        };\r\n\r\n        this.getLibraryInfo = function (node, name) {\r\n            var libroot = getRootOfLibrary(node, name);\r\n            return self.getAttribute(libroot, '_libraryInfo');\r\n        };\r\n\r\n        this.getClosureInformation = function (nodes) {\r\n            ASSERT(nodes.length > 0);\r\n            var closureInfo = {\r\n                    hashes: {},\r\n                    selection: {},\r\n                    bases: {},\r\n                    relations: {preserved: {}, lost: {}}\r\n                },\r\n                // infoLosses = {},\r\n                allMetaNodes,\r\n                path,\r\n                node,\r\n                keys,\r\n                i;\r\n\r\n            nodes = normalizeSelectionForClosure(nodes);\r\n            allMetaNodes = this.getAllMetaNodes(nodes[0]);\r\n\r\n            // We first collect the absolute paths of the selected nodes\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                // The selection cannot contain library elements as that would violate read-only\r\n                if (this.isLibraryElement(nodes[i]) || this.isLibraryRoot(nodes[i])) {\r\n                    throw new CoreIllegalOperationError('Cannot select node[' +\r\n                            this.getPath(nodes[i]) + '] because it is library content!'\r\n                    );\r\n                }\r\n                if (this.getParent(nodes[i]) === null) {\r\n                    throw new CoreIllegalOperationError('Cannot select the project root!');\r\n                }\r\n                closureInfo.selection[this.getPath(nodes[i])] = this.getGuid(nodes[i]);\r\n                closureInfo.hashes[this.getPath(nodes[i])] = this.getHash(nodes[i]);\r\n            }\r\n\r\n            // Secondly, we collect relation information (the first order ones).\r\n            // We leave the handling of the root node's overlay info for a separate step\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                node = this.getParent(nodes[i]);\r\n                while (this.getPath(node)) { // until it is not the root\r\n                    addRelationsFromNodeToClosureInfo(node, allMetaNodes, closureInfo);\r\n                    node = this.getParent(node);\r\n                }\r\n            }\r\n\r\n            // Finally we process the relations of the root\r\n            addRelationsFromNodeToClosureInfo(this.getRoot(nodes[0]), allMetaNodes, closureInfo);\r\n\r\n            //now we combine the selection and hashes info\r\n            keys = Object.keys(closureInfo.selection);\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                closureInfo.selection[closureInfo.selection[keys[i]]] = closureInfo.hashes[keys[i]];\r\n                delete closureInfo.selection[keys[i]];\r\n            }\r\n\r\n            //now map the paths to some guid+relpath format\r\n            mapRelationEndings(closureInfo);\r\n\r\n            //remove hashes field from closure information\r\n            delete closureInfo.hashes;\r\n\r\n            //checking and logging lost relation information\r\n            logger.debug('Closure creation finished!', closureInfo);\r\n            for (path in closureInfo.relations.lost) {\r\n                if (closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER]) {\r\n                    //we do not allow external non-Meta bases\r\n                    throw new CoreIllegalOperationError('Closure cannot be created due to [' + path +\r\n                            '] misses its base [' + closureInfo.relations.lost[path][CONSTANTS.BASE_POINTER] + '].');\r\n                }\r\n            }\r\n\r\n            return closureInfo;\r\n        };\r\n\r\n        this.importClosure = function (parent, closureInformation) {\r\n            //at this point we can assume that the database has the necessary blobs\r\n            var allMetaNodes = this.getAllMetaNodes(parent),\r\n                checkResult,\r\n                key,\r\n                name,\r\n                longestNewRelid = '',\r\n                reservedRelids = this.getChildrenRelids(parent, true),\r\n                newRelid;\r\n\r\n            checkResult = checkClosure(allMetaNodes, closureInformation);\r\n\r\n            if (checkResult) {\r\n                return checkResult;\r\n            }\r\n\r\n            closureInformation.relids = {};\r\n            closureInformation.parent = this.getPath(parent);\r\n\r\n            // Attaching the selected nodes under the parent node\r\n            for (key in closureInformation.selection) {\r\n                newRelid = RANDOM.generateRelid(reservedRelids,\r\n                    innerCore.getProperty(parent, CONSTANTS.MINIMAL_RELID_LENGTH_PROPERTY));\r\n                reservedRelids[newRelid] = true;\r\n                innerCore.setProperty(parent, newRelid, closureInformation.selection[key]);\r\n                closureInformation.relids[closureInformation.selection[key]] = newRelid;\r\n                if (newRelid.length > longestNewRelid.length) {\r\n                    longestNewRelid = newRelid;\r\n                }\r\n            }\r\n\r\n            parent.childrenRelids = null;\r\n\r\n            // Now processing the new relid creations\r\n            innerCore.processRelidReservation(parent, longestNewRelid);\r\n\r\n            // Replacing the paths in the closure information with actual paths in the target project\r\n            computePaths(closureInformation);\r\n\r\n            // Creating all the relations\r\n            for (key in closureInformation.relations.preserved) {\r\n                for (name in closureInformation.relations.preserved[key]) {\r\n                    addRelation(parent, key, closureInformation.relations.preserved[key][name], name);\r\n                }\r\n            }\r\n\r\n            logger.debug('Closure import finished!', closureInformation);\r\n\r\n            return closureInformation;\r\n        };\r\n        //</editor-fold>\r\n    };\r\n\r\n    return LibraryCore;\r\n}\r\n);\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * This class defines the public API of the WebGME-Core\r\n *\r\n * @author kecso / https://github.com/kecso\r\n * @module Core\r\n */\r\n\r\n/**\r\n * @typedef {object} Node - the object that represents the atomic element of the containment hierarchy.\r\n */\r\n\r\n/**\r\n * @typedef {object} DataObject - Inner data of {@link module:Core~Node} that can be serialized\r\n * and saved in the storage.\r\n */\r\n\r\n/**\r\n * @typedef {object} GmePersisted - the result object of a persist which contains information about the newly\r\n * created data objects.\r\n * @prop {module:Core~ObjectHash} rootHash - Hash of the root node.\r\n * @prop {object.<module:Core~ObjectHash, module:Core~DataObject>} objects - Hash of the root node.\r\n */\r\n\r\n/**\r\n * @typedef {string} ObjectHash - Unique SHA-1 hash for the node object.\r\n * @example\r\n * '#5496cf226542fcceccf89056f0d27564abc88c99'\r\n */\r\n\r\n/**\r\n * @typedef {string} GUID - Globally unique identifier. A formatted string containing hexadecimal characters. If some\r\n * projects share some GUIDs that can only be because the node with the given identification represents the same\r\n * concept.\r\n * @example\r\n * 'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045'\r\n */\r\n\r\n/**\r\n * @typedef {object} Constraint - An object that represents some additional rule regarding some node of the project.\r\n * @prop {string} script - The script which checks if the constraint is met.\r\n * @prop {string} info - Short description of the constraint.\r\n * @prop {string} priority - Gives instructions on how to deal with violations of the constraint.\r\n */\r\n\r\n/**\r\n * @typedef {object} DefinitionInfo - Contains the owner and the target of the meta-rule that makes the\r\n * relationship between the given node and related node a valid one. There can be multiple meta-rules that make\r\n * the relationship valid, but this is the first one that answers the question isValidChildOf, isValidTargetOf etc.\r\n * @prop {Core~Node} ownerNode - The meta-node where the meta-rule is stored.\r\n * @prop {Core~Node} targetNode - The meta-node the meta-rule is targeting.\r\n */\r\n\r\n/**\r\n * @typedef {object} RelationRule - An object that represents a relational type rule-set (pointer/set).\r\n * @prop {integer} [min] - The minimum amount of target necessary for the relationship (if not present or '-1'\r\n * then there is no minimum rule that applies)\r\n * @prop {integer} [max] - The minimum amount of target necessary for the relationship (if not present or '-1'\r\n * then there is no minimum rule that applies)\r\n * @prop {object} [absolutePathOfTarget] - special rules regarding the given type (if the object is empty, it still\r\n * represents that the type is a valid target of the relationship)\r\n * @prop {integer} [absolutePathOfTarget.min] - The minimum amount of target necessary for the relationship\r\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\r\n * @prop {integer} [absolutePathOfTarget.max] - The minimum amount of target necessary for the relationship\r\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\r\n * @example\r\n * '{\r\n *  'min': 1,\r\n *  'max': -1,\r\n *  'any/path/of/node':{\r\n *   'min':-1,\r\n *   'max':2\r\n *   },\r\n *   'any/other/valid/path':{\r\n *   }\r\n * }'\r\n */\r\n\r\n/**\r\n * @typedef {object} MixinViolation - An object that has information about a mixin violation in the given node.\r\n * @prop {string} [severity] - The severity of the given error ('error','warning').\r\n * @prop {string} [type] - 'missing', 'attribute collision', 'set collision',\r\n * 'pointer collision', 'containment collision', 'aspect collision', 'constraint collision'\r\n * @prop {string|undefined} [ruleName] - The name of the affected rule definition  (if available).\r\n * @prop {string|undefined} [targetInfo] - The path of the target of the violation (if available).\r\n * @prop {module:Core~Node|undefined} [targetNode] - The target node of the violation (if available).\r\n * @prop {string[]} [collisionPaths] - The list of paths of colliding nodes (if any).\r\n * @prop {module:Core~Node[]} [collisionNodes] - The colliding mixin nodes (if any).\r\n * @prop {string} [message] - The description of the violation.\r\n * @prop {string} [hint] - Hint on how to resolve the issue.\r\n * @example\r\n * '{\r\n * 'severity': 'error',\r\n * 'type': 'missing',\r\n * 'targetInfo': '/E/b',\r\n * 'message': '[MyObject]: mixin node \"E/b\" is missing from the Meta',\r\n * 'hint': 'Remove mixin or add to the Meta'\r\n * }'\r\n * @example\r\n * '{\r\n * 'severity': 'warning',\r\n * 'type': 'attribute collision',\r\n * 'ruleName': 'value',\r\n * 'collisionPaths': ['/E/a','/E/Z'],\r\n * 'collisionNodes': [Object,Object],\r\n * 'message':'[MyObject]: inherits attribute definition \"value\" from [TypeA] and [TypeB]',\r\n * 'hint': 'Remove one of the mixin relations'\r\n * }'\r\n */\r\n\r\ndefine('common/core/core',[\r\n    'common/core/corerel',\r\n    'common/core/setcore',\r\n    'common/core/guidcore',\r\n    'common/core/nullpointercore',\r\n    'common/core/coreunwrap',\r\n    'common/core/coretype',\r\n    'common/core/constraintcore',\r\n    'common/core/coretree',\r\n    'common/core/metacore',\r\n    'common/core/coretreeloader',\r\n    'common/core/corediff',\r\n    'common/core/metacachecore',\r\n    'common/core/mixincore',\r\n    'common/core/metaquerycore',\r\n    'common/regexp',\r\n    'common/core/librarycore',\r\n    'common/core/CoreIllegalArgumentError',\r\n    'common/core/CoreIllegalOperationError',\r\n    'common/core/constants'\r\n], function (CoreRel,\r\n             Set,\r\n             Guid,\r\n             NullPtr,\r\n             UnWrap,\r\n             Type,\r\n             Constraint,\r\n             CoreTree,\r\n             MetaCore,\r\n             TreeLoader,\r\n             CoreDiff,\r\n             MetaCacheCore,\r\n             MixinCore,\r\n             MetaQueryCore,\r\n             REGEXP,\r\n             LibraryCore,\r\n             CoreIllegalArgumentError,\r\n             CoreIllegalOperationError,\r\n             CONSTANTS) {\r\n    'use strict';\r\n\r\n    var isValidNode,\r\n        isValidPath;\r\n\r\n    function ensureType(input, nameOfInput, type, isAsync) {\r\n        var error;\r\n        if (typeof input !== type) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not of type ' + type + '.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureValue(input, nameOfInput, isAsync) {\r\n        var error;\r\n        if (input === undefined) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' cannot be undefined.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureInstanceOf(input, nameOfInput, type, isAsync) {\r\n        var error;\r\n        if (input instanceof type === false) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not of type ' + type + '.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensurePath(input, nameOfInput, isAsync) {\r\n        var error;\r\n        if (isValidPath(input) === false) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not a valid path.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureNode(input, nameOfInput, isAsync) {\r\n        var error;\r\n        if (isValidNode(input) === false) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not a valid node.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureHash(input, nameOfInput, isAsync) {\r\n        var error;\r\n        if (REGEXP.DB_HASH.test(input) === false) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not a valid hash.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureGuid(input, nameOfInput, isAsync) {\r\n        var error;\r\n        if (REGEXP.GUID.test(input) === false) {\r\n            error = new CoreIllegalArgumentError('Parameter \\'' + nameOfInput + '\\' is not a valid GUID.');\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureMinMax(input, nameOfInput, isAsync) {\r\n        var error;\r\n\r\n        if (input === null || input === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (typeof input === 'number' && Number.isSafeInteger(input) && input >= -1) {\r\n            return;\r\n        }\r\n\r\n        error = new CoreIllegalArgumentError('Parameter ' + nameOfInput + ' is not a safe integer from [-1,∞).');\r\n\r\n        if (error) {\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureRelationName(input, nameOfInput, isAsync) {\r\n        var error,\r\n            reserved = [\r\n                CONSTANTS.BASE_POINTER,\r\n                CONSTANTS.OVERLAYS_PROPERTY,\r\n                CONSTANTS.MEMBER_RELATION\r\n            ];\r\n\r\n        if (typeof input !== 'string') {\r\n            error = new CoreIllegalArgumentError('Parameter ' + nameOfInput + ' is not of type string.');\r\n        } else {\r\n            if (input.indexOf('_') === 0 ||\r\n                reserved.indexOf(input) !== -1) {\r\n                error = new CoreIllegalArgumentError('Parameter ' + nameOfInput + ' cannot start with \\'_\\'' +\r\n                    ', or be equal with any of the reserved ' + reserved + ' words.');\r\n            }\r\n        }\r\n\r\n        if (error) {\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ensureMongoCompatibleKey(input, nameOfInput, hiddenIsFine, isAsync) {\r\n        var error = null,\r\n            realInput = input;\r\n\r\n        if (hiddenIsFine === true && input[0] === '_') {\r\n            realInput = input.substr(1);\r\n        }\r\n\r\n        if (REGEXP.DOCUMENT_KEY.test(realInput) === false) {\r\n            error = new CoreIllegalArgumentError('Parameter ' + nameOfInput +\r\n                ' is not a valid key (cannot contain \".\" or \"$\"' +\r\n                (hiddenIsFine ? '' : ', or start with \"_\"') + ').');\r\n        }\r\n\r\n        if (error) {\r\n            if (isAsync) {\r\n                return error;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCommonAncestor(node1, node2, getter) {\r\n        function getChain(node) {\r\n            var ancestors = [];\r\n\r\n            while (node) {\r\n                ancestors.push(node);\r\n                node = getter(node);\r\n            }\r\n\r\n            return ancestors;\r\n        }\r\n\r\n        var ancestors2 = getChain(node2),\r\n            i;\r\n\r\n        while (node1) {\r\n            for (i = 0; i < ancestors2.length; i += 1) {\r\n                if (node1 === ancestors2[i]) {\r\n                    return node1;\r\n                }\r\n            }\r\n\r\n            node1 = getter(node1);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param {ProjectInterface} project - project connected to storage\r\n     * @param {object} options - contains logging information\r\n     * @param {object} options.logger - gmeLogger\r\n     * @param {object} options.globConf - gmeConfig\r\n     * @alias Core\r\n     * @description The Core defines the main API for model manipulation and traversal. It is important to note, that\r\n     * all 'Path' function must be used with caution as the returned information is just an estimate and does not\r\n     * guarantee that the actual node will exist (as in certain scenarios they might become invalid and need to\r\n     * be removed, but said removal can only take place during their load). Try to always 'Load' every\r\n     * node before depending on their paths.\r\n     * @constructor\r\n     */\r\n    function Core(project, options) {\r\n        var core,\r\n            coreLayers = [];\r\n        coreLayers.push(CoreRel);\r\n        coreLayers.push(NullPtr);\r\n        coreLayers.push(Type);\r\n        coreLayers.push(NullPtr);\r\n        coreLayers.push(Set);\r\n        coreLayers.push(Guid);\r\n        coreLayers.push(Constraint);\r\n        coreLayers.push(MetaCore);\r\n        coreLayers.push(MetaCacheCore);\r\n        coreLayers.push(MixinCore);\r\n        coreLayers.push(MetaQueryCore);\r\n        coreLayers.push(CoreDiff);\r\n\r\n        coreLayers.push(TreeLoader);\r\n\r\n        coreLayers.push(LibraryCore);\r\n\r\n        // TODO check how we should handle the TASYNC error handling...\r\n        // if (options.usertype !== 'tasync') {\r\n        //     coreLayers.push(UnWrap);\r\n        // }\r\n        coreLayers.push(UnWrap);\r\n\r\n        core = coreLayers.reduce(function (inner, Class) {\r\n            return new Class(inner, options);\r\n        }, new CoreTree(project, options));\r\n\r\n        isValidNode = core.isValidNode;\r\n        isValidPath = core.isValidPath;\r\n\r\n        /**\r\n         * Returns the parent of the node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the parent of the node or NULL if it has no parent.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getParent = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getParent(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the common parent node of all supplied nodes. Note that if a node and its parent are passed,\r\n         * the method will return the parent of the parent.\r\n         * @param {...module:Core~Node} nodes - a variable number of nodes to compare\r\n         *\r\n         * @return {module:Core~Node|null} The common parent. Will be null whenever the root-node is passed in.\r\n         * @example\r\n         * core.getCommonParent(node1, node2, node3);\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getCommonParent = function () {\r\n            var nodesArr = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)),\r\n                result,\r\n                i;\r\n\r\n            nodesArr.forEach(function (node, idx) {\r\n                ensureNode(node, 'arguments[' + idx + ']');\r\n            });\r\n\r\n            result = nodesArr[0];\r\n\r\n            for (i = 1; i < nodesArr.length; i += 1) {\r\n                result = getCommonAncestor(result, nodesArr[i], core.getParent);\r\n            }\r\n\r\n            if (result && nodesArr.indexOf(result) > -1) {\r\n                result = core.getParent(result);\r\n            }\r\n\r\n            return result || null;\r\n        };\r\n\r\n        /**\r\n         * Returns the parent-relative identifier of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string|null} Returns the last segment of the node path.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getRelid = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getRelid(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the root node of the containment tree that node is part of.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node} Returns the root of the containment hierarchy (it can be the node itself).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getRoot = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getRoot(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the complete path of the node in the containment hierarchy.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns a path string where each portion is a relative id and they are separated by '/'.\r\n         * The path can be empty as well if the node in question is the  root itself, otherwise it should be a chain\r\n         * of relative ids from the root of the containment hierarchy.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getPath = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getPath(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the child of the input node at the given relative id. It is not an asynchronous load\r\n         * and it automatically creates the child under the given relative id if no child was there beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} relativeId - the relative id which our child in question has.\r\n         *\r\n         * @return {module:Core~Node} Return an empty node if it was created as a result of the function or\r\n         * return the already existing and loaded node if it found.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getChild = function (node, relativeId) {\r\n            ensureNode(node, 'node');\r\n            ensureType(relativeId, 'relativeId', 'string');\r\n\r\n            return core.getChild(node, relativeId);\r\n        };\r\n\r\n        /**\r\n         * Checks if the node in question has some actual data.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if the node is 'empty' meaning that it is not reserved by real data.\r\n         * Returns false if the node is exists and have some meaningful value.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isEmpty = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isEmpty(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the calculated hash and database id of the data for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~ObjectHash} Returns the hash value of the data for the given node.\r\n         * An empty string is returned when the node was mutated and not persisted.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getHash = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getHash(node);\r\n        };\r\n\r\n        /**\r\n         * Persists the changes made in memory and computed the data blobs that needs to be saved into the database\r\n         * to make the change and allow other users to see the new state of the project.\r\n         * @param {module:Core~Node} node - some node element of the modified containment hierarchy (usually the root).\r\n         *\r\n         * @return {module:Core~GmePersisted} The function returns an object which collects all the changes\r\n         * on data level and necessary to update the database on server side. Keys of the returned object are 'rootHash'\r\n         * and 'objects'. The values of these should be passed to project.makeCommit.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.persist = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.persist(node);\r\n        };\r\n\r\n        /**\r\n         * Loads the data object with the given hash and makes it a root of a containment hierarchy.\r\n         * @param {module:Core~ObjectHash} hash - the hash of the data object we like to load as root.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting root node\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in\r\n         * a promiselike manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadRoot = function (hash, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureHash(hash, 'hash', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadRoot(hash, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads the child of the given parent pointed by the relative id. Behind the scenes, it means\r\n         * that it actually loads the data pointed by a hash stored inside the parent under the given id\r\n         * and wraps it in a node object which will be connected to the parent as a child in the containment\r\n         * hierarchy. If there is no such relative id reserved, the call will return with null.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         * @param {string} relativeId - the relative id of the child in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting child\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadChild = function (node, relativeId, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(relativeId, 'relativeId', 'string', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadChild(node, relativeId, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * From the given starting node, it loads the path given as a series of relative ids (separated by '/')\r\n         * and returns the node it finds at the ends of the path. If there is no node, the function will return null.\r\n         * @param {module:Core~Node} node - the starting node of our search.\r\n         * @param {string} relativePath - the relative path - built by relative ids - of the node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting node\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadByPath = function (node, relativePath, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensurePath(relativePath, 'relativePath', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadByPath(node, relativePath, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads all the children of the given parent. As it first checks the already reserved relative ids of\r\n         * the parent, it only loads the already existing children (so no on-demand empty node creation).\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.children - the resulting children\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadChildren = function (node, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadChildren(node, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads all the children of the given parent that has some data and not just inherited. As it first checks\r\n         * the already reserved relative ids of the parent, it only loads the already existing children\r\n         * (so no on-demand empty node creation).\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.node - the resulting children\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadOwnChildren = function (node, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadOwnChildren(node, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads the target of the given pointer of the given node. In the callback the node can have three values:\r\n         * if the node is valid, then it is the defined target of a valid pointer,\r\n         * if the returned value is null, then it means that the pointer is defined, but has no real target,\r\n         * finally if the returned value is undefined than there is no such pointer defined for the given node.\r\n         * @param {module:Core~Node} node - the source node in question.\r\n         * @param {string} pointerName - the name of the pointer.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting target\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadPointer = function (node, pointerName, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(pointerName, 'pointerName', 'string', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadPointer(node, pointerName, callback);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Loads all the source nodes that has such a pointer and its target is the given node.\r\n         * @param {module:Core~Node} node - the target node in question.\r\n         * @param {string} pointerName - the name of the pointer of the sources.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.node - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadCollection = function (node, pointerName, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(pointerName, 'pointerName', 'string', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadCollection(node, pointerName, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node.\r\n         * @param {module:Core~Node} node - the node that is the root of the sub-tree in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadSubTree = function (node, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadSubTree(node, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node, but load only those\r\n         * children that has some additional data and not purely inherited.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadOwnSubTree = function (node, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadOwnSubTree(node, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads a complete containment hierarchy using the data object - pointed by the given hash -\r\n         * as the root.\r\n         * @param {module:Core~ObjectHash} hash - hash of the root node.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting nodes.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadTree = function (hash, callback) {\r\n            var error = null;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureHash(hash, 'hash', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadTree(hash, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Collects the relative ids of all the children of the given node.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the relative ids.\r\n         */\r\n        this.getChildrenRelids = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getChildrenRelids(node);\r\n        };\r\n\r\n        /**\r\n         * Collects the relative ids of all the children of the given node that has some data and not just inherited.\r\n         * N.B. Do not mutate the returned array!\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the relative ids.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnChildrenRelids = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnChildrenRelids(node);\r\n        };\r\n\r\n        /**\r\n         * Collects the paths of all the children of the given node.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the children.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getChildrenPaths = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getChildrenPaths(node);\r\n        };\r\n\r\n        /**\r\n         * Collects the paths of all the children of the given node that has some data as well and not just inherited.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the children.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnChildrenPaths = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnChildrenPaths(node);\r\n        };\r\n\r\n        /**\r\n         * Creates a node according to the given parameters.\r\n         * @param {object} [parameters] - the details of the creation.\r\n         * @param {module:Core~Node|null} [parameters.parent] - the parent of the node to be created.\r\n         * @param {module:Core~Node|null} [parameters.base] - the base of the node to be created.\r\n         * @param {string} [parameters.relid] - the relative id of the node to be created (if reserved, the function\r\n         * returns the node behind the relative id)\r\n         * @param {module:Core~GUID} [parameters.guid] - the GUID of the node to be created\r\n         *\r\n         *\r\n         * @return {module:Core~Node} The function returns the created node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.createNode = function (parameters) {\r\n            if (parameters) {\r\n                ensureType(parameters, 'parameters', 'object');\r\n                if (Object.hasOwn(parameters, 'parent') &&\r\n                    parameters.parent !== null && parameters.parent !== undefined) {\r\n                    ensureNode(parameters.parent, 'parameters.parent');\r\n                }\r\n                if (Object.hasOwn(parameters, 'base') &&\r\n                    parameters.base !== null && parameters.base !== undefined) {\r\n                    ensureNode(parameters.base, 'parameters.base');\r\n                }\r\n                if (Object.hasOwn(parameters, 'guid') && parameters.guid !== undefined) {\r\n                    ensureGuid(parameters.guid, 'parameters.guid');\r\n                }\r\n            }\r\n            return core.createNode(parameters);\r\n        };\r\n\r\n\r\n        /**\r\n         * Creates a child, with base as provided, inside the provided node.\r\n         * @param {module:Core~Node} node - the parent of the node to be created.\r\n         * @param {module:Core~Node} base - the base of the node to be created.\r\n         *\r\n         * @return {module:Core~Node} The function returns the created child node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.createChild = function (node, base) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(base, 'base');\r\n\r\n            return core.createNode({parent: node, base: base});\r\n        };\r\n\r\n        /**\r\n         * Removes a node from the containment hierarchy.\r\n         * @param {module:Core~Node} node - the node to be removed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.deleteNode = function (node) {\r\n            ensureNode(node, 'node');\r\n            if (core.getParent(node) === null) {\r\n                throw new CoreIllegalOperationError('Not allowed to delete node without a parent.');\r\n            }\r\n\r\n            return core.deleteNode(node, false);\r\n        };\r\n\r\n        /**\r\n         * Copies the given node into parent.\r\n         * @param {module:Core~Node} node - the node to be copied.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node} The function returns the copied node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.copyNode = function (node, parent) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(parent, 'parent');\r\n\r\n            return core.copyNode(node, parent);\r\n        };\r\n\r\n        /**\r\n         * Copies the given nodes into parent.\r\n         * @param {module:Core~Node[]} nodes - the nodes to be copied.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node[]} The function returns an array of the copied nodes. The order follows\r\n         * the order of originals.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.copyNodes = function (nodes, parent) {\r\n            var i;\r\n            ensureInstanceOf(nodes, 'nodes', Array);\r\n            for (i = 0; i < nodes.length; i += 1) {\r\n                ensureNode(nodes[i], 'nodes[' + i + ']');\r\n            }\r\n            ensureNode(parent, 'parent');\r\n\r\n            return core.copyNodes(nodes, parent);\r\n        };\r\n\r\n        /**\r\n         * Checks if parent can be the new parent of node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} parent - the new parent.\r\n         *\r\n         * @return {boolean} True if the supplied parent is a valid parent for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidNewParent = function (node, parent) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(parent, 'parent');\r\n\r\n            return core.isValidNewParent(node, parent);\r\n        };\r\n\r\n        /**\r\n         * Moves the given node under the given parent.\r\n         * @param {module:Core~Node} node - the node to be moved.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node} The function returns the node after the move.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.moveNode = function (node, parent) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(parent, 'parent');\r\n\r\n            return core.moveNode(node, parent);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the defined attributes of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the attributes of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAttributeNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getAttributeNames(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the value of the given attribute of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} The function returns the value of the attribute of the node.\r\n         * If the value is undefined that means the node do not have\r\n         * such attribute defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAttribute = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getAttribute(node, name));\r\n        };\r\n\r\n        /**\r\n         * Sets the value of the given attribute of the given node. It defines the attribute on demand, means that it\r\n         * will set the given attribute even if was ot defined for the node beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the new of the attribute, undefined is not allowed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setAttribute = function (node, name, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureMongoCompatibleKey(name, 'name', true);\r\n            ensureValue(value, 'value');\r\n\r\n            return core.setAttribute(node, name, value);\r\n        };\r\n\r\n        /**\r\n         * Removes the given attributes from the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delAttribute = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.delAttribute(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the defined registry entries of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the registry entries of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getRegistryNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getRegistryNames(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the value of the given registry entry of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} The function returns the value of the registry entry\r\n         * of the node. The value can be an object or any primitive type. If the value is undefined that means\r\n         * the node do not have such attribute defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getRegistry = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getRegistry(node, name));\r\n        };\r\n\r\n        /**\r\n         * Sets the value of the given registry entry of the given node. It defines the registry entry on demand,\r\n         * means that it will set the given registry entry even if was ot defined for the node beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new of the registry entry. Can be any primitive\r\n         * type or object. Undefined is not allowed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setRegistry = function (node, name, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureMongoCompatibleKey(name, 'name', true);\r\n            ensureValue(value, 'value');\r\n\r\n            return core.setRegistry(node, name, value);\r\n        };\r\n\r\n        /**\r\n         * Removes the given registry entry from the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delRegistry = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.delRegistry(node, name);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of the defined pointer names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the pointers of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getPointerNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getPointerNames(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the path of the target of the given pointer of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @return {string|null|undefined} The function returns the absolute path of the target node\r\n         * if there is a valid target. It returns null if though the pointer is defined it does not have any\r\n         * valid target. Finally, it return undefined if there is no pointer defined for the node under the given name.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getPointerPath = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getPointerPath(node, name);\r\n        };\r\n\r\n        /**\r\n         * Removes the pointer from the node. (Aliased deletePointer.)\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delPointer = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.deletePointer(node, name);\r\n        };\r\n\r\n        /**\r\n         * Removes the pointer from the node. (Aliased delPointer.)\r\n         * @function\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.deletePointer = this.delPointer;\r\n\r\n        /**\r\n         * Sets the target of the pointer of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         * @param {module:Core~Node|null} target - the new target of the pointer.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setPointer = function (node, name, target) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureMongoCompatibleKey(name, 'name', true);\r\n            if (target !== null) {\r\n                ensureNode(target, 'target');\r\n            }\r\n\r\n            return core.setPointer(node, name, target);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of the defined pointer names that has the node as target.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the pointers pointing to the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getCollectionNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getCollectionNames(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves a list of absolute paths of nodes that has a given pointer which points to the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer.\r\n         *\r\n         * @return {string[]} The function returns an array of absolute paths of nodes that\r\n         * has the pointer pointing to the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getCollectionPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getCollectionPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Collects the data hash values of the children of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {Object<string, module:Core~ObjectHash>} The function returns a dictionary of\r\n         * {@link module:Core~ObjectHash} that stored in pair with the relative id of the corresponding\r\n         * child of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getChildrenHashes = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getChildrenHashes(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the base node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the base of the given node or null if there is no such node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getBase = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getBase(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the common base node of all supplied nodes. Note that if a node and its base are passed,\r\n         * the method will return the base of the base.\r\n         * @param {...module:Core~Node} nodes - a variable number of nodes to compare\r\n         *\r\n         * @return {module:Core~Node|null} The common base or null if e.g. the root node was passed or the fco.\r\n         * @example\r\n         * core.getCommonBase(node1, node2, node3);\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getCommonBase = function () {\r\n            var nodesArr = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)),\r\n                result,\r\n                i;\r\n\r\n            nodesArr.forEach(function (node, idx) {\r\n                ensureNode(node, 'arguments[' + idx + ']');\r\n            });\r\n\r\n            result = nodesArr[0];\r\n\r\n            for (i = 1; i < nodesArr.length; i += 1) {\r\n                result = getCommonAncestor(result, nodesArr[i], core.getBase);\r\n            }\r\n\r\n            if (result && nodesArr.indexOf(result) > -1) {\r\n                result = core.getBase(result);\r\n            }\r\n\r\n            return result || null;\r\n        };\r\n\r\n        /**\r\n         * Returns the root of the inheritance chain of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node} Returns the root of the inheritance chain (usually the FCO).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getBaseRoot = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getBaseRoot(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the attributes of the node that have been first defined for the node and not for its\r\n         * bases.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the own attributes of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnAttributeNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnAttributeNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the registry enrties of the node that have been first defined for the node\r\n         * and not for its bases.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the own registry entries of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnRegistryNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnRegistryNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the value of the attribute defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Returns the value of the attribute defined specifically for\r\n         * the node. If undefined then it means that there is no such attribute defined directly for the node, meaning\r\n         * that it either inherits some value or there is no such attribute at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnAttribute = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getOwnAttribute(node, name));\r\n        };\r\n\r\n        /**\r\n         * Returns the value of the registry entry defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Returns the value of the registry entry defined specifically\r\n         * for the node. If undefined then it means that there is no such registry entry defined directly for the node,\r\n         * meaning that it either inherits some value or there is no such registry entry at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnRegistry = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getOwnRegistry(node, name));\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the names of the pointers that were defined specifically for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of names of pointers defined specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnPointerNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnPointerNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the absolute path of the target of the pointer specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         * @param {string} name - the name of the pointer\r\n         *\r\n         * @return {string|null|undefined} Returns the absolute path. If the path is null, then it means that\r\n         * 'no-target' was defined specifically for this node for the pointer. If undefined it means that the node\r\n         * either inherits the target of the pointer or there is no pointer defined at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnPointerPath = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getOwnPointerPath(node, name);\r\n        };\r\n\r\n        /**\r\n         * Checks if base can be the new base of node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|null|undefined} base - the new base.\r\n         *\r\n         * @return {boolean} True if the supplied base is a valid base for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidNewBase = function (node, base) {\r\n            ensureNode(node, 'node');\r\n            if (base !== null) {\r\n                ensureNode(base, 'base');\r\n            }\r\n\r\n            return core.isValidNewBase(node, base);\r\n        };\r\n\r\n        /**\r\n         * Sets the base node of the given node. The function doesn't touch the properties or the children of the node\r\n         * so it can cause META rule violations that needs to be corrected manually.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|null} base - the new base.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setBase = function (node, base) {\r\n            ensureNode(node, 'node');\r\n            if (base !== null) {\r\n                ensureNode(base, 'base');\r\n            }\r\n\r\n            core.setBase(node, base);\r\n        };\r\n\r\n        /**\r\n         * Returns the root of the inheritance chain (cannot be the node itself).\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the root of the inheritance chain of the node. If returns null,\r\n         * that means the node in question is the root of the chain.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getTypeRoot = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getTypeRoot(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the sets of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of set names that the node has.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getSetNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the names of the sets created specifically at the node.\r\n         * N.B. When adding a member to a set of a node, the set is automatically created at the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of set names that were specifically created at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnSetNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnSetNames(node);\r\n        };\r\n\r\n        /**\r\n         * Creates a set for the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.createSet = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            core.createSet(node, name);\r\n        };\r\n\r\n        /**\r\n         * Removes a set from the node. (Aliased deleteSet.)\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delSet = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n\r\n            core.deleteSet(node, name);\r\n        };\r\n\r\n        /**\r\n         * Removes a set from the node. (Aliased delSet.)\r\n         * @function\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.deleteSet = this.delSet;\r\n\r\n        /**\r\n         * Return the names of the attribute entries for the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of attribute entries in the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetAttributeNames = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.getSetAttributeNames(node, name);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the attribute entries specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of attribute entries defined in the set at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnSetAttributeNames = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.getOwnSetAttributeNames(node, name);\r\n        };\r\n\r\n        /**\r\n         * Get the value of the attribute entry in the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attribute at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetAttribute = function (node, setName, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getSetAttribute(node, setName, attrName));\r\n        };\r\n\r\n        /**\r\n         * Get the value of the attribute entry specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attribute at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnSetAttribute = function (node, setName, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getOwnSetAttribute(node, setName, attrName));\r\n        };\r\n\r\n        /**\r\n         * Sets the attribute entry value for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         * @param {string|number|bool|object} value - the new value of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setSetAttribute = function (node, setName, attrName, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            ensureMongoCompatibleKey(attrName, 'attrName', true);\r\n            ensureValue(value, 'value');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            core.setSetAttribute(node, setName, attrName, value);\r\n        };\r\n\r\n        /**\r\n         * Removes the attribute entry for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delSetAttribute = function (node, setName, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            core.delSetAttribute(node, setName, attrName);\r\n        };\r\n\r\n        //Regs\r\n\r\n        /**\r\n         * Return the names of the registry entries for the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries in the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetRegistryNames = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.getSetRegistryNames(node, name);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the registry entries specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries defined in the set at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnSetRegistryNames = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.getOwnSetRegistryNames(node, name);\r\n        };\r\n\r\n        /**\r\n         * Get the value of the registry entry in the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetRegistry = function (node, setName, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getSetRegistry(node, setName, regName));\r\n        };\r\n\r\n        /**\r\n         * Get the value of the registry entry specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnSetRegistry = function (node, setName, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getOwnSetRegistry(node, setName, regName));\r\n        };\r\n\r\n        /**\r\n         * Sets the registry entry value for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new value of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setSetRegistry = function (node, setName, regName, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(regName, 'regName', 'string');\r\n            ensureMongoCompatibleKey(regName, 'regName', true);\r\n            ensureValue(value, 'value');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            core.setSetRegistry(node, setName, regName, value);\r\n        };\r\n\r\n        /**\r\n         * Removes the registry entry for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delSetRegistry = function (node, setName, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of unknown set.');\r\n            }\r\n\r\n            core.delSetRegistry(node, setName, regName);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of absolute paths of the members of the given set of the given node.\r\n         * @param {module:Core~Node} node - the set owner.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node).concat(core.getValidSetNames(node));\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n\r\n            return core.getMemberPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of absolute paths of the members of the given set of the given node that not simply\r\n         * inherited.\r\n         * @param {module:Core~Node} node - the set owner.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set that has\r\n         * information on the node's inheritance level.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnMemberPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getSetNames(node).concat(core.getValidSetNames(node));\r\n\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n\r\n            return core.getOwnMemberPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Removes a member from the set. The functions doesn't remove the node itself.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member to be removed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delMember = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n\r\n            core.delMember(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Adds a member to the given set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {module:Core~Node} member - the new member of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.addMember = function (node, name, member) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureRelationName(name, 'name');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            ensureNode(member, 'member');\r\n\r\n            core.addMember(node, name, member);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the attributes defined for the set membership to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberAttributeNames = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, name);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            return core.getMemberAttributeNames(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the attributes defined for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberOwnAttributeNames = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, name);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            return core.getMemberOwnAttributeNames(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Get the value of the attribute in relation with the set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attributed connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberAttribute = function (node, setName, path, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getMemberAttribute(node, setName, path, attrName));\r\n        };\r\n\r\n        /**\r\n         * Get the value of the attribute for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attributed connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberOwnAttribute = function (node, setName, path, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getMemberOwnAttribute(node, setName, path, attrName));\r\n        };\r\n\r\n        /**\r\n         * Sets the attribute value which represents a property of the membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the new value of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setMemberAttribute = function (node, setName, path, attrName, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            ensureMongoCompatibleKey(attrName, 'attrName', true);\r\n            ensureValue(value, 'value');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            core.setMemberAttribute(node, setName, path, attrName, value);\r\n        };\r\n\r\n        /**\r\n         * Removes an attribute which represented a property of the given set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} memberPath - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delMemberAttribute = function (node, setName, memberPath, attrName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(memberPath, 'memberPath');\r\n            ensureType(attrName, 'attrName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(memberPath) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access attributes of an unknown member.');\r\n            }\r\n\r\n            core.delMemberAttribute(node, setName, memberPath, attrName);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the registry entries defined for the set membership to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\r\n         * membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberRegistryNames = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, name);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            return core.getMemberRegistryNames(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Return the names of the registry entries defined for the set membership specifically defined to\r\n         * the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\r\n         * membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberOwnRegistryNames = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, name);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            return core.getMemberOwnRegistryNames(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Get the value of the registry entry in relation with the set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberRegistry = function (node, setName, path, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getMemberRegistry(node, setName, path, regName));\r\n        };\r\n\r\n        /**\r\n         * Get the value of the registry entry for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMemberOwnRegistry = function (node, setName, path, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            return core.copyIfObject(core.getMemberOwnRegistry(node, setName, path, regName));\r\n        };\r\n\r\n        /**\r\n         * Sets the registry entry value which represents a property of the membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new value of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setMemberRegistry = function (node, setName, path, regName, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(regName, 'regName', 'string');\r\n            ensureMongoCompatibleKey(regName, 'regName', true);\r\n            ensureValue(value, 'value');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            core.setMemberRegistry(node, setName, path, regName, value);\r\n        };\r\n\r\n        /**\r\n         * Removes a registry entry which represented a property of the given set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delMemberRegistry = function (node, setName, path, regName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(setName, 'setName', 'string');\r\n            ensurePath(path, 'path');\r\n            ensureType(regName, 'regName', 'string');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(setName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n            var paths = core.getMemberPaths(node, setName);\r\n            if (paths.indexOf(path) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access registry of an unknown member.');\r\n            }\r\n\r\n            core.delMemberRegistry(node, setName, path, regName);\r\n        };\r\n\r\n        /**\r\n         * Returns all membership information of the given node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {object} Returns a dictionary where every the key of every entry is an absolute path of a set owner\r\n         * node. The value of each entry is an array with the set names in which the node can be found as a member.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isMemberOf = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isMemberOf(node);\r\n        };\r\n\r\n        /**\r\n         * Get the GUID of a node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~GUID} Returns the globally unique identifier.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getGuid = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getGuid(node);\r\n        };\r\n\r\n        //TODO this is only used in import - export use-cases, probably could be removed...\r\n        /**\r\n         * Set the GUID of a node. As the Core itself do not checks whether the GUID already exists. The use of\r\n         * this function is only advised during the creation of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~GUID} guid - the new globally unique identifier.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.setGuid = function (node, guid, callback) {\r\n            var error = null;\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensureGuid(guid, 'guid', true);\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.setGuid(node, guid, callback);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Gets a constraint object of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         *\r\n         * @return {module:Core~Constraint|null} Returns the defined constraint or null if it was not\r\n         * defined for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r\n         *   priority: 1,\r\n         *   info: \"Should check unique name\"\r\n         * }\r\n         */\r\n        this.getConstraint = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getConstraint(node, name);\r\n        };\r\n\r\n        /**\r\n         * Sets a constraint object of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         * @param {module:Core~Constraint} constraint  - the constraint to be set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setConstraint = function (node, name, constraint) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            ensureType(constraint, 'constraint', 'object');\r\n\r\n            core.setConstraint(node, name, constraint);\r\n        };\r\n\r\n        /**\r\n         * Removes a constraint from the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delConstraint = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            core.delConstraint(node, name);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the list of constraint names defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns the array of names of constraints available for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getConstraintNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getConstraintNames(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the list of constraint names defined specifically for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns the array of names of constraints for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnConstraintNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnConstraintNames(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the given node in any way inherits from the typeNode. In addition to checking if the node\r\n         * \"isInstanceOf\" of typeNode, this methods also takes mixins into account.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|string} typeNodeOrPath - the type node we want to check or its path.\r\n         *\r\n         * @return {bool} The function returns true if the typeNodeOrPath represents a base node,\r\n         * or a mixin of any of the base nodes, of the node.\r\n         * Every node is considered to be a type of itself.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isTypeOf = function (node, typeNodeOrPath) {\r\n            ensureNode(node, 'node');\r\n            if (typeof typeNodeOrPath === 'string') {\r\n                ensurePath(typeNodeOrPath, 'typeNodeOrPath');\r\n            } else {\r\n                ensureNode(typeNodeOrPath, 'typeNodeOrPath');\r\n            }\r\n\r\n            return core.isTypeOf(node, typeNodeOrPath);\r\n        };\r\n\r\n        /**\r\n         * Checks if according to the META rules the given node can be a child of the parent.\r\n         * @param {module:Core~Node} node - the node in question\r\n         * @param {module:Core~Node} parent - the parent we like to test.\r\n         *\r\n         * @return {bool} The function returns true if according to the META rules the node can be a child of the\r\n         * parent. The check does not cover multiplicity (so if the parent can only have twi children and it already\r\n         * has them, this function will still returns true).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidChildOf = function (node, parent) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(parent, 'parent');\r\n\r\n            return core.isValidChildOf(node, parent);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined pointer names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the pointer names that are defined among the META rules\r\n         * of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidPointerNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getValidPointerNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined pointer names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the pointer names that are defined among the META\r\n         * rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidPointerNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnValidPointerNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined set names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the set names that are defined among the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidSetNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getValidSetNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined set names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the set names that are defined among the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidSetNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnValidSetNames(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the node can be a target of a pointer of the source node in accordance with the META rules.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} source - the source to test.\r\n         * @param {string} name - the name of the pointer.\r\n         *\r\n         * @return {bool} The function returns true if according to the META rules, the given node is a valid\r\n         * target of the given pointer of the source.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidTargetOf = function (node, source, name) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(source, 'source');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.isValidTargetOf(node, source, name);\r\n        };\r\n\r\n        /**\r\n         * Checks if the node can be a member of the given set at the provided set-owner node. This does not take\r\n         * cardinality rules into account.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} setOwner - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {bool} The function returns true if according to the META rules, the given node is a valid\r\n         * member of set of the given set-owner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidSetMemberOf = function (node, setOwner, name) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(setOwner, 'setOwner');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            // This is not a typo - the isValidTargetOf method can be reused.\r\n            return core.isValidTargetOf(node, setOwner, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined attribute names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the attribute names that are defined among the META rules of the\r\n         * node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidAttributeNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getValidAttributeNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined attribute names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns the attribute names that are defined specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidAttributeNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnValidAttributeNames(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the given value is of the necessary type, according to the META rules.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the value to test.\r\n         *\r\n         * @return {bool} Returns true if the value matches the META definitions.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidAttributeValueOf = function (node, name, value) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureValue(value, 'value');\r\n\r\n            if (core.getValidAttributeNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid attribute name [' + name + '] of the node.');\r\n            }\r\n\r\n            return core.isValidAttributeValueOf(node, name, value);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined aspect names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the aspect names that are defined among the META rules of the\r\n         * node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidAspectNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getValidAspectNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of the META defined aspect names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns the aspect names that are specifically defined for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidAspectNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnValidAspectNames(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of valid children types of the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         *\r\n         * @return {string[]} The function returns a list of absolute paths of nodes that are valid children of the node\r\n         * and fits to the META rules defined for the aspect. Any children, visible under the given aspect of the node\r\n         * must be an instance of at least one node represented by the absolute paths.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAspectMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getAspectMeta(node, name);\r\n        };\r\n\r\n        /**\r\n         * Gives a JSON representation of the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {object} Returns an object that represents all the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   children: {\r\n         *     items: [ \"/1\", \"/c\" ],\r\n         *     minItems: [ -1, -1 ],\r\n         *     maxItems: [ -1, -1 ]\r\n         *   },\r\n         *   attributes: {\r\n         *     name: { type: \"string\" },\r\n         *     level: { type: \"integer\"}\r\n         *   },\r\n         *   pointers: {\r\n         *     ptr: {\r\n         *       min: 1,\r\n         *       max: 1,\r\n         *       items: [ \"/1\" ],\r\n         *       minItems: [ -1 ],\r\n         *       maxItems: [ 1 ]\r\n         *     },\r\n         *     set: {\r\n         *       min: -1,\r\n         *       max: -1,\r\n         *       items: [ \"/c\" ],\r\n         *       minItems: [ -1 ],\r\n         *       maxItems: [ -1 ]\r\n         *     }\r\n         *   },\r\n         *   aspects: {\r\n         *     filter: [ \"/8\", \"/c\" ]\r\n         *   },\r\n         *   constraints: {\r\n         *     myConstraint: {\r\n         *       script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r\n         *       priority: 1,\r\n         *       info: \"Should check unique name\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * @example\r\n         * {\r\n         *   children: {},\r\n         *   attributes: {\r\n         *      name: { type: \"string\" },\r\n         *   },\r\n         *   pointers: {},\r\n         *   aspects: {},\r\n         *   constraints: {}\r\n         */\r\n        this.getJsonMeta = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getJsonMeta(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the META rules specifically defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {object} The function returns an object that represent the META rules that were defined\r\n         * specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnJsonMeta = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getOwnJsonMeta(node);\r\n        };\r\n\r\n        /**\r\n         * Removes all META rules defined at the node. Note that it does not clear any rules from other meta-nodes\r\n         * where the node if referenced.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.clearMetaRules = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            core.clearMetaRules(node);\r\n        };\r\n\r\n        /**\r\n         * Sets the META rules of the attribute of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {object} rule - the rules that defines the attribute\r\n         * @param {'string'|'integer'|'float'|'boolean'|'asset'} rule.type - the type of the attribute (valid types see\r\n         * CONSTANTS.ATTRIBUTE_TYPES).\r\n         * @param {string[]} [rule.enum] - if the attribute is an enumeration, this array contains the possible values\r\n         * @param {string|number|boolean} [rule.default] - The value the attribute should have at the node. If not given\r\n         * it should be set at some point.\r\n         * @param {boolean} [rule.multiline] - if true, than the attribute represents a multiline string, \r\n         * for example code snipet.\r\n         * @param {string} [rule.multilineType] - describing the type of the multiline (like java or c++) \r\n         * suggesting syntax highlighting.\r\n         * @param {boolean} [rule.isPassword] - shows if the string attribute should be handled \r\n         * sensitively on the user interface.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setAttributeMeta = function (node, name, rule) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            ensureType(rule, 'rule', 'object');\r\n            ensureType(rule.type, 'rule.type', 'string');\r\n\r\n            core.setAttributeMeta(node, name, rule);\r\n        };\r\n\r\n        /**\r\n         * Removes an attribute definition from the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delAttributeMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            core.delAttributeMeta(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the definition object of an attribute from the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {object} The function returns the definition object, where type is always defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *    type: \"string\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"string\",\r\n         *    regexp: \"^win\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"string\",\r\n         *    enum: [ \"value1\", \"value2\" ]\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"boolean\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\",\r\n         *    min: 0,\r\n         *    max: 10\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\",\r\n         *    enum: [ 3, 8 ]\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"float\",\r\n         *    min: 0,\r\n         *    max: 9.9\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"asset\"\r\n         * }\r\n         */\r\n        this.getAttributeMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getAttributeMeta(node, name));\r\n        };\r\n\r\n        /**\r\n         * Returns the list of absolute path of the valid children types of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of absolute paths of the nodes that was defined as valid\r\n         * children for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidChildrenPaths = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getValidChildrenPaths(node);\r\n        };\r\n\r\n        /**\r\n         * Return a JSON representation of the META rules regarding the valid children of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~RelationRule} The function returns a detailed JSON structure that represents the META\r\n         * rules regarding the possible children of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   '/5': { max: 1, min: -1 },\r\n         *   '/c': { max: -1, min: 2 },\r\n         *   max: 10,\r\n         *   min: undefined\r\n         * }\r\n         * @func\r\n         */\r\n        this.getChildrenMeta = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getChildrenMeta(node);\r\n        };\r\n\r\n        /**\r\n         * Sets the given child as a valid children type for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} child - the valid child node.\r\n         * @param {integer} [min] - the allowed minimum number of children from this given node type (if not given or\r\n         * -1 is set, then there will be no minimum rule according this child type)\r\n         * @param {integer} [max] - the allowed maximum number of children from this given node type (if not given or\r\n         * -1 is set, then there will be no minimum rule according this child type)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setChildMeta = function (node, child, min, max) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(child, 'child');\r\n            ensureMinMax(min, 'min');\r\n            ensureMinMax(max, 'max');\r\n\r\n            core.setChildMeta(node, child, min, max);\r\n        };\r\n\r\n        /**\r\n         * Removes the given child rule from the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the absolute path of the child which rule is to be removed from the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delChildMeta = function (node, path) {\r\n            ensureNode(node, 'node');\r\n            ensurePath(path, 'path');\r\n\r\n            core.delChildMeta(node, path);\r\n        };\r\n\r\n        /**\r\n         * Sets the global containment limits for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\r\n         * -1 is set, then there will be no minimum rule according children)\r\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\r\n         * -1 is set, then there will be no maximum rule according children)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setChildrenMetaLimits = function (node, min, max) {\r\n            ensureNode(node, 'node');\r\n            ensureMinMax(min, 'min');\r\n            ensureMinMax(max, 'max');\r\n\r\n            core.setChildrenMetaLimits(node, min, max);\r\n        };\r\n\r\n        /**\r\n         * Sets the given target as a valid target type for the pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {module:Core~Node} target - the valid target/member node.\r\n         * @param {integer} [min] - the allowed minimum number of target/member from this given node type (if not\r\n         * given or -1 is set, then there will be no minimum rule according this target type)\r\n         * @param {integer} [max] - the allowed maximum number of target/member from this given node type (if not\r\n         * given or -1 is set, then there will be no minimum rule according this target type)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setPointerMetaTarget = function (node, name, target, min, max) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            ensureNode(target, 'target');\r\n            ensureMinMax(min, 'min');\r\n            ensureMinMax(max, 'max');\r\n\r\n            core.setPointerMetaTarget(node, name, target, min, max);\r\n        };\r\n\r\n        /**\r\n         * Removes a possible target type from the pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set\r\n         * @param {string} path - the absolute path of the possible target type.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If node is read-only, or definition does not exist.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delPointerMetaTarget = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getValidPointerNames(node).concat(core.getValidSetNames(node));\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access definition of unknown pointer.');\r\n            }\r\n\r\n            core.delPointerMetaTarget(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Sets the global target limits for pointer/set of the node. On META level the only distinction between\r\n         * pointer and sets is the global multiplicity which has to maximize the number of possible targets to 1 in\r\n         * case of 'pure' pointer definitions.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\r\n         * -1 is set, then there will be no minimum rule according targets)\r\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\r\n         * -1 is set, then there will be no maximum rule according targets)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setPointerMetaLimits = function (node, name, min, max) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n            ensureMinMax(min, 'min');\r\n            ensureMinMax(max, 'max');\r\n\r\n            core.setPointerMetaLimits(node, name, min, max);\r\n        };\r\n\r\n        /**\r\n         * Removes the complete META rule regarding the given pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delPointerMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            core.delPointerMeta(node, name);\r\n        };\r\n\r\n        /**\r\n         * Return a JSON representation of the META rules regarding the given pointer/set of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         *\r\n         * @return {module:Core~RelationRule|undefined} The function returns a detailed JSON structure that\r\n         * represents the META rules regarding the given pointer/set of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * pointer\r\n         * {\r\n         *   '/a': { max: 1, min: -1 },\r\n         *   max: 1,\r\n         *   min: 1\r\n         * }\r\n         * @example\r\n         * set\r\n         * {\r\n         *   '/G': { max: -1, min: -1},\r\n         *   '/i': { max: -1, min: -1},\r\n         *   max: -1\r\n         *   min: -1\r\n         * }\r\n         */\r\n        this.getPointerMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getPointerMeta(node, name);\r\n        };\r\n\r\n        /**\r\n         * Sets a valid type for the given aspect of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {module:Core~Node} target - the valid type for the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.setAspectMetaTarget = function (node, name, target) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n            ensureMongoCompatibleKey(name, 'name', false);\r\n            ensureNode(target, 'target');\r\n\r\n            core.setAspectMetaTarget(node, name, target);\r\n        };\r\n\r\n        /**\r\n         * Removes a valid type from the given aspect of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string} path - the absolute path of the valid type of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delAspectMetaTarget = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getValidAspectNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot change definition of unknown aspect.');\r\n            }\r\n\r\n            core.delAspectMetaTarget(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Removes the given aspect rule of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delAspectMeta = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            core.delAspectMeta(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r\n         * (Aliased getBaseType).\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the first node (including itself) among the inheritance chain\r\n         * that is a META node. It returns null if it does not find such node (ideally the only node with this result\r\n         * is the ROOT).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If node is not a Node\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMetaType = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getBaseType(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r\n         * (Aliased getMetaType).\r\n         * @function\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the first node (including itself) among the inheritance chain\r\n         * that is a META node. It returns null if it does not find such node (ideally the only node with this result\r\n         * is the ROOT).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If node is not a Node\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getBaseType = this.getMetaType;\r\n\r\n        /**\r\n         * Checks if the node is an instance of base.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|string} baseNodeOrPath - a potential base node (or its path) of the node\r\n         *\r\n         * @return {bool} Returns true if the base is on the inheritance chain of node.\r\n         * A node is considered to be an instance of itself here.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isInstanceOf = function (node, baseNodeOrPath) {\r\n            var noPath;\r\n            ensureNode(node, 'node');\r\n            if (typeof baseNodeOrPath === 'string') {\r\n                noPath = ensurePath(baseNodeOrPath, 'baseNodeOrPath', true);\r\n                if (noPath) {\r\n                    return core.isInstanceOfDeprecated(node, baseNodeOrPath);\r\n                }\r\n            } else {\r\n                ensureNode(baseNodeOrPath, 'baseNodeOrPath');\r\n            }\r\n\r\n            return core.isInstanceOf(node, baseNodeOrPath);\r\n        };\r\n\r\n        /**\r\n         * Generates a differential tree among the two states of the project that contains the necessary changes\r\n         * that can modify the source to be identical to the target. The result is in form of a json object.\r\n         * @param {module:Core~Node} sourceRoot - the root node of the source state.\r\n         * @param {module:Core~Node} targetRoot - the root node of the target state.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the exectuion.\r\n         * @param {object} callback.treeDiff - the difference between the two containment hierarchies in\r\n         * a special JSON object\r\n         *\r\n         * @return {external:Promise} if the callback is not defined, the result is provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.generateTreeDiff = function (sourceRoot, targetRoot, callback) {\r\n            var error;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(sourceRoot, 'sourceRoot', true);\r\n            error = error || ensureNode(targetRoot, 'targetRoot', true);\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.generateTreeDiff(sourceRoot, targetRoot, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Apply changes to the current project.\r\n         * @param {module:Core~Node} node - the root of the containment hierarchy where we wish to apply the changes\r\n         * @param {object} patch - the tree structured collection of changes represented with a special JSON object\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.applyTreeDiff = function (node, patch, callback) {\r\n            var error;\r\n\r\n            ensureType(callback, 'callback', 'function');\r\n            error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(patch, 'patch', 'object', true);\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.applyTreeDiff(node, patch, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Tries to merge two patch object. The patches ideally represents changes made by two parties. They represents\r\n         * changes from the same source ending in different states. Our aim is to generate a single patch that could\r\n         * cover the changes of both party.\r\n         * @param {object} mine - the tree structured JSON patch that represents my changes.\r\n         * @param {object} theirs - the tree structured JSON patch that represents the changes of the other party.\r\n         *\r\n         * @return {object} The function returns with an object that contains the conflicts (if any) and the merged\r\n         * patch.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.tryToConcatChanges = function (mine, theirs) {\r\n            ensureType(mine, 'mine', 'object');\r\n            ensureType(theirs, 'theirs', 'object');\r\n\r\n            return core.tryToConcatChanges(mine, theirs);\r\n        };\r\n\r\n        /**\r\n         * When our attempt to merge two patches ended in some conflict, then we can modify that result highlighting\r\n         * that in case of every conflict, which side we prefer (mine vs. theirs). If we give that object as an input\r\n         * to this function, it will finish the merge resolving the conflict according our settings and present a final\r\n         * patch.\r\n         * @param {object} conflict - the object that represents our settings for every conflict and the so-far-merged\r\n         * patch.\r\n         *\r\n         * @return {object} The function results in a tree structured patch object that contains the changesthat cover\r\n         * both parties modifications (and the conflicts are resolved according the input settings).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.applyResolution = function (conflict) {\r\n            ensureType(conflict, 'conflict', 'object');\r\n\r\n            return core.applyResolution(conflict);\r\n        };\r\n\r\n        /**\r\n         * Checks if the node is abstract.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} The function returns true if the registry entry 'isAbstract' of the node if true hence\r\n         * the node is abstract.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isAbstract = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isAbstract(node);\r\n        };\r\n\r\n        /**\r\n         * Check is the node is a connection-like node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if both the 'src' and 'dst' pointer are defined as valid for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isConnection = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isConnection(node);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the valid META nodes that can be base of a child of the node.\r\n         * @param {object} parameters - the input parameters of the query.\r\n         * @param {module:Core~Node} parameters.node - the node in question.\r\n         * @param {bool} [parameters.sensitive=false] - if true, the query filters out the abstract and connection-like\r\n         * nodes.\r\n         * @param {bool} [parameters.multiplicity=false] - if true, the query tries to filter out even more\r\n         * nodes according to the multiplicity rules.\r\n         * @param {module:Core~Node[]} [parameters.children=[]] - the current children of the node in question\r\n         * (must be passed if multiplicity=true)\r\n         * @param {string|null} [parameters.aspect=undefined] - if given, the query filters to contain only types that\r\n         * are visible in the given aspect.\r\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\r\n         * child of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidChildrenMetaNodes = function (parameters) {\r\n            ensureType(parameters, 'parameters', 'object');\r\n            ensureNode(parameters.node, 'parameters.node');\r\n            if (Object.hasOwn(parameters, 'children') && parameters.children !== undefined) {\r\n                ensureInstanceOf(parameters.children, 'parameters.children', Array);\r\n                for (var i = 0; i < parameters.children.length; i += 1) {\r\n                    ensureNode(parameters.children[i], 'parameters.children[i]');\r\n                }\r\n            }\r\n            if (Object.hasOwn(parameters, 'sensitive') && parameters.sensitive !== undefined) {\r\n                ensureType(parameters.sensitive, 'parameters.sensitive', 'boolean');\r\n            }\r\n            if (Object.hasOwn(parameters, 'multiplicity')) {\r\n                ensureType(parameters.multiplicity, 'parameters.multiplicity', 'boolean');\r\n            }\r\n            if (Object.hasOwn(parameters, 'aspect') && parameters.aspect !== undefined && parameters.aspect !== null) {\r\n                ensureType(parameters.aspect, 'parameters.aspect', 'string');\r\n            }\r\n\r\n            return core.getValidChildrenMetaNodes(parameters);\r\n        };\r\n\r\n        /**\r\n         * Retrieves the valid META nodes that can be base of a member of the set of the node.\r\n         * @param {object} parameters - the input parameters of the query.\r\n         * @param {module:Core~Node} parameters.node - the node in question.\r\n         * @param {string} parameters.name - the name of the set.\r\n         * @param {bool} [parameters.sensitive=false] - if true, the query filters out the abstract and connection-like\r\n         * nodes.\r\n         * @param {bool} [parameters.multiplicity=false] - if true, the query tries to filter out even more nodes\r\n         * according to the multiplicity rules (the check is only meaningful if all the members were passed)\r\n         * @param {module:Core~Node[]} [parameters.members=[]] - the current members of the set of the node in question.\r\n         *\r\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\r\n         * member of the set of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidSetElementsMetaNodes = function (parameters) {\r\n            ensureType(parameters, 'parameters', 'object');\r\n            ensureNode(parameters.node, 'parameters.node');\r\n            ensureType(parameters.name, 'parameters.name', 'string');\r\n            if (Object.hasOwn(parameters, 'members')) {\r\n                ensureInstanceOf(parameters.members, 'parameters.members', Array);\r\n                for (var i = 0; i < parameters.members.length; i += 1) {\r\n                    ensureNode(parameters.members[i], 'parameters.members[i]');\r\n                }\r\n            }\r\n            if (Object.hasOwn(parameters, 'sensitive')) {\r\n                ensureType(parameters.sensitive, 'parameters.sensitive', 'boolean');\r\n            }\r\n            if (Object.hasOwn(parameters, 'multiplicity')) {\r\n                ensureType(parameters.multiplicity, 'parameters.multiplicity', 'boolean');\r\n            }\r\n\r\n            return core.getValidSetElementsMetaNodes(parameters);\r\n        };\r\n\r\n        /**\r\n         * Returns all META nodes.\r\n         * @param {module:Core~Node} node - any node of the containment hierarchy.\r\n         *\r\n         * @return {Object<string, module:Core~Node>} The function returns a dictionary. The keys of the dictionary\r\n         * are the absolute paths of the META nodes of the project. Every value of the dictionary\r\n         * is a {@link module:Core~Node}.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAllMetaNodes = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getAllMetaNodes(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the node is a META node.\r\n         * @param {module:Core~Node} node - the node to test.\r\n         *\r\n         * @return {bool} Returns true if the node is a member of the METAAspectSet of the ROOT node hence can be\r\n         * seen as a META node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isMetaNode = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isMetaNode(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the member is completely overridden in the set of the node.\r\n         * @param {module:Core~Node} node - the node to test.\r\n         * @param {string} name - the name of the set of the node.\r\n         * @param {string} path - the path of the member in question.\r\n         *\r\n         * @return {bool} Returns true if the member exists in the base of the set, but was\r\n         * added to the given set as well, which means a complete override. If the set does not exist\r\n         * or the member do not have a 'base' member or just some property was overridden, the function returns\r\n         * false.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isFullyOverriddenMember = function (node, name, path) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensurePath(path, 'path');\r\n            var names = core.getSetNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot access member information of unknown set.');\r\n            }\r\n\r\n            return core.isFullyOverriddenMember(node, name, path);\r\n        };\r\n\r\n        /**\r\n         * Checks if the mixins allocated with the node can be used.\r\n         * Every mixin node should be on the Meta.\r\n         * Every rule (attribute/pointer/set/aspect/containment/constraint) should be defined only in one mixin.\r\n         *\r\n         * @param {module:Core~Node} node - the node to test.\r\n         *\r\n         * @return {module:Core~MixinViolation[]} Returns the array of violations. If the array is empty,\r\n         * there is no violation.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMixinErrors = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getMixinErrors(node);\r\n        };\r\n\r\n        /**\r\n         * Gathers the paths of the mixin nodes defined directly at the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The paths of the mixins in an array ordered by their order of use (which is important\r\n         * in case of some collision among definitions would arise).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMixinPaths = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getMixinPaths(node);\r\n        };\r\n\r\n        /**\r\n         * Gathers the mixin nodes defined directly at the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {Object<string, module:Core~Node>} The dictionary of the mixin nodes keyed by their paths.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getMixinNodes = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getMixinNodes(node);\r\n        };\r\n\r\n        /**\r\n         * Removes a mixin from the mixin set of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.delMixin = function (node, path) {\r\n            ensureNode(node, 'node');\r\n            ensurePath(path, 'path');\r\n\r\n            return core.delMixin(node, path);\r\n        };\r\n\r\n        /**\r\n         * Adds a mixin to the mixin set of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.addMixin = function (node, path) {\r\n            ensureNode(node, 'node');\r\n            ensurePath(path, 'path');\r\n\r\n            return core.addMixin(node, path);\r\n        };\r\n\r\n        /**\r\n         * Removes all mixins for a given node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.clearMixins = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.clearMixins(node);\r\n        };\r\n\r\n        /**\r\n         * Searches for the closest META node of the node in question and the direct mixins of that node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node[]} Returns the closest Meta node that is a base of the given node\r\n         * plus it returns all the mixin nodes associated with the base.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getBaseTypes = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getBaseTypes(node);\r\n        };\r\n\r\n        /**\r\n         * Checks if the given path can be added as a mixin to the given node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         * @return {object} Returns an object with isOk set to true if the given path can be added as a\r\n         * mixin to the given node. If it cannot, the reason will be reported under reason.\r\n         *\r\n         * @example\r\n         * result = core.canSetAsMixin(node, core.getPath(aValidMixinNode));\r\n         * // result = { isOk: true, reason: '' }\r\n         * result = core.canSetAsMixin(node, core.getPath(node));\r\n         * // result = { isOk: false, reason: 'Node cannot be mixin of itself!' }\r\n         * result = core.canSetAsMixin(node, core.getPath(nonMetaNode));\r\n         * // result = { isOk: false, reason: 'Mixin must be on the Meta!!' }\r\n         * result = core.canSetAsMixin(node, core.getPath(FCO));\r\n         * // result = { isOk: false, reason: 'Base of node cannot be its mixin as well!' }\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.canSetAsMixin = function (node, path) {\r\n            ensureNode(node, 'node');\r\n            ensurePath(path, 'path');\r\n\r\n            return core.canSetAsMixin(node, path);\r\n        };\r\n\r\n        //library function TODO checking everything and adding all new functions\r\n\r\n        /**\r\n         * It adds a project as library to your project by copying it over. The library will be a node\r\n         * with the given name directly under your project's ROOT. It becomes a read-only portion of your project.\r\n         * You will only be able to manipulate it with library functions, but cannot edit the individual nodes inside.\r\n         * However you will be able to instantiate or copy the nodes into other places of your project. Every node\r\n         * that was part of the META in the originating project becomes part of your project's meta.\r\n         * @param {module:Core~Node} node - any regular node in your project.\r\n         * @param {string} name - the name of the library you wish to use as a namespace in your project.\r\n         * @param {string} libraryRootHash - the hash of your library's root\r\n         * (must exist in the project's collection at the time of call).\r\n         * @param {object} [libraryInfo] - information about your project.\r\n         * @param {string} [libraryInfo.projectId] - the projectId of your library.\r\n         * @param {string} [libraryInfo.branchName] - the branch that your library follows in the origin project.\r\n         * @param {string} [libraryInfo.commitHash] - the version of your library.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result is provided in a promise like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.addLibrary = function (node, name, libraryRootHash, libraryInfo, callback) {\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(name, 'name', 'string', true);\r\n            error = error || ensureHash(libraryRootHash, 'libraryRootHash', true);\r\n            if (libraryInfo) {\r\n                error = error || ensureType(libraryInfo, 'libraryInfo', 'object', true);\r\n                if (Object.hasOwn(libraryInfo, 'projectId') && libraryInfo.projectId !== undefined) {\r\n                    error = error || ensureType(libraryInfo.projectId, 'libraryInfo.projectId', 'string', true);\r\n                }\r\n                if (Object.hasOwn(libraryInfo, 'branchName') && libraryInfo.branchName !== undefined) {\r\n                    error = error || ensureType(libraryInfo.branchName, 'libraryInfo.branchName', 'string', true);\r\n                }\r\n                if (Object.hasOwn(libraryInfo, 'commitHash') && libraryInfo.commitHash !== undefined) {\r\n                    error = error || ensureHash(libraryInfo.commitHash, 'libraryInfo.commitHash', true);\r\n                }\r\n            }\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.addLibrary(node, name, libraryRootHash, libraryInfo, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * It updates a library in your project based on the input information. It will 'replace' the old\r\n         * version, keeping as much information as possible regarding the instances.\r\n         * @param {module:Core~Node} node - any regular node in your project.\r\n         * @param {string} name - the name of the library you want to update.\r\n         * @param {string} libraryRootHash - the hash of your library's new root\r\n         * (must exist in the project's collection at the time of call).\r\n         * @param {object} [libraryInfo] - information about your project.\r\n         * @param {string} [libraryInfo.projectId] - the projectId of your library.\r\n         * @param {string} [libraryInfo.branchName] - the branch that your library follows in the origin project.\r\n         * @param {string} [libraryInfo.commitHash] - the version of your library.\r\n         * @param updateInstructions - not yet used parameter.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * status of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result is presented in a promise like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.updateLibrary = function (node, name, libraryRootHash, libraryInfo, updateInstructions, callback) {\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(node, 'node', true);\r\n            error = error || ensureType(name, 'name', 'string', true);\r\n            error = error || ensureHash(libraryRootHash, 'libraryRootHash', true);\r\n            if (libraryInfo) {\r\n                error = error || ensureType(libraryInfo, 'libraryInfo', 'object', true);\r\n                if (Object.hasOwn(libraryInfo, 'projectId') && libraryInfo.projectId !== undefined) {\r\n                    error = error || ensureType(libraryInfo.projectId, 'libraryInfo.projectId', 'string', true);\r\n                }\r\n                if (Object.hasOwn(libraryInfo, 'branchName') && libraryInfo.branchName !== undefined) {\r\n                    error = error || ensureType(libraryInfo.branchName, 'libraryInfo.branchName', 'string', true);\r\n                }\r\n                if (Object.hasOwn(libraryInfo, 'commitHash') && libraryInfo.commitHash !== undefined) {\r\n                    error = error || ensureHash(libraryInfo.commitHash, 'libraryInfo.commitHash', true);\r\n                }\r\n            }\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.updateLibrary(node, name, libraryRootHash, libraryInfo, callback);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Gives back the list of libraries in your project.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         *\r\n         * @return {string[]} Returns the fully qualified names of all the libraries in your project\r\n         * (even embedded ones).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getLibraryNames = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getLibraryNames(node);\r\n        };\r\n\r\n        /**\r\n         * Return the root of the inheritance chain of your Meta nodes.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         *\r\n         * @return {module:Core~Node} Returns the acting FCO of your project.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getFCO = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getFCO(node);\r\n        };\r\n\r\n        /**\r\n         * Returns true if the node in question is a library root..\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if your node is a library root (even if it is embedded in other library),\r\n         * false otherwise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isLibraryRoot = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isLibraryRoot(node);\r\n        };\r\n\r\n        /**\r\n         * Returns true if the node in question is a library element..\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if your node is a library element, false otherwise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isLibraryElement = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.isLibraryElement(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the resolved namespace for the node. If node is not in a library it returns the\r\n         * empty string. If the node is in a library of a library -\r\n         * the full name space is the library names joined together by dots.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns the name space of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example NS1.NS2\r\n         */\r\n        this.getNamespace = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getNamespace(node);\r\n        };\r\n\r\n        /**\r\n         * Returns the fully qualified name of the node, which is the list of its namespaces separated\r\n         * by dot and followed by the name of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns the fully qualified name of the node,\r\n         * i.e. its namespaces and name join together by dots.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example NS1.NS2.name\r\n         */\r\n        this.getFullyQualifiedName = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getFullyQualifiedName(node);\r\n        };\r\n\r\n        /**\r\n         * Removes a library from your project. It will also remove any remaining instances of the specific library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         * @param {string} name - the name of your library.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.removeLibrary = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            var names = core.getLibraryNames(node);\r\n            if (names.indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot remove unknown library');\r\n            }\r\n\r\n            return core.removeLibrary(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the origin GUID of any library node. (If name is not provided the returned GUID will be the same\r\n         * across all projects where the library node is contained - regardless of library hierarchy.)\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {undefined|string} [name] - name of the library where we want to compute the GUID from.\r\n         * If not given, then the GUID is computed from the direct library root of the node.\r\n         *\r\n         * @return {module:Core~GUID} Returns the origin GUID of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getLibraryGuid = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            if (name !== undefined && name !== null) {\r\n                ensureType(name, 'name', 'string');\r\n            }\r\n\r\n            return core.getLibraryGuid(node, name);\r\n        };\r\n\r\n        /**\r\n         * Rename a library in your project.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         * @param {string} oldName - the current name of the library.\r\n         * @param {string} newName - the new name of the project.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renameLibrary = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n\r\n            core.renameLibrary(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Returns the info associated with the library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in the project.\r\n         * @param {string} name - the name of the library.\r\n         *\r\n         * @return {object} Returns the information object, stored alongside the library (that basically\r\n         * carries metaData about the library).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getLibraryInfo = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.copyIfObject(core.getLibraryInfo(node, name));\r\n        };\r\n\r\n        /**\r\n         * Returns the root node of the given library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in the project.\r\n         * @param {string} name - the name of the library.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the library root node or null, if the library is unknown.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getLibraryRoot = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.getLibraryRoot(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns all the Meta nodes within the given library.\r\n         * By default it will include nodes defined in any library within the given library.\r\n         *\r\n         * @param {module:Core~Node} node - any node of your project.\r\n         * @param {string} name - name of your library.\r\n         * @param {bool} [onlyOwn=false] - if true only returns with Meta nodes defined in the library itself.\r\n         *\r\n         * @return {module:Core~Node[]} Returns an array of core nodes that are part of your meta from\r\n         * the given library.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getLibraryMetaNodes = function (node, name, onlyOwn) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            if (onlyOwn !== null && onlyOwn !== undefined) {\r\n                ensureType(onlyOwn, 'onlyOwn', 'boolean');\r\n            }\r\n\r\n            return core.getLibraryMetaNodes(node, name, onlyOwn);\r\n        };\r\n\r\n        /**\r\n         * The function traverses the sub-tree of the project starting with the given root and calls the\r\n         * visit function for every node.\r\n         *\r\n         * @param {module:Core~Node} root - the root node of the sub-tree that needs to be traversed.\r\n         * @param {object} options - parameters to control the traversing.\r\n         * @param {bool} [options.excludeRoot=false] - controls whether the root should be excluded from visit.\r\n         * @param {'BFS'|'DFS'} [options.order='BFS'] - controls if the traversal order should be breadth first\r\n         * or depth first.\r\n         * @param {integer} [options.maxParallelLoad=100]- the maximum number of parallel loads allowed.\r\n         * @param {bool} [options.stopOnError=true]- controls if the traverse should stop in case of error.\r\n         * @param {function} visitFn - the visitation function that will be called for\r\n         * every node in the sub-tree, the second parameter of the function is a callback that should be called to\r\n         * note to the traversal function that the visitation for a given node finished.\r\n         * @param {module:Core~Node} visitFn.node - the node that is being visited.\r\n         * @param {function} visitFn.next - the callback function of the visit function that marks the end\r\n         * of visitation.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the end of traverse is marked in a promise like\r\n         * manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.traverse = function (root, options, visitFn, callback) {\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(root, 'root', true);\r\n            if (options) {\r\n                error = error || ensureType(options, 'options', 'object');\r\n                if (Object.hasOwn(options, 'excludeRoot')) {\r\n                    error = error || ensureType(options.excludeRoot, 'options.excludeRoot', 'boolean', true);\r\n                }\r\n                if (Object.hasOwn(options, 'order')) {\r\n                    error = error || ensureType(options.order, 'options.order', 'string', true);\r\n                    if (options.order !== 'BFS' && options.order !== 'DFS') {\r\n                        error = error ||\r\n                            new CoreIllegalArgumentError('Parameter options.order must be either \\'BFS\\' or \\'DFS\\'.');\r\n                    }\r\n                }\r\n                if (Object.hasOwn(options, 'stopOnError')) {\r\n                    error = error || ensureType(options.stopOnError, 'options.stopOnError', 'boolean', true);\r\n                }\r\n            }\r\n            error = error || ensureType(visitFn, 'visitFn', 'function');\r\n\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.traverse(root, options, visitFn, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Collects the necessary information to export the set of input nodes and use it in other\r\n         * - compatible - projects.\r\n         * @private\r\n         *\r\n         * @param {module:Core~Node[]} nodes - the set of nodes that we want to export\r\n         *\r\n         * @return {object} If the closure is available for export, the returned special JSON object\r\n         * will contain information about the necessary data that needs to be exported as well as relations\r\n         * that will need to be recreated in the destination project to preserve the structure of nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getClosureInformation = function (nodes) {\r\n            ensureInstanceOf(nodes, 'nodes', Array);\r\n            for (var i = 0; i < nodes.length; i += 1) {\r\n                ensureNode(nodes[i], 'nodes[i]');\r\n            }\r\n\r\n            return core.getClosureInformation(nodes);\r\n        };\r\n\r\n        /**\r\n         * Imports the set of nodes in the closureInformation - that has the format created by\r\n         * [getClosureInformation]{@link Core#getClosureInformation} - as direct children of the parent node.\r\n         * All data necessary for importing the closure has to be imported beforehand!\r\n         * @private\r\n         *\r\n         * @param {module:Core~Node} node - the parent node where the closure will be imported.\r\n         * @param {object} closureInformation - the information about the closure.\r\n         *\r\n         * @return {object} If the closure cannot be imported the resulting error highlights the causes,\r\n         * otherwise a specific object will be returned that holds information about the closure.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.importClosure = function (node, closureInformation) {\r\n            ensureNode(node, 'node');\r\n            ensureType(closureInformation, 'closureInformation', 'object');\r\n\r\n            return core.importClosure(node, closureInformation);\r\n        };\r\n\r\n        /**\r\n         * Collects the paths of all the instances of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the instances.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getInstancePaths = function (node) {\r\n            ensureNode(node, 'node');\r\n\r\n            return core.getInstancePaths(node);\r\n        };\r\n\r\n        /**\r\n         * Loads all the instances of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found instances of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadInstances = function (node, callback) {\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(node, 'node', true);\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadInstances(node, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads all the members of the given set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} setName - the name of the set in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found members of the set of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadMembers = function (node, setName, callback) {\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(node, 'node', true);\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadMembers(node, setName, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Loads all the own members of the given set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} setName - the name of the set in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found own members of the set of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */\r\n        this.loadOwnMembers = function (node, setName, callback) {\r\n            ensureType(setName, 'setName', 'string');\r\n            ensureType(callback, 'callback', 'function');\r\n            var error = ensureNode(node, 'node', true);\r\n            if (error) {\r\n                callback(error);\r\n            } else {\r\n                core.loadOwnMembers(node, setName, callback);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Renames the given pointer of the node if its target is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the pointer in question.\r\n         * @param {string} newName - the new name of the pointer.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renamePointer = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnPointerPath(node, oldName) === undefined) {\r\n                throw new CoreIllegalOperationError('Only pointers with values can be renamed.');\r\n            }\r\n\r\n            core.renamePointer(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Renames the given attribute of the node if its value is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the attribute in question.\r\n         * @param {string} newName - the new name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renameAttribute = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnAttribute(node, oldName) === undefined) {\r\n                throw new CoreIllegalOperationError('Only attributes with own values can be renamed.');\r\n            }\r\n\r\n            core.renameAttribute(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Renames the given registry of the node if its value is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the registry in question.\r\n         * @param {string} newName - the new name of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renameRegistry = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnRegistry(node, oldName) === undefined) {\r\n                throw new CoreIllegalOperationError('Only registry entries with own values can be renamed.');\r\n            }\r\n\r\n            core.renameRegistry(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Renames the given set of the node if its is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the set in question.\r\n         * @param {string} newName - the new name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renameSet = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnSetNames(node).indexOf(oldName) === -1) {\r\n                throw new CoreIllegalOperationError('Cannot rename nonexistent/inherited set [' + oldName + ']');\r\n            }\r\n\r\n            core.renameSet(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta node that introduces the given attribute.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute in question.\r\n         *\r\n         * @return {module:Core~Node} The meta-node that defines the attribute and makes it valid attribute for the\r\n         * given node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAttributeDefinitionOwner = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            if (core.getValidAttributeNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid attribute name [' + name + '] of the node.');\r\n            }\r\n\r\n            return core.getAttributeDefinitionOwner(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta nodes that introduce the given pointer relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         * @param {module:Core~Node} target - the target node.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the pointer meta-rule that makes target a\r\n         * valid target of the named pointer of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getPointerDefinitionInfo = function (node, name, target) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureNode(target, 'target');\r\n\r\n            if (core.getValidPointerNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not valid pointer name [' + name + '] of the node.');\r\n            }\r\n\r\n            if (core.isValidTargetOf(target, node, name) !== true) {\r\n                throw new CoreIllegalOperationError('Not a valid target node of [' + name + '] pointer.');\r\n            }\r\n\r\n            return core.getPointerDefinitionInfo(node, name, target);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta nodes that introduce the given set relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         * @param {module:Core~Node} member - the member.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the set meta-rule that makes member a\r\n         * valid member of the named set of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getSetDefinitionInfo = function (node, name, member) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureNode(member, 'member');\r\n\r\n            if (core.getValidSetNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not valid set name [' + name + '] of the node.');\r\n            }\r\n\r\n            if (core.isValidTargetOf(member, node, name) !== true) {\r\n                throw new CoreIllegalOperationError('Not a valid member of [' + name + '] set.');\r\n            }\r\n\r\n            return core.getSetDefinitionInfo(node, name, member);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta nodes that introduce the given containment relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} child - the child.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the containment meta-rule that makes child a\r\n         * valid child of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getChildDefinitionInfo = function (node, child) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(child, 'child');\r\n\r\n            if (core.isValidChildOf(child, node) !== true) {\r\n                throw new CoreIllegalOperationError('Not a valid child.');\r\n            }\r\n\r\n            return core.getChildDefinitionInfo(node, child);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta nodes that introduce the given aspect relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         * @param {module:Core~Node} member - the child.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the aspect meta-rule that makes member a\r\n         * valid member of the named aspect of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAspectDefinitionInfo = function (node, name, member) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n            ensureNode(member, 'member');\r\n\r\n            if (core.getValidAspectNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not valid aspect name [' + name + '] of the node.');\r\n            }\r\n\r\n            if (core.isValidAspectMemberOf(member, node, name) !== true) {\r\n                throw new CoreIllegalOperationError('Not a valid member of [' + name + '] aspect.');\r\n            }\r\n\r\n            return core.getAspectDefinitionInfo(node, name, member);\r\n        };\r\n\r\n        /**\r\n         * Returns the paths of the meta nodes that are valid target members of the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspec in question.\r\n         *\r\n         * @return {string[]} The paths of the meta nodes whose instances could be members of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidAspectTargetPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            if (core.getValidAspectNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid aspect [' + name + '] of the node.');\r\n            }\r\n\r\n            return core.getValidAspectTargetPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the paths of the meta nodes that are valid target members of the given aspect\r\n         * specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspec in question.\r\n         *\r\n         * @return {string[]} The paths of the meta nodes whose instances could be members of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidAspectTargetPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            if (core.getValidAspectNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid aspect [' + name + '] of the node.');\r\n            }\r\n\r\n            return core.getOwnValidAspectTargetPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the meta node that introduces the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         *\r\n         * @return {module:Core~Node} The meta-node that defines the aspect and makes a valid aspect for the given node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getAspectDefinitionOwner = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            if (core.getValidAspectNames(node).indexOf(name) === -1) {\r\n                throw new CoreIllegalOperationError('Not valid aspect name [' + name + '] of the node.');\r\n            }\r\n\r\n            return core.getAspectDefinitionOwner(node, name);\r\n        };\r\n\r\n        /**\r\n         * Moves an own member of the set over to another set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} memberPath - the path of the memberNode that should be moved.\r\n         * @param {string} oldSetName - the name of the set where the member is currently reside.\r\n         * @param {string} newSetName - the name of the target set where the member should be moved to.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.moveMember = function (node, memberPath, oldSetName, newSetName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(memberPath, 'memberPath', 'string');\r\n            ensurePath(memberPath, 'memberPath');\r\n            ensureType(oldSetName, 'oldSetName', 'string');\r\n            ensureType(newSetName, 'newSetName', 'string');\r\n            ensureMongoCompatibleKey(newSetName, 'newSetName', true);\r\n\r\n            if (core.getSetNames(node).indexOf(oldSetName) === -1) {\r\n                throw new CoreIllegalOperationError('Source set [' + oldSetName + '] does not exists.');\r\n            }\r\n\r\n            if (core.getOwnMemberPaths(node, oldSetName).indexOf(memberPath) === -1) {\r\n                throw new CoreIllegalOperationError('Not own member of the set therefore cannot be moved.');\r\n            }\r\n\r\n            core.moveMember(node, memberPath, oldSetName, newSetName);\r\n        };\r\n\r\n        /**\r\n         * Renames the given attribute definition of the node. It also renames the default value of the definition!\r\n         * As a result of this operation, all instances of node will have the new attribute, but if they have\r\n         * overriden the old attribute it will remain under that name (and become meta invalid).\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the attribute definition in question.\r\n         * @param {string} newName - the new name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.renameAttributeMeta = function (node, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getValidAttributeNames(node).indexOf(oldName) === -1) {\r\n                throw new CoreIllegalOperationError('Unknown definition [' + oldName + '] cannot be renamed.');\r\n            }\r\n\r\n            core.renameAttributeMeta(node, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Moves the given target definition over to a new pointer or set.\r\n         * Note this does not alter the actual pointer target or set members.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} target - the target that should be moved among definitions.\r\n         * @param {string} oldName - the current name of the pointer/set definition in question.\r\n         * @param {string} newName - the new name of the relation towards the target.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.movePointerMetaTarget = function (node, target, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(target, 'target');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnValidPointerNames(node).indexOf(oldName) === -1 &&\r\n                core.getOwnValidSetNames(node).indexOf(oldName) === -1) {\r\n                throw new CoreIllegalOperationError('Definition [' + oldName + '] does not exists for the node.');\r\n            }\r\n\r\n            if (core.getOwnValidTargetPaths(node, oldName).indexOf(core.getPath(target)) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid target of [' + oldName + '] defined for the node.');\r\n            }\r\n\r\n            core.movePointerMetaTarget(node, target, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Moves the given target definition over to a new aspect. As actual values in case of\r\n         * relation definitions vary quite a bit from the meta-targets, this function does not deals with\r\n         * the actual pointer/set target/members.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} target - the target that should be moved among definitions.\r\n         * @param {string} oldName - the current name of the aspect that has the target.\r\n         * @param {string} newName - the new aspect name where the target should be moved over.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.moveAspectMetaTarget = function (node, target, oldName, newName) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(target, 'target');\r\n            ensureType(oldName, 'oldName', 'string');\r\n            ensureType(newName, 'newName', 'string');\r\n            ensureMongoCompatibleKey(newName, 'newName', true);\r\n\r\n            if (core.getOwnValidAspectNames(node).indexOf(oldName) === -1) {\r\n                throw new CoreIllegalOperationError('Aspect [' + oldName + '] doesn\\'t exists for the node.');\r\n            }\r\n\r\n            if (core.getOwnValidAspectTargetPaths(node, oldName).indexOf(core.getPath(target)) === -1) {\r\n                throw new CoreIllegalOperationError('Not a valid target of [' + oldName + '] defined for the node.');\r\n            }\r\n\r\n            core.moveAspectMetaTarget(node, target, oldName, newName);\r\n        };\r\n\r\n        /**\r\n         * Returns if a node could be contained in the given container's aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         * @param {string} name - the name of aspect.\r\n         *\r\n         * @return {bool} The function returns true if the given container could contain the node in the asked aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidAspectMemberOf = function (node, parent, name) {\r\n            ensureNode(node, 'node');\r\n            ensureNode(parent, 'parent');\r\n            ensureType(name, 'name', 'string');\r\n\r\n            return core.isValidAspectMemberOf(node, parent, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the paths of Meta nodes that are possible targets of the given pointer/set introduced by the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of pointer/set.\r\n         *\r\n         * @return {string[]} The function returns the paths of valid nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getOwnValidTargetPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n\r\n            return core.getOwnValidTargetPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Returns the paths of Meta nodes that are possible targets of the given pointer/set.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of pointer/set.\r\n         *\r\n         * @return {string[]} The function returns the paths of valid nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.getValidTargetPaths = function (node, name) {\r\n            ensureNode(node, 'node');\r\n            ensureRelationName(name, 'name');\r\n\r\n            return core.getValidTargetPaths(node, name);\r\n        };\r\n\r\n        /**\r\n         * Checks if an instance of the given base can be created under the parent. It does not check for\r\n         * meta consistency. It only validates if the proposed creation would cause any loops in the\r\n         * combined containment inheritance trees.\r\n         * @param {module:Core~Node|null} parentNode - the parent in question.\r\n         * @param {module:Core~Node|null} baseNode - the intended type of the node.\r\n         *\r\n         * @return {boolean} True if a child of the type can be created.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */\r\n        this.isValidNewChild = function (parentNode, baseNode) {\r\n            if (parentNode !== null) {\r\n                ensureNode(parentNode, 'parentNode');\r\n            }\r\n\r\n            if (baseNode !== null) {\r\n                ensureNode(baseNode, 'baseNode');\r\n            }\r\n\r\n            return core.isValidNewChild(parentNode, baseNode);\r\n        };\r\n\r\n        this.CONSTANTS = CONSTANTS;\r\n    }\r\n\r\n    return Core;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/core/coreQ',['common/core/core', 'q'], function (Core, Q) {\r\n\r\n    'use strict';\r\n    /**\r\n     * @param {object} storage\r\n     * @param {object} options - contains logging information\r\n     * @extends Core\r\n     * @constructor\r\n     */\r\n    function CoreQ(storage, options) {\r\n        var self = this;\r\n        Core.call(self, storage, options);\r\n\r\n        var loadChildOrg = this.loadChild;\r\n        this.loadChild = function (parent, relativeId, callback) {\r\n            var deferred = Q.defer();\r\n            loadChildOrg(parent, relativeId, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadRootOrg = this.loadRoot;\r\n        this.loadRoot = function (hash, callback) {\r\n            var deferred = Q.defer();\r\n            loadRootOrg(hash, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadByPathOrg = this.loadByPath;\r\n        this.loadByPath = function (startNode, relativeId, callback) {\r\n            var deferred = Q.defer();\r\n            loadByPathOrg(startNode, relativeId, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadChildrenOrg = this.loadChildren;\r\n        this.loadChildren = function (parent, callback) {\r\n            var deferred = Q.defer();\r\n            loadChildrenOrg(parent, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadOwnChildrenOrg = this.loadOwnChildren;\r\n        this.loadOwnChildren = function (parent, callback) {\r\n            var deferred = Q.defer();\r\n            loadOwnChildrenOrg(parent, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadPointerOrg = this.loadPointer;\r\n        this.loadPointer = function (source, pointerName, callback) {\r\n            var deferred = Q.defer();\r\n            loadPointerOrg(source, pointerName, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadCollectionOrg = this.loadCollection;\r\n        this.loadCollection = function (target, pointerName, callback) {\r\n            var deferred = Q.defer();\r\n            loadCollectionOrg(target, pointerName, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadSubTreeOrg = this.loadSubTree;\r\n        this.loadSubTree = function (node, callback) {\r\n            var deferred = Q.defer();\r\n            loadSubTreeOrg(node, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadOwnSubTreeOrg = this.loadOwnSubTree;\r\n        this.loadOwnSubTree = function (node, callback) {\r\n            var deferred = Q.defer();\r\n            loadOwnSubTreeOrg(node, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadTreeOrg = this.loadTree;\r\n        this.loadTree = function (rootHash, callback) {\r\n            var deferred = Q.defer();\r\n            loadTreeOrg(rootHash, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var applyTreeDiffOrg = this.applyTreeDiff;\r\n        this.applyTreeDiff = function (root, patch, callback) {\r\n            var deferred = Q.defer();\r\n            applyTreeDiffOrg(root, patch, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var generateTreeDiffOrg = this.generateTreeDiff;\r\n        this.generateTreeDiff = function (sourceRoot, targetRoot, callback) {\r\n            var deferred = Q.defer();\r\n            generateTreeDiffOrg(sourceRoot, targetRoot, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var setGuidOrg = this.setGuid;\r\n        this.setGuid = function (node, guid, callback) {\r\n            var deferred = Q.defer();\r\n            setGuidOrg(node, guid, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var addLibraryOrg = this.addLibrary;\r\n        this.addLibrary = function (node, name, libraryRootHash, libraryInfo, callback) {\r\n            var deferred = Q.defer();\r\n            addLibraryOrg(node, name, libraryRootHash, libraryInfo, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var updateLibraryOrg = this.updateLibrary;\r\n        this.updateLibrary = function (node, name, updatedLibraryRootHash, libraryInfo, updateInstructions, callback) {\r\n            var deferred = Q.defer();\r\n            updateLibraryOrg(node, name, updatedLibraryRootHash, libraryInfo, updateInstructions,\r\n                function (err, result) {\r\n                    if (err) {\r\n                        deferred.reject(err);\r\n                    } else {\r\n                        deferred.resolve(result);\r\n                    }\r\n                }\r\n            );\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var traverseOrg = this.traverse;\r\n        this.traverse = function (node, options, visitFn, callback) {\r\n            var deferred = Q.defer();\r\n            traverseOrg(node, options, visitFn, function (err, result) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                } else {\r\n                    deferred.resolve(result);\r\n                }\r\n            });\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadInstancesOrg = this.loadInstances;\r\n        this.loadInstances = function (node, callback) {\r\n            var deferred = Q.defer();\r\n            loadInstancesOrg(node, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadMembersOrg = this.loadMembers;\r\n        this.loadMembers = function (target, setName, callback) {\r\n            var deferred = Q.defer();\r\n            loadMembersOrg(target, setName, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        var loadOwnMembersOrg = this.loadOwnMembers;\r\n        this.loadOwnMembers = function (target, setName, callback) {\r\n            var deferred = Q.defer();\r\n            loadOwnMembersOrg(target, setName, function (err, res) {\r\n                if (err) {\r\n                    deferred.reject(err instanceof Error ? err : new Error(err));\r\n                } else {\r\n                    deferred.resolve(res);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n    }\r\n\r\n    CoreQ.prototype = Object.create(Core.prototype);\r\n    CoreQ.prototype.constructor = CoreQ;\r\n\r\n    return CoreQ;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/constants',[\r\n    'common/Constants'\r\n], function (CONSTANTS) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        STORAGE: CONSTANTS.STORAGE,\r\n        CORE: CONSTANTS.CORE,\r\n\r\n        BRANCH_STATUS: CONSTANTS.STORAGE.BRANCH_STATUS,\r\n\r\n        UNCAUGHT_EXCEPTION: 'UNCAUGHT_EXCEPTION',\r\n\r\n        // Events\r\n        NETWORK_STATUS_CHANGED: CONSTANTS.STORAGE.NETWORK_STATUS_CHANGED,\r\n        BRANCH_STATUS_CHANGED: 'BRANCH_STATUS_CHANGED',\r\n\r\n        BRANCH_CLOSED: 'BRANCH_CLOSED',\r\n        BRANCH_OPENED: 'BRANCH_OPENED',\r\n        PROJECT_CLOSED: 'PROJECT_CLOSED',\r\n        PROJECT_OPENED: 'PROJECT_OPENED',\r\n\r\n        BRANCH_CHANGED: 'BRANCH_CHANGED',\r\n\r\n        NEW_COMMIT_STATE: 'NEW_COMMIT_STATE',\r\n\r\n        UNDO_AVAILABLE: 'UNDO_AVAILABLE',\r\n        REDO_AVAILABLE: 'REDO_AVAILABLE',\r\n\r\n        // general notification event\r\n        NOTIFICATION: 'NOTIFICATION',\r\n        PLUGIN_NOTIFICATION: 'PLUGIN_NOTIFICATION',\r\n        CONNECTED_USERS_CHANGED: 'CONNECTED_USERS_CHANGED',\r\n        PLUGIN_INITIATED: 'PLUGIN_INITIATED',\r\n        PLUGIN_FINISHED: 'PLUGIN_FINISHED',\r\n\r\n        // Constraint Checking\r\n        META_RULES_RESULT: 'META_RULES_RESULT',\r\n        CONSTRAINT_RESULT: 'CONSTRAINT_RESULT'\r\n    };\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/core/users/metarules',['q', 'common/core/constants'], function (Q, CONSTANTS) {\r\n    'use strict';\r\n\r\n    // Helper functions.\r\n    function loadNode(core, rootNode, nodePath) {\r\n        return core.loadByPath(rootNode, nodePath)\r\n            .then(function (node) {\r\n                if (node === null) {\r\n                    throw new Error('Given nodePath does not exist \"' + nodePath + '\"!');\r\n                } else {\r\n                    return node;\r\n                }\r\n            });\r\n    }\r\n\r\n    function loadNodes(core, node, nodePaths) {\r\n        var i,\r\n            loadPromises = [],\r\n            rootNode = core.getRoot(node);\r\n\r\n        for (i = 0; i < nodePaths.length; i += 1) {\r\n            loadPromises.push(loadNode(core, rootNode, nodePaths[i]));\r\n        }\r\n\r\n        return Q.all(loadPromises);\r\n    }\r\n\r\n    function filterPointerRules(meta) {\r\n        var result = {\r\n                pointers: {},\r\n                sets: {}\r\n            },\r\n            pointerNames = Object.keys(meta.pointers),\r\n            i;\r\n\r\n        for (i = 0; i < pointerNames.length; i += 1) {\r\n            if (meta.pointers[pointerNames[i]].max === 1) {\r\n                // These are single target pointers (e.g. connections).\r\n                result.pointers[pointerNames[i]] = meta.pointers[pointerNames[i]];\r\n            } else {\r\n                // These are multi target pointer, i.e. sets.\r\n                result.sets[pointerNames[i]] = meta.pointers[pointerNames[i]];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getMatchedItemIndices(core, node, items) {\r\n        var i,\r\n            metaNodes = core.getAllMetaNodes(node),\r\n            indices = [];\r\n\r\n        for (i = 0; i < items.length; i += 1) {\r\n            if (core.isTypeOf(node, metaNodes[items[i]])) {\r\n                indices.push(i);\r\n            }\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    function metaNodePathToName(core, metaNodes, path) {\r\n        var name = 'Unknown';\r\n        if (metaNodes[path]) {\r\n            name = core.getAttribute(metaNodes[path], 'name');\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function checkNodeTypesAndCardinality(core, node, nodes, subMetaRules, checkTypeText, singular) {\r\n        var matches = [],\r\n            metaNodes = core.getAllMetaNodes(node),\r\n            result = {\r\n                hasViolation: false,\r\n                messages: []\r\n            },\r\n            i,\r\n            j,\r\n            matchedIndices;\r\n        /*\r\n         * example subMetaRules\r\n         *   {\r\n         *       items: [ '/1', '/822429792/942380411' ],\r\n         *       min: undefined,\r\n         *       max: undefined,\r\n         *       minItems: [ -1, -1 ],\r\n         *       maxItems: [ -1, 4 ]\r\n         *   }\r\n         */\r\n\r\n        // Initialize the number of matches for each valid type.\r\n        matches = subMetaRules.items.map(function () {\r\n            return 0;\r\n        });\r\n\r\n        // For each node\r\n        for (i = 0; i < nodes.length; i += 1) {\r\n\r\n            // check which types it matches and\r\n            matchedIndices = getMatchedItemIndices(core, nodes[i], subMetaRules.items);\r\n\r\n            if (matchedIndices.length === 0) {\r\n                result.hasViolation = true;\r\n                result.messages.push('Illegal node \"' + core.getAttribute(nodes[i], 'name') + '\" [' +\r\n                    core.getPath(nodes[i]) + '] ' + (singular ? 'as ' : 'among ') + checkTypeText + '.');\r\n            } else {\r\n                // increase the counter for each type it matches.\r\n                for (j = 0; j < matchedIndices.length; j += 1) {\r\n                    matches[matchedIndices[j]] += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < subMetaRules.items.length; i += 1) {\r\n            if (subMetaRules.minItems[i] > -1 && subMetaRules.minItems[i] > matches[i]) {\r\n                result.hasViolation = true;\r\n                result.messages.push('Fewer ' + checkTypeText + ' (' +\r\n                    metaNodePathToName(core, metaNodes, subMetaRules.items[i]) + ') than needed - there should be ' +\r\n                    subMetaRules.minItems[i] + ' but only ' + matches[i] + ' found.');\r\n            } else if (subMetaRules.maxItems[i] > -1 && subMetaRules.maxItems[i] < matches[i]) {\r\n                result.hasViolation = true;\r\n                result.messages.push('More ' + checkTypeText + '(' +\r\n                    metaNodePathToName(core, metaNodes, subMetaRules.items[i]) + ') than allowed - there can only be ' +\r\n                    subMetaRules.maxItems[i] + ' but ' + matches[i] + ' found.');\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Checker functions for pointers, sets, containment and attributes.\r\n    function checkPointerRules(meta, core, node, callback) {\r\n        var result = {\r\n                hasViolation: false,\r\n                messages: []\r\n            },\r\n            metaPointers = filterPointerRules(meta).pointers,\r\n            checkPromises = [],\r\n            pointerNames = core.getPointerNames(node);\r\n\r\n        checkPromises = pointerNames.map(function (pointerName) {\r\n            var metaPointer = metaPointers[pointerName],\r\n                pointerPath,\r\n                pointerPaths = [];\r\n\r\n            if (!metaPointer) {\r\n                if (pointerName === 'base') {\r\n                    return {hasViolation: false};\r\n                } else {\r\n                    return Q({\r\n                        hasViolation: true,\r\n                        messages: ['Illegal pointer \"' + pointerName + '\".']\r\n                    });\r\n                }\r\n            } else {\r\n                pointerPath = core.getPointerPath(node, pointerName);\r\n                if (pointerPath !== null) {\r\n                    pointerPaths.push(pointerPath);\r\n                }\r\n                return loadNodes(core, node, pointerPaths)\r\n                    .then(function (nodes) {\r\n                        return checkNodeTypesAndCardinality(core, node, nodes, metaPointer,\r\n                            '\"' + pointerName + '\" target', true);\r\n                    });\r\n            }\r\n        });\r\n\r\n        return Q.all(checkPromises)\r\n            .then(function (results) {\r\n                results.forEach(function (res) {\r\n                    if (res.hasViolation) {\r\n                        result.hasViolation = true;\r\n                        result.messages = result.messages.concat(res.messages);\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }).nodeify(callback);\r\n    }\r\n\r\n    function checkSetRules(meta, core, node, callback) {\r\n        var result = {\r\n                hasViolation: false,\r\n                messages: []\r\n            },\r\n            metaSets = filterPointerRules(meta).sets,\r\n            checkPromises = [],\r\n            setNames = core.getSetNames(node);\r\n\r\n        checkPromises = setNames.map(function (setName) {\r\n            var metaSet = metaSets[setName],\r\n                memberPaths;\r\n            if (!metaSet) {\r\n                if (core.getValidAspectNames(node).indexOf(setName) > -1) {\r\n\r\n                    // TODO: Should the Aspects be checked too?\r\n                    return Q({\r\n                        hasViolation: false\r\n                    });\r\n                } else {\r\n                    var crossCuts = core.getRegistry(node, 'CrossCuts') || [],\r\n                        i;\r\n\r\n                    // The 'CrossCuts' is a constant from client/js/RegistryKeys.js\r\n\r\n                    for (i = 0; i < crossCuts.length; i += 1) {\r\n                        if (crossCuts[i].SetID === setName) {\r\n                            i = -1;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (i === -1) {\r\n                        // TODO: Should the CrossCuts be checked too?\r\n                        return Q({\r\n                            hasViolation: false\r\n                        });\r\n                    } else {\r\n                        return Q({\r\n                            hasViolation: true,\r\n                            messages: ['Illegal set \"' + setName + '\".']\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                memberPaths = core.getMemberPaths(node, setName);\r\n                return loadNodes(core, node, memberPaths)\r\n                    .then(function (nodes) {\r\n                        return checkNodeTypesAndCardinality(core, node, nodes, metaSet, '\"' + setName + '\"-members');\r\n                    });\r\n            }\r\n        });\r\n\r\n        return Q.all(checkPromises)\r\n            .then(function (results) {\r\n                results.forEach(function (res) {\r\n                    if (res.hasViolation) {\r\n                        result.hasViolation = true;\r\n                        result.messages = result.messages.concat(res.messages);\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }).nodeify(callback);\r\n    }\r\n\r\n    function checkChildrenRules(meta, core, node, callback) {\r\n        return core.loadChildren(node)\r\n            .then(function (nodes) {\r\n                return checkNodeTypesAndCardinality(core, node, nodes, meta.children, 'children');\r\n            })\r\n            .nodeify(callback);\r\n    }\r\n\r\n    function checkAttributeRules(meta, core, node) {\r\n        var result = {\r\n                hasViolation: false,\r\n                messages: []\r\n            },\r\n            names = core.getAttributeNames(node),\r\n            validNames = core.getValidAttributeNames(node),\r\n            ownVal,\r\n            i;\r\n\r\n        function checkValidValue(attrName) {\r\n            try {\r\n                if (!core.isValidAttributeValueOf(node, attrName, core.getAttribute(node, attrName))) {\r\n                    result.hasViolation = true;\r\n                    result.messages.push('Attribute \"' + attrName + '\" has invalid value \"' +\r\n                        core.getAttribute(node, attrName) + '\".');\r\n                }\r\n            } catch (e) {\r\n                if (e.message.indexOf('Invalid regular expression') > -1) {\r\n                    result.messages.push('Invalid regular expression defined for attribute \"' + attrName + '\"!');\r\n                    result.hasViolation = true;\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < names.length; i++) {\r\n            if (validNames.indexOf(names[i]) !== -1) {\r\n                if (meta.attributes[names[i]].readonly === true) {\r\n                    ownVal = core.getOwnAttribute(node, names[i]);\r\n                    if (ownVal !== undefined && core.isMetaNode(node) === false) {\r\n                        result.messages.push('Read-only attribute \"' + names[i] +\r\n                            '\" value has been set for a non-meta node!');\r\n                        result.hasViolation = true;\r\n                    } else if (core.isMetaNode(node)) {\r\n                        checkValidValue(names[i]);\r\n                    }\r\n                } else {\r\n                    checkValidValue(names[i]);\r\n                }\r\n            } else {\r\n                result.hasViolation = true;\r\n                result.messages.push('Illegal attribute \"' + names[i] + '\".');\r\n            }\r\n        }\r\n\r\n        return Q(result);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param core\r\n     * @param node\r\n     * @param [callback]\r\n     * @returns {Q.Promise}\r\n     */\r\n    function checkNode(core, node, callback) {\r\n        var result = {\r\n                hasViolation: false,\r\n                messages: [],\r\n                message: ''\r\n            },\r\n            meta;\r\n\r\n        if (core.getPath(node) === '' || core.isLibraryRoot(node)) {\r\n            // Do not check the meta-rules for the root-node or library-roots.\r\n            return Q(result);\r\n        }\r\n\r\n        meta = core.getJsonMeta(node);\r\n\r\n        return Q.all([\r\n            checkPointerRules(meta, core, node),\r\n            checkSetRules(meta, core, node),\r\n            checkChildrenRules(meta, core, node),\r\n            checkAttributeRules(meta, core, node)\r\n        ])\r\n            .then(function (results) {\r\n                var i;\r\n                for (i = 0; i < results.length; i += 1) {\r\n                    if (results[i].hasViolation === true) {\r\n                        result.hasViolation = true;\r\n                        result.messages = result.messages.concat(results[i].messages);\r\n                    }\r\n                }\r\n\r\n                result.message = result.messages.join(' ');\r\n                return result;\r\n            })\r\n            .nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks that the meta-nodes and their definitions are consistent w.r.t.\r\n     * - Meta name collisions.\r\n     * - Referencing nodes outside of the meta.\r\n     * - Duplicate definitions from mixins.\r\n     * - Collisions between set names and pointers/aspects\r\n     * - Invalid regular expression for attributes\r\n     * - Invalid min/max for attributes\r\n     * - Invalid set/pointer/attribute/aspect/constraint names\r\n     * @param core\r\n     * @param node - any node in tree to be checked\r\n     */\r\n    function checkMetaConsistency(core, node) {\r\n        var metaNodes = core.getAllMetaNodes(node),\r\n            names = {},\r\n            result = [],\r\n            isPointer,\r\n            i,\r\n            key,\r\n            path,\r\n            metaNode,\r\n            metaName,\r\n            setNames,\r\n            pointerNames,\r\n            aspectNames,\r\n            childPaths,\r\n            ownMetaJson;\r\n\r\n        function isTypeOfAny(node, paths) {\r\n            var i,\r\n                metaNode;\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                metaNode = metaNodes[paths[i]];\r\n                if (metaNode && core.isTypeOf(node, metaNode)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getUnderScoreError(metaName, path, key, type) {\r\n            return {\r\n                severity: 'error',\r\n                message: metaName + ' defines ' + type + ' [' + key + '] starting with an underscore (\"_\").',\r\n                description: 'Such relations/properties in the models are considered private and can ' +\r\n                'collied with reserved properties.',\r\n                hint: 'Remove/rename it.',\r\n                path: path,\r\n                relatedPaths: []\r\n            };\r\n        }\r\n\r\n        function getReservedNameError(metaName, path, key, type) {\r\n            return {\r\n                severity: 'error',\r\n                message: metaName + ' defines ' + type + ' [' + key + '] which is a reserved name.',\r\n                description: 'Such relations/properties in the models can lead to collisions resulting in unexpected' +\r\n                ' behavior.',\r\n                hint: 'Remove/rename it.',\r\n                path: path,\r\n                relatedPaths: []\r\n            };\r\n        }\r\n\r\n        function getMixinError(mixinError) {\r\n            return {\r\n                severity: mixinError.severity,\r\n                message: mixinError.message,\r\n                description: 'Mixin violations makes it hard to see which definition is used.',\r\n                hint: mixinError.hint,\r\n                path: path,\r\n                relatedPaths: mixinError.collisionPaths || []\r\n            };\r\n        }\r\n\r\n        for (path in metaNodes) {\r\n            metaNode = metaNodes[path];\r\n            metaName = core.getFullyQualifiedName(metaNode);\r\n            ownMetaJson = core.getOwnJsonMeta(metaNode);\r\n            setNames = core.getValidSetNames(metaNode);\r\n            pointerNames = core.getValidPointerNames(metaNode);\r\n            aspectNames = core.getValidAspectNames(metaNode);\r\n            childPaths = core.getValidChildrenPaths(metaNode);\r\n\r\n            //Patch the ownMetaJson\r\n            ownMetaJson.attributes = ownMetaJson.attributes || {};\r\n            ownMetaJson.children = ownMetaJson.children || {};\r\n            ownMetaJson.pointers = ownMetaJson.pointers || {};\r\n            ownMetaJson.aspects = ownMetaJson.aspects || {};\r\n            ownMetaJson.constraints = ownMetaJson.constraints || {};\r\n\r\n            // Check for name duplication.\r\n            if (typeof names[metaName] === 'string') {\r\n                result.push({\r\n                    severity: 'error',\r\n                    message: 'Duplicate name among meta-nodes [' + metaName + ']',\r\n                    description: 'Non-unique meta names makes it hard to reason about the meta-model',\r\n                    hint: 'Rename one of the objects',\r\n                    path: path,\r\n                    relatedPaths: [names[metaName]]\r\n                });\r\n            } else {\r\n                names[metaName] = path;\r\n            }\r\n\r\n            // Get the mixin errors.\r\n            result = result.concat(core.getMixinErrors(metaNode).map(getMixinError));\r\n\r\n            if (ownMetaJson.children.items) {\r\n                for (i = 0; i < ownMetaJson.children.items.length; i += 1) {\r\n                    if (!metaNodes[ownMetaJson.children.items[i]]) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines containment of a node that is not part of the meta.',\r\n                            description: 'All defined meta-relations should be between meta-nodes.',\r\n                            hint: 'Locate the related node, add it to the meta and remove the containment definition.',\r\n                            path: path,\r\n                            relatedPaths: [ownMetaJson.children.items[i]]\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (key in ownMetaJson.pointers) {\r\n                isPointer = ownMetaJson.pointers[key].max === 1;\r\n\r\n                for (i = 0; i < ownMetaJson.pointers[key].items.length; i += 1) {\r\n                    if (!metaNodes[ownMetaJson.pointers[key].items[i]]) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines a ' + (isPointer ? 'pointer' : 'set') + ' [' + key + '] ' +\r\n                            'where the ' + (isPointer ? 'target' : 'member') + ' is not part of the meta.',\r\n                            description: 'All defined meta-relations should be between meta-nodes.',\r\n                            hint: 'Locate the related node, add it to the meta and remove the ' +\r\n                            (isPointer ? 'pointer' : 'set') + ' definition.',\r\n                            path: path,\r\n                            relatedPaths: [ownMetaJson.pointers[key].items[i]]\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (isPointer) {\r\n                    if (setNames.indexOf(key) > -1) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines a pointer [' + key + '] colliding with a set definition.',\r\n                            description: 'Pointer and set definitions share the same namespace.',\r\n                            hint: 'Remove/rename one of them.',\r\n                            path: path,\r\n                            relatedPaths: ownMetaJson.pointers[key].items\r\n                        });\r\n                    }\r\n\r\n                    if (key === CONSTANTS.BASE_POINTER || key === CONSTANTS.MEMBER_RELATION) {\r\n                        result.push(getReservedNameError(metaName, path, key, 'a pointer'));\r\n                    }\r\n                } else {\r\n                    if (pointerNames.indexOf(key) > -1) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines a set [' + key + '] colliding with a pointer definition.',\r\n                            description: 'Pointer and set definitions share the same namespace.',\r\n                            hint: 'Remove/rename one of them.',\r\n                            path: path,\r\n                            relatedPaths: ownMetaJson.pointers[key].items\r\n                        });\r\n                    }\r\n\r\n                    if (aspectNames.indexOf(key) > -1) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines a set [' + key + '] colliding with an aspect definition.',\r\n                            description: 'Sets and aspects share the same name-space.',\r\n                            hint: 'Remove/rename one of them.',\r\n                            path: path,\r\n                            relatedPaths: ownMetaJson.pointers[key].items\r\n                        });\r\n                    }\r\n\r\n                    if (key === CONSTANTS.OVERLAYS_PROPERTY) {\r\n                        result.push(getReservedNameError(metaName, path, key, 'a set'));\r\n                    }\r\n                }\r\n\r\n                if (key[0] === '_') {\r\n                    result.push(getUnderScoreError(metaName, path, key, isPointer ? 'a pointer' : 'a set'));\r\n                }\r\n            }\r\n\r\n            for (key in ownMetaJson.aspects) {\r\n                for (i = 0; i < ownMetaJson.aspects[key].length; i += 1) {\r\n                    if (!metaNodes[ownMetaJson.aspects[key][i]]) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines an aspect [' + key + '] where a member is not part of' +\r\n                            ' the meta.',\r\n                            description: 'All defined meta-relations should be between meta-nodes.',\r\n                            hint: 'Remove the item from the aspect.',\r\n                            path: path,\r\n                            relatedPaths: [ownMetaJson.aspects[key][i]]\r\n                        });\r\n                    } else if (isTypeOfAny(metaNodes[ownMetaJson.aspects[key][i]], childPaths) === false) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines an aspect [' + key + '] where a member does not have a ' +\r\n                            'containment definition.',\r\n                            description: 'All defined meta-relations should be between meta-nodes.',\r\n                            hint: 'Remove the item from the aspect or add a containment definition.',\r\n                            path: path,\r\n                            relatedPaths: [ownMetaJson.aspects[key][i]]\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (setNames.indexOf(key) > -1) {\r\n                    result.push({\r\n                        severity: 'error',\r\n                        message: metaName + ' defines an aspect [' + key + '] colliding with a set definition.',\r\n                        description: 'Sets and aspects share the same name-space.',\r\n                        hint: 'Remove the aspect and create a new one.',\r\n                        path: path,\r\n                        relatedPaths: []\r\n                    });\r\n                }\r\n\r\n                if (key === CONSTANTS.OVERLAYS_PROPERTY) {\r\n                    result.push(getReservedNameError(metaName, path, key, 'an aspect'));\r\n                }\r\n\r\n                if (key[0] === '_') {\r\n                    result.push(getUnderScoreError(metaName, path, key, 'an aspect'));\r\n                }\r\n            }\r\n\r\n            for (key in ownMetaJson.attributes) {\r\n                if (Object.hasOwn(ownMetaJson.attributes[key], 'regexp')) {\r\n                    try {\r\n                        new RegExp(ownMetaJson.attributes[key].regexp);\r\n                    } catch (err) {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines an invalid regular expression for the attribute [' + key +\r\n                            '], \"' + ownMetaJson.attributes[key].regexp + '\".',\r\n                            description: 'Invalid properties can lead to unexpected results in the models.',\r\n                            hint: 'Edit the regular expression for the attribute.',\r\n                            path: path,\r\n                            relatedPaths: []\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (ownMetaJson.attributes[key].type === CONSTANTS.ATTRIBUTE_TYPES.INTEGER ||\r\n                    ownMetaJson.attributes[key].type === CONSTANTS.ATTRIBUTE_TYPES.FLOAT) {\r\n\r\n                    if (Object.hasOwn(ownMetaJson.attributes[key], 'min') &&\r\n                        typeof ownMetaJson.attributes[key].min !== 'number') {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines an invalid min value for the attribute [' + key +\r\n                            ']. The type is not a number but \"' + typeof ownMetaJson.attributes[key].min + '\".',\r\n                            description: 'Invalid properties can lead to unexpected results in the models.',\r\n                            hint: 'Edit the min value for the attribute.',\r\n                            path: path,\r\n                            relatedPaths: []\r\n                        });\r\n                    }\r\n\r\n                    if (Object.hasOwn(ownMetaJson.attributes[key], 'max') &&\r\n                        typeof ownMetaJson.attributes[key].max !== 'number') {\r\n                        result.push({\r\n                            severity: 'error',\r\n                            message: metaName + ' defines an invalid max value for the attribute [' + key +\r\n                            ']. The type is not a number but \"' + typeof ownMetaJson.attributes[key].max + '\".',\r\n                            description: 'Invalid properties can lead to unexpected results in the models.',\r\n                            hint: 'Edit the max value for the attribute.',\r\n                            path: path,\r\n                            relatedPaths: []\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // This cannot happen since _s are filtered out.\r\n                if (key[0] === '_') {\r\n                    result.push(getUnderScoreError(metaName, path, key, 'an attribute'));\r\n                }\r\n            }\r\n\r\n            // for (key in ownMetaJson.constraints) {\r\n            //     // Any checking on constraints?\r\n            // }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        checkNode: checkNode,\r\n        checkMetaConsistency: checkMetaConsistency\r\n    };\r\n});\n",
    "/*globals define, console*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/gmeNodeGetter',[], function () {\r\n    'use strict';\r\n\r\n    function _logDeprecated(oldFn, newFn, comment) {\r\n        var commentStr = comment ? comment : '';\r\n        //eslint-disable-next-line no-console\r\n        console.warn('\"gmeNode.' + oldFn + '\" is deprecated and will eventually be removed, use \"gmeNode.' + newFn +\r\n            '\" instead.' + commentStr);\r\n    }\r\n\r\n    function _getNode(nodes, path) {\r\n        return nodes[path] && nodes[path].node;\r\n    }\r\n\r\n    /**\r\n     * @param {string} _id - Path of node.\r\n     * @param {GmeLogger} logger - logger.\r\n     * @param {object} state - state of the client.\r\n     * @param {function} storeNode - invoked when storing new nodes.\r\n     * @constructor\r\n     */\r\n    function GMENode(_id, logger, state, storeNode) {\r\n        this._id = _id;\r\n        this._logger = logger;\r\n        this._state = state;\r\n        this._storeNode = storeNode;\r\n    }\r\n\r\n    GMENode.prototype.getId = function () {\r\n        return this._id;\r\n    };\r\n\r\n    GMENode.prototype.getRelid = function () {\r\n        return this._state.core.getRelid(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getGuid = function () {\r\n        return this._state.core.getGuid(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getParentId = function () {\r\n        //just for sure, as it may missing from the cache\r\n        return this._storeNode(this._state.core.getParent(this._state.nodes[this._id].node));\r\n    };\r\n\r\n    GMENode.prototype.getCommonParentId = function (/*otherNodeIds*/) {\r\n        var nodesArr = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)),\r\n            self = this;\r\n\r\n        nodesArr.push(this._id);\r\n\r\n        return this._storeNode(this._state.core.getCommonParent.apply(this._state.core, nodesArr.map(function (id) {\r\n            return _getNode(self._state.nodes, id);\r\n        })));\r\n    };\r\n\r\n    GMENode.prototype.getChildrenIds = function () {\r\n        return this._state.core.getChildrenPaths(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getChildrenRelids = function () {\r\n        return this._state.core.getChildrenRelids(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getBaseId = function () {\r\n        return this._storeNode(this._state.core.getBase(this._state.nodes[this._id].node));\r\n    };\r\n\r\n    GMENode.prototype.getCommonBaseId = function (/*otherNodeIds*/) {\r\n        var nodesArr = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)),\r\n            self = this;\r\n\r\n        nodesArr.push(this._id);\r\n\r\n        return this._storeNode(this._state.core.getCommonBase.apply(this._state.core, nodesArr.map(function (id) {\r\n            return _getNode(self._state.nodes, id);\r\n        })));\r\n    };\r\n\r\n    GMENode.prototype.isValidNewBase = function (basePath) {\r\n        var base;\r\n        if (typeof basePath === 'string') {\r\n            base = _getNode(this._state.nodes, basePath);\r\n            if (base) {\r\n                return this._state.core.isValidNewBase(this._state.nodes[this._id].node, base);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if (basePath === undefined || basePath === null) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    GMENode.prototype.isValidNewParent = function (parentPath) {\r\n        var parent;\r\n        if (typeof parentPath === 'string') {\r\n            parent = _getNode(this._state.nodes, parentPath);\r\n            if (parent) {\r\n                return this._state.core.isValidNewParent(this._state.nodes[this._id].node, parent);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    GMENode.prototype.isValidNewChild = function (basePath) {\r\n        var base;\r\n        if (typeof basePath === 'string') {\r\n            base = _getNode(this._state.nodes, basePath);\r\n            if (base) {\r\n                return this._state.core.isValidNewChild(this._state.nodes[this._id].node, base);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if (basePath === undefined || basePath === null) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    GMENode.prototype.getInheritorIds = function () {\r\n        return this._state.core.getInstancePaths(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getAttribute = function (name) {\r\n        return this._state.core.getAttribute(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnAttribute = function (name) {\r\n        return this._state.core.getOwnAttribute(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getEditableAttribute = function (name) {\r\n        _logDeprecated('getEditableAttribute', 'getAttribute',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n        return this._state.core.getAttribute(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnEditableAttribute = function (name) {\r\n        _logDeprecated('getOwnEditableAttribute', 'getOwnAttribute',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n        return this._state.core.getOwnAttribute(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getRegistry = function (name) {\r\n        return this._state.core.getRegistry(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnRegistry = function (name) {\r\n        return this._state.core.getOwnRegistry(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getEditableRegistry = function (name) {\r\n        _logDeprecated('getEditableRegistry', 'getRegistry',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n\r\n        return this._state.core.getRegistry(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnEditableRegistry = function (name) {\r\n        _logDeprecated('getOwnEditableRegistry', 'getOwnRegistry',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n\r\n        return this._state.core.getOwnRegistry(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getPointer = function (name) {\r\n        return {to: this._state.core.getPointerPath(this._state.nodes[this._id].node, name), from: []};\r\n    };\r\n\r\n    GMENode.prototype.getPointerId = function (name) {\r\n        return this.getPointer(name).to;\r\n    };\r\n\r\n    GMENode.prototype.getOwnPointer = function (name) {\r\n        return {to: this._state.core.getOwnPointerPath(this._state.nodes[this._id].node, name), from: []};\r\n    };\r\n\r\n    GMENode.prototype.getOwnPointerId = function (name) {\r\n        return this.getOwnPointer(name).to;\r\n    };\r\n\r\n    GMENode.prototype.getPointerNames = function () {\r\n        return this._state.core.getPointerNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnPointerNames = function () {\r\n        return this._state.core.getOwnPointerNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getAttributeNames = function () {\r\n        return this._state.core.getAttributeNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnAttributeNames = function () {\r\n        return this._state.core.getOwnAttributeNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getAttributeMeta = function (name) {\r\n        return this._state.core.getAttributeMeta(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getRegistryNames = function () {\r\n        return this._state.core.getRegistryNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnRegistryNames = function () {\r\n        return this._state.core.getOwnRegistryNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    //SET\r\n    GMENode.prototype.getMemberIds = function (setName) {\r\n        return this._state.core.getMemberPaths(this._state.nodes[this._id].node, setName);\r\n    };\r\n\r\n    GMENode.prototype.getSetNames = function () {\r\n        return this._state.core.getSetNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isMemberOf = function () {\r\n        return this._state.core.isMemberOf(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getMemberAttributeNames = function (setName, memberId) {\r\n        return this._state.core.getMemberAttributeNames(this._state.nodes[this._id].node, setName, memberId);\r\n    };\r\n\r\n    GMENode.prototype.getMemberAttribute = function (setName, memberId, attrName) {\r\n        return this._state.core.getMemberAttribute(this._state.nodes[this._id].node, setName, memberId, attrName);\r\n    };\r\n\r\n    GMENode.prototype.getEditableMemberAttribute = function (setName, memberId, attrName) {\r\n        _logDeprecated('getEditableMemberAttribute', 'getMemberAttribute',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n        return this._state.core.getMemberAttribute(this._state.nodes[this._id].node, setName, memberId, attrName);\r\n    };\r\n\r\n    GMENode.prototype.getMemberRegistryNames = function (setName, memberId) {\r\n        return this._state.core.getMemberRegistryNames(this._state.nodes[this._id].node, setName, memberId);\r\n    };\r\n\r\n    GMENode.prototype.getMemberRegistry = function (setName, memberId, regName) {\r\n        return this._state.core.getMemberRegistry(this._state.nodes[this._id].node, setName, memberId, regName);\r\n    };\r\n\r\n    GMENode.prototype.getEditableMemberRegistry = function (setName, memberId, regName) {\r\n        _logDeprecated('getEditableMemberRegistry', 'getMemberRegistry',\r\n            ' All returned values from the core can now be mutated without any issues.');\r\n        return this._state.core.getMemberRegistry(this._state.nodes[this._id].node, setName, memberId, regName);\r\n    };\r\n\r\n    GMENode.prototype.getSetRegistry = function (setName, regName) {\r\n        return this._state.core.getSetRegistry(this._state.nodes[this._id].node, setName, regName);\r\n    };\r\n\r\n    GMENode.prototype.getSetRegistryNames = function (setName) {\r\n        return this._state.core.getSetRegistryNames(this._state.nodes[this._id].node, setName);\r\n    };\r\n\r\n    GMENode.prototype.getSetAttribute = function (setName, attrName) {\r\n        return this._state.core.getSetAttribute(this._state.nodes[this._id].node, setName, attrName);\r\n    };\r\n\r\n    GMENode.prototype.getSetAttributeNames = function (setName) {\r\n        return this._state.core.getSetAttributeNames(this._state.nodes[this._id].node, setName);\r\n    };\r\n\r\n    //META\r\n    GMENode.prototype.getValidChildrenTypes = function () {\r\n        _logDeprecated('getValidChildrenTypes()', 'getValidChildrenIds()');\r\n        return this.getValidChildrenIds();\r\n    };\r\n\r\n    GMENode.prototype.getValidAttributeNames = function () {\r\n        return this._state.core.getValidAttributeNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidAttributeNames = function () {\r\n        return this._state.core.getOwnValidAttributeNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isValidAttributeValueOf = function (name, value) {\r\n        return this._state.core.isValidAttributeValueOf(this._state.nodes[this._id].node, name, value);\r\n    };\r\n\r\n    GMENode.prototype.getValidPointerNames = function () {\r\n        return this._state.core.getValidPointerNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getValidSetNames = function () {\r\n        return this._state.core.getValidSetNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    //constraint functions\r\n    GMENode.prototype.getConstraintNames = function () {\r\n        return this._state.core.getConstraintNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnConstraintNames = function () {\r\n        return this._state.core.getOwnConstraintNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getConstraint = function (name) {\r\n        return this._state.core.getConstraint(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.toString = function () {\r\n        return this._state.core.getAttribute(this._state.nodes[this._id].node, 'name') + ' (' + this._id + ')';\r\n    };\r\n\r\n    GMENode.prototype.getCollectionPaths = function (name) {\r\n        return this._state.core.getCollectionPaths(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getInstancePaths = function () {\r\n        return this._state.core.getInstancePaths(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getJsonMeta = function () {\r\n        return this._state.core.getJsonMeta(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnJsonMeta = function () {\r\n        return this._state.core.getOwnJsonMeta(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isConnection = function () {\r\n        return this._state.core.isConnection(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isAbstract = function () {\r\n        return this._state.core.isAbstract(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isLibraryRoot = function () {\r\n        return this._state.core.isLibraryRoot(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isLibraryElement = function () {\r\n        return this._state.core.isLibraryElement(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getFullyQualifiedName = function () {\r\n        return this._state.core.getFullyQualifiedName(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getNamespace = function () {\r\n        return this._state.core.getNamespace(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getLibraryGuid = function () {\r\n        return this._state.core.getLibraryGuid(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getCrosscutsInfo = function () {\r\n        return this._state.core.getRegistry(this._state.nodes[this._id].node, 'CrossCuts') || [];\r\n    };\r\n\r\n    GMENode.prototype.getValidChildrenTypesDetailed = function (aspect, noFilter) {\r\n        var parameters = {\r\n                childrenIds: this.getChildrenIds(),\r\n                sensitive: !noFilter,\r\n                multiplicity: false,\r\n                aspect: aspect,\r\n                cache: {}\r\n            },\r\n            result = {},\r\n            fullList,\r\n            filteredList,\r\n            i;\r\n\r\n        fullList = this.getValidChildrenMetaIds(parameters);\r\n        parameters.multiplicity = true;\r\n        filteredList = this.getValidChildrenMetaIds(parameters);\r\n\r\n        for (i = 0; i < fullList.length; i += 1) {\r\n            result[fullList[i]] = false;\r\n        }\r\n\r\n        for (i = 0; i < filteredList.length; i += 1) {\r\n            result[filteredList[i]] = true;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    GMENode.prototype.getValidChildrenMetaIds = function (parameters) {\r\n        var coreParams = {\r\n                node: this._state.nodes[this._id].node,\r\n                cache: parameters.cache || {}\r\n            },\r\n            self = this,\r\n            i;\r\n\r\n        if (parameters.sensitive) {\r\n            coreParams.sensitive = parameters.sensitive;\r\n        }\r\n\r\n        if (parameters.aspect) {\r\n            coreParams.aspect = parameters.aspect;\r\n        }\r\n\r\n        if (parameters.childrenIds && parameters.multiplicity) {\r\n            coreParams.multiplicity = true;\r\n            coreParams.children = [];\r\n            for (i = 0; i < parameters.childrenIds.length; i++) {\r\n                if (this._state.nodes[parameters.childrenIds[i]]) {\r\n                    coreParams.children.push(this._state.nodes[parameters.childrenIds[i]].node);\r\n                } else {\r\n                    this._logger.warn('Child node [' + parameters.childrenIds[i] + '] not loaded at ' +\r\n                        'getValidChildrenMetaIds - cardinality constraints will not be enforced properly.');\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._state.core.getValidChildrenMetaNodes(coreParams)\r\n            .map(function (coreNode) {\r\n                return self._state.core.getPath(coreNode);\r\n            });\r\n    };\r\n\r\n    GMENode.prototype.getValidSetMemberTypesDetailed = function (setName) {\r\n        var parameters = {\r\n                node: this._state.nodes[this._id].node,\r\n                memberIds: this.getMemberIds(setName),\r\n                sensitive: true,\r\n                multiplicity: false,\r\n                name: setName\r\n            },\r\n            result = {},\r\n            fullList,\r\n            filteredList,\r\n            i;\r\n\r\n        fullList = this.getValidSetElementsMetaIds(parameters);\r\n        parameters.multiplicity = true;\r\n        filteredList = this.getValidSetElementsMetaIds(parameters);\r\n\r\n        for (i = 0; i < fullList.length; i += 1) {\r\n            result[fullList[i]] = false;\r\n        }\r\n\r\n        for (i = 0; i < filteredList.length; i += 1) {\r\n            result[filteredList[i]] = true;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    GMENode.prototype.getValidSetElementsMetaIds = function (parameters) {\r\n        var coreParams = {\r\n                node: this._state.nodes[this._id].node,\r\n                name: parameters.name,\r\n                cache: parameters.cache || {}\r\n            },\r\n            self = this,\r\n            i;\r\n\r\n        if (parameters.sensitive) {\r\n            coreParams.sensitive = parameters.sensitive;\r\n        }\r\n\r\n        if (parameters.memberIds && parameters.multiplicity) {\r\n            coreParams.multiplicity = true;\r\n            coreParams.members = [];\r\n            for (i = 0; i < parameters.memberIds.length; i++) {\r\n                if (this._state.nodes[parameters.memberIds[i]]) {\r\n                    coreParams.members.push(this._state.nodes[parameters.memberIds[i]].node);\r\n                } else {\r\n                    this._logger.warn('Member node [' + parameters.memberIds[i] + '] not loaded at ' +\r\n                        'getValidSetElementsMetaIds - cardinality constraints will not be enforced properly.');\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._state.core.getValidSetElementsMetaNodes(coreParams)\r\n            .map(function (coreNode) {\r\n                return self._state.core.getPath(coreNode);\r\n            });\r\n    };\r\n\r\n    GMENode.prototype.getMetaTypeId = GMENode.prototype.getBaseTypeId = function () {\r\n        var metaType = this._state.core.getMetaType(this._state.nodes[this._id].node);\r\n\r\n        if (metaType) {\r\n            return this._storeNode(metaType);\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    GMENode.prototype.isMetaNode = function () {\r\n        return this._state.core.isMetaNode(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isTypeOf = function (typeId) {\r\n        return this._state.core.isTypeOf(this._state.nodes[this._id].node, typeId);\r\n    };\r\n\r\n    GMENode.prototype.isInstanceOf = function (baseId) {\r\n        return this._state.core.isInstanceOf(this._state.nodes[this._id].node, baseId);\r\n    };\r\n\r\n    GMENode.prototype.isValidChildOf = function (parentPath) {\r\n        var parentNode = _getNode(this._state.nodes, parentPath);\r\n\r\n        if (parentNode) {\r\n            return this._state.core.isValidChildOf(this._state.nodes[this._id].node, parentNode);\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    GMENode.prototype.getValidChildrenIds = function () {\r\n        return this._state.core.getValidChildrenPaths(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.isValidTargetOf = function (sourcePath, name) {\r\n        var sourceNode = _getNode(this._state.nodes, sourcePath);\r\n\r\n        if (sourceNode) {\r\n            return this._state.core.isValidTargetOf(this._state.nodes[this._id].node, sourceNode, name);\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    GMENode.prototype.isValidSetMemberOf = function (setOwnerPath, name) {\r\n        var setOwner = _getNode(this._state.nodes, setOwnerPath);\r\n\r\n        if (setOwner) {\r\n            return this._state.core.isValidSetMemberOf(this._state.nodes[this._id].node, setOwner, name);\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    GMENode.prototype.getValidAspectNames = function () {\r\n        return this._state.core.getValidAspectNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidAspectNames = function () {\r\n        return this._state.core.getOwnValidAspectNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getAspectMeta = function (name) {\r\n        return this._state.core.getAspectMeta(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    //MIXINS\r\n    GMENode.prototype.getMixinPaths = function () {\r\n        return this._state.core.getMixinPaths(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.canSetAsMixin = function (mixinPath) {\r\n        return this._state.core.canSetAsMixin(this._state.nodes[this._id].node, mixinPath);\r\n    };\r\n\r\n    GMENode.prototype.isReadOnly = function () {\r\n        return this._state.readOnlyProject || this._state.viewer || this.isLibraryRoot() || this.isLibraryElement();\r\n    };\r\n\r\n    GMENode.prototype.getAttributeDefinitionOwnerId = function (name) {\r\n        return this._storeNode(this._state.core.getAttributeDefinitionOwner(this._state.nodes[this._id].node, name));\r\n    };\r\n\r\n    GMENode.prototype.getAspectDefinitionOwner = function (name) {\r\n        return this._storeNode(this._state.core.getAttributeDefinitionOwner(this._state.nodes[this._id].node, name));\r\n    };\r\n\r\n    GMENode.prototype.isValidAspectMemberOf = function (parentId, name) {\r\n        return this._state.core.isValidAspectMemberOf(this._state.nodes[this._id].node,\r\n            this._state.nodes[parentId].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidPointerNames = function () {\r\n        return this._state.core.getOwnValidPointerNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidSetNames = function () {\r\n        return this._state.core.getOwnValidSetNames(this._state.nodes[this._id].node);\r\n    };\r\n\r\n    GMENode.prototype.getValidTargetIds = function (name) {\r\n        return this._state.core.getValidTargetPaths(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidTargetIds = function (name) {\r\n        return this._state.core.getOwnValidTargetPaths(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getValidAspectTargetIds = function (name) {\r\n        return this._state.core.getValidAspectTargetPaths(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getOwnValidAspectTargetIds = function (name) {\r\n        return this._state.core.getOwnValidAspectTargetPaths(this._state.nodes[this._id].node, name);\r\n    };\r\n\r\n    GMENode.prototype.getPointerDefinitionInfo = function (name, targetId) {\r\n        var coreInfo = this._state.core.getPointerDefinitionInfo(this._state.nodes[this._id].node, name,\r\n            this._state.nodes[targetId]);\r\n\r\n        return {\r\n            ownerId: this._storeNode(coreInfo.ownerNode),\r\n            targetId: this._storeNode(coreInfo.targetNode)\r\n        };\r\n    };\r\n\r\n    GMENode.prototype.getAspectDefinitionInfo = function (name, targetId) {\r\n        var coreInfo = this._state.core.getAspectDefinitionInfo(this._state.nodes[this._id].node,\r\n            name, this._state.nodes[targetId]);\r\n\r\n        return {\r\n            ownerId: this._storeNode(coreInfo.ownerNode),\r\n            targetId: this._storeNode(coreInfo.targetNode)\r\n        };\r\n    };\r\n\r\n    GMENode.prototype.getSetDefinitionInfo = function (name, targetId) {\r\n        var coreInfo = this._state.core.getSetDefinitionInfo(this._state.nodes[this._id].node,\r\n            name, this._state.nodes[targetId]);\r\n\r\n        return {\r\n            ownerId: this._storeNode(coreInfo.ownerNode),\r\n            targetId: this._storeNode(coreInfo.targetNode)\r\n        };\r\n    };\r\n\r\n    GMENode.prototype.getChildDefinitionInfo = function (name, targetId) {\r\n        var coreInfo = this._state.core.getChildDefinitionInfo(this._state.nodes[this._id].node,\r\n            name, this._state.nodes[targetId]);\r\n\r\n        return {\r\n            ownerId: this._storeNode(coreInfo.ownerNode),\r\n            targetId: this._storeNode(coreInfo.targetNode)\r\n        };\r\n    };\r\n\r\n    GMENode.prototype.getLibraryRootId = function (name) {\r\n        return this._storeNode(this._state.core.getLibraryRoot(this._state.nodes[this._id].node, name));\r\n    };\r\n\r\n\r\n    // GetNode from another node...\r\n    GMENode.prototype.getNode = function (id) {\r\n        if (this._state.nodes[id]) {\r\n            return new GMENode(id, this._logger, this._state, this._storeNode);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    //getNode\r\n    function getNode(_id, logger, state, storeNode) {\r\n        if (state.nodes[_id]) {\r\n            return new GMENode(_id, logger, state, storeNode);\r\n\r\n        } else {\r\n            //logger.warn('Tried to get node with path \"' + _id + '\" but was not in state.nodes');\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return getNode;\r\n});\r\n\n",
    "/*globals define, console*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\ndefine('client/gmeNodeSetter',[], function () {\r\n    'use strict';\r\n\r\n    function gmeNodeSetter(logger, state, saveRoot, storeNode, printCoreError) {\r\n\r\n        function _logDeprecated(oldFn, newFn, isGetter, comment) {\r\n            var typeToUse = isGetter ? 'gmeNode.' : 'gmeClient.',\r\n                commentStr = comment ? comment : '';\r\n\r\n            //eslint-disable-next-line no-console\r\n            console.warn('\"gmeClient.' + oldFn + '\" is deprecated and will eventually be removed, use \"' +\r\n                typeToUse + newFn + '\" instead.' + commentStr);\r\n        }\r\n\r\n        function _getNode(path) {\r\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\r\n                return state.nodes[path].node;\r\n            }\r\n        }\r\n\r\n        function _setAttrAndRegistry(node, desc) {\r\n            var name;\r\n            desc = desc || {};\r\n\r\n            if (desc.attributes) {\r\n                for (name in desc.attributes) {\r\n                    if (Object.hasOwn(desc.attributes, name)) {\r\n                        state.core.setAttribute(node, name, desc.attributes[name]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (desc.registry) {\r\n                for (name in desc.registry) {\r\n                    if (Object.hasOwn(desc.registry, name)) {\r\n                        state.core.setRegistry(node, name, desc.registry[name]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function _copyMultipleNodes(paths, parentNode, resultAsArray) {\r\n            var copiedNodes, result = {},\r\n                resultArray = [],\r\n                i, originalNodes = [],\r\n                checkPaths = function () {\r\n                    var i,\r\n                        result = true;\r\n\r\n                    for (i = 0; i < paths.length; i += 1) {\r\n                        result = result && (state.nodes[paths[i]] &&\r\n                            typeof state.nodes[paths[i]].node === 'object');\r\n                    }\r\n\r\n                    return result;\r\n                };\r\n\r\n            if (parentNode && checkPaths()) {\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    originalNodes.push(state.nodes[paths[i]].node);\r\n                }\r\n\r\n                copiedNodes = state.core.copyNodes(originalNodes, parentNode);\r\n\r\n                if (copiedNodes instanceof Error) {\r\n                    return copiedNodes;\r\n                }\r\n\r\n                for (i = 0; i < paths.length; i += 1) {\r\n                    result[paths[i]] = copiedNodes[i];\r\n                    resultArray.push(storeNode(copiedNodes[i]));\r\n                }\r\n            }\r\n\r\n            return resultAsArray ? resultArray : result;\r\n        }\r\n\r\n        /**\r\n         * @description Method to set an attribute of a given node.\r\n         * @memberOf Client\r\n         * @instance\r\n         * @param {string} path - The path of the node in question.\r\n         * @param {string} name - The name of the attribute.\r\n         * @param {any} value - The value of the attribute to be set.\r\n         * @param {string} msg - The message that should be attached to the commit that covers this update.\r\n         */\r\n        function setAttribute(path, name, value, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.setAttribute(node, name, value);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setAttribute(' + path + ',' + name + ',' + JSON.stringify(value) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Method to remove an attribute from a given node.\r\n         * @memberOf Client\r\n         * @instance\r\n         * @param {string} path - The path of the node in question.\r\n         * @param {string} name - The name of the attribute.\r\n         * @param {string} msg - The message that should be attached to the commit that covers this update.\r\n         */\r\n        function delAttribute(path, name, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.delAttribute(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delAttribute(' + path + ',' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Method to set a registry entry of a given node.\r\n         * @memberOf Client\r\n         * @instance\r\n         * @param {string} path - The path of the node in question.\r\n         * @param {string} name - The name of the registry.\r\n         * @param {any} value - The value of the registry to be set.\r\n         * @param {string} msg - The message that should be attached to the commit that covers this update.\r\n         */\r\n        function setRegistry(path, name, value, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.setRegistry(node, name, value);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setRegistry(' + path + ',' + name + ',' + JSON.stringify(value) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Method to remove a registry entry of a given node.\r\n         * @memberOf Client\r\n         * @instance\r\n         * @param {string} path - The path of the node in question.\r\n         * @param {string} name - The name of the registry.\r\n         * @param {string} msg - The message that should be attached to the commit that covers this update.\r\n         */\r\n        function delRegistry(path, name, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.delRegistry(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delRegistry(' + path + ',' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * var nodeCopy1 = client.copyNode('/4', '');\r\n         * var nodeCopy2 = client.copyNode('/4', '', {\r\n         *   attributes: {\r\n         *     name: 'CopiedNode'\r\n         *   },\r\n         *   registry: {\r\n         *     position: {x: 100, y: 100}\r\n         *   }\r\n         * }, 'Created node with specific name and position.');\r\n         *\r\n         * @description Copies the given node into parent \r\n         * (does not enforce meta-rules and requires all participating nodes to be loaded in the client)\r\n         * @function copyNode\r\n         * @memberOf Client\r\n         * @param {string} path - the id/path of the node to copy\r\n         * @param {string} parentId - the id/path of the parent where the new copy should be created\r\n         * @param {object} [desc={}] - named attributes and/or registries to set for the new node (see example)\r\n         * @param {object} [desc.attributes={}] - named attributes to set for the new node\r\n         * @param {object} [desc.registry={}] - named registries to set for the new node\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one \r\n         * with the function name and input parameters will be used\r\n         * @returns {GMENode|undefined} - the newly created node if it could be copied\r\n         * @instance\r\n         */\r\n        function copyNode(path, parentPath, desc, msg) {\r\n            var node = _getNode(path),\r\n                parentNode = _getNode(parentPath),\r\n                newNode, newPath;\r\n\r\n            if (node && parentNode) {\r\n                newNode = state.core.copyNode(node, parentNode);\r\n\r\n                if (newNode instanceof Error) {\r\n                    printCoreError(newNode);\r\n                    return;\r\n                }\r\n\r\n                _setAttrAndRegistry(newNode, desc);\r\n                newPath = storeNode(newNode);\r\n\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'copyNode(' + path + ', ' + parentPath + ', ' + JSON.stringify(desc) + ')');\r\n                return newPath;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.copyMoreNodes({\r\n         *    parentId: '',\r\n         *    '/4': {},\r\n         *    '/5': {\r\n         *      attributes: {\r\n         *        name: 'MyNamedCopy'\r\n         *      },\r\n         *      registry: {\r\n         *        position: {x: 100, y:100}\r\n         *      }\r\n         *    }\r\n         * }, 'Copied two nodes with some additional init data.');\r\n         *\r\n         * @description Copies the given nodes into the parent (does not enforce meta-rules \r\n         * and requires all participating nodes to be loaded in the client)\r\n         * @function copyMoreNodes\r\n         * @memberOf Client\r\n         * @param {object} parameters - the parameters holding parentId and nodes to be copied\r\n         * indexed by their ids/paths (see example)\r\n         * @param {string} parameters.parentId - the id/path of the parent where the new copies should be created\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function copyMoreNodes(parameters, msg) {\r\n            var pathsToCopy = [],\r\n                parentNode = _getNode(parameters.parentId),\r\n                nodePath,\r\n                newNodes;\r\n\r\n            if (parentNode) {\r\n                for (nodePath in parameters) {\r\n                    if (Object.hasOwn(parameters, nodePath) && nodePath !== 'parentId') {\r\n                        pathsToCopy.push(nodePath);\r\n                    }\r\n                }\r\n\r\n                msg = typeof msg === 'string' ?\r\n                    msg : 'copyMoreNodes(' + JSON.stringify(pathsToCopy) + ',' + parameters.parentId + ')';\r\n\r\n                if (pathsToCopy.length < 1) {\r\n                    // empty on purpose\r\n                } else if (pathsToCopy.length === 1) {\r\n                    copyNode(pathsToCopy[0], parameters.parentId, parameters[pathsToCopy[0]], msg);\r\n                } else {\r\n                    newNodes = _copyMultipleNodes(pathsToCopy, parentNode);\r\n\r\n                    if (newNodes instanceof Error) {\r\n                        printCoreError(newNodes);\r\n                        return;\r\n                    }\r\n\r\n                    for (nodePath in newNodes) {\r\n                        if (Object.hasOwn(newNodes, nodePath) && parameters[nodePath]) {\r\n                            _setAttrAndRegistry(newNodes[nodePath], parameters[nodePath]);\r\n                        }\r\n                    }\r\n\r\n                    saveRoot(msg);\r\n                }\r\n            } else {\r\n                state.logger.error('wrong parameters for copy operation - denied -');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.moveMoreNodes({\r\n         *    parentId: '',\r\n         *    '/4': {},\r\n         *    '/5': {\r\n         *      attributes: {\r\n         *        name: 'MyNamedCopy'\r\n         *      },\r\n         *      registry: {\r\n         *        position: {x: 100, y:100}\r\n         *      }\r\n         *    }\r\n         * }, 'Copied two nodes with some additional init data.');\r\n         *\r\n         * @description Moves the given nodes into the parent (does not enforce meta-rules \r\n         * and requires all participating nodes to be loaded in the client)\r\n         * @function moveMoreNodes\r\n         * @memberOf Client\r\n         * @param {object} parameters - the parameters holding parentId and nodes to be copied\r\n         * indexed by their ids/paths (see example)\r\n         * @param {string} parameters.parentId - the id/path of the parent where the new copies should be created\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function moveMoreNodes(parameters, msg) {\r\n            var pathsToMove = [],\r\n                returnParams = {},\r\n                i,\r\n                newNode;\r\n\r\n            for (i in parameters) {\r\n                if (Object.hasOwn(parameters, i)) {\r\n                    if (i !== 'parentId') {\r\n                        pathsToMove.push(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (pathsToMove.length > 0 &&\r\n                typeof parameters.parentId === 'string' &&\r\n                state.nodes[parameters.parentId] &&\r\n                typeof state.nodes[parameters.parentId].node === 'object') {\r\n                for (i = 0; i < pathsToMove.length; i += 1) {\r\n                    if (state.nodes[pathsToMove[i]] &&\r\n                        typeof state.nodes[pathsToMove[i]].node === 'object') {\r\n\r\n                        newNode = state.core.moveNode(state.nodes[pathsToMove[i]].node,\r\n                            state.nodes[parameters.parentId].node);\r\n                        returnParams[pathsToMove[i]] = state.core.getPath(newNode);\r\n                        _setAttrAndRegistry(newNode, parameters[pathsToMove[i]]);\r\n                        delete state.nodes[pathsToMove[i]];\r\n                        storeNode(newNode, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            saveRoot(typeof msg === 'string' ? msg : 'moveMoreNodes(' + JSON.stringify(returnParams) + ')');\r\n            return returnParams;\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.createChildren({\r\n         *    parentId: '',\r\n         *    '/4': {},\r\n         *    '/5': {\r\n         *      attributes: {\r\n         *        name: 'MyVeryOwnName'\r\n         *      },\r\n         *      registry: {\r\n         *        position: {x: 100, y:100}\r\n         *      }\r\n         *    }\r\n         * }, 'Created new children of the root based on the list of existing nodes.');\r\n         *\r\n         * @description Creates instances as children of the parent node based on the list \r\n         * of nodes among the parameters (does not enforce meta-rules \r\n         * and requires all participating nodes to be loaded in the client).\r\n         * @function createChildren\r\n         * @memberOf Client\r\n         * @param {object} parameters - the parameters holding parentId and nodes to be instantiated\r\n         * indexed by their ids/paths (see example)\r\n         * @param {string} parameters.parentId - the id/path of the parent where the new nodes should be created\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function createChildren(parameters, msg) {\r\n            //TODO we also have to check out what is happening with the sets!!!\r\n            var result = {},\r\n                paths = [],\r\n                nodes = [],\r\n                node,\r\n                parent = state.nodes[parameters.parentId].node,\r\n                names, i, j, index, pointer,\r\n                newChildren = [],\r\n                relations = [];\r\n\r\n            //to allow 'meaningfull' instantiation of multiple objects\r\n            // we have to recreate the internal relations - except the base\r\n            paths = Object.keys(parameters);\r\n            paths.splice(paths.indexOf('parentId'), 1);\r\n            for (i = 0; i < paths.length; i++) {\r\n                node = state.nodes[paths[i]].node;\r\n                nodes.push(node);\r\n                pointer = {};\r\n                names = state.core.getPointerNames(node);\r\n                index = names.indexOf('base');\r\n                if (index !== -1) {\r\n                    names.splice(index, 1);\r\n                }\r\n\r\n                for (j = 0; j < names.length; j++) {\r\n                    index = paths.indexOf(state.core.getPointerPath(node, names[j]));\r\n                    if (index !== -1) {\r\n                        pointer[names[j]] = index;\r\n                    }\r\n                }\r\n                relations.push(pointer);\r\n            }\r\n\r\n            //now the instantiation\r\n            for (i = 0; i < nodes.length; i++) {\r\n                newChildren.push(state.core.createNode({parent: parent, base: nodes[i]}));\r\n            }\r\n\r\n            //now for the storage and relation setting\r\n            for (i = 0; i < paths.length; i++) {\r\n                _setAttrAndRegistry(newChildren[i], parameters[paths[i]]);\r\n\r\n                //relations\r\n                names = Object.keys(relations[i]);\r\n                for (j = 0; j < names.length; j++) {\r\n                    state.core.setPointer(newChildren[i], names[j], newChildren[relations[i][names[j]]]);\r\n                }\r\n\r\n                //store\r\n                result[paths[i]] = storeNode(newChildren[i]);\r\n\r\n            }\r\n\r\n            msg = typeof msg === 'string' ? msg : 'createChildren(' + JSON.stringify(result) + ')';\r\n            saveRoot(msg);\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * @description Delete the given node.\r\n         * @function deleteNode\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node to be deleted from the model.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function deleteNode(path, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.deleteNode(node);\r\n                saveRoot(typeof msg === 'string' ? msg : 'deleteNode(' + path + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Delete the given node.\r\n         * @function deleteNodes\r\n         * @memberOf Client\r\n         * @param {string[]} paths - the path/id list of the nodes to be deleted from the model.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function deleteNodes(paths, msg) {\r\n            var didDelete = false,\r\n                i,\r\n                node;\r\n\r\n            for (i = 0; i < paths.length; i++) {\r\n                node = _getNode(paths[i]);\r\n                if (node) {\r\n                    state.core.deleteNode(node);\r\n                    didDelete = true;\r\n                }\r\n            }\r\n\r\n            if (didDelete) {\r\n                saveRoot(typeof msg === 'string' ? msg : 'deleteNodes(' + paths + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.createNode({\r\n         *    parentId: '',\r\n         *    baseId:'/1',\r\n         *    guid:,\r\n         *    relid:'/aaa'\r\n         *   },\r\n         *   {\r\n         *     attributes: {\r\n         *        name: 'MyVeryOwnName'\r\n         *      },\r\n         *      registry: {\r\n         *        position: {x: 100, y:100}\r\n         *      }\r\n         *   },\r\n         *   'Created new node as the child of the root and instance of the FCO.');\r\n         *\r\n         * @description Creates a new node based on the given parameters.\r\n         * @function createNode\r\n         * @memberOf Client\r\n         * @param {object} parameters - the parameters holding necessary information for the creation.\r\n         * @param {string} parameters.parentId - the path/id of the container of the new node.\r\n         * @param {string} parameters.baseId - the path/id of the prototype of the new node.\r\n         * @param {string} parameters.parentId - the id/path of the parent where the new nodes should be created\r\n         * @param {string} [parameters.guid] - the unique identifier of the node we will create.\r\n         * @param {string} [parameters.relid] - the relative id of the node we will create.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function createNode(parameters, desc, msg) {\r\n            var parentNode = _getNode(parameters.parentId),\r\n                baseNode = _getNode(parameters.baseId),\r\n                newNode,\r\n                newID;\r\n\r\n            if (parentNode) {\r\n                newNode = state.core.createNode({\r\n                    parent: parentNode,\r\n                    base: baseNode,\r\n                    guid: parameters.guid,\r\n                    relid: parameters.relid\r\n                });\r\n\r\n                if (newNode instanceof Error) {\r\n                    printCoreError(newNode);\r\n                    return;\r\n                }\r\n\r\n                // By default the position will be {100, 100}\r\n\r\n                desc = desc || {};\r\n                desc.registry = desc.registry || {};\r\n                desc.registry.position = desc.registry.position || {};\r\n                desc.registry.position.x = (typeof desc.registry.position.x === 'number' ||\r\n                    Number(desc.registry.position.x) + '' === desc.registry.position.x) ?\r\n                    Number(desc.registry.position.x) : 100;\r\n                desc.registry.position.y = (typeof desc.registry.position.y === 'number' ||\r\n                    Number(desc.registry.position.y) + '' === desc.registry.position.y) ?\r\n                    Number(desc.registry.position.y) : 100;\r\n\r\n                _setAttrAndRegistry(newNode, desc);\r\n\r\n                storeNode(newNode);\r\n                newID = state.core.getPath(newNode);\r\n                saveRoot(typeof msg === 'string' ? msg :\r\n                    'createNode(' + parameters.parentId + ',' + parameters.baseId + ',' + newID + ')');\r\n            }\r\n\r\n            return newID;\r\n        }\r\n\r\n        /**\r\n         * @description Sets the value of the pointer of the given node.\r\n         * @function setPointer\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that we will modify.\r\n         * @param {string} name - the name of the pointer to set.\r\n         * @param {string|null} target - the id/path of the target node of the pointer. If\r\n         * the value is null, there will be no target for the pointer.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setPointer(path, name, target, msg) {\r\n            var node = _getNode(path),\r\n                targetNode;\r\n\r\n            if (node) {\r\n                if (target === null) {\r\n                    state.core.setPointer(node, name, target);\r\n                } else {\r\n                    targetNode = _getNode(target);\r\n                    state.core.setPointer(node, name, targetNode);\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setPointer(' + path + ',' + name + ',' + target + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes the pointer of the given node.\r\n         * Setting a pointer to null and deleting it is different! \r\n         * (one is a value, the other means the absence of value)\r\n         * @function delPointer\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that we will modify.\r\n         * @param {string} name - the name of the pointer to set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delPointer(path, name, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delPointer(node, name);\r\n                saveRoot(typeof msg === 'string' ? msg : 'delPointer(' + path + ',' + name + ')');\r\n            }\r\n        }\r\n\r\n        // Mixed argument methods - START\r\n        /**\r\n         * @description Add a new member node to the given set of the\r\n         * specified node.\r\n         * @function addMember\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set to expand.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function addMember(path, memberPath, setId, msg) {\r\n            // FIXME: This will have to break due to switched arguments\r\n            var node = _getNode(path),\r\n                memberNode = _getNode(memberPath);\r\n\r\n            if (node && memberNode) {\r\n                state.core.addMember(node, setId, memberNode);\r\n                saveRoot(typeof msg === 'string' ? msg : 'addMember(' + path + ',' + memberPath + ',' + setId + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a member node from the given set of the\r\n         * specified node.\r\n         * @function removeMember\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set to expand.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function removeMember(path, memberPath, setId, msg) {\r\n            // FIXME: This will have to break due to switched arguments (sort of)\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delMember(node, setId, memberPath);\r\n                saveRoot(typeof msg === 'string' ? msg : 'removeMember(' + path + ',' + memberPath + ',' + setId + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Set the given attribute value that is connected to the membership \r\n         * (not the member node, so it only has a meaning in the context of the membership).\r\n         * @function setMemberAttribute\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set where the member exists.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {object|string|null} value - the value of the attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setMemberAttribute(path, memberPath, setId, name, value, msg) {\r\n            // FIXME: This will have to break due to switched arguments\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.setMemberAttribute(node, setId, memberPath, name, value);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setMemberAttribute(' + [path, memberPath, setId, name, value].join(',') + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes the given attribute that is connected to the membership \r\n         * from the node.\r\n         * @function delMemberAttribute\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set to expand.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delMemberAttribute(path, memberPath, setId, name, msg) {\r\n            // FIXME: This will have to break due to switched arguments\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delMemberAttribute(node, setId, memberPath, name);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'delMemberAttribute(' + [path, memberPath, setId, name].join(',') + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Set the given registry value that is connected to the membership \r\n         * (not the member node, so it only has a meaning in the context of the membership).\r\n         * @function setMemberRegistry\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set to expand.\r\n         * @param {string} name - the name of the registry.\r\n         * @param {object|string|null} value - the value of the registry.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setMemberRegistry(path, memberPath, setId, name, value, msg) {\r\n            // FIXME: This will have to break due to switched arguments\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.setMemberRegistry(node, setId, memberPath, name, value);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setMemberRegistry(' + path + ',' + memberPath + ',' + setId + ',' + name + ',' +\r\n                    JSON.stringify(value) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes the given registry that is connected to the membership \r\n         * from the node.\r\n         * @function delMemberRegistry\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} memberPath - the path/id of the member node.\r\n         * @param {string} setId - the name of the set to expand.\r\n         * @param {string} name - the name of the registry.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delMemberRegistry(path, memberPath, setId, name, msg) {\r\n            // FIXME: This will have to break due to switched arguments\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delMemberRegistry(node, setId, memberPath, name);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'delMemberRegistry(' + path + ',' + memberPath + ',' + setId + ',' + name + ')');\r\n            }\r\n        }\r\n\r\n        // Mixed argument methods - END\r\n        /**\r\n         * @description Set the given attribute value of the set of the node \r\n         * (the value is connected to the node, but only in the context of the set).\r\n         * @function setSetAttribute\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setName - the name of the set where the member exists.\r\n         * @param {string} attrName - the name of the attribute.\r\n         * @param {object|string|null} attrValue - the value of the attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setSetAttribute(path, setName, attrName, attrValue, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.setSetAttribute(node, setName, attrName, attrValue);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setSetAttribute(' + path + ',' + setName + ',' + attrName + ',' +\r\n                    JSON.stringify(attrValue) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes the given attribute that is connected to set of the node.\r\n         * @function delSetAttribute\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setName - the name of the set to change.\r\n         * @param {string} attrName - the name of the attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delSetAttribute(path, setName, attrName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delSetAttribute(node, setName, attrName);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'delSetAttribute(' + path + ',' + setName + ',' + attrName + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Set the given registry value of the set of the node \r\n         * (the value is connected to the node, but only in the context of the set).\r\n         * @function setSetRegistry\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setName - the name of the set where the member exists.\r\n         * @param {string} regName - the name of the registry.\r\n         * @param {object|string|null} regValue - the value of the registry.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setSetRegistry(path, setName, regName, regValue, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.setSetRegistry(node, setName, regName, regValue);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setSetRegistry(' + [path, setName, regName, JSON.stringify(regValue)].join(',') + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes the given registry that is connected to set of the node.\r\n         * @function delSetRegistry\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setName - the name of the set to change.\r\n         * @param {string} attrName - the name of the registry.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delSetRegistry(path, setName, regName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.delSetRegistry(node, setName, regName);\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'delSetRegistry(' + path + ',' + setName + ',' + regName + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates a set that belongs to the node.\r\n         * @function createSet\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setId - the name of the set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function createSet(path, setId, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.createSet(node, setId);\r\n                saveRoot(typeof msg === 'string' ? msg : 'createSet(' + path + ',' + setId + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a set that belongs to the node.\r\n         * @function delSet\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} setId - the name of the set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delSet(path, setId, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delSet(node, setId);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delSet(' + path + ',' + setId + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Changes the prototype node of the node.\r\n         * This function should only be used with care!\r\n         * @function setBase\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} basePath - the path/id of the new prototype node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setBase(path, basePath, msg) {\r\n            var node = _getNode(path),\r\n                baseNode = _getNode(basePath),\r\n                error;\r\n\r\n            if (node && baseNode) {\r\n                error = state.core.setBase(node, baseNode);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setBase(' + path + ',' + basePath + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Moves a node into a new container.\r\n         * @function moveNode\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} parentPath - the path/id of the new container node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function moveNode(path, parentPath, msg) {\r\n            var node = _getNode(path),\r\n                parentNode = _getNode(parentPath),\r\n                movedPath;\r\n\r\n            if (node && parentNode) {\r\n                movedPath = storeNode(state.core.moveNode(node, parentNode));\r\n                saveRoot(typeof msg === 'string' ? msg : 'moveNode(' + path + ',' + parentPath + ')');\r\n            }\r\n\r\n            return movedPath;\r\n        }\r\n\r\n        /**\r\n         * @description Removes teh prototype ofd the node. Do not use this function\r\n         * as it is very dangerous!\r\n         * @function delBase\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delBase(path, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.setBase(node, null);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delBase(' + path + ')');\r\n            }\r\n        }\r\n\r\n        // META functions\r\n        /**\r\n         * @description Returns the JSON based meta description of the node.\r\n         * @function getMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function getMeta(path) {\r\n            var node = _getNode(path),\r\n                meta = {children: {}, attributes: {}, pointers: {}, aspects: {}};\r\n\r\n            if (!node) {\r\n                return null;\r\n            }\r\n\r\n            meta = state.core.getJsonMeta(node);\r\n\r\n            return meta;\r\n        }\r\n\r\n        /**\r\n         * @description Set all the meta rules of a node based on a JSON.\r\n         * It has no effect on the inherited rules!\r\n         * @function setMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {object} meta - the directory of rules to be set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setMeta(path, meta, msg) {\r\n            var node = _getNode(path),\r\n                otherNode,\r\n                name,\r\n                i,\r\n                error;\r\n\r\n            if (node) {\r\n                state.core.clearMetaRules(node);\r\n\r\n                //children\r\n                if (meta.children && meta.children.items && meta.children.items.length > 0) {\r\n                    error = state.core.setChildrenMetaLimits(node, meta.children.min, meta.children.max);\r\n                    if (error instanceof Error) {\r\n                        printCoreError(error);\r\n                        return;\r\n                    }\r\n\r\n                    for (i = 0; i < meta.children.items.length; i += 1) {\r\n                        otherNode = _getNode(meta.children.items[i]);\r\n                        if (otherNode) {\r\n                            error = state.core.setChildMeta(node,\r\n                                otherNode,\r\n                                meta.children.minItems[i],\r\n                                meta.children.maxItems[i]);\r\n\r\n                            if (error instanceof Error) {\r\n                                printCoreError(error);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //attributes\r\n                if (meta.attributes) {\r\n                    for (i in meta.attributes) {\r\n                        error = state.core.setAttributeMeta(node, i, meta.attributes[i]);\r\n                        if (error instanceof Error) {\r\n                            printCoreError(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //pointers and sets\r\n                if (meta.pointers) {\r\n                    for (name in meta.pointers) {\r\n                        if (meta.pointers[name].items && meta.pointers[name].items.length > 0) {\r\n                            error = state.core.setPointerMetaLimits(node,\r\n                                name,\r\n                                meta.pointers[name].min,\r\n                                meta.pointers[name].max);\r\n\r\n                            if (error instanceof Error) {\r\n                                printCoreError(error);\r\n                                return;\r\n                            }\r\n\r\n                            for (i = 0; i < meta.pointers[name].items.length; i += 1) {\r\n                                otherNode = _getNode(meta.pointers[name].items[i]);\r\n                                if (otherNode) {\r\n                                    error = state.core.setPointerMetaTarget(node,\r\n                                        name,\r\n                                        otherNode,\r\n                                        meta.pointers[name].minItems[i],\r\n                                        meta.pointers[name].maxItems[i]);\r\n                                    if (error instanceof Error) {\r\n                                        printCoreError(error);\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //aspects\r\n                if (meta.aspects) {\r\n                    for (name in meta.aspects) {\r\n                        for (i = 0; i < meta.aspects[name].length; i += 1) {\r\n                            otherNode = _getNode(meta.aspects[name][i]);\r\n                            if (otherNode) {\r\n                                error = state.core.setAspectMetaTarget(node, name, otherNode);\r\n                                if (error instanceof Error) {\r\n                                    printCoreError(error);\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //constraints\r\n                if (meta.constraints) {\r\n                    for (name in meta.constraints) {\r\n                        if (typeof meta.constraints[name] === 'object') {\r\n                            error = state.core.setConstraint(node, name, meta.constraints[name]);\r\n                            if (error instanceof Error) {\r\n                                printCoreError(error);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setMeta(' + path + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes all Meta rules from the node (does not have effect on the inherited rules).\r\n         * @function clearMetaRules\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function clearMetaRules(path, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                state.core.clearMetaRules(node);\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'clearMetaRules(' + path + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates a mixin connection to the node.\r\n         * @function addMixin\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} addMixin - the path/id of the mixin node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function addMixin(path, mixinPath, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.addMixin(node, mixinPath);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'addMixin(' + path + ',' + mixinPath + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a mixin connection from the node.\r\n         * @function delMixin\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} addMixin - the path/id of the mixin node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delMixin(path, mixinPath, msg) {\r\n            var error,\r\n                node = _getNode(path);\r\n\r\n            if (node) {\r\n                error = state.core.delMixin(node, mixinPath);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delMixin(' + path + ',' + mixinPath + ')');\r\n            }\r\n        }\r\n\r\n        //TODO add function description\r\n        function setChildrenMetaAttribute(path, attrName, value, msg) {\r\n            if (attrName !== 'items') {\r\n                var rawMeta = getMeta(path);\r\n                rawMeta.children[attrName] = value;\r\n                setMeta(path, rawMeta, msg);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates a containment rule for the node.\r\n         * @function setChildMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} childPath - the path/id of the child node.\r\n         * @param {number} min - the minimum allowed number of children of this type.\r\n         * -1 means that there is no lower limit.\r\n         * @param {number} max - the maximum allowed number of children of this type.\r\n         * -1 ,eams there is no upper limit.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setChildMeta(path, childPath, min, max, msg) {\r\n            var node = _getNode(path),\r\n                childNode = _getNode(childPath),\r\n                error;\r\n\r\n            if (childNode && node) {\r\n                error = state.core.setChildMeta(node, childNode, min, max);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setChildMeta(' + path + ',' + childPath + ',' +\r\n                    (min || -1) + ',' + (max || -1) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.setChildMeta(\r\n         *   '/a/b/c',\r\n         *   {\r\n         *     min: 0,\r\n         *     max: 10,\r\n         *     items:[\r\n         *       { id: 'a/b/dd',\r\n         *       min: 0,\r\n         *       max: 1 },\r\n         *       { id: 'a/b/ee',\r\n         *       min: 4,\r\n         *       max: 10 },\r\n         *     ]\r\n         *   },\r\n         *   'Adding containment rules to the node and setting global cardinality.');\r\n         *\r\n         * @description Creates multiple containment rules for the node.\r\n         * @function setChildMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {object} meta - the collection of containment rules.\r\n         * @param {object[]} meta.items - array of containment rules with child \r\n         * type identification and cardinality rules.\r\n         * @param {string} meta.items[i].id - the path/id of the child.\r\n         * @param {string} meta.items[i].min - the lower bound of the cardinality for the given child type.\r\n         * @param {string} meta.items[i].max - the upper bound of the cardinality for the given child type.\r\n         * @param {number} [meta.min] - global lower limit on the number of children of the node.\r\n         * @param {number} [meta.min] - global lower limit on the number of children of the node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setChildrenMeta(path, meta, msg) {\r\n            var node = _getNode(path),\r\n                target,\r\n                error,\r\n                i;\r\n\r\n            if (meta && meta.items && node) {\r\n                for (i = 0; i < meta.items.length; i += 1) {\r\n                    target = _getNode(meta.items[i].id);\r\n                    if (target) {\r\n                        error = state.core.setChildMeta(node, target, meta.items[i].min, meta.items[i].max);\r\n                        if (error instanceof Error) {\r\n                            printCoreError(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                error = state.core.setChildrenMetaLimits(node, meta.min, meta.max);\r\n\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'Meta.setChildrenMeta(' + path + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a containment rule from the node.\r\n         * @function delChildMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} typeId - the path/id of the child node.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delChildMeta(path, typeId, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delChildMeta(node, typeId);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delChildMeta(' + path + ', ' + typeId + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates an attribute meta rule for the node.\r\n         * @function setAttributeMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {object} schema - the description of the attribute rule.\r\n         * @param {'string'|'integer'|'float'|'boolean'|'asset'} schema.type - \r\n         * the type of the attribute.\r\n         * @param {string[]} [enum] - valid choices if the attrubite is an enumeration.\r\n         * @param {string|number|boolean} [default] - the default value of the attribute.\r\n         * @param {boolean} multiline - shows if the string attribute is a multiline one\r\n         * and should be edited in a code-editor style.\r\n         * @param {string} multilineType - show the style of the multiline \r\n         * (c, js, java, ...). helps in functions like syntax highlighting.\r\n         * @param {boolean} isPassword - shows if the attribute should be handled\r\n         * sensitively on the UI.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setAttributeMeta(path, name, schema, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.setAttributeMeta(node, name, schema);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setAttributeMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes an attribute rule from the node.\r\n         * @function delAttributeMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delAttributeMeta(path, name, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delAttributeMeta(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delAttributeMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Add a potential target/member to a pointer/set rule.\r\n         * @function setPointerMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {string} targetPath - the path/id of the new pointer target/member.\r\n         * @param {integer} min - the lower bound of the cardinality of the rule \r\n         * (for pointer it should be always 0).\r\n         * @param {integer} max - the upper bound of the cardinality of the rule \r\n         * (for pointer it should be always 1).\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setPointerMetaTarget(path, name, targetPath, min, max, msg) {\r\n            var node = _getNode(path),\r\n                targetNode = _getNode(targetPath),\r\n                error;\r\n\r\n            if (node && targetNode) {\r\n                error = state.core.setPointerMetaTarget(node, name, targetNode, min, max);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setPointerMetaTarget(' +\r\n                    [path, name, targetPath, min || -1, max || -1].join(',') + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Moves a potential target/member to a pointer/set rule from another.\r\n         * @function movePointerMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {string} targetPath - the path/id of the pointer target/member.\r\n         * @param {string} oldName - the name of the current pointer rule.\r\n         * @param {integer} newName - the name of the new pointer/set rule.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function movePointerMetaTarget(path, targetPath, oldName, newName, msg) {\r\n            var node = _getNode(path),\r\n                targetNode = _getNode(targetPath);\r\n\r\n            if (node && targetNode) {\r\n                try {\r\n                    state.core.movePointerMetaTarget(node, targetNode, oldName, newName);\r\n                } catch (err) {\r\n                    printCoreError(err);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'movePointerMetaTarget(' + path + ', ' + targetPath + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a target/member from a pointer/set rule.\r\n         * @function delPointerMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {string} targetPath - the path/id of the pointer target/member.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delPointerMetaTarget(path, name, targetPath, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delPointerMetaTarget(node, name, targetPath);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg :\r\n                    'delPointerMetaTarget(' + path + ', ' + name + ', ' + targetPath + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a complete pointer/set rule including all target/member rules.\r\n         * @function delPointerMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delPointerMeta(path, name, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delPointerMeta(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delPointerMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * client.setPointerMeta(\r\n         *   '/a/b/c',\r\n         *   'myPointer',\r\n         *   {\r\n         *     min: 0,\r\n         *     max: 1,\r\n         *     items:[\r\n         *       { id: 'a/b/dd',\r\n         *       min: 0,\r\n         *       max: 1 },\r\n         *       { id: 'a/b/ee',\r\n         *       min: 0,\r\n         *       max: 1 },\r\n         *     ]\r\n         *   },\r\n         *   'Adding pointer rules to the node.');\r\n         * @example\r\n         * * client.setPointerMeta(\r\n         *   '/a/b/c',\r\n         *   'mySet',\r\n         *   {\r\n         *     items:[\r\n         *       { id: 'a/b/dd'},\r\n         *       { id: 'a/b/ee'},\r\n         *     ]\r\n         *   },\r\n         *   'Adding set rules to the node.');\r\n         *\r\n         * @description Creates a pointer/set meta rule with multiple potential target/member.\r\n         * @function setPointerMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {object} meta - the collection of pointer/set rules.\r\n         * @param {object[]} meta.items - array of target/member rules.\r\n         * @param {string} meta.items[i].id - the path/id of the target/member.\r\n         * @param {string} meta.items[i].min - the lower bound of the cardinality for the given target/member.\r\n         * @param {string} meta.items[i].max - the upper bound of the cardinality for the given target/member.\r\n         * @param {number} [meta.min] - global lower limit on the number of target/member of the node.\r\n         * should be 0 for pointer!\r\n         * @param {number} [meta.max] - global upper limit on the number of target/member of the node.\r\n         * should be 1 for pointer!\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setPointerMeta(path, name, meta, msg) {\r\n            var node = _getNode(path),\r\n                target,\r\n                error,\r\n                i;\r\n\r\n            if (meta && meta.items && node) {\r\n                for (i = 0; i < meta.items.length; i += 1) {\r\n                    target = _getNode(meta.items[i].id);\r\n                    if (target) {\r\n                        error = state.core.setPointerMetaTarget(node,\r\n                            name,\r\n                            target,\r\n                            meta.items[i].min,\r\n                            meta.items[i].max);\r\n\r\n                        if (error instanceof Error) {\r\n                            printCoreError(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                error = state.core.setPointerMetaLimits(node, name, meta.min, meta.max);\r\n\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'setPointerMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates/extends an aspect rule set (filtered contaiment).\r\n         * @function setAspectMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string} targetPath - the path/id of the new member.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setAspectMetaTarget(path, name, targetPath, msg) {\r\n            var node = _getNode(path),\r\n                targetNode = _getNode(targetPath),\r\n                error;\r\n\r\n            if (node && targetNode) {\r\n                error = state.core.setAspectMetaTarget(node, name, targetNode);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ?\r\n                    msg : 'setAspectMetaTarget(' + path + ', ' + name + ',' + targetPath + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes an element from an aspect rule set (filtered contaiment).\r\n         * @function delAspectMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string} targetPath - the path/id of the member.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delAspectMetaTarget(path, name, targetPath, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delAspectMetaTarget(node, name, targetPath);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delAspectMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Creates/extends an aspect rule set (filtered contaiment) \r\n         * with multiple new targets.\r\n         * @function setAspectMetaTargets\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string[]} targetPaths - array of path/id of the new members.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function setAspectMetaTargets(path, name, targetPaths, msg) {\r\n            var node = _getNode(path),\r\n                i,\r\n                target,\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delAspectMeta(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                for (i = 0; i < targetPaths.length; i += 1) {\r\n                    target = _getNode(targetPaths[i]);\r\n                    if (target) {\r\n                        error = state.core.setAspectMetaTarget(node, name, target);\r\n                        if (error instanceof Error) {\r\n                            printCoreError(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg :\r\n                    'setAspectMetaTargets(' + path + ', ' + name + ',' + JSON.stringify(targetPaths) + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Removes a complete aspect rule set (filtered contaiment).\r\n         * @function delAspectMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node that will be modified.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with the \r\n         * function name and input parameters will be used\r\n         * @instance\r\n         */\r\n        function delAspectMeta(path, name, msg) {\r\n            var node = _getNode(path),\r\n                error;\r\n\r\n            if (node) {\r\n                error = state.core.delAspectMeta(node, name);\r\n                if (error instanceof Error) {\r\n                    printCoreError(error);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'delAspectMeta(' + path + ', ' + name + ')');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Check if the given node is an instance of the type node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function isTypeOf\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} typePath - the path/id of the type node.\r\n         * @returns {boolean} - true if the node inherits from the type node, false otherwise \r\n         * (or if one of the nodes is not accessible).\r\n         * @instance\r\n         */\r\n        function isTypeOf(path, typePath) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.isTypeOf(node, typePath);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @description Check if the given node is valid target for the pointer of the other node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function isValidTarget\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node that hold the pointer rule \r\n         * (the source of the pointer).\r\n         * @param {string} name - the name of the pointer to check.\r\n         * @param {string} targetPath - the path/id of the target node.\r\n         * @returns {boolean} - true if the target node is a valid target for \r\n         * the pointer of the node, false otherwise \r\n         * (or if one of the nodes is not accessible).\r\n         * @instance\r\n         */\r\n        function isValidTarget(path, name, targetPath) {\r\n            var node = _getNode(path),\r\n                target = _getNode(targetPath);\r\n\r\n            if (node && target) {\r\n                return state.core.isValidTargetOf(target, node, name);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @description Filters out potential pointer targets based on wether they \r\n         * would be valid targets.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function filterValidTarget\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node that hold the pointer rule \r\n         * (the source of the pointer).\r\n         * @param {string} name - the name of the pointer to check.\r\n         * @param {string[]} paths - the path/id of the target nodes.\r\n         * @returns {string[]} - list of path/id of valid target nodes.\r\n         * @instance\r\n         */\r\n        function filterValidTarget(path, name, paths) {\r\n            var targets = [];\r\n\r\n            for (var i = 0; i < paths.length; i++) {\r\n                if (isValidTarget(path, name, paths[i])) {\r\n                    targets.push(paths[i]);\r\n                }\r\n            }\r\n\r\n            return targets;\r\n        }\r\n\r\n        /**\r\n         * @description Collects the meta node ids, that can be instantiated for a \r\n         * valid target of the given pointer of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getValidTargetTypes\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node that hold the pointer rule \r\n         * (the source of the pointer).\r\n         * @param {string} name - the name of the pointer to check.\r\n         * @returns {string[]} - list of path/id of valid target meta-nodes.\r\n         * @instance\r\n         */\r\n        function getValidTargetTypes(path, name) {\r\n            var node = _getNode(path),\r\n                meta, i,\r\n                targets = [];\r\n\r\n            if (node) {\r\n                meta = state.core.getPointerMeta(node, name);\r\n\r\n                for (i in meta) {\r\n                    if (i !== 'min' && i !== 'max') {\r\n                        targets.push(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return targets;\r\n        }\r\n\r\n        /**\r\n         * @description Collects the meta node ids, that can be instantiated for a \r\n         * valid target of the given pointer of the node. Additionaly it filters out those\r\n         * that only valid due to inherioted rules.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getOwnValidTargetTypes\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node that hold the pointer rule \r\n         * (the source of the pointer).\r\n         * @param {string} name - the name of the pointer to check.\r\n         * @returns {string[]} - list of path/id of valid target meta-nodes.\r\n         * @instance\r\n         */\r\n        function getOwnValidTargetTypes(path, name) {\r\n            var node = _getNode(path),\r\n                ownMeta;\r\n\r\n            if (node) {\r\n                ownMeta = state.core.getOwnJsonMeta(node);\r\n                ownMeta.pointers = ownMeta.pointers || {};\r\n                ownMeta.pointers[name] = ownMeta.pointers[name] || {};\r\n\r\n                return ownMeta.pointers[name].items || [];\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        function _getValidTargetItems(path, name, ownOnly) {\r\n            var node = _getNode(path),\r\n                meta,\r\n                paths,\r\n                items = [],\r\n                i;\r\n\r\n            if (node) {\r\n                meta = state.core.getPointerMeta(node, name);\r\n                paths = ownOnly ? state.core.getOwnJsonMeta(node) : state.core.getJsonMeta(node);\r\n                if (paths && paths.pointers && paths.pointers[name]) {\r\n                    paths = paths.pointers[name].items || [];\r\n                } else {\r\n                    paths = [];\r\n                }\r\n\r\n                if (meta && paths.length > 0) {\r\n                    delete meta.min;\r\n                    delete meta.max;\r\n                    for (i in meta) {\r\n                        if (paths.indexOf(i) !== -1) {\r\n                            items.push({\r\n                                id: i,\r\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\r\n                                max: meta[i].max === -1 ? undefined : meta[i].max\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return items;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @description Identical to [getValidTargetTypes]{@link Client#getValidTargetTypes}.\r\n         * @function getValidTargetItems\r\n         * @memberOf Client\r\n         * @instance\r\n         */\r\n        function getValidTargetItems(path, name) {\r\n            return _getValidTargetItems(path, name, false);\r\n        }\r\n\r\n        /**\r\n         * @description Identical to [getOwnValidTargetTypes]{@link Client#getOwnValidTargetTypes}.\r\n         * @function getOwnValidTargetItems\r\n         * @memberOf Client\r\n         * @instance\r\n         */\r\n        function getOwnValidTargetItems(path, name) {\r\n            return _getValidTargetItems(path, name, true);\r\n        }\r\n\r\n        /**\r\n         * @description Checks if the node would be a valid child of the given parent.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getValidChildrenTypes\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} parentPath - the path/id of the parent node.\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {boolean} - true if the node would be a valid child of the parent, \r\n         * false otherwise (or if any of the nodes is missing).\r\n         * @instance\r\n         */\r\n        function isValidChild(parentPath, path) {\r\n            var node = _getNode(path),\r\n                parentNode = _getNode(parentPath);\r\n\r\n            if (node && parentNode) {\r\n                return state.core.isValidChildOf(node, parentNode);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @description Collects the meta node ids, that can be instantiated for a \r\n         * valid child of the given node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getValidChildrenTypes\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {string[]} - list of path/id of valid target meta-nodes.\r\n         * @instance\r\n         */\r\n        function getValidChildrenTypes(path) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getValidChildrenPaths(node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Collects the names of the valid attributes of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getValidAttributeNames\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {string[]} - list of valid attribute names.\r\n         * @instance\r\n         */\r\n        function getValidAttributeNames(path) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getValidAttributeNames(node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Collects the names of the valid attributes of the node.\r\n         * Additionally, it filters out those names that are inherited for the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getOwnValidAttributeNames\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {string[]} - list of valid attribute names.\r\n         * @instance\r\n         */\r\n        function getOwnValidAttributeNames(path) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getOwnValidAttributeNames(node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the meta rules related to a pointer/set of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getPointerMeta\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node that hold the pointer rule \r\n         * (the source of the pointer).\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @returns {object} - structured object of the rules related to the pointer/set.\r\n         * @instance\r\n         */\r\n        function getPointerMeta(path, name) {\r\n            var node = _getNode(path),\r\n                meta,\r\n                i,\r\n                pointerMeta;\r\n\r\n            if (node) {\r\n                meta = state.core.getPointerMeta(node, name);\r\n\r\n                if (meta) {\r\n                    pointerMeta = {min: meta.min, max: meta.max, items: []};\r\n\r\n                    for (i in meta) {\r\n                        if (i !== 'min' && i !== 'max') {\r\n                            pointerMeta.items.push({\r\n                                id: i,\r\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\r\n                                max: meta[i].max === -1 ? undefined : meta[i].max\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return pointerMeta;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the meta rules related to an attribute of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getAttributeSchema\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} name - the name of the attribute.\r\n         * @returns {object} - structured collection of the rules of the attribute.\r\n         * @instance\r\n         */\r\n        function getAttributeSchema(path, name) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getAttributeMeta(node, name);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * @description Collect and returns a list of aspects defined for the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getMetaAspectNames\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {string[]} - list of valid aspect names.\r\n         * @instance\r\n         */\r\n        function getMetaAspectNames(path) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getValidAspectNames(node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Collect and returns a list of aspects defined for the node.\r\n         * Additionally, it filters out those aspects that are inherited for the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getOwnMetaAspectNames\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {string[]} - list of valid aspect names.\r\n         * @instance\r\n         */\r\n        function getOwnMetaAspectNames(path) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                return state.core.getOwnValidAspectNames(node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the meta rules related to an aspect of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getMetaAspect\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} name - the name of the aspect.\r\n         * @returns {object} - structured collection of the rules of the aspect.\r\n         * @instance\r\n         */\r\n        function getMetaAspect(path, name) {\r\n            var node = _getNode(path),\r\n                meta;\r\n\r\n            if (node) {\r\n                meta = state.core.getAspectMeta(node, name);\r\n\r\n                if (meta) {\r\n                    return {items: meta};\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @description Checks if the node has meta rules of its own (not inherited).\r\n         * All participant nodes have to be loaded to the client\r\n         * @function hasOwnMetaRules\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} name - the name of the aspect.\r\n         * @returns {boolean} - true if the node has some rule of its own, \r\n         * false if it only has inherited rules.\r\n         * @instance\r\n         */\r\n        function hasOwnMetaRules(path) {\r\n            var node = _getNode(path),\r\n                ownMeta, key;\r\n\r\n            if (node) {\r\n                ownMeta = state.core.getOwnJsonMeta(node);\r\n\r\n                //children\r\n                if (ownMeta.children && ownMeta.children.items && ownMeta.children.items.length > 0) {\r\n                    return true;\r\n                }\r\n\r\n                //pointers\r\n                for (key in ownMeta.pointers || {}) {\r\n                    return true;\r\n                }\r\n\r\n                //attributes\r\n                for (key in ownMeta.attributes || {}) {\r\n                    return true;\r\n                }\r\n                //aspects\r\n                for (key in ownMeta.aspects || {}) {\r\n                    return true;\r\n                }\r\n\r\n                //mixins\r\n                if (ownMeta.mixins && ownMeta.mixins.length > 0) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the meta rules related to containment of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [getChildrenMeta]{@link Core#getChildrenMeta}\r\n         * @function getChildrenMeta\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {object} - structured collection of the rules of the containment.\r\n         * @instance\r\n         */\r\n        function getChildrenMeta(path) {\r\n            //the returned object structure is : {'min':0,'max':0,'items':[{'id':path,'min':0,'max':0},...]}\r\n            var node = _getNode(path),\r\n                meta, i,\r\n                childrenMeta = {items: []};\r\n\r\n            if (node) {\r\n                meta = state.core.getChildrenMeta(node);\r\n                if (meta) {\r\n                    childrenMeta = {min: meta.min, max: meta.max, items: []};\r\n                    for (i in meta) {\r\n                        if (i !== 'min' && i !== 'max') {\r\n                            childrenMeta.items.push({\r\n                                id: i,\r\n                                min: meta[i].min === -1 ? undefined : meta[i].min,\r\n                                max: meta[i].max === -1 ? undefined : meta[i].max\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return childrenMeta;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        //FIXME: what is this?\r\n        function getChildrenMetaAttribute(path/*, attrName*/) {\r\n            var childrenMeta = getChildrenMeta(path);\r\n            if (childrenMeta) {\r\n                return childrenMeta.attrName;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the list of containment rules of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getValidChildrenItems\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {object} - structured collection of children types of the \r\n         * containment with cardinality information.\r\n         * @instance\r\n         */\r\n        function getValidChildrenItems(path) {\r\n            var childrenMeta = getChildrenMeta(path);\r\n            if (childrenMeta) {\r\n                return childrenMeta.items;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @description Collects and returns the list of containment rules of the node.\r\n         * Additionally the list filters out elements that are inherited.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getOwnValidChildrenTypes\r\n         * @memberOf Client\r\n         * @deprecated The function provided in GMENode class should be used! \r\n         * (this one will be removed at the next major release)\r\n         * @param {string} path - the path/id of the node.\r\n         * @returns {object} - structured collection of children types of the \r\n         * containment with cardinality information.\r\n         * @instance\r\n         */\r\n        function getOwnValidChildrenTypes(path) {\r\n            var node = _getNode(path),\r\n                ownMeta;\r\n\r\n            if (node) {\r\n                ownMeta = state.core.getOwnJsonMeta(node);\r\n\r\n                if (ownMeta && ownMeta.children && ownMeta.children.items) {\r\n                    return ownMeta.children.items;\r\n                }\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        /**\r\n         * @description Returns a client pattern that covers the given aspect of the node.\r\n         * All participant nodes have to be loaded to the client\r\n         * @function getAspectTerritoryPattern\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} name - the name of the aspect.\r\n         * @returns {object} - object representing the client territory\r\n         * @instance\r\n         */\r\n        function getAspectTerritoryPattern(path, name) {\r\n            var aspect = getMetaAspect(path, name);\r\n\r\n            if (aspect !== null) {\r\n                aspect.children = 1; //TODO now it is fixed, maybe we can change that in the future\r\n                return aspect;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * @example\r\n         *\r\n         * var nodeCopies1 = client.copyNodes(['/4', '/3'], '');\r\n         * var nodeCopies2 = client.copyNodes('/4', '/3'], '', 'Copied two nodes');\r\n         *\r\n         * @description Copies the given nodes into the parent \r\n         * (does not enforce meta-rules and requires all participating nodes\r\n         * to be loaded in the client)\r\n         * @see For reference check the correspondent \r\n         * Core function [copyNodes]{@link Core#copyNodes}\r\n         * @function copyNodes\r\n         * @memberOf Client\r\n         * @param {string[]} paths - array of the ids/paths of the nodes to copy\r\n         * @param {string} parentId - the id/path of the parent where the new copies should be created\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @returns {GMENode[]|undefined} - the newly created nodes if all could be copied\r\n         * @instance\r\n         */\r\n        function copyNodes(pathsToCopy, parentPath, msg) {\r\n            var parentNode = _getNode(parentPath),\r\n                copyResult;\r\n\r\n            if (parentNode) {\r\n                copyResult = _copyMultipleNodes(pathsToCopy, parentNode, true);\r\n\r\n                if (copyResult instanceof Error) {\r\n                    printCoreError(copyResult);\r\n                    return;\r\n                }\r\n\r\n                if ((copyResult || []).length !== pathsToCopy.length) {\r\n                    state.logger.error('not all nodes were available - denied -');\r\n                    return;\r\n                }\r\n\r\n                saveRoot(msg);\r\n                return copyResult;\r\n            } else {\r\n                state.logger.error('parent cannot be found - denied -');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Renames a pointer of the node.\r\n         * Effectively, it moves the target of one pointer to another.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [renamePointer]{@link Core#renamePointer}\r\n         * @function renamePointer\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} oldName - the name of the current pointer.\r\n         * @param {string} newName - the name of the new pointer.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function renamePointer(path, oldName, newName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.renamePointer(node, oldName, newName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'renamePointer(' + path + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Renames an attribute of the node.\r\n         * Effectively, it moves the value of one attribute to another.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [renameAttribute]{@link Core#renameAttribute}\r\n         * @function renameAttribute\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} oldName - the name of the current attribute.\r\n         * @param {string} newName - the name of the new attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function renameAttribute(path, oldName, newName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.renameAttribute(node, oldName, newName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'renameAttribute(' + path + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Renames an registry of the node.\r\n         * Effectively, it moves the value of one registry to another.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [renameRegistry]{@link Core#renameRegistry}\r\n         * @function renameRegistry\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} oldName - the name of the current registry.\r\n         * @param {string} newName - the name of the new registry.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function renameRegistry(path, oldName, newName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.renameRegistry(node, oldName, newName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'renameRegistry(' + path + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Renames a set of the node.\r\n         * Effectively, it moves the members of one set to another.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [renameSet]{@link Core#renameSet}\r\n         * @function renameSet\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} oldName - the name of the current set.\r\n         * @param {string} newName - the name of the new set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function renameSet(path, oldName, newName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.renameSet(node, oldName, newName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'renameSet(' + path + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Moves an aspect target rule to a new aspect.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [moveAspectMetaTarget]{@link Core#moveAspectMetaTarget}\r\n         * @function moveAspectMetaTarget\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} targetPath - the path/id of the target to be moved.\r\n         * @param {string} oldName - the name of the current aspect.\r\n         * @param {string} newName - the name of the new aspect.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function moveAspectMetaTarget(path, targetPath, oldName, newName, msg) {\r\n            var node = _getNode(path),\r\n                targetNode = _getNode(targetPath);\r\n\r\n            if (node && targetNode) {\r\n                try {\r\n                    state.core.moveAspectMetaTarget(node, targetNode, oldName, newName);\r\n                } catch (err) {\r\n                    printCoreError(err);\r\n                    return;\r\n                }\r\n\r\n                saveRoot(typeof msg === 'string' ? msg : 'moveAspectMetaTarget(' + path + ', ' + targetPath + ',' +\r\n                    oldName + ',' + newName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Moves a set member to a new set.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [moveMember]{@link Core#moveMember}\r\n         * @function moveMember\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} memberPath - the path/id of the member to be moved.\r\n         * @param {string} oldSetName - the name of the current set.\r\n         * @param {string} newSetName - the name of the new set.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function moveMember(path, memberPath, oldSetName, newSetName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.moveMember(node, memberPath, oldSetName, newSetName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'moveMember(' + path + ', ' + memberPath + ',' +\r\n                    oldSetName + ',' + newSetName);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @description Renames an attribute meta rule.\r\n         * All participant nodes have to be loaded to the client\r\n         * @see For reference check the correspondent \r\n         * Core function [renameAttributeMeta]{@link Core#renameAttributeMeta}\r\n         * @function renameAttributeMeta\r\n         * @memberOf Client\r\n         * @param {string} path - the path/id of the node.\r\n         * @param {string} oldName - the name of the current attribute.\r\n         * @param {string} newName - the name of the new attribute.\r\n         * @param {string} [msg] - optional commit message, if not supplied a default one with \r\n         * the function name and input\r\n         * parameters will be used\r\n         * @instance\r\n         */\r\n        function renameAttributeMeta(path, oldName, newName, msg) {\r\n            var node = _getNode(path);\r\n\r\n            if (node) {\r\n                try {\r\n                    state.core.renameAttributeMeta(node, oldName, newName);\r\n                } catch (e) {\r\n                    printCoreError(e);\r\n                    return;\r\n                }\r\n                saveRoot(typeof msg === 'string' ? msg : 'renameAttributeMeta(' + path + ', ' + oldName + ',' +\r\n                    newName + ')');\r\n            }\r\n        }\r\n\r\n        return {\r\n            setAttribute: setAttribute,\r\n            setAttributes: function () {\r\n                _logDeprecated('setAttributes', 'setAttribute');\r\n                setAttribute.apply(null, arguments);\r\n            },\r\n\r\n            delAttribute: delAttribute,\r\n            delAttributes: function () {\r\n                _logDeprecated('delAttributes', 'delAttribute');\r\n                delAttribute.apply(null, arguments);\r\n            },\r\n            setRegistry: setRegistry,\r\n            delRegistry: delRegistry,\r\n\r\n            copyNode: copyNode,\r\n            copyNodes: copyNodes,\r\n            copyMoreNodes: copyMoreNodes,\r\n            moveNode: moveNode,\r\n            moveMoreNodes: moveMoreNodes,\r\n            deleteNode: deleteNode,\r\n            deleteNodes: deleteNodes,\r\n            delMoreNodes: function () {\r\n                _logDeprecated('delMoreNodes', 'deleteNodes');\r\n                deleteNodes.apply(null, arguments);\r\n            },\r\n            createNode: createNode,\r\n            createChild: function (parameters, msg) {\r\n                return createNode(parameters, {\r\n                    registry: {\r\n                        position: parameters.position\r\n                    }\r\n                }, msg);\r\n            },\r\n            createChildren: createChildren,\r\n\r\n            setPointer: setPointer,\r\n            makePointer: function () {\r\n                _logDeprecated('makePointer', 'setPointer');\r\n                setPointer.apply(null, arguments);\r\n            },\r\n            delPointer: delPointer,\r\n            deletePointer: delPointer,\r\n\r\n            addMember: addMember,\r\n            removeMember: removeMember,\r\n            moveMember: moveMember,\r\n            setMemberAttribute: setMemberAttribute,\r\n            delMemberAttribute: delMemberAttribute,\r\n            setMemberRegistry: setMemberRegistry,\r\n            delMemberRegistry: delMemberRegistry,\r\n            setSetAttribute: setSetAttribute,\r\n            delSetAttribute: delSetAttribute,\r\n            setSetRegistry: setSetRegistry,\r\n            delSetRegistry: delSetRegistry,\r\n            createSet: createSet,\r\n            delSet: delSet,\r\n            deleteSet: delSet,\r\n\r\n            setBase: setBase,\r\n            delBase: delBase,\r\n\r\n            // --- Meta ---\r\n            setMeta: setMeta,\r\n            clearMetaRules: clearMetaRules,\r\n\r\n            // containment\r\n            setChildrenMeta: setChildrenMeta,\r\n            setChildrenMetaAttribute: setChildrenMetaAttribute,\r\n            setChildMeta: setChildMeta,\r\n            updateValidChildrenItem: function (path, newTypeObj, msg) {\r\n                _logDeprecated('updateValidChildrenItem(path, newTypeObj, msg)',\r\n                    'setChildMeta(path, childPath, min, max, msg)');\r\n                newTypeObj = newTypeObj || {};\r\n                setChildMeta(path, newTypeObj.id, newTypeObj.min, newTypeObj.max, msg);\r\n            },\r\n\r\n            delChildMeta: delChildMeta,\r\n            removeValidChildrenItem: function () {\r\n                _logDeprecated('removeValidChildrenItem', 'delChildMeta');\r\n                delChildMeta.apply(null, arguments);\r\n            },\r\n\r\n            // attribute\r\n            setAttributeMeta: setAttributeMeta,\r\n            setAttributeSchema: function () {\r\n                _logDeprecated('setAttributeSchema', 'setAttributeMeta');\r\n                setAttributeMeta.apply(null, arguments);\r\n            },\r\n            delAttributeMeta: delAttributeMeta,\r\n            removeAttributeSchema: function () {\r\n                _logDeprecated('removeAttributeSchema', 'delAttributeMeta');\r\n                delAttributeMeta.apply(null, arguments);\r\n            },\r\n            renameAttributeMeta: renameAttributeMeta,\r\n\r\n            // pointer\r\n            setPointerMeta: setPointerMeta,\r\n            setPointerMetaTarget: setPointerMetaTarget,\r\n            movePointerMetaTarget: movePointerMetaTarget,\r\n            updateValidTargetItem: function (path, name, targetObj, msg) {\r\n                _logDeprecated('updateValidTargetItem(path, name, targetObj, msg)',\r\n                    'setPointerMetaTarget(path, name, targetPath, childPath, min, max, msg)');\r\n                targetObj = targetObj || {};\r\n                setPointerMetaTarget(path, name, targetObj.id, targetObj.min, targetObj.max, msg);\r\n            },\r\n\r\n            delPointerMetaTarget: delPointerMetaTarget,\r\n            removeValidTargetItem: function () {\r\n                _logDeprecated('removeValidTargetItem', 'delPointerMetaTarget');\r\n                delPointerMetaTarget.apply(null, arguments);\r\n            },\r\n            delPointerMeta: delPointerMeta,\r\n            deleteMetaPointer: function () {\r\n                _logDeprecated('deleteMetaPointer', 'delPointerMeta');\r\n                delPointerMeta.apply(null, arguments);\r\n            },\r\n\r\n            // aspect\r\n            setAspectMetaTarget: setAspectMetaTarget,\r\n            setAspectMetaTargets: setAspectMetaTargets,\r\n            moveAspectMetaTarget: moveAspectMetaTarget,\r\n            setMetaAspect: function () {\r\n                _logDeprecated('setMetaAspect', 'setAspectMetaTargets');\r\n                setAspectMetaTargets.apply(null, arguments);\r\n            },\r\n            delAspectMetaTarget: delAspectMetaTarget,\r\n            delAspectMeta: delAspectMeta,\r\n            deleteMetaAspect: function () {\r\n                _logDeprecated('deleteMetaAspect', 'delAspectMeta');\r\n                delAspectMeta.apply(null, arguments);\r\n            },\r\n\r\n            // mixin\r\n            addMixin: addMixin,\r\n            delMixin: delMixin,\r\n\r\n            // renames\r\n            renamePointer: renamePointer,\r\n            renameAttribute: renameAttribute,\r\n            renameRegistry: renameRegistry,\r\n            renameSet: renameSet,\r\n\r\n            // Deprecated meta-getters\r\n            // TODO: These should be moved to Util/GMEConcepts or removed.\r\n            getMeta: function () {\r\n                _logDeprecated('getMeta(path)', 'getJsonMeta()', true);\r\n                return getMeta.apply(null, arguments);\r\n            },\r\n            isTypeOf: function () {\r\n                //_logDeprecated('isTypeOf(path, typePath)', 'isTypeOf(typePath)', true);\r\n                return isTypeOf.apply(null, arguments);\r\n            },\r\n            isValidTarget: function () {\r\n                _logDeprecated('isValidTarget(path, name, targetPath)', 'isValidTargetOf(sourcePath, name)', true);\r\n                return isValidTarget.apply(null, arguments);\r\n            },\r\n            filterValidTarget: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return filterValidTarget.apply(null, arguments);\r\n            },\r\n            getValidTargetTypes: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getValidTargetTypes.apply(null, arguments);\r\n            },\r\n            getOwnValidTargetTypes: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getOwnValidTargetTypes.apply(null, arguments);\r\n            },\r\n            getValidTargetItems: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getValidTargetItems.apply(null, arguments);\r\n            },\r\n            getOwnValidTargetItems: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getOwnValidTargetItems.apply(null, arguments);\r\n            },\r\n            getPointerMeta: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getPointerMeta.apply(null, arguments);\r\n            },\r\n            isValidChild: function () {\r\n                _logDeprecated('isValidChild(path, childPath)', 'isValidChildOf(parentPath)', true);\r\n                return isValidChild.apply(null, arguments);\r\n            },\r\n            getValidChildrenTypes: function () {\r\n                _logDeprecated('getValidChildrenTypes(path)', 'getValidChildrenIds()', true);\r\n                return getValidChildrenTypes.apply(null, arguments);\r\n            },\r\n            getValidAttributeNames: function () {\r\n                _logDeprecated('getValidAttributeNames(path)', 'getValidAttributeNames()', true);\r\n                return getValidAttributeNames.apply(null, arguments);\r\n            },\r\n            getOwnValidAttributeNames: function () {\r\n                _logDeprecated('getOwnValidAttributeNames(path)', 'getOwnValidAttributeNames()', true);\r\n                return getOwnValidAttributeNames.apply(null, arguments);\r\n            },\r\n            getAttributeSchema: function () {\r\n                _logDeprecated('getAttributeSchema(path, name)', 'getAttributeMeta(name)', true);\r\n                return getAttributeSchema.apply(null, arguments);\r\n            },\r\n            getMetaAspectNames: function () {\r\n                _logDeprecated('getMetaAspectNames(path)', 'getValidAspectNames()', true);\r\n                return getMetaAspectNames.apply(null, arguments);\r\n            },\r\n            getOwnMetaAspectNames: function () {\r\n                _logDeprecated('getOwnMetaAspectNames(path)', 'getOwnValidAspectNames()', true);\r\n                return getOwnMetaAspectNames.apply(null, arguments);\r\n            },\r\n            getMetaAspect: function () {\r\n                _logDeprecated('getMetaAspect(path, name)', 'getAspectMeta(name)', true,\r\n                    ' Returned value is of different structure! {items: meta} vs meta');\r\n                return getMetaAspect.apply(null, arguments);\r\n            },\r\n            hasOwnMetaRules: function () {\r\n                // TODO: Should we add a method on the core??\r\n                return hasOwnMetaRules.apply(null, arguments);\r\n            },\r\n            getChildrenMeta: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getChildrenMeta.apply(null, arguments);\r\n            },\r\n            getChildrenMetaAttribute: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getChildrenMetaAttribute.apply(null, arguments);\r\n            },\r\n            getValidChildrenItems: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getValidChildrenItems.apply(null, arguments);\r\n            },\r\n            getOwnValidChildrenTypes: function () {\r\n                // TODO: Should we add a method on the core similar to getValidChildrenTypes?\r\n                return getOwnValidChildrenTypes.apply(null, arguments);\r\n            },\r\n            getAspectTerritoryPattern: function () {\r\n                // TODO: Should we add a method in GMEConcepts or remove this guy?\r\n                return getAspectTerritoryPattern.apply(null, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    return gmeNodeSetter;\r\n});\r\n\n",
    "/*globals define, console*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\ndefine('client/libraries',['common/Constants'], function (CONSTANTS) {\r\n    'use strict';\r\n    function gmeLibraries(logger, state, storage, saveRoot) {\r\n\r\n        function getLibraryNames() {\r\n            if (state.core && state.nodes[CONSTANTS.PROJECT_ROOT_ID] &&\r\n                typeof state.nodes[CONSTANTS.PROJECT_ROOT_ID].node === 'object') {\r\n                return state.core.getLibraryNames(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node);\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        function getLibraryInfo(libraryName) {\r\n            if (state.core && state.nodes[CONSTANTS.PROJECT_ROOT_ID] &&\r\n                typeof state.nodes[CONSTANTS.PROJECT_ROOT_ID].node === 'object') {\r\n                return state.core.getLibraryInfo(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, libraryName) || null;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function removeLibrary(libraryName) {\r\n            state.core.removeLibrary(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, libraryName);\r\n            saveRoot('removeLibrary(' + libraryName + ')');\r\n        }\r\n\r\n        function renameLibrary(oldName, newName) {\r\n            state.core.renameLibrary(state.nodes[CONSTANTS.PROJECT_ROOT_ID].node, oldName, newName);\r\n            saveRoot('renameLibrary(' + oldName + ',' + newName + ')');\r\n        }\r\n\r\n        function openLibraryOriginInNewWindow(libraryRootId, followBranch) {\r\n            // FIXME: This does not belong here (the client knows nothing about the URL serialization..\r\n            //eslint-disable-next-line no-console\r\n            console.warn('client.openLibraryOriginInNewWindow is deprecated use ' +\r\n                'src/client/Utils/LibraryManager.js instead.');\r\n            var address,\r\n                info;\r\n            if (!state.nodes[libraryRootId]) {\r\n                logger.warn('only cached libraries can be followed!');\r\n                return;\r\n            }\r\n            info = getLibraryInfo(state.core.getFullyQualifiedName(state.nodes[libraryRootId].node));\r\n\r\n            if (!info) {\r\n                logger.warn('the library has no valid info');\r\n                return;\r\n            }\r\n\r\n            if (!info.projectId) {\r\n                logger.warn('the library has only partial info');\r\n                return;\r\n            }\r\n\r\n            address = window.location.origin + '/?project=' + encodeURIComponent(info.projectId);\r\n\r\n            if (info.branchName && followBranch) {\r\n                address += '&branch=' + encodeURIComponent(info.branchName);\r\n            } else if (info.commitHash) {\r\n                address += '&commit=' + encodeURIComponent(info.commitHash);\r\n            }\r\n\r\n            window.open(address, '_blank');\r\n            window.focus();\r\n\r\n        }\r\n\r\n        return {\r\n            getLibraryNames: getLibraryNames,\r\n            removeLibrary: removeLibrary,\r\n            renameLibrary: renameLibrary,\r\n            getLibraryInfo: getLibraryInfo,\r\n            openLibraryOriginInNewWindow: openLibraryOriginInNewWindow\r\n        };\r\n    }\r\n\r\n    return gmeLibraries;\r\n});\n",
    "/*global define*/\r\n/*eslint-env browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/gmeServerRequests',['common/Constants', 'common/regexp'], function (CONSTANTS, REGEXP) {\r\n    'use strict';\r\n\r\n    function gmeServerRequest(client, logger, state, storage) {\r\n\r\n        function importProjectFromFile(projectName, branchName, blobHash, ownerId, url, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.IMPORT_PROJECT_FROM_FILE,\r\n                projectName: projectName,\r\n                blobHash: blobHash,\r\n                branchName: branchName,\r\n                ownerId: ownerId,\r\n                url: url\r\n            };\r\n\r\n            logger.debug('creating project from package', parameters);\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function updateProjectFromFile(projectId, branchName, blobHashOrSeedName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.UPDATE_PROJECT_FROM_FILE,\r\n                projectId: projectId,\r\n                branchName: branchName\r\n            };\r\n\r\n            logger.debug('updating project from package', parameters);\r\n\r\n            if (REGEXP.BLOB_HASH.test(blobHashOrSeedName)) {\r\n                parameters.blobHash = blobHashOrSeedName;\r\n            } else {\r\n                parameters.seedName = blobHashOrSeedName;\r\n            }\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function addLibrary(name, blobHashLibraryInfoOrSeedName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.ADD_LIBRARY,\r\n                projectId: state.project.projectId,\r\n                libraryName: name,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            if (typeof blobHashLibraryInfoOrSeedName === 'string') {\r\n                if (REGEXP.BLOB_HASH.test(blobHashLibraryInfoOrSeedName)) {\r\n                    parameters.blobHash = blobHashLibraryInfoOrSeedName;\r\n                } else {\r\n                    parameters.seed = blobHashLibraryInfoOrSeedName;\r\n                }\r\n            } else {\r\n                parameters.libraryInfo = blobHashLibraryInfoOrSeedName;\r\n            }\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function updateLibrary(name, blobHashLibraryInfoOrSeedName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.UPDATE_LIBRARY,\r\n                projectId: state.project.projectId,\r\n                libraryName: name,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            if (typeof blobHashLibraryInfoOrSeedName === 'string') {\r\n                if (REGEXP.BLOB_HASH.test(blobHashLibraryInfoOrSeedName)) {\r\n                    parameters.blobHash = blobHashLibraryInfoOrSeedName;\r\n                } else {\r\n                    parameters.seed = blobHashLibraryInfoOrSeedName;\r\n                }\r\n            } else {\r\n                parameters.libraryInfo = blobHashLibraryInfoOrSeedName;\r\n            }\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function renameConcept(nodePath, type, oldName, newName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.RENAME_CONCEPT,\r\n                projectId: state.project.projectId,\r\n                nodePath: nodePath,\r\n                type: type,\r\n                oldName: oldName,\r\n                newName: newName,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function renameAttributeDefinition(nodePath, meta, oldName, newName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.CHANGE_ATTRIBUTE_META,\r\n                projectId: state.project.projectId,\r\n                nodePath: nodePath,\r\n                meta: meta,\r\n                oldName: oldName,\r\n                newName: newName,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function renamePointerTargetDefinition(nodePath, targetPath, oldName, newName, isSet, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.RENAME_META_POINTER_TARGET,\r\n                projectId: state.project.projectId,\r\n                nodePath: nodePath,\r\n                targetPath: targetPath,\r\n                type: isSet ? 'set' : 'pointer',\r\n                oldName: oldName,\r\n                newName: newName,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function renameAspectDefinition(nodePath, meta, oldName, newName, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.CHANGE_ASPECT_META,\r\n                projectId: state.project.projectId,\r\n                nodePath: nodePath,\r\n                meta: meta,\r\n                type: 'aspect',\r\n                oldName: oldName,\r\n                newName: newName,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        function removeMetaRule(nodePath, name, type, targetPath, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.REMOVE_META_RULE,\r\n                projectId: state.project.projectId,\r\n                nodePath: nodePath,\r\n                type: type,\r\n                name: name,\r\n                targetPath: targetPath,\r\n                branchName: state.branchName\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        //meta rules checking\r\n        /**\r\n         *\r\n         * @param {string[]} nodePaths - Paths to nodes of which to check.\r\n         * @param includeChildren\r\n         * @param callback\r\n         */\r\n        function checkMetaRules(nodePaths, includeChildren, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.CHECK_CONSTRAINTS,\r\n                checkType: 'META', //TODO this should come from a constant\r\n                includeChildren: includeChildren,\r\n                nodePaths: nodePaths,\r\n                commitHash: state.commitHash,\r\n                projectId: state.project.projectId\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n\r\n                if (result) {\r\n                    client.dispatchEvent(client.CONSTANTS.META_RULES_RESULT, result);\r\n                } else {\r\n                    client.notifyUser({\r\n                        severity: 'error',\r\n                        message: 'Evaluating Meta rules failed with error.'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(err, result);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {string[]} nodePaths - Paths to nodes of which to check.\r\n         * @param {boolean} includeChildren - If true will recursively check the children of the nodes to check.\r\n         * @param {function(Error, Object)} callback\r\n         */\r\n        function checkCustomConstraints(nodePaths, includeChildren, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.CHECK_CONSTRAINTS,\r\n                checkType: 'CUSTOM', //TODO this should come from a constant\r\n                includeChildren: includeChildren,\r\n                nodePaths: nodePaths,\r\n                commitHash: state.commitHash,\r\n                projectId: state.project.projectId\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n\r\n                if (result) {\r\n                    client.dispatchEvent(client.CONSTANTS.CONSTRAINT_RESULT, result);\r\n                } else {\r\n                    client.notifyUser({\r\n                        severity: 'error',\r\n                        message: 'Evaluating custom constraints failed with error.'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(err, result);\r\n                }\r\n            });\r\n        }\r\n\r\n        //seed\r\n        function seedProject(parameters, callback) {\r\n            logger.debug('seeding project', parameters);\r\n            parameters.command = CONSTANTS.SERVER_WORKER_REQUESTS.SEED_PROJECT;\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        //automerge\r\n        function autoMerge(projectId, mine, theirs, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.AUTO_MERGE,\r\n                projectId: projectId,\r\n                mine: mine,\r\n                theirs: theirs\r\n            };\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error('autoMerge failed with error', err);\r\n                    callback(err);\r\n                } else {\r\n                    callback(null, result);\r\n                }\r\n            });\r\n        }\r\n\r\n        function resolve(mergeResult, callback) {\r\n            var command = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.RESOLVE,\r\n                partial: mergeResult\r\n            };\r\n\r\n            storage.simpleRequest(command, function (err, result) {\r\n                if (err) {\r\n                    logger.error('resolve failed with error', err);\r\n                    callback(err);\r\n                } else {\r\n                    callback(null, result);\r\n                }\r\n            });\r\n        }\r\n\r\n        //package save\r\n        function exportProjectToFile(projectId, branchName, commitHash, withAssets, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.EXPORT_PROJECT_TO_FILE,\r\n                projectId: projectId,\r\n                branchName: branchName,\r\n                commitHash: commitHash,\r\n                withAssets: withAssets\r\n            };\r\n\r\n            logger.debug('exportProjectToFile, parameters', parameters);\r\n            if (parameters.projectId && (parameters.branchName || commitHash)) {\r\n                storage.simpleRequest(parameters, function (err, result) {\r\n                    if (err && !result) {\r\n                        logger.error('exportProjectToFile failed with error', err);\r\n                        callback(err);\r\n                    } else {\r\n                        callback(err, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('invalid parameters!'));\r\n            }\r\n        }\r\n\r\n        function exportSelectionToFile(projectId, commitHash, selectedIds, withAssets, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.EXPORT_SELECTION_TO_FILE,\r\n                projectId: projectId,\r\n                commitHash: commitHash,\r\n                withAssets: withAssets,\r\n                paths: selectedIds\r\n            };\r\n\r\n            logger.debug('exportSelectionToFile, parameters', parameters);\r\n            if (parameters.projectId && commitHash && selectedIds && selectedIds.length > 0) {\r\n                storage.simpleRequest(parameters, function (err, result) {\r\n                    if (err && !result) {\r\n                        logger.error('exportSelectionToFile failed with error', err);\r\n                        callback(err);\r\n                    } else {\r\n                        callback(err, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('invalid parameters!'));\r\n            }\r\n        }\r\n\r\n        function importSelectionFromFile(projectId, branchName, parentId, blobHash, callback) {\r\n            var parameters = {\r\n                command: CONSTANTS.SERVER_WORKER_REQUESTS.IMPORT_SELECTION_FROM_FILE,\r\n                projectId: projectId,\r\n                blobHash: blobHash,\r\n                parentPath: parentId,\r\n                branchName: branchName\r\n            };\r\n\r\n            logger.debug('import selection from package', parameters);\r\n\r\n            storage.simpleRequest(parameters, function (err, result) {\r\n                if (err) {\r\n                    logger.error(err);\r\n                }\r\n                callback(err, result);\r\n            });\r\n        }\r\n\r\n        return {\r\n            workerRequests: {\r\n                importProjectFromFile: importProjectFromFile,\r\n                updateProjectFromFile: updateProjectFromFile,\r\n                addLibrary: addLibrary,\r\n                updateLibrary: updateLibrary,\r\n                renameConcept: renameConcept,\r\n                renameAttributeDefinition: renameAttributeDefinition,\r\n                renamePointerTargetDefinition: renamePointerTargetDefinition,\r\n                renameAspectDefinition: renameAspectDefinition,\r\n                removeMetaRule: removeMetaRule,\r\n                checkMetaRules: checkMetaRules,\r\n                checkCustomConstraints: checkCustomConstraints,\r\n                seedProject: seedProject,\r\n                autoMerge: autoMerge,\r\n                resolve: resolve,\r\n                exportProjectToFile: exportProjectToFile,\r\n                exportSelectionToFile: exportSelectionToFile,\r\n                importSelectionFromFile: importSelectionFromFile\r\n            },\r\n\r\n            // To keep the client API intact we still provide the old functions directly as well\r\n            importProjectFromFile: importProjectFromFile,\r\n            updateProjectFromFile: updateProjectFromFile,\r\n            addLibrary: addLibrary,\r\n            updateLibrary: updateLibrary,\r\n            checkMetaRules: checkMetaRules,\r\n            checkCustomConstraints: checkCustomConstraints,\r\n            seedProject: seedProject,\r\n            autoMerge: autoMerge,\r\n            resolve: resolve,\r\n            exportProjectToFile: exportProjectToFile,\r\n            exportSelectionToFile: exportSelectionToFile,\r\n            importSelectionFromFile: importSelectionFromFile\r\n        };\r\n    }\r\n\r\n    return gmeServerRequest;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * Client module for accessing the blob.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\ndefine('blob/BlobConfig',[], function () {\r\n    'use strict';\r\n    var BlobConfig = {\r\n        hashMethod: 'sha1', // TODO: in the future we may switch to sha512\r\n        hashRegex: new RegExp('^[0-9a-f]{40}$')\r\n    };\r\n\r\n    return BlobConfig;\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * Client module for accessing the blob.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\ndefine('blob/BlobMetadata',['blob/BlobConfig'], function (BlobConfig) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initializes a new instance of BlobMetadata\r\n     * @param {object} metadata - A serialized metadata object.\r\n     * @param {string} metadata.name\r\n     * @param {string|Object} metadata.content\r\n     * @param {number} [metadata.size=0]\r\n     * @param {BlobMetadata.CONTENT_TYPES} [metadata.contentType=BlobMetadata.CONTENT_TYPES.OBJECT]\r\n     * @param {string} [metadata.mime='']\r\n     * @param {boolean} [metadata.isPublic=false]\r\n     * @param {string[]} [metadata.tags=[]]\r\n     * @constructor\r\n     * @alias BlobMetadata\r\n     */\r\n    var BlobMetadata = function (metadata) {\r\n        var key;\r\n        if (metadata) {\r\n            this.name = metadata.name;\r\n            this.size = metadata.size || 0;\r\n            this.mime = metadata.mime || '';\r\n            this.isPublic = metadata.isPublic || false;\r\n            this.tags = metadata.tags || [];\r\n            this.content = metadata.content;\r\n            this.contentType = metadata.contentType || BlobMetadata.CONTENT_TYPES.OBJECT;\r\n            if (this.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\r\n                for (key in this.content) {\r\n                    if (Object.hasOwn(this.content, key)) {\r\n                        if (BlobConfig.hashRegex.test(this.content[key].content) === false) {\r\n                            throw new Error('BlobMetadata is malformed: hash \\'' + this.content[key].content +\r\n                                '\\'is invalid');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error('metadata parameter is not defined');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Type of the metadata\r\n     * @type {{OBJECT: string, COMPLEX: string, SOFT_LINK: string}}\r\n     */\r\n    BlobMetadata.CONTENT_TYPES = {\r\n        OBJECT: 'object',\r\n        COMPLEX: 'complex',\r\n        SOFT_LINK: 'softLink'\r\n    };\r\n\r\n    /**\r\n     * Serializes the metadata to a JSON object.\r\n     * @returns {{\r\n     *  name: string,\r\n     *  size: number,\r\n     *  mime: string,\r\n     *  tags: Array.<string>,\r\n     *  content: (string|Object),\r\n     *  contentType: string}}\r\n     */\r\n    BlobMetadata.prototype.serialize = function () {\r\n        var metadata = {\r\n            name: this.name,\r\n            size: this.size,\r\n            mime: this.mime,\r\n            isPublic: this.isPublic,\r\n            tags: this.tags,\r\n            content: this.content,\r\n            contentType: this.contentType\r\n        };\r\n\r\n        metadata.tags.sort();\r\n\r\n        if (this.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\r\n            // override on  purpose to normalize content\r\n            metadata.content = {};\r\n            var fnames = Object.keys(this.content);\r\n            fnames.sort();\r\n\r\n            for (var j = 0; j < fnames.length; j += 1) {\r\n                metadata.content[fnames[j]] = this.content[fnames[j]];\r\n            }\r\n        }\r\n\r\n        return metadata;\r\n    };\r\n\r\n    return BlobMetadata;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\ndefine('blob/Artifact',[\r\n    'blob/BlobMetadata',\r\n    'blob/BlobConfig',\r\n    'common/core/tasync',\r\n    'q'\r\n], function (BlobMetadata, BlobConfig, tasync, Q) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates a new instance of artifact, i.e. complex object, in memory. This object can be saved in the blob-storage\r\n     * on the server and later retrieved with its metadata hash.\r\n     * @param {string} name Artifact's name without extension\r\n     * @param {BlobClient} blobClient\r\n     * @param {BlobMetadata} descriptor\r\n     * @constructor\r\n     * @alias Artifact\r\n     */\r\n    var Artifact = function (name, blobClient, descriptor) {\r\n        this.name = name;\r\n        this.blobClient = blobClient;\r\n        this.blobClientPutFile = tasync.unwrap(tasync.throttle(tasync.wrap(blobClient.putFile), 5));\r\n        this.blobClientGetMetadata = tasync.unwrap(tasync.throttle(tasync.wrap(blobClient.getMetadata), 5));\r\n        // TODO: use BlobMetadata class here\r\n        this.descriptor = descriptor || {\r\n            name: name + '.zip',\r\n            size: 0,\r\n            mime: 'application/zip',\r\n            content: {},\r\n            contentType: 'complex'\r\n        }; // name and hash pairs\r\n    };\r\n\r\n    /**\r\n     * Adds content to the artifact as a file.\r\n     * @param {string} name - filename\r\n     * @param {Blob} content - File object or Blob.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addFile = function (name, content, callback) {\r\n        var self = this,\r\n            filename = name.substring(name.lastIndexOf('/') + 1),\r\n            deferred = Q.defer();\r\n\r\n        self.blobClientPutFile.call(self.blobClient, filename, content, function (err, metadataHash) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n\r\n            self.addObjectHash(name, metadataHash, function (err, metadataHash) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n\r\n                deferred.resolve(metadataHash);\r\n            });\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds files as soft-link.\r\n     * @param {string} name - filename.\r\n     * @param {Blob} content - File object or Blob.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addFileAsSoftLink = function (name, content, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this,\r\n            filename = name.substring(name.lastIndexOf('/') + 1);\r\n\r\n        self.blobClientPutFile.call(self.blobClient, filename, content,\r\n            function (err, metadataHash) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n                var size;\r\n                if (content.size !== undefined) {\r\n                    size = content.size;\r\n                }\r\n                if (content.length !== undefined) {\r\n                    size = content.length;\r\n                }\r\n\r\n                self.addMetadataHash(name, metadataHash, size)\r\n                    .then(deferred.resolve)\r\n                    .catch(deferred.reject);\r\n            });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds a hash to the artifact using the given file path.\r\n     * @param {string} name - Path to the file in the artifact. Note: 'a/b/c.txt'\r\n     * @param {string} metadataHash - Metadata hash that has to be added.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>hash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addObjectHash = function (name, metadataHash, callback) {\r\n        var self = this,\r\n            deferred = Q.defer();\r\n\r\n        if (BlobConfig.hashRegex.test(metadataHash) === false) {\r\n            deferred.reject('Blob hash is invalid');\r\n        } else {\r\n            self.blobClientGetMetadata.call(self.blobClient, metadataHash, function (err, metadata) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n\r\n                if (Object.hasOwn(self.descriptor.content, name)) {\r\n                    deferred.reject(new Error('Another content with the same name was already added. ' +\r\n                        JSON.stringify(self.descriptor.content[name])));\r\n\r\n                } else {\r\n                    self.descriptor.size += metadata.size;\r\n\r\n                    self.descriptor.content[name] = {\r\n                        content: metadata.content,\r\n                        contentType: BlobMetadata.CONTENT_TYPES.OBJECT\r\n                    };\r\n                    deferred.resolve(metadataHash);\r\n                }\r\n            });\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds a hash to the artifact using the given file path.\r\n     * @param {string} name - Path to the file in the artifact. Note: 'a/b/c.txt'\r\n     * @param {string} metadataHash - Metadata hash that has to be added.\r\n     * @param {number} [size] - Size of the referenced blob.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>hash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addMetadataHash = function (name, metadataHash, size, callback) {\r\n        var self = this,\r\n            deferred = Q.defer(),\r\n            addMetadata = function (size) {\r\n                if (Object.hasOwn(self.descriptor.content, name)) {\r\n                    deferred.reject(new Error('Another content with the same name was already added. ' +\r\n                        JSON.stringify(self.descriptor.content[name])));\r\n\r\n                } else {\r\n                    self.descriptor.size += size;\r\n\r\n                    self.descriptor.content[name] = {\r\n                        content: metadataHash,\r\n                        contentType: BlobMetadata.CONTENT_TYPES.SOFT_LINK\r\n                    };\r\n                    deferred.resolve(metadataHash);\r\n                }\r\n            };\r\n\r\n        if (typeof size === 'function') {\r\n            callback = size;\r\n            size = undefined;\r\n        }\r\n\r\n        if (BlobConfig.hashRegex.test(metadataHash) === false) {\r\n            deferred.reject(new Error('Blob hash is invalid'));\r\n        } else if (size === undefined) {\r\n            self.blobClientGetMetadata.call(self.blobClient, metadataHash, function (err, metadata) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n                addMetadata(metadata.size);\r\n            });\r\n        } else {\r\n            addMetadata(size);\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds multiple files.\r\n     * @param {Object.<string, Blob>} files files to add\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>metadataHashes</b>.<br>\r\n     * On error the promise will be rejected with {@link Error|string} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addFiles = function (files, callback) {\r\n        var self = this,\r\n            fileNames = Object.keys(files);\r\n\r\n        return Q.all(fileNames.map(function (fileName) {\r\n            return self.addFile(fileName, files[fileName]);\r\n        })).nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds multiple files as soft-links.\r\n     * @param {Object.<string, Blob>} files files to add\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>metadataHashes</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addFilesAsSoftLinks = function (files, callback) {\r\n        var self = this,\r\n            fileNames = Object.keys(files);\r\n\r\n        return Q.all(fileNames.map(function (fileName) {\r\n            return self.addFileAsSoftLink(fileName, files[fileName]);\r\n        })).nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds hashes to the artifact using the given file paths.\r\n     * @param {object.<string, string>} metadataHashes - Keys are file paths and values metadata hashes.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>hashes</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addObjectHashes = function (metadataHashes, callback) {\r\n        var self = this,\r\n            fileNames = Object.keys(metadataHashes);\r\n\r\n        return Q.all(fileNames.map(function (fileName) {\r\n            return self.addObjectHash(fileName, metadataHashes[fileName]);\r\n        })).nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds hashes to the artifact using the given file paths.\r\n     * @param {object.<string, string>} metadataHashes - Keys are file paths and values metadata hashes.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string[]} <b>hashes</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.addMetadataHashes = function (metadataHashes, callback) {\r\n        var self = this,\r\n            fileNames = Object.keys(metadataHashes);\r\n\r\n        return Q.all(fileNames.map(function (fileName) {\r\n            return self.addMetadataHash(fileName, metadataHashes[fileName]);\r\n        })).nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Saves this artifact and uploads the metadata to the server's storage.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    Artifact.prototype.save = function (callback) {\r\n        var deferred = Q.defer();\r\n\r\n        this.blobClient.putMetadata(this.descriptor, function (err, hash) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n            } else {\r\n                deferred.resolve(hash);\r\n            }\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    return Artifact;\r\n});\r\n\n",
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('superagent',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.superagent = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n},{}],2:[function(require,module,exports){\nfunction Agent() {\n  this._defaults = [];\n}\n\n[\"use\", \"on\", \"once\", \"set\", \"query\", \"type\", \"accept\", \"auth\", \"withCredentials\", \"sortQuery\", \"retry\", \"ok\", \"redirects\",\n \"timeout\", \"buffer\", \"serialize\", \"parse\", \"ca\", \"key\", \"pfx\", \"cert\"].forEach(function(fn) {\n  /** Default setting for all requests from this agent */\n  Agent.prototype[fn] = function(/*varargs*/) {\n    this._defaults.push({fn:fn, arguments:arguments});\n    return this;\n  }\n});\n\nAgent.prototype._setDefaults = function(req) {\n    this._defaults.forEach(function(def) {\n      req[def.fn].apply(req, def.arguments);\n    });\n};\n\nmodule.exports = Agent;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count, fn){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\nvar ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nRequestBase.prototype._shouldRetry = function(err, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(err, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  if (res && res.status && res.status >= 500 && res.status != 501) return true;\n  if (err) {\n    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n    // Superagent timeout\n    if (err.timeout && err.code == 'ECONNABORTED') return true;\n    if (err.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {\n      self.end(function(err, res) {\n        if (err) innerReject(err);\n        else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype['catch'] = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n  // name should be either a string or an object.\n  if (null === name || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function(user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on == undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function(n){\n  if ('number' !== typeof n) {\n    throw TypeError(\"Invalid argument\");\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header,\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n\n},{\"./is-object\":3}],5:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.created = 201 == status;\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n    this.unprocessableEntity = 422 == status;\n};\n\n},{\"./utils\":6}],6:[function(require,module,exports){\n'use strict';\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n\n},{}],\"superagent\":[function(require,module,exports){\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('component-emitter');\nvar RequestBase = require('./request-base');\nvar isObject = require('./is-object');\nvar ResponseBase = require('./response-base');\nvar Agent = require('./agent-base');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n\n/**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) { // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[\\/+]json($|[^-\\w])/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str) {\n  var parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      }\n    } catch(custom_err) {\n      new_err = custom_err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    };\n  }\n\n  var encoder = function(string) {\n    if ('function' === typeof btoa) {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = (this.xhr = request.getXHR());\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\nrequest.agent = function() {\n  return new Agent();\n};\n\n[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"PUT\", \"DELETE\"].forEach(function(method) {\n  Agent.prototype[method.toLowerCase()] = function(url, fn) {\n    var req = new request.Request(method, url);\n    this._setDefaults(req);\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn) {\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  var req = request('DELETE', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n}\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n},{\"./agent-base\":2,\"./is-object\":3,\"./request-base\":4,\"./response-base\":5,\"component-emitter\":1}]},{},[])(\"superagent\")\n});\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\ndefine('common/util/uint',[], function () {\r\n    'use strict';\r\n\r\n    // As the earlier used escape function is outdated and crashed in some scenarios, we replaced with this approach\r\n    var decoder = null;\r\n    if (typeof window === 'undefined') {\r\n        var util = require('util');\r\n        decoder = new util.TextDecoder();\r\n    } else {\r\n        decoder = new TextDecoder();\r\n    }\r\n    //this helper function is necessary as in case of large json objects,\r\n    // the library standard function causes stack overflow\r\n    function uint8ArrayToString(uintArray) {\r\n        return decoder.decode(uintArray);\r\n    }\r\n\r\n    return {\r\n        uint8ArrayToString: uint8ArrayToString\r\n    };\r\n});\n",
    "/*globals define, Uint8Array, ArrayBuffer, WebGMEGlobal*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * Client module for accessing the blob.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n * @author ksmyth / https://github.com/ksmyth\r\n */\r\n\r\ndefine('blob/BlobClient',[\r\n    'blob/Artifact',\r\n    'blob/BlobMetadata',\r\n    'superagent',\r\n    'q',\r\n    'common/util/uint'\r\n], function (Artifact, BlobMetadata, superagent, Q, UINT) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Client to interact with the blob-storage. <br>\r\n     *\r\n     * @param {object} parameters\r\n     * @param {object} parameters.logger\r\n     * @constructor\r\n     * @alias BlobClient\r\n     */\r\n    var BlobClient = function (parameters) {\r\n        var self = this;\r\n\r\n        // Store these to be able to create a new instance from an instance.\r\n        this.parameters = parameters;\r\n\r\n        this.artifacts = [];\r\n        if (parameters && parameters.logger) {\r\n            this.logger = parameters.logger;\r\n        } else {\r\n            /*eslint-disable no-console*/\r\n            var doLog = function () {\r\n                console.log.apply(console, arguments);\r\n            };\r\n            this.logger = {\r\n                debug: doLog,\r\n                log: doLog,\r\n                info: doLog,\r\n                warn: doLog,\r\n                error: doLog\r\n            };\r\n            console.warn('Since v1.3.0 BlobClient requires a logger, falling back on console.log.');\r\n            /*eslint-enable no-console*/\r\n        }\r\n\r\n        if (parameters && parameters.uploadProgressHandler) {\r\n            this.uploadProgressHandler = parameters.uploadProgressHandler;\r\n        } else {\r\n            this.uploadProgressHandler = function (fName, e) {\r\n                self.logger.debug('File upload of', fName, e.percent, '%');\r\n            };\r\n        }\r\n\r\n        this.logger.debug('ctor', {metadata: parameters});\r\n\r\n        if (parameters) {\r\n            this.server = parameters.server || this.server;\r\n            this.serverPort = parameters.serverPort || this.serverPort;\r\n            this.httpsecure = (parameters.httpsecure !== undefined) ? parameters.httpsecure : this.httpsecure;\r\n            this.apiToken = parameters.apiToken;\r\n            this.webgmeToken = parameters.webgmeToken;\r\n            this.keepaliveAgentOptions = parameters.keepaliveAgentOptions || {/* use defaults */};\r\n        } else {\r\n            this.keepaliveAgentOptions = {/* use defaults */};\r\n        }\r\n        this.origin = '';\r\n        if (this.httpsecure !== undefined && this.server && this.serverPort) {\r\n            this.origin = (this.httpsecure ? 'https://' : 'http://') + this.server + ':' + this.serverPort;\r\n        }\r\n        if (parameters && typeof parameters.relativeUrl === 'string') {\r\n            this.relativeUrl = parameters.relativeUrl;\r\n        } else if (typeof WebGMEGlobal !== 'undefined' && WebGMEGlobal.gmeConfig &&\r\n            typeof WebGMEGlobal.gmeConfig.client.mountedPath === 'string') {\r\n            this.relativeUrl = WebGMEGlobal.gmeConfig.client.mountedPath + '/rest/blob/';\r\n        } else {\r\n            this.relativeUrl = '/rest/blob/';\r\n        }\r\n        this.blobUrl = this.origin + this.relativeUrl;\r\n\r\n        this.isNodeOrNodeWebKit = typeof process !== 'undefined';\r\n        if (this.isNodeOrNodeWebKit) {\r\n            // node or node-webkit\r\n            this.logger.debug('Running under node or node-web-kit');\r\n            if (this.httpsecure) {\r\n                this.Agent = require('agentkeepalive').HttpsAgent;\r\n            } else {\r\n                this.Agent = require('agentkeepalive');\r\n            }\r\n            if (Object.hasOwn(this.keepaliveAgentOptions, 'ca') === false) {\r\n                this.keepaliveAgentOptions.ca = require('https').globalAgent.options.ca;\r\n            }\r\n            this.keepaliveAgent = new this.Agent(this.keepaliveAgentOptions);\r\n        }\r\n\r\n        this.logger.debug('origin', this.origin);\r\n        this.logger.debug('blobUrl', this.blobUrl);\r\n    };\r\n\r\n    /**\r\n     * Creates and returns a new instance of a BlobClient with the same settings as the current one.\r\n     * This can be used to avoid issues with the artifacts being book-kept at the instance.\r\n     * @returns {BlobClient} A new instance of a BlobClient\r\n     */\r\n    BlobClient.prototype.getNewInstance = function () {\r\n        return new BlobClient(this.parameters);\r\n    };\r\n\r\n    BlobClient.prototype.getMetadataURL = function (hash) {\r\n        return this.origin + this.getRelativeMetadataURL(hash);\r\n    };\r\n\r\n    BlobClient.prototype.getRelativeMetadataURL = function (hash) {\r\n        var metadataBase = this.relativeUrl + 'metadata';\r\n        if (hash) {\r\n            return metadataBase + '/' + hash;\r\n        } else {\r\n            return metadataBase;\r\n        }\r\n    };\r\n\r\n    BlobClient.prototype._getURL = function (base, hash, subpath) {\r\n        var subpathURL = '';\r\n        if (subpath) {\r\n            subpathURL = subpath;\r\n        }\r\n        return this.relativeUrl + base + '/' + hash + '/' + encodeURIComponent(subpathURL);\r\n    };\r\n\r\n    BlobClient.prototype.getViewURL = function (hash, subpath) {\r\n        return this.origin + this.getRelativeViewURL(hash, subpath);\r\n    };\r\n\r\n    BlobClient.prototype.getRelativeViewURL = function (hash, subpath) {\r\n        return this._getURL('view', hash, subpath);\r\n    };\r\n\r\n    /**\r\n     * Returns the get-url for downloading a blob.\r\n     * @param {string} metadataHash\r\n     * @param {string} [subpath] - optional file-like path to sub-object if complex blob\r\n     * @return {string} get-url for blob\r\n     */\r\n    BlobClient.prototype.getDownloadURL = function (metadataHash, subpath) {\r\n        return this.origin + this.getRelativeDownloadURL(metadataHash, subpath);\r\n    };\r\n\r\n    BlobClient.prototype.getRelativeDownloadURL = function (hash, subpath) {\r\n        return this._getURL('download', hash, subpath);\r\n    };\r\n\r\n    BlobClient.prototype.getCreateURL = function (filename, isMetadata) {\r\n        return this.origin + this.getRelativeCreateURL(filename, isMetadata);\r\n    };\r\n\r\n    BlobClient.prototype.getRelativeCreateURL = function (filename, isMetadata) {\r\n        if (isMetadata) {\r\n            return this.relativeUrl + 'createMetadata/';\r\n        } else {\r\n            return this.relativeUrl + 'createFile/' + encodeURIComponent(filename);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Adds a file to the blob storage.\r\n     * @param {string} name - file name.\r\n     * @param {string|Buffer|ArrayBuffer|stream.Readable} data - file content. \r\n     * !ReadStream currently only available from a nodejs setting\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {string} <b>metadataHash</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.putFile = function (name, data, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this,\r\n            contentLength,\r\n            req,\r\n            stream = null;\r\n\r\n        this.logger.debug('putFile', name);\r\n\r\n        function toArrayBuffer(buffer) {\r\n            var ab = new ArrayBuffer(buffer.length),\r\n                view = new Uint8Array(ab);\r\n\r\n            for (var i = 0; i < buffer.length; ++i) {\r\n                view[i] = buffer[i];\r\n            }\r\n\r\n            return ab;\r\n        }\r\n\r\n        if (typeof window === 'undefined') {\r\n            stream = require('stream');\r\n        }\r\n        // On node-webkit, we use XMLHttpRequest, but xhr.send thinks a Buffer is a string and encodes it in utf-8 -\r\n        // send an ArrayBuffer instead.\r\n        if (typeof window !== 'undefined' && typeof Buffer !== 'undefined' && data instanceof Buffer) {\r\n            data = toArrayBuffer(data); // FIXME will this have performance problems\r\n        }\r\n        // on node, empty Buffers will cause a crash in superagent\r\n        if (typeof window === 'undefined' && typeof Buffer !== 'undefined' && data instanceof Buffer) {\r\n            if (data.length === 0) {\r\n                data = '';\r\n            }\r\n        }\r\n        contentLength = Object.hasOwn(data, 'length') ? data.length : data.byteLength;\r\n        req = superagent.post(this.getCreateURL(name));\r\n\r\n        if (typeof window === 'undefined') {\r\n            req.agent(this.keepaliveAgent);\r\n        }\r\n\r\n        this._setAuthHeaders(req);\r\n\r\n        if (typeof data !== 'string' &&\r\n        !(data instanceof String) &&\r\n        typeof window === 'undefined' &&\r\n        !(data instanceof stream.Readable)) {\r\n            req.set('Content-Length', contentLength);\r\n        }\r\n\r\n        req.set('Content-Type', 'application/octet-stream');\r\n\r\n        if (typeof window === 'undefined' && data instanceof stream.Readable) {\r\n            const DEFAULT_ERROR = new Error('Failed to send stream data completely');\r\n            const errorHandler = err => deferred.reject(err || DEFAULT_ERROR);\r\n            data.on('error', errorHandler);\r\n            req.on('error', errorHandler);\r\n            req.on('response', function (res) {\r\n                var response = res.body;\r\n                // Get the first one\r\n                var hash = Object.keys(response)[0];\r\n                self.logger.debug('putFile - result', hash);\r\n                deferred.resolve(hash);\r\n            });\r\n            data.pipe(req);\r\n        } else {\r\n            req.send(data)\r\n                .on('progress', function (event) {\r\n                    self.uploadProgressHandler(name, event);\r\n                })\r\n                .end(function (err, res) {\r\n                    if (err || res.status > 399) {\r\n                        deferred.reject(err || new Error(res.status));\r\n                        return;\r\n                    }\r\n                    var response = res.body;\r\n                    // Get the first one\r\n                    var hash = Object.keys(response)[0];\r\n                    self.logger.debug('putFile - result', hash);\r\n                    deferred.resolve(hash);\r\n                });\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    BlobClient.prototype._setAuthHeaders = function (req) {\r\n        if (this.apiToken) {\r\n            req.set('x-api-token', this.apiToken);\r\n        } else if (this.webgmeToken) {\r\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\r\n        }\r\n    };\r\n\r\n    BlobClient.prototype.putMetadata = function (metadataDescriptor, callback) {\r\n        var metadata = new BlobMetadata(metadataDescriptor),\r\n            deferred = Q.defer(),\r\n            self = this,\r\n            blob,\r\n            contentLength,\r\n            req;\r\n        // FIXME: in production mode do not indent the json file.\r\n        this.logger.debug('putMetadata', {metadata: metadataDescriptor});\r\n        if (typeof Blob !== 'undefined' && typeof window !== 'undefined') {\r\n            // This does not work using the \"new\" Blob class in nodejs - so make sure (for now at least) that\r\n            // we running under a brower even though Blob is defined.\r\n            // https://nodejs.org/api/buffer.html#class-blob\r\n            blob = new Blob([JSON.stringify(metadata.serialize(), null, 4)], {type: 'text/plain'});\r\n            contentLength = blob.size;\r\n        } else {\r\n            blob = Buffer.from(JSON.stringify(metadata.serialize(), null, 4), 'utf8');\r\n            contentLength = blob.length;\r\n        }\r\n\r\n        req = superagent.post(this.getCreateURL(metadataDescriptor.name, true));\r\n        this._setAuthHeaders(req);\r\n\r\n        if (typeof window === 'undefined') {\r\n            req.agent(this.keepaliveAgent);\r\n            req.set('Content-Length', contentLength);\r\n        }\r\n\r\n        req.set('Content-Type', 'application/octet-stream')\r\n            .send(blob)\r\n            .end(function (err, res) {\r\n                if (err || res.status > 399) {\r\n                    deferred.reject(err || new Error(res.status));\r\n                    return;\r\n                }\r\n                // Uploaded.\r\n                var response = JSON.parse(res.text);\r\n                // Get the first one\r\n                var hash = Object.keys(response)[0];\r\n                self.logger.debug('putMetadata - result', hash);\r\n                deferred.resolve(hash);\r\n            });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Adds multiple files to the blob storage.\r\n     * @param {object.<string, string|Buffer|ArrayBuffer>} o - Keys are file names and values the content.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {object}\r\n     * <b>fileNamesToMetadataHashes</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.putFiles = function (o, callback) {\r\n        var self = this,\r\n            deferred = Q.defer(),\r\n            error,\r\n            filenames = Object.keys(o),\r\n            remaining = filenames.length,\r\n            hashes = {},\r\n            putFile;\r\n\r\n        if (remaining === 0) {\r\n            deferred.resolve(hashes);\r\n        }\r\n        putFile = function (filename, data) {\r\n            self.putFile(filename, data, function (err, hash) {\r\n                remaining -= 1;\r\n\r\n                hashes[filename] = hash;\r\n\r\n                if (err) {\r\n                    error = err;\r\n                    self.logger.error('putFile failed with error', {metadata: err});\r\n                }\r\n\r\n                if (remaining === 0) {\r\n                    if (error) {\r\n                        deferred.reject(error);\r\n                    } else {\r\n                        deferred.resolve(hashes);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        for (var j = 0; j < filenames.length; j += 1) {\r\n            putFile(filenames[j], o[filenames[j]]);\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    BlobClient.prototype.getSubObject = function (hash, subpath, callback) {\r\n        return this.getObject(hash, callback, subpath);\r\n    };\r\n\r\n    /**\r\n     * Retrieves object from blob storage as a Buffer under node and as an ArrayBuffer in the client.\r\n     * N.B. if the retrieved file is a json-file and running in a browser, the content will be decoded and\r\n     * the string parsed as a JSON.\r\n     * @param {string} metadataHash - hash of metadata for object.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     * @param {string} [subpath] - optional file-like path to sub-object if complex blob\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {Buffer|ArrayBuffer|object}\r\n     * <b>content</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.getObject = function (metadataHash, callback, subpath) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n\r\n        this.logger.debug('getObject', metadataHash, subpath);\r\n\r\n        superagent.parse['application/zip'] = function (obj, parseCallback) {\r\n            if (parseCallback) {\r\n                // Running on node; this should be unreachable due to req.pipe() below\r\n            } else {\r\n                return obj;\r\n            }\r\n        };\r\n        //superagent.parse['application/json'] = superagent.parse['application/zip'];\r\n\r\n        var req = superagent.get(this.getViewURL(metadataHash, subpath));\r\n        this._setAuthHeaders(req);\r\n\r\n        if (typeof window === 'undefined') {\r\n            // running on node\r\n            req.agent(this.keepaliveAgent);\r\n            var Writable = require('stream').Writable;\r\n            var BuffersWritable = function (options) {\r\n                Writable.call(this, options);\r\n\r\n                var self = this;\r\n                self.buffers = [];\r\n            };\r\n            require('util').inherits(BuffersWritable, Writable);\r\n\r\n            BuffersWritable.prototype._write = function (chunk, encoding, cb) {\r\n                this.buffers.push(chunk);\r\n                cb();\r\n            };\r\n\r\n            var buffers = new BuffersWritable();\r\n            buffers.on('finish', function () {\r\n                if (req.req.res.statusCode > 399) {\r\n                    deferred.reject(new Error(req.req.res.statusCode));\r\n                } else {\r\n                    deferred.resolve(Buffer.concat(buffers.buffers));\r\n                }\r\n            });\r\n            buffers.on('error', function (err) {\r\n                deferred.reject(err);\r\n            });\r\n            req.pipe(buffers);\r\n        } else {\r\n            req.removeAllListeners('end');\r\n            req.on('request', function () {\r\n                if (typeof this.xhr !== 'undefined') {\r\n                    this.xhr.responseType = 'arraybuffer';\r\n                }\r\n            });\r\n            // req.on('error', callback);\r\n            req.on('end', function () {\r\n                if (req.xhr.status > 399) {\r\n                    deferred.reject(new Error(req.xhr.status));\r\n                } else {\r\n                    var contentType = req.xhr.getResponseHeader('content-type');\r\n                    var response = req.xhr.response; // response is an arraybuffer\r\n                    if (contentType === 'application/json') {\r\n                        response = JSON.parse(UINT.uint8ArrayToString(new Uint8Array(response)));\r\n                    }\r\n                    self.logger.debug('getObject - result', {metadata: response});\r\n                    deferred.resolve(response);\r\n                }\r\n            });\r\n            // TODO: Why is there an end here too? Isn't req.on('end',..) enough?\r\n            req.end(function (err, result) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                } else {\r\n                    self.logger.debug('getObject - result', {metadata: result});\r\n                    deferred.resolve(result);\r\n                }\r\n            });\r\n        }\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * If running under nodejs and getting large objects use this method to pipe the downloaded\r\n     * object to your provided writeStream.\r\n     * @example\r\n     * // Piping object to the filesystem..\r\n     * var writeStream = fs.createWriteStream('my.zip');\r\n     *\r\n     * writeStream.on('error', function (err) {\r\n     *   // handle error\r\n     * });\r\n     *\r\n     * writeStream.on('finish', function () {\r\n     *   // my.zip exists at this point\r\n     * });\r\n     *\r\n     * blobClient.getStreamObject(metadataHash, writeStream);\r\n     *\r\n     * @param {string} metadataHash - hash of metadata for object.\r\n     * @param {stream.Writable} writeStream - stream the requested data will be piped to.\r\n     * @param {string} [subpath] - optional file-like path to sub-object if complex blob\r\n     */\r\n    BlobClient.prototype.getStreamObject = function (metadataHash, writeStream, subpath) {\r\n        this.logger.debug('getStreamObject', metadataHash, subpath);\r\n\r\n        var req = superagent.get(this.getViewURL(metadataHash, subpath));\r\n\r\n        this._setAuthHeaders(req);\r\n\r\n        if (typeof Buffer !== 'undefined') {\r\n            // running on node\r\n            req.agent(this.keepaliveAgent);\r\n            req.pipe(writeStream);\r\n        } else {\r\n            throw new Error('streamObject only supported under nodejs, use getObject instead.');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieves object from blob storage and parses the content as a string.\r\n     * @param {string} metadataHash - hash of metadata for object.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {string} <b>contentString</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.getObjectAsString = function (metadataHash, callback) {\r\n        var self = this;\r\n        return self.getObject(metadataHash)\r\n            .then(function (content) {\r\n                if (typeof content === 'string') {\r\n                    // This does currently not happen..\r\n                    return content;\r\n                } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\r\n                    return UINT.uint8ArrayToString(new Uint8Array(content));\r\n                } else if (content instanceof ArrayBuffer) {\r\n                    return UINT.uint8ArrayToString(new Uint8Array(content));\r\n                } else if (content !== null && typeof content === 'object') {\r\n                    return JSON.stringify(content);\r\n                } else {\r\n                    throw new Error('Unknown content encountered: ' + content);\r\n                }\r\n            })\r\n            .nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Retrieves object from blob storage and parses the content as a JSON. (Will resolve with error if not valid JSON.)\r\n     * @param {string} metadataHash - hash of metadata for object.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {object} <b>contentJSON</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.getObjectAsJSON = function (metadataHash, callback) {\r\n        var self = this;\r\n        return self.getObject(metadataHash)\r\n            .then(function (content) {\r\n                if (typeof content === 'string') {\r\n                    // This does currently not happen..\r\n                    return JSON.parse(content);\r\n                } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\r\n                    return JSON.parse(UINT.uint8ArrayToString(new Uint8Array(content)));\r\n                } else if (content instanceof ArrayBuffer) {\r\n                    return JSON.parse(UINT.uint8ArrayToString(new Uint8Array(content)));\r\n                } else if (content !== null && typeof content === 'object') {\r\n                    return content;\r\n                } else {\r\n                    throw new Error('Unknown content encountered: ' + content);\r\n                }\r\n            })\r\n            .nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Retrieves metadata from blob storage.\r\n     * @param {string} metadataHash - hash of metadata.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise} On success the promise will be resolved with {object} <b>metadata</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.getMetadata = function (metadataHash, callback) {\r\n        var req = superagent.get(this.getMetadataURL(metadataHash)),\r\n            deferred = Q.defer(),\r\n            self = this;\r\n\r\n        this.logger.debug('getMetadata', metadataHash);\r\n\r\n        this._setAuthHeaders(req);\r\n\r\n        if (typeof window === 'undefined') {\r\n            req.agent(this.keepaliveAgent);\r\n        }\r\n\r\n        req.end(function (err, res) {\r\n            if (err || res.status > 399) {\r\n                deferred.reject(err || new Error(res.status));\r\n            } else {\r\n                self.logger.debug('getMetadata', res.text);\r\n                deferred.resolve(JSON.parse(res.text));\r\n            }\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Creates a new artifact and adds it to array of artifacts of the instance.\r\n     * @param {string} name - Name of artifact\r\n     * @return {Artifact}\r\n     */\r\n    BlobClient.prototype.createArtifact = function (name) {\r\n        var artifact = new Artifact(name, this);\r\n        this.artifacts.push(artifact);\r\n        return artifact;\r\n    };\r\n\r\n    /**\r\n     * Retrieves the {@link Artifact} from the blob storage.\r\n     * @param {hash} metadataHash - hash associated with the artifact.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with\r\n     * {@link Artifact} <b>artifact</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.getArtifact = function (metadataHash, callback) {\r\n        // TODO: get info check if complex flag is set to true.\r\n        // TODO: get info get name.\r\n        var self = this,\r\n            deferred = Q.defer();\r\n        this.logger.debug('getArtifact', metadataHash);\r\n        this.getMetadata(metadataHash, function (err, info) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n\r\n            self.logger.debug('getArtifact - return', {metadata: info});\r\n            if (info.contentType === BlobMetadata.CONTENT_TYPES.COMPLEX) {\r\n                var artifact = new Artifact(info.name, self, info);\r\n                self.artifacts.push(artifact);\r\n                deferred.resolve(artifact);\r\n            } else {\r\n                deferred.reject(new Error('not supported contentType ' + JSON.stringify(info, null, 4)));\r\n            }\r\n\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Saves all the artifacts associated with the current instance.\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with\r\n     * {string[]} <b>artifactHashes</b> (metadataHashes).<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    BlobClient.prototype.saveAllArtifacts = function (callback) {\r\n        var promises = [];\r\n\r\n        for (var i = 0; i < this.artifacts.length; i += 1) {\r\n            promises.push(this.artifacts[i].save());\r\n        }\r\n\r\n        return Q.all(promises).nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Converts bytes to a human readable string.\r\n     * @param {number} - File size in bytes.\r\n     * @param {boolean} [si] - If true decimal conversion will be used (by default binary is used).\r\n     * @returns {string}\r\n     */\r\n    BlobClient.prototype.getHumanSize = function (bytes, si) {\r\n        var thresh = si ? 1000 : 1024,\r\n            units = si ?\r\n                ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] :\r\n                ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\r\n            u = -1;\r\n\r\n        if (bytes < thresh) {\r\n            return bytes + ' B';\r\n        }\r\n\r\n        do {\r\n            bytes = bytes / thresh;\r\n            u += 1;\r\n        } while (bytes >= thresh);\r\n\r\n        return bytes.toFixed(1) + ' ' + units[u];\r\n    };\r\n\r\n    BlobClient.prototype.setToken = function (token) {\r\n        this.webgmeToken = token;\r\n    };\r\n\r\n    return BlobClient;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n */\r\ndefine('client/SaveToDisk',['blob/BlobClient'], function (BlobClient) {\r\n    'use strict';\r\n\r\n    function saveUrlToDisk(fileURL, fileName) {\r\n        // for non-IE\r\n        if (!window.ActiveXObject) {\r\n            var save = document.createElement('a');\r\n            //event = document.createEvent('Event');\r\n\r\n            save.href = fileURL;\r\n            save.target = '_self';\r\n\r\n            if (fileName) {\r\n                save.download = fileName;\r\n            }\r\n\r\n            // event.initEvent('click', true, true);\r\n            // save.dispatchEvent(event);\r\n            // (window.URL || window.webkitURL).revokeObjectURL(save.href);\r\n            save.click();\r\n        } else if (!!window.ActiveXObject && document.execCommand) {\r\n            // for IE\r\n            var _window = window.open(fileURL, '_self');\r\n            _window.document.close();\r\n            _window.document.execCommand('SaveAs', true, fileName || fileURL);\r\n            _window.close();\r\n        }\r\n    }\r\n\r\n    function downloadTextAsFile(filename, text) {\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n        element.setAttribute('download', filename);\r\n\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    function saveJsonToBlobStorage(fileName, data, logger, callback) {\r\n        var bc = new BlobClient({logger: logger}),\r\n            artifact = bc.createArtifact('uploaded');\r\n\r\n        artifact.addFile(fileName, JSON.stringify(data, null, 4), function (err, fileHash) {\r\n            callback(err, bc.getDownloadURL(fileHash));\r\n        });\r\n    }\r\n\r\n    function saveJsonToDisk(fileName, data, logger, callback) {\r\n        saveJsonToBlobStorage(fileName, data, logger, function (err, downloadUrl) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n\r\n            saveUrlToDisk(downloadUrl, fileName);\r\n            callback(null, downloadUrl);\r\n        });\r\n    }\r\n\r\n    return {\r\n        saveToBlobStorage: saveJsonToBlobStorage,\r\n        saveUrlToDisk: saveUrlToDisk,\r\n        saveJsonToDisk: saveJsonToDisk,\r\n        downloadTextAsFile: downloadTextAsFile\r\n    };\r\n});\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n/**\r\n * Contains helper functions for logging/downloading the state of the client.\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/stateloghelpers',[\r\n    './SaveToDisk'\r\n], function (saveToDisk) {\r\n    'use strict';\r\n\r\n    function _stateLogReplacer(key, value) {\r\n        var chainItem,\r\n            prevChain,\r\n            nextChain,\r\n            chain;\r\n        if (key === 'project') {\r\n            if (value) {\r\n                return value.name;\r\n            } else {\r\n                return null;\r\n            }\r\n\r\n        } else if (key === 'core') {\r\n            if (value) {\r\n                return 'instantiated';\r\n            } else {\r\n                return 'notInstantiated';\r\n            }\r\n        } else if (key === 'metaNodes') {\r\n            return Object.keys(value);\r\n        } else if (key === 'nodes') {\r\n            return Object.keys(value);\r\n        } else if (key === 'loadNodes') {\r\n            return Object.keys(value);\r\n        } else if (key === 'users') {\r\n            return Object.keys(value);\r\n        } else if (key === 'rootObject') {\r\n            return;\r\n        } else if (key === 'undoRedoChain') {\r\n            if (value) {\r\n                chain = {\r\n                    previous: null,\r\n                    next: null\r\n                };\r\n                if (value.previous) {\r\n                    prevChain = {};\r\n                    chain.previous = prevChain;\r\n                }\r\n                chainItem = value;\r\n                while (chainItem.previous) {\r\n                    prevChain.previous = {\r\n                        commitHash: chainItem.commitHash,\r\n                        previous: null\r\n                    };\r\n                    prevChain = prevChain.previous;\r\n                    chainItem = chainItem.previous;\r\n                }\r\n                if (value.next) {\r\n                    nextChain = {};\r\n                    chain.next = nextChain;\r\n                }\r\n                chainItem = value;\r\n                while (chainItem.next) {\r\n                    nextChain.next = {\r\n                        commitHash: chainItem.commitHash,\r\n                        next: null\r\n                    };\r\n                    nextChain = nextChain.next;\r\n                    chainItem = chainItem.next;\r\n                }\r\n                return chain;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    function getStateLogString(client, state, doFullState, indent) {\r\n        indent = indent || 0;\r\n        if (doFullState === true) {\r\n            return JSON.stringify(state, _stateLogReplacer, indent);\r\n        } else {\r\n            return JSON.stringify({\r\n                connection: client.getNetworkStatus(),\r\n                projectId: client.getActiveProjectId(),\r\n                branchName: client.getActiveBranchName(),\r\n                branchStatus: client.getBranchStatus(),\r\n                commitHash: client.getActiveCommitHash(),\r\n                rootHash: client.getActiveRootHash(),\r\n                projectReadOnly: client.isProjectReadOnly(),\r\n                commitReadOnly: client.isCommitReadOnly()\r\n            }, null, indent);\r\n        }\r\n    }\r\n\r\n    function downloadStateDump(client, state) {\r\n        var errData = {\r\n            timestamp: (new Date()).toISOString(),\r\n            webgme: {\r\n                NpmVersion: 'n/a',\r\n                version: 'n/a',\r\n                GitHubVersion: 'n/a'\r\n            },\r\n            gmeConfig: client.gmeConfig,\r\n            uiState: null,\r\n            branchErrors: [],\r\n            browserInfo: {\r\n                appCodeName: window.navigator.appCodeName,\r\n                appName: window.navigator.appName,\r\n                appVersion: window.navigator.appVersion,\r\n                onLine: window.navigator.onLine,\r\n                cookieEnabled: window.navigator.cookieEnabled,\r\n                platform: window.navigator.platform,\r\n                product: window.navigator.product,\r\n                userAgent: window.navigator.userAgent\r\n            },\r\n            clientState: JSON.parse(getStateLogString(client, state, true))\r\n        };\r\n\r\n        if (typeof WebGMEGlobal !== 'undefined') {\r\n            /* eslint-disable no-undef*/\r\n            errData.webgme.NpmVersion = WebGMEGlobal.NpmVersion;\r\n            errData.webgme.GitHubVersion = WebGMEGlobal.GitHubVersion;\r\n            errData.webgme.version = WebGMEGlobal.version;\r\n            /* eslint-enable no-undef*/\r\n        }\r\n\r\n        if (typeof client.uiStateGetter === 'function') {\r\n            errData.uiState = client.uiStateGetter();\r\n        } else {\r\n            errData.uiState = 'Client did not have an attached uiStateGetter.';\r\n        }\r\n\r\n        if (state.project && state.branchName && state.project.branches[state.branchName]) {\r\n            state.project.branches[state.branchName].errorList.forEach(function (err) {\r\n                errData.branchErrors.push({\r\n                    message: err.message,\r\n                    stack: err.stack});\r\n            });\r\n        }\r\n\r\n        saveToDisk.downloadTextAsFile('webgme-client-dump.json', JSON.stringify(errData, null, 2));\r\n    }\r\n\r\n    function downloadCommitQueue(client, commitQueue) {\r\n        var backupData = {\r\n            webgmeVersion: client.getConnectedStorageVersion(),\r\n            projectId: client.getActiveProjectId(),\r\n            branchName: client.getActiveBranchName(),\r\n            branchStatus: client.getBranchStatus(),\r\n            commitQueue: commitQueue\r\n        };\r\n\r\n        saveToDisk.downloadTextAsFile('commit-queue-dump.json', JSON.stringify(backupData, null, 2));\r\n    }\r\n\r\n    return {\r\n        downloadStateDump: downloadStateDump,\r\n        getStateLogString: getStateLogString,\r\n        downloadCommitQueue: downloadCommitQueue\r\n    };\r\n});\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * A module representing a PluginNodeDescription.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('plugin/PluginNodeDescription',[], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory();\r\n    }\r\n}(function () {\r\n    'use strict';\r\n    /**\r\n     * Initializes a new instance of plugin node description object.\r\n     *\r\n     * Note: this object is JSON serializable see serialize method.\r\n     *\r\n     * @param config - deserializes an existing configuration to this object.\r\n     * @constructor\r\n     * @alias PluginNodeDescription\r\n     */\r\n    var PluginNodeDescription = function (config) {\r\n        var keys,\r\n            i;\r\n\r\n        this.name = '';\r\n        this.id = '';\r\n\r\n        if (config) {\r\n            keys = Object.keys(config);\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                this[keys[i]] = config[keys[i]];\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Serializes this object to a JSON representation.\r\n     *\r\n     * @returns {{}}\r\n     */\r\n    PluginNodeDescription.prototype.serialize = function () {\r\n        var keys = Object.keys(this),\r\n            result = {},\r\n            i;\r\n\r\n        for (i = 0; i < keys.length; i += 1) {\r\n            result[keys[i]] = this[keys[i]];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return PluginNodeDescription;\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * A module representing a PluginMessage.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('plugin/PluginMessage',['plugin/PluginNodeDescription'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('./PluginNodeDescription'));\r\n    }\r\n}(function (PluginNodeDescription) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initializes a new instance of plugin message.\r\n     *\r\n     * Note: this object is JSON serializable see serialize method.\r\n     *\r\n     * @param {object} config - deserializes an existing configuration to this object.\r\n     * @constructor\r\n     * @alias PluginMessage\r\n     */\r\n    var PluginMessage = function (config) {\r\n        if (config) {\r\n            this.commitHash = config.commitHash;\r\n            if (config.activeNode instanceof PluginNodeDescription) {\r\n                this.activeNode = config.activeNode;\r\n            } else {\r\n                this.activeNode = new PluginNodeDescription(config.activeNode);\r\n            }\r\n\r\n            this.message = config.message;\r\n            if (config.severity) {\r\n                this.severity = config.severity;\r\n            } else {\r\n                this.severity = 'info';\r\n            }\r\n        } else {\r\n            this.commitHash = '';\r\n            this.activeNode = new PluginNodeDescription();\r\n            this.message = '';\r\n            this.severity = 'info';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Serializes this object to a JSON representation.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    PluginMessage.prototype.serialize = function () {\r\n        var result = {\r\n            commitHash: this.commitHash,\r\n            activeNode: this.activeNode.serialize(),\r\n            message: this.message,\r\n            severity: this.severity\r\n        };\r\n\r\n        return result;\r\n    };\r\n\r\n    return PluginMessage;\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * A module representing the base class for PluginResult and InterPluginResult.\r\n * @author pmeijer / https://github.com/meijer\r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('plugin/PluginResultBase',[], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory();\r\n    }\r\n}(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initializes a new instance of a plugin result object.\r\n     * @constructor\r\n     * @alias PluginResultBase\r\n     * @param {string} pluginName - name of plugin.\r\n     */\r\n    var PluginResultBase = function (pluginName) {\r\n        this.success = false;\r\n        this.artifacts = [];\r\n        this.messages = [];\r\n        this.pluginName = pluginName;\r\n    };\r\n\r\n    /**\r\n     * Gets the success flag of this result object\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    PluginResultBase.prototype.getSuccess = function () {\r\n        return this.success;\r\n    };\r\n\r\n    /**\r\n     * Sets the success flag of this result.\r\n     *\r\n     * @param {boolean} value\r\n     */\r\n    PluginResultBase.prototype.setSuccess = function (value) {\r\n        this.success = value;\r\n    };\r\n\r\n    /**\r\n     * Returns with the plugin messages.\r\n     *\r\n     * @returns {PluginMessage[]}\r\n     */\r\n    PluginResultBase.prototype.getMessages = function () {\r\n        return this.messages;\r\n    };\r\n\r\n    /**\r\n     * Adds a new plugin message to the messages list.\r\n     *\r\n     * @param {PluginMessage} pluginMessage\r\n     */\r\n    PluginResultBase.prototype.addMessage = function (pluginMessage) {\r\n        this.messages.push(pluginMessage);\r\n    };\r\n\r\n    /**\r\n     * Returns all artifacts stored.\r\n     *\r\n     * @returns {string[]} hashes - Hashes of the stored artifacts.\r\n     */\r\n    PluginResultBase.prototype.getArtifacts = function () {\r\n        return this.artifacts;\r\n    };\r\n\r\n    /**\r\n     * Adds a saved artifact to the result - linked via its hash.\r\n     *\r\n     * @param {string} hash - Hash of saved artifact.\r\n     */\r\n    PluginResultBase.prototype.addArtifact = function (hash) {\r\n        this.artifacts.push(hash);\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the plugin to which the result object belongs to.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    PluginResultBase.prototype.getPluginName = function () {\r\n        return this.pluginName;\r\n    };\r\n\r\n    return PluginResultBase;\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * A module representing a PluginResult.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('plugin/PluginResult',['plugin/PluginMessage', 'plugin/PluginResultBase'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('./PluginMessage'), require('./PluginResultBase'));\r\n    }\r\n}(function (PluginMessage, PluginResultBase) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Initializes a new instance of a plugin result object.\r\n     *\r\n     * Note: this object is JSON serializable see serialize method.\r\n     *\r\n     * @param config - deserializes an existing configuration to this object.\r\n     * @constructor\r\n     * @augments PluginResultBase\r\n     * @alias PluginResult\r\n     */\r\n    var PluginResult = function (config) {\r\n        var pluginMessage,\r\n            i;\r\n        if (config) {\r\n            this.success = config.success;\r\n            this.pluginName = config.pluginName;\r\n            this.pluginId = config.pluginId;\r\n            this.startTime = config.startTime;\r\n            this.finishTime = config.finishTime;\r\n            this.messages = [];\r\n            this.artifacts = config.artifacts;\r\n            this.error = config.error;\r\n            this.commits = config.commits;\r\n            this.projectId = config.projectId;\r\n\r\n            for (i = 0; i < config.messages.length; i += 1) {\r\n                if (config.messages[i] instanceof PluginMessage) {\r\n                    pluginMessage = config.messages[i];\r\n                } else {\r\n                    pluginMessage = new PluginMessage(config.messages[i]);\r\n                }\r\n                this.messages.push(pluginMessage);\r\n            }\r\n        } else {\r\n            this.success = false;\r\n            this.messages = []; // array of PluginMessages\r\n            this.artifacts = []; // array of hashes\r\n            this.pluginName = 'PluginName N/A';\r\n            this.startTime = null;\r\n            this.finishTime = null;\r\n            this.error = null;\r\n            this.projectId = null;\r\n            this.pluginId = null;\r\n            this.commits = [];\r\n        }\r\n    };\r\n\r\n    // Prototypical inheritance from PluginResultBase.\r\n    PluginResult.prototype = Object.create(PluginResultBase.prototype);\r\n    PluginResult.prototype.constructor = PluginResult;\r\n\r\n    /**\r\n     *\r\n     * @param {object} commitData\r\n     * @param {string} commitData.commitHash - hash of the commit.\r\n     * @param {string} commitData.status - storage.constants./SYNCED/FORKED/MERGED\r\n     * @param {string} commitData.branchName - name of branch that got updated with the commitHash.\r\n     */\r\n    PluginResult.prototype.addCommit = function (commitData) {\r\n        this.commits.push(commitData);\r\n    };\r\n\r\n    //------------------------------------------------------------------------------------------------------------------\r\n    //--------------- Methods used by the plugin manager\r\n\r\n    /**\r\n     * Sets the name of the plugin to which the result object belongs to.\r\n     *\r\n     * @param {string} pluginName - name of the plugin\r\n     */\r\n    PluginResult.prototype.setPluginName = function (pluginName) {\r\n        this.pluginName = pluginName;\r\n    };\r\n\r\n    /**\r\n     * Sets the name of the plugin to which the result object belongs to.\r\n     *\r\n     * @param {string} pluginName - name of the plugin\r\n     */\r\n    PluginResult.prototype.setPluginId = function (pluginId) {\r\n        this.pluginId = pluginId;\r\n    };\r\n\r\n    /**\r\n     * Sets the name of the projectId the result was generated from.\r\n     *\r\n     * @param {string} projectId - id of the project\r\n     */\r\n    PluginResult.prototype.setProjectId = function (projectId) {\r\n        this.projectId = projectId;\r\n    };\r\n\r\n    /**\r\n     * Gets the ISO 8601 representation of the time when the plugin started its execution.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    PluginResult.prototype.getStartTime = function () {\r\n        return this.startTime;\r\n    };\r\n\r\n    /**\r\n     * Sets the ISO 8601 representation of the time when the plugin started its execution.\r\n     *\r\n     * @param {string} time\r\n     */\r\n    PluginResult.prototype.setStartTime = function (time) {\r\n        this.startTime = time;\r\n    };\r\n\r\n    /**\r\n     * Gets the ISO 8601 representation of the time when the plugin finished its execution.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    PluginResult.prototype.getFinishTime = function () {\r\n        return this.finishTime;\r\n    };\r\n\r\n    /**\r\n     * Sets the ISO 8601 representation of the time when the plugin finished its execution.\r\n     *\r\n     * @param {string} time\r\n     */\r\n    PluginResult.prototype.setFinishTime = function (time) {\r\n        this.finishTime = time;\r\n    };\r\n\r\n    /**\r\n     * Gets error if any error occured during execution.\r\n     * FIXME: should this be an Error object?\r\n     * @returns {string}\r\n     */\r\n    PluginResult.prototype.getError = function () {\r\n        return this.error;\r\n    };\r\n\r\n    /**\r\n     * Sets the error string if any error occured during execution.\r\n     * FIXME: should this be an Error object?\r\n     * @param {string} time\r\n     */\r\n    PluginResult.prototype.setError = function (error) {\r\n        if (this.error) {\r\n            // Do not overwrite user defined error.\r\n            return;\r\n        }\r\n\r\n        if (error instanceof Error) {\r\n            this.error = error.message;\r\n        } else {\r\n            this.error = error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Serializes this object to a JSON representation.\r\n     *\r\n     * @returns {{success: boolean, messages: plugin.PluginMessage[], pluginName: string, finishTime: stirng}}\r\n     */\r\n    PluginResult.prototype.serialize = function () {\r\n        var result = {\r\n                success: this.success,\r\n                projectId: this.projectId,\r\n                messages: [],\r\n                commits: this.commits,\r\n                artifacts: this.artifacts,\r\n                pluginName: this.pluginName,\r\n                pluginId: this.pluginId,\r\n                startTime: this.startTime,\r\n                finishTime: this.finishTime,\r\n                error: this.error\r\n            },\r\n            i;\r\n\r\n        for (i = 0; i < this.messages.length; i += 1) {\r\n            result.messages.push(this.messages[i].serialize());\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return PluginResult;\r\n}));\r\n\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * Helper functions used by plugins and plugin-managers.\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('plugin/util',['q'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('q'));\r\n    }\r\n}(function (Q) {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param {object} core\r\n     * @param {GmeNode} rootNode\r\n     * @param {GmeLogger} logger\r\n     * @param {string} [namespace='']\r\n     * @param namespace\r\n     */\r\n    function getMetaNodesMap(core, rootNode, logger, namespace) {\r\n        var paths2MetaNodes = core.getAllMetaNodes(rootNode),\r\n            libraryNames = core.getLibraryNames(rootNode),\r\n            result = {},\r\n            metaNodeName,\r\n            nodeNamespace,\r\n            fullName,\r\n            path;\r\n\r\n        // Gather the META nodes and \"sort\" based on given namespace.\r\n        function startsWith(str, pattern) {\r\n            return str.indexOf(pattern) === 0;\r\n        }\r\n\r\n        if (namespace) {\r\n            if (libraryNames.indexOf(namespace) === -1) {\r\n                throw new Error('Given namespace \"' + namespace + '\" does not exist among the available: [' +\r\n                    libraryNames + '].');\r\n            }\r\n\r\n            for (path in paths2MetaNodes) {\r\n                nodeNamespace = core.getNamespace(paths2MetaNodes[path]);\r\n                metaNodeName = core.getAttribute(paths2MetaNodes[path], 'name');\r\n\r\n                if (startsWith(nodeNamespace, namespace)) {\r\n                    // Trim the based on the chosen namespace (+1 is to remove any dot).\r\n                    nodeNamespace = nodeNamespace.substring(namespace.length + 1);\r\n                    if (nodeNamespace) {\r\n                        result[nodeNamespace + '.' + metaNodeName] = paths2MetaNodes[path];\r\n                    } else {\r\n                        result[metaNodeName] = paths2MetaNodes[path];\r\n                    }\r\n                } else {\r\n                    // Meta node is not within the given namespace and will not be added to META.\r\n                }\r\n            }\r\n        } else {\r\n            for (path in paths2MetaNodes) {\r\n                fullName = core.getFullyQualifiedName(paths2MetaNodes[path]);\r\n                if (result[fullName]) {\r\n                    logger.error('Meta-nodes share the same full name. Will still proceed..', fullName);\r\n                }\r\n\r\n                result[fullName] = paths2MetaNodes[path];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} project\r\n     * @param {object} core\r\n     * @param {string} commitHash\r\n     * @param {GmeLogger} logger\r\n     * @param {object} options\r\n     * @param {string} [options.activeNode=''] - path to active node\r\n     * @param {string[]} [options.activeSelection=[]] - paths to selected nodes.\r\n     * @param {string} [options.namespace=''] - used namespace during execution ('' represents all namespaces).\r\n     * @param callback\r\n     * @returns {*}\r\n     */\r\n    function loadNodesAtCommitHash(project, core, commitHash, logger, options, callback) {\r\n        var result = {\r\n            commitHash: commitHash,\r\n            rootHash: null,\r\n            rootNode: null,\r\n            activeNode: null,\r\n            activeSelection: null,\r\n            META: {}\r\n        };\r\n\r\n        return Q.ninvoke(project, 'loadObject', commitHash)\r\n            .then(function (commitObject) {\r\n                result.rootHash = commitObject.root;\r\n                logger.debug('commitObject loaded');\r\n\r\n                // Load root node.\r\n                return core.loadRoot(result.rootHash);\r\n            })\r\n            .then(function (rootNode) {\r\n                result.rootNode = rootNode;\r\n                logger.debug('rootNode loaded');\r\n\r\n                // Load active node.\r\n                return core.loadByPath(result.rootNode, options.activeNode || '');\r\n            })\r\n            .then(function (activeNode) {\r\n                result.activeNode = activeNode;\r\n                logger.debug('activeNode loaded');\r\n\r\n                // Load active selection.\r\n                options.activeSelection = options.activeSelection || [];\r\n\r\n                return Q.all(options.activeSelection.map(function (nodePath) {\r\n                    return core.loadByPath(result.rootNode, nodePath);\r\n                }));\r\n            })\r\n            .then(function (activeSelection) {\r\n                result.activeSelection = activeSelection;\r\n                logger.debug('activeSelection loaded');\r\n                result.META = getMetaNodesMap(core, result.rootNode, logger, options.namespace);\r\n\r\n                return result;\r\n            })\r\n            .nodeify(callback);\r\n    }\r\n\r\n    return {\r\n        loadNodesAtCommitHash: loadNodesAtCommitHash,\r\n        getMetaNodesMap: getMetaNodesMap,\r\n    };\r\n}));\n",
    "/*globals define*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * Module for finding strongly connected components in a directed graph, that is circular references.\r\n *\r\n * Based on https://gist.github.com/chadhutchins/1440602 but with constant time stack lookup.\r\n * https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\r\n *\r\n * The example below returns the SCC v2,v3,v4\r\n *     v1 -*  v2\r\n *            / *\r\n *           *   \\\r\n *          v3 -* v4\r\n * @example\r\n *\r\n * var t = new Tarjan();\r\n *\r\n * t.addVertex(1);\r\n * t.addVertex(2);\r\n * t.addVertex(3);\r\n * t.addVertex(4);\r\n *\r\n * t.connectVertices(1, 2); // Order matters\r\n * t.connectVertices(2, 3);\r\n * t.connectVertices(3, 4);\r\n * t.connectVertices(4, 2);\r\n *\r\n * t.calculateSCCs();   -> [[1], [2, 3, 4]]\r\n * t.hasLoops(); -> true\r\n *\r\n *\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('common/util/tarjan',[], function () {\r\n    'use strict';\r\n    function Vertex(id) {\r\n        this.id = id;\r\n        this.connectedVertices = [];\r\n        this.index = -1;\r\n        this.lowlink = -1;\r\n    }\r\n\r\n    Vertex.prototype.connectTo = function (vertex) {\r\n        this.connectedVertices.push(vertex);\r\n    };\r\n\r\n    function Graph() {\r\n        // Assumption: ids are unique.\r\n        this.vertices = {};\r\n    }\r\n\r\n    Graph.prototype.addVertex = function (id) {\r\n        if (Object.hasOwn(this.vertices, id)) {\r\n            return false;\r\n        } else {\r\n            this.vertices[id] = new Vertex(id);\r\n            return true;\r\n        }\r\n    };\r\n\r\n    Graph.prototype.connectVertices = function (id1, id2) {\r\n        if (Object.hasOwn(this.vertices, id1) === false) {\r\n            throw new Error('Vertex [' + id1 + '] was never added to graph!');\r\n        }\r\n\r\n        if (Object.hasOwn(this.vertices, id2) === false) {\r\n            throw new Error('Vertex [' + id2 + '] was never added to graph!');\r\n        }\r\n\r\n        this.vertices[id1].connectTo(this.vertices[id2]);\r\n    };\r\n\r\n    function Tarjan() {\r\n        this.index = 0;\r\n        this.stackLookup = {};\r\n        this.stack = [];\r\n        this.graph = new Graph();\r\n        this.SCCs = [];\r\n        this.didRun = false;\r\n    }\r\n\r\n    /**\r\n     * Adds a vertex with given id.\r\n     * @param {string|number} id\r\n     * @returns {boolean} false if it was already added.\r\n     */\r\n    Tarjan.prototype.addVertex = function (id) {\r\n        if (this.didRun) {\r\n            throw new Error('Cannot modify graph after algorithm ran!');\r\n        }\r\n\r\n        return this.graph.addVertex(id);\r\n    };\r\n\r\n    /**\r\n     * Creates a connection from vertex at id1 to vertex at id2\r\n     * @param {string|number} id1\r\n     * @param {string|number} id2\r\n     */\r\n    Tarjan.prototype.connectVertices = function (id1, id2) {\r\n        if (this.didRun) {\r\n            throw new Error('Cannot modify graph after algorithm ran!');\r\n        }\r\n\r\n        this.graph.connectVertices(id1, id2);\r\n    };\r\n\r\n    /**\r\n     * Checks if there are any loops in the graph.\r\n     * @returns {boolean}\r\n     */\r\n    Tarjan.prototype.hasLoops = function () {\r\n        var i;\r\n\r\n        this.calculateSCCs();\r\n\r\n        for (i = 0; i < this.SCCs.length; i += 1) {\r\n            if (this.SCCs[i].length > 1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Returns the strongly connected components (by ids)\r\n     * @returns {Array<Array<String|Number>>} An array with all SCCs.\r\n     */\r\n    Tarjan.prototype.calculateSCCs = function () {\r\n        var id;\r\n\r\n        if (this.didRun === false) {\r\n            for (id in this.graph.vertices) {\r\n                if (this.graph.vertices[id].index < 0) {\r\n                    this._strongConnect(this.graph.vertices[id]);\r\n                }\r\n            }\r\n\r\n            this.didRun = true;\r\n        }\r\n\r\n        return this.SCCs;\r\n    };\r\n\r\n    Tarjan.prototype._strongConnect = function (vertex) {\r\n        var i,\r\n            connectedVertex,\r\n            sccVertices = [],\r\n            topVertex;\r\n        // Set the depth index for v to the smallest unused index\r\n        vertex.index = this.index;\r\n        vertex.lowlink = this.index;\r\n        this.index = this.index + 1;\r\n\r\n        this.stack.push(vertex);\r\n        this.stackLookup[vertex.id] = true;\r\n        // Consider successors of vertex\r\n        // aka... consider each vertex in vertex.connections\r\n        for (i = 0; i < vertex.connectedVertices.length; i += 1) {\r\n            connectedVertex = vertex.connectedVertices[i];\r\n            if (connectedVertex.index < 0) {\r\n                // Successor connectedVertex has not yet been visited; recurse on it\r\n                this._strongConnect(connectedVertex);\r\n                vertex.lowlink = Math.min(vertex.lowlink, connectedVertex.lowlink);\r\n            } else if (this.stackLookup[connectedVertex.id]) {\r\n                // Successor connectedVertex is in stack S and hence in the current SCC\r\n                vertex.lowlink = Math.min(vertex.lowlink, connectedVertex.index);\r\n            }\r\n        }\r\n\r\n        // If vertex is a root node, pop the stack and generate an SCC.\r\n        if (vertex.lowlink === vertex.index) {\r\n            // start a new strongly connected component\r\n            if (this.stack.length > 0) {\r\n                do {\r\n                    topVertex = this.stack.pop();\r\n                    this.stackLookup[topVertex.id] = false;\r\n                    // add topVertex to current strongly connected component\r\n                    sccVertices.push(topVertex.id);\r\n                } while (vertex.id !== topVertex.id);\r\n            }\r\n            // output the current strongly connected component\r\n            // ... i'm going to push the results to a member scc array variable\r\n            if (sccVertices.length > 0) {\r\n                this.SCCs.push(sccVertices);\r\n            }\r\n        }\r\n    };\r\n\r\n    return Tarjan;\r\n});\n",
    "/*globals requirejs, define*/\r\n/*eslint-env node, browser*/\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('plugin/managerbase',[\r\n    'common/core/coreQ',\r\n    'plugin/PluginResult',\r\n    'plugin/PluginMessage',\r\n    'plugin/util',\r\n    'common/storage/project/interface',\r\n    'common/storage/util',\r\n    'common/util/tarjan',\r\n    'q',\r\n], function (Core,\r\n             PluginResult,\r\n             PluginMessage,\r\n             pluginUtil,\r\n             ProjectInterface,\r\n             storageUtil,\r\n             Tarjan,\r\n             Q) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param blobClient\r\n     * @param [project]\r\n     * @param mainLogger\r\n     * @param gmeConfig\r\n     * @constructor\r\n     */\r\n    function PluginManagerBase(blobClient, project, mainLogger, gmeConfig) {\r\n        var self = this;\r\n\r\n        this.logger = mainLogger.fork('PluginManagerBase');\r\n        this.notificationHandlers = [];\r\n\r\n        function getPluginInstance(pluginIdOrClass, callback) {\r\n            var deferred = Q.defer(),\r\n                pluginPath;\r\n\r\n            function instantiatePlugin(PluginClass) {\r\n                var plugin;\r\n\r\n                if (!PluginClass) {\r\n                    // This should not happen, but just in case..\r\n                    deferred.reject(new Error('Loading plugin \"' + pluginIdOrClass +\r\n                        '\" with requirejs return undefined.'));\r\n                    return;\r\n                }\r\n\r\n                plugin = new PluginClass();\r\n                if (self.serverSide && plugin.pluginMetadata.disableServerSideExecution) {\r\n                    deferred.reject(new Error(pluginIdOrClass + ' cannot be invoked on server.'));\r\n                } else if (self.browserSide && plugin.pluginMetadata.disableBrowserSideExecution) {\r\n                    deferred.reject(new Error(pluginIdOrClass + ' cannot be invoked in browser.'));\r\n                } else {\r\n                    deferred.resolve(plugin);\r\n                }\r\n            }\r\n\r\n            if (typeof pluginIdOrClass === 'function') {\r\n                self.logger.debug('plugin class was passed wont load it with requirejs');\r\n                instantiatePlugin(pluginIdOrClass);\r\n            } else {\r\n                pluginPath = 'plugin/' + pluginIdOrClass + '/' + pluginIdOrClass + '/' + pluginIdOrClass;\r\n                self.logger.debug('requirejs plugin from path: ' + pluginPath);\r\n                requirejs([pluginPath], instantiatePlugin,\r\n                    function (err) {\r\n                        deferred.reject(err);\r\n                    }\r\n                );\r\n            }\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        }\r\n\r\n        function checkDependencies(plugin, tarjan, callback) {\r\n            return Q.all(plugin.getPluginDependencies()\r\n                .map(function (pluginId) {\r\n                    if (tarjan.addVertex(pluginId) === false) {\r\n                        // Dependency already added, just account for the connection\r\n                        tarjan.connectVertices(plugin.getId(), pluginId);\r\n                        return Q.resolve();\r\n                    } else {\r\n                        tarjan.connectVertices(plugin.getId(), pluginId);\r\n                        return getPluginInstance(pluginId)\r\n                            .then(function (depPluginInstance) {\r\n                                return checkDependencies(depPluginInstance, tarjan);\r\n                            });\r\n                    }\r\n                }))\r\n                .nodeify(callback);\r\n        }\r\n\r\n        /**\r\n         * These are used to determine if the user is allowed to execute a plugin based on\r\n         * the project access level. It also determines if the user is allowed to modify certain config\r\n         * parameters of the plugin.\r\n         * N.B. When reading or writing to the project from the plugin the access level is always checked\r\n         * by the storage.\r\n         * @type {{read: boolean, write: boolean, delete: boolean}}\r\n         */\r\n        this.projectAccess = {\r\n            read: true,\r\n            write: true,\r\n            delete: true\r\n        };\r\n\r\n        /**\r\n         *\r\n         */\r\n        this.blobClient = blobClient;\r\n\r\n        /**\r\n         *\r\n         * @param {string} pluginIdOrClass\r\n         * @param {object} pluginConfig - configuration for the plugin.\r\n         * @param {object} context\r\n         * @param {string} [context.branchName] - name of branch that should be updated\r\n         * @param {string} [context.commitHash=<%brashHash%>] - commit from which to start the plugin.\r\n         * @param {ProjectInterface} [context.project=project] - project instance if different from the one passed in.\r\n         * @param {string} [context.activeNode=''] - path to active node\r\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\r\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\r\n         * @param {function} callback\r\n         */\r\n        this.executePlugin = function (pluginIdOrClass, pluginConfig, context, callback) {\r\n            var pluginId = typeof pluginIdOrClass === 'string' ? pluginIdOrClass : pluginIdOrClass.metadata.id,\r\n                plugin;\r\n\r\n            self.initializePlugin(pluginIdOrClass)\r\n                .then(function (plugin_) {\r\n                    plugin = plugin_;\r\n                    return self.configurePlugin(plugin, pluginConfig, context);\r\n                })\r\n                .then(function () {\r\n                    self.runPluginMain(plugin, callback);\r\n                })\r\n                .catch(function (err) {\r\n                    var pluginResult = self.getPluginErrorResult(pluginId,\r\n                        pluginId,\r\n                        'Exception was raised, err: ' + err.stack,\r\n                        plugin && plugin.projectId);\r\n\r\n                    self.logger.error(err.stack);\r\n                    callback(err.message, pluginResult);\r\n                });\r\n        };\r\n\r\n        /**\r\n         * Retrieves plugin script files and creates instance.\r\n         * @param {string} - pluginId\r\n         * @param {function} callback\r\n         * @returns {promise}\r\n         */\r\n        this.initializePlugin = function (pluginId, callback) {\r\n            var plugin,\r\n                tarjan;\r\n\r\n            if (!self.serverSide && !self.browserSide) {\r\n                self.logger.debug('Running as CLI - does not respect gmeConfig.plugin.allowServerExecution..');\r\n            } else {\r\n                if (self.serverSide && !gmeConfig.plugin.allowServerExecution) {\r\n                    throw new Error('Plugin execution on server side is disabled from gmeConfig.');\r\n                } else if (self.browserSide && !gmeConfig.plugin.allowBrowserExecution) {\r\n                    throw new Error('Plugin execution on server side is disabled from gmeConfig.');\r\n                }\r\n            }\r\n\r\n            return getPluginInstance(pluginId)\r\n                .then(function (plugin_) {\r\n                    tarjan = new Tarjan();\r\n                    plugin = plugin_;\r\n\r\n                    tarjan.addVertex(pluginId);\r\n                    return checkDependencies(plugin, tarjan);\r\n                })\r\n                .then(function () {\r\n                    if (tarjan.hasLoops()) {\r\n                        throw new Error('The dependencies of ' + pluginId + ' forms a circular loop..');\r\n                    }\r\n\r\n                    var pluginLogger = self.logger.fork('plugin:' + pluginId);\r\n\r\n                    plugin.initialize(pluginLogger, self.blobClient, gmeConfig);\r\n\r\n                    plugin.notificationHandlers = self.notificationHandlers;\r\n                    return plugin;\r\n                })\r\n                .nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param {object} plugin\r\n         * @param {object} pluginConfig - configuration for the plugin.\r\n         * @param {object} context\r\n         * @param {string} context.branchName - name of branch that should be updated\r\n         * @param {string} [context.commitHash=<%brashHash%>] - commit from which to start the plugin.\r\n         * @param {ProjectInterface} [context.project=project] - project instance if different from the one passed in.\r\n         * @param {string} [context.activeNode=''] - path to active node\r\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\r\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\r\n         * @param {function} callback\r\n         * @returns {promise}\r\n         */\r\n        this.configurePlugin = function (plugin, pluginConfig, context, callback) {\r\n            var deferred = Q.defer(),\r\n                self = this,\r\n                defaultConfig = plugin.getDefaultConfig(),\r\n                writeAccessKeys = {},\r\n                readOnlyKeys = {},\r\n                faultyKeys = [],\r\n                key;\r\n\r\n            context.project = context.project || project;\r\n\r\n            if (context.project instanceof ProjectInterface === false) {\r\n                deferred.reject(new Error('project is not an instance of ProjectInterface, ' +\r\n                    'pass it via context or set it in the constructor of PluginManagerBase.'));\r\n            } else if (plugin.pluginMetadata.writeAccessRequired === true && self.projectAccess.write === false) {\r\n                deferred.reject(new Error('Plugin requires write access to the project for execution!'));\r\n            } else {\r\n                plugin.pluginMetadata.configStructure.forEach(function (configStructure) {\r\n                    if (configStructure.writeAccessRequired === true && self.projectAccess.write === false) {\r\n                        writeAccessKeys[configStructure.name] = true;\r\n                    }\r\n                    if (configStructure.readOnly === true) {\r\n                        readOnlyKeys[configStructure.name] = true;\r\n                    }\r\n                });\r\n\r\n                pluginConfig = pluginConfig || {};\r\n\r\n                for (key in pluginConfig) {\r\n\r\n                    if (readOnlyKeys[key] || writeAccessKeys[key]) {\r\n                        // Parameter is not allowed to be modified, check if it was.\r\n                        if (Object.hasOwn(pluginConfig, key) &&\r\n                            pluginConfig[key] !== defaultConfig[key]) {\r\n                            faultyKeys.push(key);\r\n                        }\r\n                    }\r\n\r\n                    // We do allow extra config-parameters that aren't specified in the default config.\r\n                    defaultConfig[key] = pluginConfig[key];\r\n                }\r\n\r\n                if (faultyKeys.length > 0) {\r\n                    deferred.reject(new Error('User not allowed to modify configuration parameter(s): \"' +\r\n                        faultyKeys + '\".'));\r\n                } else {\r\n\r\n                    plugin.setCurrentConfig(defaultConfig);\r\n\r\n                    self.loadContext(context)\r\n                        .then(function (pluginContext) {\r\n                            plugin.configure(pluginContext);\r\n                            deferred.resolve();\r\n                        })\r\n                        .catch(deferred.reject);\r\n                }\r\n            }\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        };\r\n\r\n        /**\r\n         *\r\n         * @param plugin\r\n         * @param callback\r\n         */\r\n        this.runPluginMain = async function (plugin, callback) {\r\n            var startTime = (new Date()).toISOString(),\r\n                mainCallbackCalls = 0,\r\n                multiCallbackHandled = false;\r\n\r\n            self.logger.debug('plugin configured, invoking main');\r\n\r\n            if (plugin.isConfigured === false) {\r\n                callback('Plugin is not configured.', self.getPluginErrorResult(plugin.getId(), plugin.getName(),\r\n                    'Plugin is not configured.', project && project.projectId));\r\n                return;\r\n            }\r\n\r\n            let result,\r\n                err = null;\r\n\r\n            const expectsCallback = plugin.main.length > 0;\r\n            const checkMultiCallbacks = () => {\r\n                mainCallbackCalls += 1;\r\n                if (mainCallbackCalls > 1) {\r\n                    const stackTrace = new Error().stack;\r\n                    self.logger.error('The main callback is being called more than once!', {metadata: stackTrace});\r\n                    result.setError('The main callback is being called more than once!');\r\n                    if (multiCallbackHandled === true) {\r\n                        plugin.createMessage(null, stackTrace);\r\n                        return;\r\n                    }\r\n                    multiCallbackHandled = true;\r\n                    result.setSuccess(false);\r\n                    plugin.createMessage(null, 'The main callback is being called more than once.');\r\n                    plugin.createMessage(null, stackTrace);\r\n                    callback('The main callback is being called more than once!', result);\r\n                }\r\n            };\r\n            try {\r\n                if (expectsCallback) {\r\n                    result = await new Promise((resolve, reject) => \r\n                        plugin.main(function (err, res) {\r\n                            result = res || result;\r\n                            if (err) {\r\n                                reject(err);\r\n                            }\r\n                            resolve();\r\n                            setTimeout(checkMultiCallbacks);\r\n                        })\r\n                    );\r\n                } else {\r\n                    result = await plugin.main();\r\n                }\r\n            } catch (e) {\r\n                err = e;\r\n            }\r\n\r\n            result = result || plugin.result;\r\n            self.logger.debug('plugin main callback called', {result: result.serialize()});\r\n            // set common information (meta info) about the plugin and measured execution times\r\n            result.setFinishTime((new Date()).toISOString());\r\n            result.setStartTime(startTime);\r\n\r\n            result.setPluginName(plugin.getName());\r\n            result.setPluginId(plugin.getId());\r\n\r\n            result.setError(err);\r\n            plugin.notificationHandlers = [];\r\n            callback(typeof err === 'string' ? new Error(err) : err, result);\r\n        };\r\n\r\n        this.getPluginErrorResult = function (pluginId, pluginName, message, projectId) {\r\n            var pluginResult = new PluginResult(),\r\n                pluginMessage = new PluginMessage();\r\n            pluginMessage.severity = 'error';\r\n            pluginMessage.message = message;\r\n            pluginResult.setSuccess(false);\r\n            pluginResult.setPluginName(pluginName);\r\n            pluginResult.setPluginId(pluginId);\r\n            pluginResult.setProjectId(projectId || 'N/A');\r\n            pluginResult.addMessage(pluginMessage);\r\n            pluginResult.setStartTime((new Date()).toISOString());\r\n            pluginResult.setFinishTime((new Date()).toISOString());\r\n            pluginResult.setError(pluginMessage.message);\r\n\r\n            return pluginResult;\r\n        };\r\n\r\n        function getBranchHash(project, branchName) {\r\n            if (branchName) {\r\n                return project.getBranchHash(branchName);\r\n            } else {\r\n                return Q(null);\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {object} context\r\n         * @param {object} context.project - project form where to load the context.\r\n         * @param {string} [context.branchName] - name of branch that should be updated\r\n         * @param {string} [context.commitHash=<%branchHash%>] - commit from which to start the plugin.\r\n         * @param {string} [context.activeNode=''] - path to active node\r\n         * @param {string[]} [context.activeSelection=[]] - paths to selected nodes.\r\n         * @param {string} [context.namespace=''] - used namespace during execution ('' represents all namespaces).\r\n         * @param {object} pluginLogger - logger for the plugin.\r\n         */\r\n        this.loadContext = function (context) {\r\n            var deferred = Q.defer(),\r\n                pluginContext = {\r\n                    branchName: context.branchName,\r\n                    commitHash: context.commitHash || context.commit,\r\n\r\n                    rootNode: null,\r\n                    activeNode: null,\r\n                    activeSelection: null,\r\n                    META: {},\r\n                    namespace: context.namespace || '',\r\n\r\n                    project: context.project,\r\n                    projectId: context.project.projectId,\r\n                    projectName: storageUtil.getProjectNameFromProjectId(context.project.projectId),\r\n                    core: new Core(context.project, {\r\n                        globConf: gmeConfig,\r\n                        logger: self.logger.fork('core')\r\n                    })\r\n                };\r\n\r\n            self.logger.debug('loading context');\r\n            getBranchHash(pluginContext.project, pluginContext.branchName)\r\n                .then(function (branchHash) {\r\n                    pluginContext.commitHash = context.commitHash || branchHash;\r\n                    if (!pluginContext.commitHash) {\r\n                        throw new Error('Neither commitHash nor branchHash from branch was obtained, branchName: [' +\r\n                            context.branchName + ']');\r\n                    }\r\n\r\n                    return pluginUtil.loadNodesAtCommitHash(\r\n                        pluginContext.project,\r\n                        pluginContext.core,\r\n                        pluginContext.commitHash,\r\n                        self.logger,\r\n                        context);\r\n                })\r\n                .then(function (result) {\r\n                    pluginContext.rootNode = result.rootNode;\r\n                    pluginContext.activeNode = result.activeNode;\r\n                    pluginContext.activeSelection = result.activeSelection;\r\n                    pluginContext.META = result.META;\r\n\r\n                    deferred.resolve(pluginContext);\r\n                })\r\n                .catch(function (err) {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n\r\n    return PluginManagerBase;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\n\r\ndefine('client/pluginmanager',[\r\n    'plugin/managerbase',\r\n    'blob/BlobClient',\r\n    'common/storage/project/project',\r\n    'common/Constants',\r\n    'common/util/key',\r\n    'q',\r\n    'superagent'\r\n], function (PluginManagerBase, BlobClient, Project, CONSTANTS, generateKey, Q, superagent) {\r\n    'use strict';\r\n\r\n    var ROOT_PATH = '';\r\n\r\n    /**\r\n     *\r\n     * @param client\r\n     * @param storage\r\n     * @param state\r\n     * @param mainLogger\r\n     * @param gmeConfig\r\n     * @constructor\r\n     */\r\n    function PluginManager(client, storage, state, mainLogger, gmeConfig) {\r\n\r\n        var self = this,\r\n            logger = mainLogger.fork('PluginManager'),\r\n            runningPlugins = {};\r\n\r\n        this.getCurrentPluginContext = function (pluginId, activeNodeId, activeSelectionIds) {\r\n            var activeNode,\r\n                validPlugins,\r\n                context = {\r\n                    managerConfig: {\r\n                        project: client.getProjectObject(),\r\n                        branchName: client.getActiveBranchName(),\r\n                        commitHash: client.getActiveCommitHash(),\r\n                        activeNode: ROOT_PATH,\r\n                        activeSelection: [],\r\n                        namespace: ''\r\n                    },\r\n                    pluginConfig: null\r\n                };\r\n\r\n            // If executed from the Generic UI we can access the active- and selected-nodes.\r\n            if (typeof WebGMEGlobal !== 'undefined') {\r\n                /* eslint-disable no-undef*/\r\n                context.managerConfig.activeSelection = WebGMEGlobal.State.getActiveSelection();\r\n                context.managerConfig.activeNode = WebGMEGlobal.State.getActiveObject();\r\n                /* eslint-enable no-undef*/\r\n            }\r\n\r\n            if (activeSelectionIds) {\r\n                context.managerConfig.activeSelection = activeSelectionIds;\r\n            }\r\n\r\n            if (typeof activeNodeId === 'string') {\r\n                context.managerConfig.activeNode = activeNodeId;\r\n            }\r\n\r\n            // Given the active-node we infer the namespace (user may still select another one).\r\n            activeNodeId = context.managerConfig.activeNode;\r\n            if (activeNodeId && pluginId) {\r\n                activeNode = client.getNode(activeNodeId);\r\n                if (activeNode === null) {\r\n                    logger.warn('Getting context for non-available' + \r\n                        ' node is dangerous and could lead to failed plugin execution [' + \r\n                        pluginId + '][' + activeNodeId + '].');\r\n                    return context;\r\n                }\r\n                do {\r\n                    validPlugins = activeNode.getOwnRegistry('validPlugins');\r\n                    if (validPlugins && validPlugins.indexOf(pluginId) > -1) {\r\n                        // The plugin was defined at this particular node, we use the namespace of it.\r\n                        context.managerConfig.namespace = activeNode.getNamespace();\r\n                        break;\r\n                    }\r\n\r\n                    activeNode = activeNode.getBaseId() ? client.getNode(activeNode.getBaseId()) : null;\r\n                } while (activeNode);\r\n            }\r\n\r\n            return context;\r\n        };\r\n\r\n        function getPluginMetadata(pluginId) {\r\n            var deferred = Q.defer();\r\n\r\n            superagent.get(gmeConfig.client.mountedPath + '/api/plugins/' + pluginId + '/metadata')\r\n                .end(function (err, res) {\r\n                    if (err) {\r\n                        deferred.reject(err);\r\n                    }\r\n                    deferred.resolve(res.body);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function getSanitizedManagerConfig(config) {\r\n            var sanitized = {},\r\n                keys = Object.keys(config);\r\n\r\n            keys.forEach(function (key) {\r\n                switch (key) {\r\n                    case 'project':\r\n                        if (typeof config.project === 'string') {\r\n                            sanitized.project = config.project;\r\n                        } else {\r\n                            sanitized.project = config.project.projectId;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        sanitized[key] = config[key];\r\n\r\n                }\r\n            });\r\n\r\n            return sanitized;\r\n        }\r\n\r\n        function getSanitizedPluginContext(context) {\r\n            var sanitized = {},\r\n                keys = Object.keys(context);\r\n\r\n            keys.forEach(function (key) {\r\n                switch (key) {\r\n                    case 'managerConfig':\r\n                        sanitized.managerConfig = getSanitizedManagerConfig(context.managerConfig);\r\n                        break;\r\n                    default:\r\n                        sanitized[key] = context[key];\r\n\r\n                }\r\n            });\r\n\r\n            return sanitized;\r\n        }\r\n\r\n        function getSanitizedPluginEntry(pluginEntry) {\r\n            var sanitized = {},\r\n                keys = Object.keys(pluginEntry);\r\n\r\n            keys.forEach(function (key) {\r\n                switch (key) {\r\n                    case 'plugin':\r\n                        break;\r\n                    case 'context':\r\n                        sanitized.context = getSanitizedPluginContext(pluginEntry.context);\r\n                        break;\r\n                    default:\r\n                        sanitized[key] = pluginEntry[key];\r\n                }\r\n            });\r\n\r\n            return sanitized;\r\n        }\r\n\r\n        /**\r\n         * Run the plugin in the browser.\r\n         * @param {string|function} pluginIdOrClass - id or class for plugin.\r\n         * @param {object} context\r\n         * @param {object} context.managerConfig - where the plugin should execute.\r\n         * @param {ProjectInterface} context.managerConfig.project - project (e.g. client.getProjectObject()).\r\n         * @param {string} [context.managerConfig.activeNode=''] - path to activeNode.\r\n         * @param {string} [context.managerConfig.activeSelection=[]] - paths to selected nodes.\r\n         * @param {string} context.managerConfig.commitHash - commit hash to start the plugin from.\r\n         * @param {string} [context.managerConfig.branchName] - branch which to save to.\r\n         * @param {string} [context.managerConfig.namespace=''] - used namespace ('' represents root namespace).\r\n         * @param {object} [context.pluginConfig=%defaultForPlugin%] - specific configuration for the plugin.\r\n         * @param {function(err, PluginResult)} callback\r\n         */\r\n        this.runBrowserPlugin = function (pluginIdOrClass, context, callback) {\r\n            var pluginEntry,\r\n                blobClient = new BlobClient({\r\n                    logger: logger.fork('BlobClient'),\r\n                    relativeUrl: gmeConfig.client.mountedPath + '/rest/blob/'\r\n                }),\r\n                pluginManager = new PluginManagerBase(blobClient, null, mainLogger, gmeConfig),\r\n                plugin,\r\n                executionId;\r\n\r\n            pluginManager.browserSide = true;\r\n\r\n            pluginManager.projectAccess = client.getProjectAccess();\r\n\r\n            pluginManager.notificationHandlers = [function (data, callback) {\r\n                data.executionId = executionId;\r\n                self.dispatchPluginNotification(data);\r\n                callback(null);\r\n            }];\r\n\r\n            // pluginManager.executePlugin(pluginIdOrClass, context.pluginConfig, context.managerConfig, callback);\r\n            pluginManager.initializePlugin(pluginIdOrClass)\r\n                .then(function (plugin_) {\r\n                    plugin = plugin_;\r\n\r\n                    pluginEntry = {\r\n                        id: plugin.getId(),\r\n                        name: plugin.getName(),\r\n                        plugin: plugin,\r\n                        metadata: plugin.pluginMetadata,\r\n                        context: context,\r\n                        canBeAborted: plugin.pluginMetadata.canBeAborted,\r\n                        start: Date.now(),\r\n                        clientSide: true,\r\n                        executionId: null,\r\n                        result: null\r\n                    };\r\n\r\n                    executionId = generateKey({\r\n                        id: pluginEntry.id,\r\n                        name: pluginEntry.name,\r\n                        start: pluginEntry.start\r\n                    }, gmeConfig);\r\n                    pluginEntry.executionId = executionId;\r\n                    runningPlugins[executionId] = pluginEntry;\r\n\r\n                    return pluginManager.configurePlugin(plugin, context.pluginConfig, context.managerConfig);\r\n                })\r\n                .then(function () {\r\n                    return Q.ninvoke(pluginManager, 'runPluginMain', plugin);\r\n                })\r\n                .then(function (result) {\r\n                    if (Object.hasOwn(runningPlugins, executionId)) {\r\n                        delete runningPlugins[executionId];\r\n                    } else {\r\n                        logger.error('Running plugin registry misses entry [' + pluginEntry.id +\r\n                            '][' + executionId + '].');\r\n                    }\r\n                    pluginEntry.result = result;\r\n                    client.dispatchEvent(client.CONSTANTS.PLUGIN_FINISHED, getSanitizedPluginEntry(pluginEntry));\r\n                    callback(null, result);\r\n                })\r\n                .catch(function (err) {\r\n                    if (Object.hasOwn(runningPlugins, executionId)) {\r\n                        delete runningPlugins[executionId];\r\n                    } else {\r\n                        logger.error('Running plugin registry misses entry [' + pluginEntry.id +\r\n                            '][' + executionId + '].');\r\n                    }\r\n                    pluginEntry.result = null;\r\n                    client.dispatchEvent(client.CONSTANTS.PLUGIN_FINISHED, getSanitizedPluginEntry(pluginEntry));\r\n                    var pluginResult = pluginManager.getPluginErrorResult(\r\n                        plugin.getId(),\r\n                        plugin.getName(),\r\n                        'Exception was raised, err: ' + err.stack, plugin && plugin.projectId\r\n                    );\r\n                    logger.error(err.stack);\r\n                    callback(err.message, pluginResult);\r\n                })\r\n                .done();\r\n        };\r\n\r\n        /**\r\n         * Run the plugin on the server inside a worker process.\r\n         * @param {string|function} pluginIdOrClass - id or class for plugin.\r\n         * @param {object} context\r\n         * @param {object} context.managerConfig - where the plugin should execute.\r\n         * @param {ProjectInterface|string} context.managerConfig.project - project or id of project.\r\n         * @param {string} [context.managerConfig.activeNode=''] - path to activeNode.\r\n         * @param {string} [context.managerConfig.activeSelection=[]] - paths to selected nodes.\r\n         * @param {string} context.managerConfig.commitHash - commit hash to start the plugin from.\r\n         * @param {string} [context.managerConfig.branchName] - branch which to save to.\r\n         * @param {string} [context.managerConfig.namespace=''] - used namespace ('' represents root namespace).\r\n         * @param {object} [context.pluginConfig=%defaultForPlugin%] - specific configuration for the plugin.\r\n         * @param {function} callback\r\n         */\r\n        this.runServerPlugin = function (pluginIdOrClass, context, callback) {\r\n            var pluginEntry,\r\n                executionId,\r\n                pluginId = typeof pluginIdOrClass === 'string' ? pluginIdOrClass : pluginIdOrClass.metadata.id;\r\n            if (context.managerConfig.project instanceof Project) {\r\n                context.managerConfig.project = context.managerConfig.project.projectId;\r\n            }\r\n\r\n            getPluginMetadata(pluginId)\r\n                .then(function (metadata) {\r\n                    pluginEntry = {\r\n                        id: pluginId,\r\n                        name: metadata.name,\r\n                        plugin: null,\r\n                        metadata: metadata,\r\n                        context: context,\r\n                        canBeAborted: metadata.canBeAborted,\r\n                        start: Date.now(),\r\n                        clientSide: false,\r\n                        executionId: null,\r\n                        result: null\r\n                    };\r\n\r\n                    executionId = generateKey({\r\n                        id: pluginId,\r\n                        name: pluginEntry.name,\r\n                        start: pluginEntry.start\r\n                    }, gmeConfig);\r\n                    pluginEntry.executionId = executionId;\r\n                    runningPlugins[executionId] = pluginEntry;\r\n\r\n                    context.executionId = executionId;\r\n\r\n                    storage.simpleRequest({\r\n                        command: CONSTANTS.SERVER_WORKER_REQUESTS.EXECUTE_PLUGIN,\r\n                        name: pluginId,\r\n                        context: context\r\n                    }, function (err, result) {\r\n                        if (Object.hasOwn(runningPlugins, executionId)) {\r\n                            delete runningPlugins[executionId];\r\n                        } else {\r\n                            logger.error('Running plugin registry misses entry [' + pluginEntry.id +\r\n                                '][' + executionId + '].');\r\n                        }\r\n\r\n                        pluginEntry.result = result;\r\n                        client.dispatchEvent(client.CONSTANTS.PLUGIN_FINISHED, getSanitizedPluginEntry(pluginEntry));\r\n                        if (err) {\r\n                            callback(err, err.result);\r\n                        } else {\r\n                            callback(null, result);\r\n                        }\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    callback(err, null);\r\n                });\r\n        };\r\n\r\n        /**\r\n         * @param {string[]} pluginIds - All available plugins on the server.\r\n         * @param {string} [nodePath=''] - Node to get the validPlugins from.\r\n         * @returns {string[]} - Filtered plugin ids.\r\n         */\r\n        this.filterPlugins = function (pluginIds, nodePath) {\r\n            var filteredIds = [],\r\n                validPlugins,\r\n                i,\r\n                node;\r\n\r\n            logger.debug('filterPluginsBasedOnNode allPlugins, given nodePath', pluginIds, nodePath);\r\n            if (!nodePath) {\r\n                logger.debug('filterPluginsBasedOnNode nodePath not given - will fall back on root-node.');\r\n                nodePath = ROOT_PATH;\r\n            }\r\n\r\n            node = state.nodes[nodePath];\r\n\r\n            if (!node) {\r\n                logger.warn('filterPluginsBasedOnNode node not loaded - will fall back on root-node.', nodePath);\r\n                nodePath = ROOT_PATH;\r\n                node = state.nodes[nodePath];\r\n            }\r\n\r\n            if (!node) {\r\n                logger.warn('filterPluginsBasedOnNode root node not loaded - will return full list.');\r\n                return pluginIds;\r\n            }\r\n\r\n            validPlugins = (state.core.getRegistry(node.node, 'validPlugins') || '').split(' ');\r\n            for (i = 0; i < validPlugins.length; i += 1) {\r\n                if (pluginIds.indexOf(validPlugins[i]) > -1) {\r\n                    filteredIds.push(validPlugins[i]);\r\n                } else if (validPlugins[i] === '') {\r\n                    // Skip empty strings..\r\n                } else {\r\n                    logger.warn('Registered plugin for node at path \"' + nodePath +\r\n                        '\" is not amongst available plugins', pluginIds);\r\n                }\r\n            }\r\n\r\n            return filteredIds;\r\n        };\r\n\r\n        this.dispatchPluginNotification = function (data) {\r\n            var notification = {\r\n                severity: data.notification.severity || 'info',\r\n                message: '[Plugin] ' + data.pluginName + ' - ' + data.notification.message\r\n            };\r\n\r\n            if (typeof data.notification.progress === 'number') {\r\n                notification.message += ' [' + data.notification.progress + '%]';\r\n            }\r\n\r\n            logger.debug('plugin notification', data);\r\n            if (data.notification && data.notification.type === CONSTANTS.STORAGE.PLUGIN_NOTIFICATION_TYPE.INITIATED) {\r\n                if (Object.hasOwn(runningPlugins, data.executionId)) {\r\n                    runningPlugins[data.executionId].socketId = data.pluginSocketId;\r\n                    client.dispatchEvent(client.CONSTANTS.PLUGIN_INITIATED,\r\n                        getSanitizedPluginEntry(runningPlugins[data.executionId]));\r\n                }\r\n            } else {\r\n                if (gmeConfig.plugin.suppressRegularNotifications !== true) {\r\n                    client.dispatchEvent(client.CONSTANTS.NOTIFICATION, notification);\r\n                }\r\n                client.dispatchEvent(client.CONSTANTS.PLUGIN_NOTIFICATION, data);\r\n            }\r\n\r\n        };\r\n\r\n        this.getRunningPlugins = function () {\r\n            var sanitizedData = {},\r\n                executionIds = Object.keys(runningPlugins);\r\n\r\n            executionIds.forEach(function (executionId) {\r\n                if (Object.hasOwn(runningPlugins, executionId)) {\r\n                    sanitizedData[executionId] = getSanitizedPluginEntry(runningPlugins[executionId]);\r\n                }\r\n            });\r\n            return sanitizedData;\r\n        };\r\n\r\n        this.abortPlugin = function (pluginExecutionId) {\r\n            var pluginEntry = runningPlugins[pluginExecutionId];\r\n            if (pluginEntry) {\r\n                if (!pluginEntry.metadata.canBeAborted) {\r\n                    throw new Error('Aborting plugin [' + pluginEntry.name + '] is not allowed.');\r\n                }\r\n\r\n                if (pluginEntry.clientSide) {\r\n                    pluginEntry.plugin.onAbort();\r\n                } else if (pluginEntry.socketId) {\r\n                    storage.sendNotification({\r\n                        type: CONSTANTS.STORAGE.PLUGIN_NOTIFICATION,\r\n                        notification: {\r\n                            toBranch: false,\r\n                            type: CONSTANTS.STORAGE.PLUGIN_NOTIFICATION_TYPE.ABORT,\r\n                            executionId: pluginExecutionId\r\n                        },\r\n                        originalSocketId: pluginEntry.socketId,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.sendMessageToPlugin = function (pluginExecutionId, messageId, content) {\r\n            var pluginEntry = runningPlugins[pluginExecutionId];\r\n            if (pluginEntry) {\r\n                if (pluginEntry.clientSide) {\r\n                    pluginEntry.plugin.onMessage(messageId, content);\r\n                } else if (pluginEntry.socketId) {\r\n                    storage.sendNotification({\r\n                        type: CONSTANTS.STORAGE.PLUGIN_NOTIFICATION,\r\n                        notification: {\r\n                            toBranch: false,\r\n                            type: CONSTANTS.STORAGE.PLUGIN_NOTIFICATION_TYPE.MESSAGE,\r\n                            executionId: pluginExecutionId,\r\n                            messageId: messageId,\r\n                            content: content\r\n                        },\r\n                        originalSocketId: pluginEntry.socketId,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    return PluginManager;\r\n\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('client/websocketRouterAccess',['common/storage/constants', 'q'], function (CONSTANTS, Q) {\r\n    'use strict';\r\n    class WebsocketRouterAccessClient {\r\n        constructor(routerId, logger, send, connectReceiveFunctions) {\r\n            this._id = routerId;\r\n            this._logger = logger;\r\n            this._send = send;\r\n            this._isConnected = false;\r\n            const handleObject = {};\r\n            handleObject[CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.MESSAGE] = (payload) => {\r\n                if (typeof this._onMessageHandle === 'function') {\r\n                    this._onMessageHandle(payload);\r\n                } else {\r\n                    logger.warn('Receiving message without handle [' + routerId + ']');\r\n                }\r\n            };\r\n            handleObject[CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.DISCONNECT] = (payload) => {\r\n                if (typeof this._onDisconnectHandle === 'function') {\r\n                    this._onDisconnectHandle(payload);\r\n                } else {\r\n                    logger.warn('Receiving disconnect without handle [' + routerId + ']');\r\n                }\r\n            }; \r\n\r\n            connectReceiveFunctions(this._id, handleObject);\r\n        }\r\n\r\n        connect(callback) {\r\n            const deferred = Q.defer();\r\n\r\n            this._send(this._id, CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.CONNECT, null, (err, data) => {\r\n                if (!err) {\r\n                    this._isConnected = true;\r\n                    deferred.resolve(data);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        }\r\n\r\n        send(payload, callback) {\r\n            return this._send(this._id, CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.MESSAGE, payload).nodeify(callback);\r\n        }\r\n\r\n        disconnect(reason, callback) {\r\n            this._isConnected = false;\r\n            return this._send(this._id, CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.DISCONNECT, reason).nodeify(callback);\r\n        }\r\n\r\n        onMessage(handleFn) {\r\n            this._onMessageHandle = handleFn;\r\n        }\r\n\r\n        onDisconnect(handleFn) {\r\n            this._onDisconnectHandle = handleFn;\r\n        }\r\n\r\n        isConnected() {\r\n            return this._isConnected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} _id - Path of node.\r\n     * @param {GmeLogger} logger - logger.\r\n     * @param {object} state - state of the client.\r\n     * @param {function} storeNode - invoked when storing new nodes.\r\n     * @constructor\r\n     */\r\n    function WebsocketRouterAccess(logger, client, storage) {\r\n        const routers = {};\r\n        const handles = {};\r\n\r\n        function send(routerId, messageType, payload, callback) {\r\n            const deferred = Q.defer();\r\n            logger.debug('outgoing message to websocket router',\r\n                {metadata: {routerId: routerId, messageType: messageType, payload: payload}});\r\n            storage.sendWsRouterMessage(routerId, messageType, payload, (err, result) => {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                } else {\r\n                    deferred.resolve(result);\r\n                }\r\n            });\r\n\r\n            return deferred.promise.nodeify(callback);\r\n        }\r\n\r\n        function connectHandles(routerId, clientHandles) {\r\n            logger.debug('access binding [' +  routerId + ']');\r\n            handles[routerId] = clientHandles;\r\n        }\r\n\r\n        function processMessage(routerId, messageType, payload) {\r\n            if (handles[routerId] && routers[routerId]) {\r\n                switch (messageType) {\r\n                    case CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.MESSAGE:\r\n                    case CONSTANTS.WEBSOCKET_ROUTER_MESSAGE_TYPES.DISCONNECT:\r\n                        logger.debug('incoming message from websocket router',\r\n                            {metadata: {routerId: routerId, messageType: messageType, payload: payload}});\r\n                        handles[routerId][messageType](payload);\r\n                        return;\r\n                }\r\n            }\r\n            logger.debug('bad incoming message from websocket router',\r\n                {metadata: {routerId: routerId, messageType: messageType, payload: payload}});\r\n        }\r\n\r\n        function getWebsocketRouterAccess(routerId) {\r\n            logger.debug('getting websocket router access [' + routerId + ']');\r\n            if (routers[routerId]) {\r\n                return routers[routerId];\r\n            } \r\n            \r\n            routers[routerId] = new WebsocketRouterAccessClient(routerId, logger.fork(routerId), send, connectHandles);\r\n            return routers[routerId];\r\n        }\r\n\r\n\r\n        storage.onWebsocketRouterMessage(processMessage);\r\n        \r\n        return {\r\n            getWebsocketRouterAccess: getWebsocketRouterAccess\r\n        };\r\n    }\r\n\r\n    return WebsocketRouterAccess;\r\n});\r\n\n",
    "/*globals define*/\r\n/*eslint-env browser*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\ndefine('client/client',[\r\n    './logger',\r\n    'common/storage/browserstorage',\r\n    'common/EventDispatcher',\r\n    'common/core/coreQ',\r\n    './constants',\r\n    'common/util/assert',\r\n    'common/core/tasync',\r\n    'common/util/guid',\r\n    'common/core/users/metarules',\r\n    './gmeNodeGetter',\r\n    './gmeNodeSetter',\r\n    './libraries',\r\n    './gmeServerRequests',\r\n    './stateloghelpers',\r\n    './pluginmanager',\r\n    './websocketRouterAccess',\r\n    'superagent'\r\n], function (Logger,\r\n             Storage,\r\n             EventDispatcher,\r\n             Core,\r\n             CONSTANTS,\r\n             ASSERT,\r\n             TASYNC,\r\n             GUID,\r\n             metaRules,\r\n             getNode,\r\n             getNodeSetters,\r\n             getLibraryFunctions,\r\n             getServerRequests,\r\n             stateLogHelpers,\r\n             PluginManager,\r\n             WebsocketRouterAccess,\r\n             superagent) {\r\n\r\n    'use strict';\r\n\r\n    function Client(gmeConfig) {\r\n        var self = this,\r\n            logger = Logger.create('gme:client', gmeConfig.client.log),\r\n            storage = Storage.getStorage(logger, gmeConfig, true),\r\n            state = {\r\n                // CONSTANTS.STORAGE. CONNECTED/DISCONNECTED/RECONNECTED/INCOMPATIBLE_CONNECTION/CONNECTION_ERROR\r\n                connection: null,\r\n                renewingToken: false,\r\n                exception: null,\r\n                project: null,\r\n                projectAccess: null,\r\n                projectInfo: null,\r\n                core: null,\r\n                branchName: null,\r\n                branchStatus: null, //CONSTANTS.BRANCH_STATUS. SYNC/AHEAD_SYNC/AHEAD_NOT_SYNC/PULLING/ERROR or null\r\n                readOnlyProject: false,\r\n                viewer: false, // This means that a specific commit is selected w/o regards to any branch.\r\n\r\n                users: {},\r\n                nodes: {},\r\n                loadNodes: {},\r\n\r\n                rootHash: null,\r\n                rootObject: null,\r\n                commitHash: null,\r\n\r\n                undoRedoChain: null, //{commitHash: '#hash', rootHash: '#hash', previous: object, next: object}\r\n\r\n                transactions: {\r\n                    opened: 0,\r\n                    callbacks: []\r\n                },\r\n                msg: '',\r\n                gHash: 0,\r\n                loadError: null,\r\n                ongoingTerritoryUpdateCounter: 0,\r\n                ongoingLoadPatternsCounter: 0,\r\n                pendingTerritoryUpdatePatterns: {},\r\n                loadingStatus: null,\r\n                inLoading: false,\r\n                loading: {\r\n                    rootHash: null,\r\n                    commitHash: null,\r\n                    changedNodes: null,\r\n                    next: null\r\n                }\r\n\r\n            },\r\n            monkeyPatchKey,\r\n            pluginManager,\r\n            nodeSetterFunctions,\r\n            coreLibraryFunctions,\r\n            serverRequests,\r\n            ROOT_PATH = '',\r\n            //addOnFunctions = new AddOn(state, storage, logger, gmeConfig),\r\n            loadPatternThrottled;\r\n\r\n        EventDispatcher.call(this);\r\n\r\n        this.CONSTANTS = CONSTANTS;\r\n\r\n        // Internal functions\r\n        function copy(object) {\r\n            if (object) {\r\n                return JSON.parse(JSON.stringify(object));\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function addLoadUnloadPathToUpdates(paths) {\r\n            var i,\r\n                pathPieces;\r\n\r\n            for (i = 0; i < paths.length; i += 1) {\r\n                pathPieces = paths[i].split(CONSTANTS.CORE.PATH_SEP);\r\n                while (pathPieces.length > 1) {\r\n                    state.loading.changedNodes.update[pathPieces.join(CONSTANTS.CORE.PATH_SEP)] = true;\r\n                    pathPieces.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        function wasNodeUpdated(changedNodes, node) {\r\n            // Is changedNodes available at all?  If not (undo/redo) emit for all nodes...\r\n            if (!changedNodes) {\r\n                return true;\r\n            }\r\n\r\n            // Did the node have a collection update?\r\n            if (changedNodes.partialUpdate[state.core.getPath(node)] === true) {\r\n                return true;\r\n            }\r\n\r\n            // Did any of the base classes have a non-collection update?\r\n            while (node) {\r\n                if (changedNodes.update[state.core.getPath(node)] === true) {\r\n                    return true;\r\n                }\r\n\r\n                node = state.core.getBase(node);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getModifiedNodes(newerNodes) {\r\n            var modifiedNodes = [],\r\n                updatedMetaPaths = [],\r\n                metaNodes,\r\n                metaPath,\r\n                updatePath,\r\n                nodePath,\r\n                i;\r\n\r\n            // For the client these rules apply for finding the affected nodes.\r\n            // 1. Updates should be triggered to any node that core.isTypeOf (i.e. mixins accounted for).\r\n            // 2. Root node should always be triggered.\r\n            // 3. loads/unloads should trigger updates for the parent chain.\r\n\r\n            if (state.loading.changedNodes) {\r\n                // 1. Account for mixins - i.e resolve isTypeOf.\r\n                // Gather all meta-nodes that had an update.\r\n                metaNodes = state.core.getAllMetaNodes(newerNodes[ROOT_PATH].node);\r\n                for (updatePath in state.loading.changedNodes.update) {\r\n                    if (Object.hasOwn(metaNodes, updatePath)) {\r\n                        updatedMetaPaths.push(updatePath);\r\n                    }\r\n                }\r\n\r\n                if (updatedMetaPaths.length > 0) {\r\n                    // There are meta-nodes with updates.\r\n                    for (metaPath in metaNodes) {\r\n                        // For all meta nodes..\r\n                        if (Object.hasOwn(metaNodes, metaPath)) {\r\n                            for (i = 0; i < updatedMetaPaths.length; i += 1) {\r\n                                // check if it is a typeOf (includes mixins) any of the updated meta-nodes\r\n                                if (state.core.isTypeOf(metaNodes[metaPath], metaNodes[updatedMetaPaths[i]]) === true) {\r\n                                    // if so add its path to the update nodes.\r\n                                    state.loading.changedNodes.update[metaPath] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //console.log('Update after meta considered', Object.keys(state.loading.changedNodes.update));\r\n\r\n                // 2. Add Root node\r\n                state.loading.changedNodes.update[ROOT_PATH] = true;\r\n\r\n                // 3. Account for loads and unloads.\r\n                addLoadUnloadPathToUpdates(Object.keys(state.loading.changedNodes.load));\r\n                addLoadUnloadPathToUpdates(Object.keys(state.loading.changedNodes.unload));\r\n\r\n                //console.log('Update after loads and unloads considered',\r\n                //    Object.keys(state.loading.changedNodes.update));\r\n            }\r\n\r\n            for (nodePath in state.nodes) {\r\n                if (Object.hasOwn(state.nodes, nodePath) && Object.hasOwn(newerNodes, nodePath) &&\r\n                    wasNodeUpdated(state.loading.changedNodes, newerNodes[nodePath].node)) {\r\n\r\n                    modifiedNodes.push(nodePath);\r\n                }\r\n            }\r\n            //console.log('NewerNodes, modifiedNodes', Object.keys(newerNodes).length, modifiedNodes.length);\r\n            return modifiedNodes;\r\n        }\r\n\r\n        //this is just a first brute implementation it needs serious optimization!!!\r\n        function fitsInPatternTypes(path, pattern) {\r\n            var i;\r\n\r\n            if (pattern.items && pattern.items.length > 0) {\r\n                for (i = 0; i < pattern.items.length; i += 1) {\r\n                    if (self.isTypeOf(path, pattern.items[i])) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function patternToPaths(patternId, pattern, pathsSoFar) {\r\n            var children,\r\n                subPattern,\r\n                i;\r\n\r\n            if (state.nodes[patternId]) {\r\n                pathsSoFar[patternId] = true;\r\n                if (pattern.children && pattern.children > 0) {\r\n                    children = state.core.getChildrenPaths(state.nodes[patternId].node);\r\n                    subPattern = copy(pattern);\r\n                    subPattern.children -= 1;\r\n                    for (i = 0; i < children.length; i += 1) {\r\n                        if (fitsInPatternTypes(children[i], pattern)) {\r\n                            patternToPaths(children[i], subPattern, pathsSoFar);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                state.loadError++;\r\n            }\r\n        }\r\n\r\n        function userEvents(userId, modifiedNodes) {\r\n            var newPaths = {},\r\n                startErrorLevel = state.loadError,\r\n                loadedOrUnloaded = {},\r\n                i,\r\n                events = [];\r\n\r\n            for (i in state.users[userId].PATTERNS) {\r\n                if (Object.hasOwn(state.users[userId].PATTERNS, i)) {\r\n                    if (state.nodes[i]) { //TODO we only check pattern if its root is there...\r\n                        patternToPaths(i, state.users[userId].PATTERNS[i], newPaths);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (startErrorLevel !== state.loadError) {\r\n                return; //we send events only when everything is there correctly\r\n            }\r\n\r\n            //deleted items\r\n            for (i in state.users[userId].PATHS) {\r\n                if (!newPaths[i]) {\r\n                    events.push({etype: 'unload', eid: i});\r\n                    loadedOrUnloaded[i] = true;\r\n                }\r\n            }\r\n\r\n            //added items\r\n            for (i in newPaths) {\r\n                if (!state.users[userId].PATHS[i]) {\r\n                    events.push({etype: 'load', eid: i});\r\n                    loadedOrUnloaded[i] = true;\r\n                }\r\n            }\r\n\r\n            //updated items\r\n            for (i = 0; i < modifiedNodes.length; i++) {\r\n                // Check that there wasn't a load or unload event for the node\r\n                if (newPaths[modifiedNodes[i]] && !loadedOrUnloaded[modifiedNodes[i]]) {\r\n                    events.push({etype: 'update', eid: modifiedNodes[i]});\r\n                }\r\n            }\r\n\r\n            state.users[userId].PATHS = newPaths;\r\n\r\n            //this is how the events should go\r\n            if (events.length > 0) {\r\n                if (state.loadError > startErrorLevel) {\r\n                    events.unshift({etype: 'incomplete', eid: null});\r\n                } else {\r\n                    events.unshift({etype: 'complete', eid: null});\r\n                }\r\n            } else {\r\n                events.unshift({etype: 'complete', eid: null});\r\n            }\r\n\r\n            state.users[userId].FN(events); //eslint-disable-line new-cap\r\n        }\r\n\r\n        function loadChildrenPattern(core, nodesSoFar, node, level, callback) {\r\n            var path = core.getPath(node),\r\n                childrenPaths = core.getChildrenPaths(node),\r\n                childrenRelids = core.getChildrenRelids(node),\r\n                missing = childrenPaths.length,\r\n                error = null,\r\n                i,\r\n                childrenPatternLoaded = function (err) {\r\n                    error = error || err;\r\n                    missing -= 1;\r\n                    if (missing === 0) {\r\n                        callback(error);\r\n                    }\r\n                },\r\n                childLoaded = function (err, child) {\r\n                    if (err || child === null) {\r\n                        error = error || err;\r\n                        missing -= 1;\r\n                        if (missing === 0) {\r\n                            callback(error);\r\n                        }\r\n                    } else {\r\n                        loadChildrenPattern(core, nodesSoFar, child, level - 1, childrenPatternLoaded);\r\n                    }\r\n                };\r\n\r\n            if (!nodesSoFar[path]) {\r\n                nodesSoFar[path] = {\r\n                    node: node\r\n                };\r\n            }\r\n            if (level > 0) {\r\n                if (missing > 0) {\r\n                    for (i = 0; i < childrenPaths.length; i++) {\r\n                        if (nodesSoFar[childrenPaths[i]]) {\r\n                            loadChildrenPattern(core,\r\n                                nodesSoFar,\r\n                                nodesSoFar[childrenPaths[i]].node,\r\n                                level - 1, childrenPatternLoaded);\r\n                        } else {\r\n                            core.loadChild(node, childrenRelids[i], childLoaded);\r\n                        }\r\n                    }\r\n                } else {\r\n                    callback(error);\r\n                }\r\n            } else {\r\n                callback(error);\r\n            }\r\n        }\r\n\r\n        function loadPattern(core, id, pattern, nodesSoFar, callback) {\r\n            //console.log('LP',id,pattern);\r\n            //var _callback = callback;\r\n            //callback = function(error){\r\n            //    console.log('LPF',id,pattern);\r\n            //    _callback(error);\r\n            //};\r\n\r\n            var base = null,\r\n                baseLoaded = function () {\r\n                    if (pattern.children && pattern.children > 0) {\r\n                        var level = pattern.children;\r\n                        loadChildrenPattern(core, nodesSoFar, base, level, callback);\r\n                    } else {\r\n                        callback(null);\r\n                    }\r\n                };\r\n\r\n            if (nodesSoFar[id]) {\r\n                base = nodesSoFar[id].node;\r\n                baseLoaded();\r\n            } else {\r\n                if (!nodesSoFar[ROOT_PATH]) {\r\n                    logger.error('pattern cannot be loaded if there is no root!!!');\r\n                }\r\n                base = nodesSoFar[ROOT_PATH].node;\r\n\r\n                core.loadByPath(base, id, function (err, node) {\r\n                    var path;\r\n                    if (!err && node && !core.isEmpty(node)) {\r\n                        path = core.getPath(node);\r\n                        if (!nodesSoFar[path]) {\r\n                            nodesSoFar[path] = {\r\n                                node: node\r\n                            };\r\n                        }\r\n                        base = node;\r\n                        baseLoaded();\r\n                    } else {\r\n                        callback(err);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        loadPatternThrottled = TASYNC.throttle(loadPattern, 1); //magic number could be fine-tuned\r\n\r\n        function reLaunchUsers() {\r\n            var i;\r\n            for (i in state.users) {\r\n                if (Object.hasOwn(state.users, i)) {\r\n                    if (state.users[i].UI && typeof state.users[i].UI === 'object' &&\r\n                        typeof state.users[i].UI.reLaunch === 'function') {\r\n                        state.users[i].UI.reLaunch();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function _updateTerritoryAllDone(guid, patterns, error) {\r\n\r\n            logger.debug('updateTerritory related loads finished', {\r\n                metadata: {\r\n                    userId: guid, patterns: patterns, error: error\r\n                }\r\n            });\r\n\r\n            if (state.users[guid]) {\r\n                state.users[guid].PATTERNS = copy(patterns);\r\n                if (!error) {\r\n                    userEvents(guid, []);\r\n                }\r\n            }\r\n        }\r\n\r\n        function canSwitchStates() {\r\n            if (state.inLoading && state.ongoingTerritoryUpdateCounter === 0 &&\r\n                state.ongoingLoadPatternsCounter === 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function switchStates() {\r\n            //it is safe now to move the loadNodes into nodes,\r\n            // refresh the metaNodes and generate events - all in a synchronous manner!!!\r\n            var modifiedPaths,\r\n                key;\r\n\r\n            //console.time('switchStates');\r\n\r\n            logger.debug('switching project state [C#' +\r\n                state.commitHash + ']->[C#' + state.loading.commitHash + '] : [R#' +\r\n                state.rootHash + ']->[R#' + state.loading.rootHash + ']');\r\n\r\n            //console.time('getModifiedNodes');\r\n            modifiedPaths = getModifiedNodes(state.loadNodes);\r\n            //console.timeEnd('getModifiedNodes');\r\n            state.nodes = state.loadNodes;\r\n            state.loadNodes = {};\r\n            self.getAllMetaNodes(); //This ensures that all language elements can be accessed with getNode\r\n\r\n            state.inLoading = false;\r\n            state.rootHash = state.loading.rootHash;\r\n            state.loading.rootHash = null;\r\n            state.commitHash = state.loading.commitHash;\r\n            state.loading.commitHash = null;\r\n\r\n            //checkMetaNameCollision(state.core, state.nodes[ROOT_PATH].node);\r\n            //checkMixinErrors(state.core, state.nodes[ROOT_PATH].node);\r\n            // These are checked by the meta-editor..\r\n\r\n            for (key in state.users) {\r\n                if (Object.hasOwn(state.users, key)) {\r\n                    userEvents(key, modifiedPaths);\r\n                }\r\n            }\r\n\r\n            if (state.loadingStatus) {\r\n                state.loading.next(state.loadingStatus);\r\n            } else {\r\n                state.loading.next(null);\r\n            }\r\n\r\n            //console.timeEnd('switchStates');\r\n        }\r\n\r\n        function loadingPatternFinished(err) {\r\n            state.loadingStatus = state.loadingStatus || err;\r\n            state.ongoingLoadPatternsCounter -= 1;\r\n\r\n            if (canSwitchStates()) {\r\n                switchStates();\r\n            }\r\n        }\r\n\r\n        function loading(newRootHash, newCommitHash, changedNodes, callback) {\r\n            var i, j,\r\n                userIds,\r\n                patternPaths,\r\n                patternsToLoad = [];\r\n\r\n            if (state.ongoingLoadPatternsCounter !== 0) {\r\n                callback(new Error('at the start of loading counter should bee zero!!! [' +\r\n                    state.ongoingLoadPatternsCounter + ']'));\r\n                return;\r\n            }\r\n\r\n            state.loadingStatus = null;\r\n            state.loadNodes = {};\r\n            state.loading.rootHash = newRootHash;\r\n            state.loading.commitHash = newCommitHash;\r\n            state.loading.next = callback;\r\n            state.loading.changedNodes = changedNodes;\r\n\r\n            state.core.loadRoot(state.loading.rootHash, function (err, root) {\r\n                if (err) {\r\n                    state.loading.next(err);\r\n                    return;\r\n                }\r\n\r\n                state.inLoading = true;\r\n                state.loadNodes[state.core.getPath(root)] = {\r\n                    node: root\r\n                };\r\n\r\n                //we first only set the counter of patterns but we also generate a completely separate pattern queue\r\n                //as we cannot be sure if all the users will remain at the point of giving the actual load command!\r\n                userIds = Object.keys(state.users);\r\n                for (i = 0; i < userIds.length; i += 1) {\r\n                    state.ongoingLoadPatternsCounter += Object.keys(state.users[userIds[i]].PATTERNS || {}).length;\r\n                    patternPaths = Object.keys(state.users[userIds[i]].PATTERNS || {});\r\n                    for (j = 0; j < patternPaths.length; j += 1) {\r\n                        patternsToLoad.push({\r\n                            id: patternPaths[j],\r\n                            pattern: copy(state.users[userIds[i]].PATTERNS[patternPaths[j]])\r\n                        });\r\n                    }\r\n                }\r\n                userIds = Object.keys(state.pendingTerritoryUpdatePatterns);\r\n                for (i = 0; i < userIds.length; i += 1) {\r\n                    state.ongoingLoadPatternsCounter +=\r\n                        Object.keys(state.pendingTerritoryUpdatePatterns[userIds[i]] || {}).length;\r\n                    patternPaths = Object.keys(state.pendingTerritoryUpdatePatterns[userIds[i]] || {});\r\n                    for (j = 0; j < patternPaths.length; j += 1) {\r\n                        patternsToLoad.push({\r\n                            id: patternPaths[j],\r\n                            pattern: copy(state.pendingTerritoryUpdatePatterns[userIds[i]][patternPaths[j]])\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //empty load check\r\n                if (state.ongoingLoadPatternsCounter === 0) {\r\n                    if (canSwitchStates()) {\r\n                        switchStates();\r\n                        reLaunchUsers();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                for (i = 0; i < patternsToLoad.length; i += 1) {\r\n                    loadPatternThrottled(state.core,\r\n                        patternsToLoad[i].id, patternsToLoad[i].pattern, state.loadNodes, loadingPatternFinished);\r\n                }\r\n            });\r\n        }\r\n\r\n        function cleanUsersTerritories() {\r\n            //look out as the user can remove itself at any time!!!\r\n            var userIds = Object.keys(state.users),\r\n                i,\r\n                j,\r\n                events;\r\n\r\n            for (i = 0; i < userIds.length; i++) {\r\n                if (state.users[userIds[i]]) {\r\n                    events = [{eid: null, etype: 'complete'}];\r\n                    for (j in state.users[userIds[i]].PATHS) {\r\n                        events.push({etype: 'unload', eid: j});\r\n                    }\r\n                    state.users[userIds[i]].PATTERNS = {};\r\n                    state.users[userIds[i]].PATHS = {};\r\n                    state.users[userIds[i]].SENDEVENTS = true;\r\n                    state.users[userIds[i]].FN(events); //eslint-disable-line new-cap\r\n                }\r\n            }\r\n        }\r\n\r\n        function logState(level, msg) {\r\n            var indent = gmeConfig.debug ? 2 : 0;\r\n\r\n            if (level === 'console') {\r\n                /*eslint-disable no-console*/\r\n                console.log('state at ' + msg,\r\n                    stateLogHelpers.getStateLogString(self, state, gmeConfig.debug, indent));\r\n                /*eslint-enable no-console*/\r\n            } else {\r\n                logger[level]('state at ' + msg,\r\n                    stateLogHelpers.getStateLogString(self, state, gmeConfig.debug, indent));\r\n            }\r\n        }\r\n\r\n        function getNewToken(callback) {\r\n            if (state.renewingToken === false) {\r\n                state.renewingToken = true;\r\n                (new superagent.Request('GET', gmeConfig.client.mountedPath + '/api/user/token'))\r\n                    .end(function (err, res) {\r\n                        state.renewingToken = false;\r\n                        callback(err, res.body.webgmeToken);\r\n                    });\r\n            } else {\r\n                logger.debug('Awaiting token renewal..');\r\n            }\r\n        }\r\n\r\n        // Forwarded functions\r\n        function saveRoot(msg, callback) {\r\n            var persisted,\r\n                numberOfPersistedObjects,\r\n                wrappedCallback,\r\n                callbacks;\r\n\r\n            logger.debug('saveRoot msg', msg);\r\n\r\n            if (!state.viewer && !state.readOnlyProject && state.nodes[ROOT_PATH]) {\r\n                if (state.msg && msg) {\r\n                    state.msg += '\\n' + msg;\r\n                } else {\r\n                    state.msg = msg;\r\n                }\r\n\r\n                if (state.transactions.opened === 0) {\r\n                    ASSERT(state.project && state.core && state.branchName);\r\n\r\n                    callbacks = state.transactions.callbacks;\r\n                    state.transactions.callbacks = [];\r\n\r\n                    wrappedCallback = function (err, result) {\r\n                        if (err) {\r\n                            logger.error('saveRoot failure', err);\r\n                        } else {\r\n                            logger.debug('saveRoot', result);\r\n                        }\r\n\r\n                        callbacks.forEach(function (cb) {\r\n                            cb(err, result);\r\n                        });\r\n                    };\r\n\r\n                    logger.debug('is NOT in transaction - will persist.');\r\n                    // console.time('persist');\r\n                    persisted = state.core.persist(state.nodes[ROOT_PATH].node);\r\n                    // console.timeEnd('persist');\r\n                    logger.debug('persisted', persisted);\r\n                    numberOfPersistedObjects = Object.keys(persisted.objects).length;\r\n                    if (numberOfPersistedObjects === 0) {\r\n                        logger.warn('No changes after persist will return from saveRoot.');\r\n                        wrappedCallback(null);\r\n                        return;\r\n                    } else if (numberOfPersistedObjects > 200) {\r\n                        //This is just for debugging\r\n                        logger.warn('Lots of persisted objects', numberOfPersistedObjects);\r\n                    }\r\n\r\n                    // Make the commit on the storage (will emit hashUpdated)\r\n                    storage.makeCommit(\r\n                        state.project.projectId,\r\n                        state.branchName,\r\n                        [state.commitHash],\r\n                        persisted.rootHash,\r\n                        persisted.objects,\r\n                        state.msg,\r\n                        wrappedCallback\r\n                    );\r\n\r\n                    state.msg = '';\r\n                } else {\r\n                    logger.debug('is in transaction - will NOT persist.');\r\n\r\n                }\r\n            } else {\r\n                //TODO: Why is this set to empty here?\r\n                state.msg = '';\r\n                callback && callback(null);\r\n            }\r\n        }\r\n\r\n        function storeNode(node /*, basic */) {\r\n            var path;\r\n            //basic = basic || true;\r\n            if (node) {\r\n                path = state.core.getPath(node);\r\n                //state.metaNodes[path] = node;\r\n                if (state.nodes[path]) {\r\n                    //TODO we try to avoid this\r\n                } else {\r\n                    state.nodes[path] = {\r\n                        node: node\r\n                    };\r\n                    //TODO this only needed when real eventing will be reintroduced\r\n                    //_inheritanceHash[path] = getInheritanceChain(node);\r\n                }\r\n                return path;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // Plugin Manager\r\n        pluginManager = new PluginManager(self, storage, state, logger, gmeConfig);\r\n        this.getCurrentPluginContext = pluginManager.getCurrentPluginContext;\r\n        this.runBrowserPlugin = pluginManager.runBrowserPlugin;\r\n        this.runServerPlugin = pluginManager.runServerPlugin;\r\n        this.filterPlugins = pluginManager.filterPlugins;\r\n        this.dispatchPluginNotification = pluginManager.dispatchPluginNotification;\r\n        this.getRunningPlugins = pluginManager.getRunningPlugins;\r\n        this.abortPlugin = pluginManager.abortPlugin;\r\n        this.sendMessageToPlugin = pluginManager.sendMessageToPlugin;\r\n\r\n        function printCoreError(error) {\r\n            logger.error('Faulty core usage raised an error', error);\r\n            self.dispatchEvent(CONSTANTS.NOTIFICATION, {\r\n                type: 'CORE',\r\n                severity: 'error',\r\n                message: error.message\r\n            });\r\n        }\r\n\r\n        // Node setters and getters.\r\n\r\n        nodeSetterFunctions = getNodeSetters(logger, state, saveRoot, storeNode, printCoreError);\r\n\r\n        for (monkeyPatchKey in nodeSetterFunctions) {\r\n            if (Object.hasOwn(nodeSetterFunctions, monkeyPatchKey)) {\r\n                self[monkeyPatchKey] = nodeSetterFunctions[monkeyPatchKey];\r\n            }\r\n        }\r\n\r\n        coreLibraryFunctions = getLibraryFunctions(logger, state, storage, saveRoot);\r\n\r\n        for (monkeyPatchKey in coreLibraryFunctions) {\r\n            if (Object.hasOwn(coreLibraryFunctions, monkeyPatchKey)) {\r\n                self[monkeyPatchKey] = coreLibraryFunctions[monkeyPatchKey];\r\n            }\r\n        }\r\n\r\n        serverRequests = getServerRequests(self, logger, state, storage);\r\n\r\n        for (monkeyPatchKey in serverRequests) {\r\n            if (Object.hasOwn(serverRequests, monkeyPatchKey)) {\r\n                self[monkeyPatchKey] = serverRequests[monkeyPatchKey];\r\n            }\r\n        }\r\n\r\n        // Main API functions (with helpers) for connecting, selecting project and branches etc.\r\n\r\n        function closeProject(projectId, callback) {\r\n            var prevBranchName = state.branchName;\r\n            state.project = null;\r\n            state.projectAccess = null;\r\n            state.projectInfo = null;\r\n            state.readOnlyProject = false;\r\n            //TODO what if for some reason we are in transaction?\r\n            storage.closeProject(projectId, function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                state.core = null;\r\n                state.branchName = null;\r\n                state.commitHash = null;\r\n                //self.dispatchEvent(null);\r\n                state.patterns = {};\r\n                //state.gHash = 0;\r\n                state.nodes = {};\r\n                state.loadNodes = {};\r\n                state.loadError = 0;\r\n                state.rootHash = null;\r\n                //state.rootObject = null;\r\n                state.transactions.opened = 0;\r\n                state.transactions.callbacks = [];\r\n                state.msg = '';\r\n\r\n                cleanUsersTerritories();\r\n                if (prevBranchName) {\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_CLOSED, prevBranchName);\r\n                }\r\n\r\n                self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                self.dispatchEvent(CONSTANTS.PROJECT_CLOSED, projectId);\r\n\r\n                callback(null);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Closes the currently open project.\r\n         * @param {function} callback\r\n         */\r\n        this.closeProject = function (callback) {\r\n            if (state.project && state.project.projectId) {\r\n                closeProject(state.project.projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open project.'));\r\n            }\r\n        };\r\n\r\n        this.connectToDatabase = function (callback) {\r\n            if (self.isConnected()) {\r\n                logger.warn('connectToDatabase - already connected');\r\n                callback(null);\r\n                return;\r\n            }\r\n            storage.open(function (connectionState) {\r\n                state.connection = connectionState;\r\n                if (connectionState === CONSTANTS.STORAGE.CONNECTED) {\r\n                    //N.B. this event will only be triggered once.\r\n                    self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    storage.webSocket.addEventListener(CONSTANTS.STORAGE.NOTIFICATION,\r\n                        function (emitter, eventData) {\r\n                            logger.debug('received notification', eventData);\r\n                            if (eventData.type === CONSTANTS.STORAGE.BRANCH_ROOM_SOCKETS) {\r\n                                self.dispatchConnectedUsersChanged(eventData);\r\n                                // If a new socket joined our branch -> emit to the branch room letting\r\n                                // any newly connected users know that we are in this branch too.\r\n                                // If a socket with the same userId as us disconnected -> emit to\r\n                                // make sure we're not deleted from the other users.\r\n                                self.emitStateNotification();\r\n\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.PLUGIN_NOTIFICATION) {\r\n                                self.dispatchPluginNotification(eventData);\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.ADD_ON_NOTIFICATION) {\r\n                                self.dispatchAddOnNotification(eventData);\r\n                            } else if (eventData.type === CONSTANTS.STORAGE.CLIENT_STATE_NOTIFICATION) {\r\n                                self.dispatchConnectedUsersChanged(eventData);\r\n                            } else {\r\n                                logger.error('Unknown notification type', eventData.type, eventData);\r\n                            }\r\n                        }\r\n                    );\r\n                    reLaunchUsers();\r\n                    callback(null);\r\n                } else if (connectionState === CONSTANTS.STORAGE.DISCONNECTED) {\r\n                    if (state.connection !== CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION) {\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    }\r\n                } else if (connectionState === CONSTANTS.STORAGE.RECONNECTED) {\r\n                    self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                } else if (connectionState === CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION) {\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, connectionState);\r\n                    });\r\n                } else if (connectionState === CONSTANTS.STORAGE.JWT_ABOUT_TO_EXPIRE) {\r\n                    logger.warn('Token about is about to expire');\r\n                    getNewToken(function (err, newToken) {\r\n                        if (err) {\r\n                            logger.error('Failed to renew token', err);\r\n                            // Token will probably expire soon\r\n                        } else {\r\n                            storage.setToken(newToken);\r\n                        }\r\n                    });\r\n                } else if (connectionState === CONSTANTS.STORAGE.JWT_EXPIRED) {\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.STORAGE.JWT_EXPIRED);\r\n                    });\r\n                } else {\r\n                    logger.error(new Error('Connection failed error ' + connectionState));\r\n                    self.disconnectFromDatabase(function (err) {\r\n                        if (err) {\r\n                            logger.error(err);\r\n                        }\r\n\r\n                        self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.STORAGE.CONNECTION_ERROR);\r\n                        callback(new Error('Connection failed! ' + connectionState));\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        this.disconnectFromDatabase = function (callback) {\r\n\r\n            function closeStorage(err) {\r\n                storage.close(function (err2) {\r\n                    if (state.connection !== CONSTANTS.STORAGE.INCOMPATIBLE_CONNECTION &&\r\n                        state.connection !== CONSTANTS.STORAGE.CONNECTION_ERROR) {\r\n                        state.connection = CONSTANTS.STORAGE.DISCONNECTED;\r\n                    }\r\n\r\n                    callback(err || err2);\r\n                });\r\n            }\r\n\r\n            if (state.project) {\r\n                closeProject(state.project.projectId, closeStorage);\r\n            } else {\r\n                closeStorage(null);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * If branchName is given and it does not exist, the project will be closed and callback resolved with an error.\r\n         * If branchName NOT given it will attempt the following in order and break if successful at any step:\r\n         *  1) Select the master if available.\r\n         *  2) Select any available branch.\r\n         *  3) Select the latest commit.\r\n         *  4) Close the project and resolve with error.\r\n         * @param {string} projectId\r\n         * @param {string} [branchName='master']\r\n         * @param {function} callback\r\n         */\r\n        this.selectProject = function (projectId, branchName, callback) {\r\n            if (callback === undefined && typeof branchName === 'function') {\r\n                callback = branchName;\r\n                branchName = undefined;\r\n            }\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n            var prevProjectId,\r\n                branchToOpen = branchName || 'master';\r\n\r\n            logger.debug('selectProject', projectId, branchToOpen);\r\n\r\n            function projectOpened(err, project, branches, access) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                project.getProjectInfo(function (err, projectInfo) {\r\n                    if (err) {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n\r\n                    state.project = project;\r\n                    state.projectAccess = access;\r\n                    state.projectInfo = projectInfo;\r\n                    state.readOnlyProject = access.write === false;\r\n                    state.core = new Core(project, {\r\n                        globConf: gmeConfig,\r\n                        logger: logger.fork('core')\r\n                    });\r\n\r\n                    logState('info', 'projectOpened');\r\n                    logger.debug('projectOpened, branches: ', branches);\r\n                    self.dispatchEvent(CONSTANTS.PROJECT_OPENED, projectId);\r\n\r\n                    if (Object.hasOwn(branches, branchToOpen) === false) {\r\n                        if (branchName) {\r\n                            logger.error('Given branch does not exist \"' + branchName + '\"');\r\n                            closeProject(projectId, function (err) {\r\n                                if (err) {\r\n                                    logger.error('closeProject after missing branch failed with err', err);\r\n                                }\r\n                                callback(new Error('Given branch does not exist \"' + branchName + '\"'));\r\n                            });\r\n                            return;\r\n                        }\r\n                        logger.warn('Project \"' + projectId + '\" did not have branch', branchToOpen);\r\n                        branchToOpen = Object.keys(branches)[0] || null;\r\n                        logger.debug('Picked \"' + branchToOpen + '\".');\r\n                    }\r\n\r\n                    if (branchToOpen) {\r\n                        self.selectBranch(branchToOpen, null, function (err) {\r\n                            if (err) {\r\n                                callback(err);\r\n                                return;\r\n                            }\r\n                            logState('info', 'selectBranch');\r\n                            reLaunchUsers();\r\n                            callback(null);\r\n                        });\r\n                    } else {\r\n                        logger.warn('No branches available in project, will attempt to select latest commit.');\r\n                        self.getCommits(projectId, Date.now(), 1, function (err, commitObjects) {\r\n                            if (err || commitObjects.length === 0) {\r\n                                logger.error(err);\r\n                                closeProject(projectId, function (err) {\r\n                                    if (err) {\r\n                                        logger.error('closeProject after missing any commits failed with err', err);\r\n                                    }\r\n                                    callback(new Error('Project does not have any commits.'));\r\n                                });\r\n                                return;\r\n                            }\r\n                            self.selectCommit(commitObjects[0]._id, function (err) {\r\n                                if (err) {\r\n                                    logger.error(err);\r\n                                    closeProject(projectId, function (err) {\r\n                                        if (err) {\r\n                                            logger.error('closeProject after missing any commits failed with err', err);\r\n                                        }\r\n                                        callback(new Error('Failed selecting commit when opening project.'));\r\n                                    });\r\n                                    return;\r\n                                }\r\n                                reLaunchUsers();\r\n                                callback(null);\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (state.project) {\r\n                prevProjectId = state.project.projectId;\r\n                logger.debug('A project was open, closing it', prevProjectId);\r\n\r\n                if (prevProjectId === projectId) {\r\n                    logger.warn('projectId is already opened', projectId);\r\n                    callback(null);\r\n                    return;\r\n                }\r\n                closeProject(prevProjectId, function (err) {\r\n                    if (err) {\r\n                        logger.error('problems closing previous project', err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    storage.openProject(projectId, projectOpened);\r\n                });\r\n            } else {\r\n                storage.openProject(projectId, projectOpened);\r\n            }\r\n        };\r\n\r\n        function addModification(commitObject, clear) {\r\n            var newItem,\r\n                commitHash = commitObject[CONSTANTS.STORAGE.MONGO_ID],\r\n                currItem;\r\n            if (clear) {\r\n                logger.debug('foreign modification clearing undo-redo chain');\r\n                state.undoRedoChain = {\r\n                    commitHash: commitHash,\r\n                    rootHash: commitObject.root,\r\n                    previous: null,\r\n                    next: null\r\n                };\r\n                return;\r\n            }\r\n\r\n            // Check if the modification already exist, i.e. commit is from undoing or redoing.\r\n            currItem = state.undoRedoChain;\r\n            while (currItem) {\r\n                if (currItem.commitHash === commitHash) {\r\n                    return;\r\n                }\r\n                currItem = currItem.previous;\r\n            }\r\n\r\n            currItem = state.undoRedoChain;\r\n            while (currItem) {\r\n                if (currItem.commitHash === commitHash) {\r\n                    return;\r\n                }\r\n                currItem = currItem.next;\r\n            }\r\n\r\n            newItem = {\r\n                commitHash: commitHash,\r\n                rootHash: commitObject.root,\r\n                previous: state.undoRedoChain,\r\n                next: null\r\n            };\r\n            state.undoRedoChain.next = newItem;\r\n            state.undoRedoChain = newItem;\r\n        }\r\n\r\n        function canUndo() {\r\n            var result = false;\r\n            if (state.undoRedoChain && state.undoRedoChain.previous && state.undoRedoChain.previous.commitHash) {\r\n                result = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function canRedo() {\r\n            var result = false;\r\n            if (state.undoRedoChain && state.undoRedoChain.next) {\r\n                result = true;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getBranchStatusHandler() {\r\n            return function (branchStatus, commitQueue, updateQueue) {\r\n                logger.debug('branchStatus changed', branchStatus, commitQueue, updateQueue);\r\n                logState('debug', 'branchStatus');\r\n                state.branchStatus = branchStatus;\r\n                self.dispatchEvent(CONSTANTS.BRANCH_STATUS_CHANGED,\r\n                    {\r\n                        status: branchStatus,\r\n                        commitQueue: commitQueue,\r\n                        updateQueue: updateQueue\r\n                    }\r\n                );\r\n            };\r\n        }\r\n\r\n        function getHashUpdateHandler() {\r\n            return function (data, commitQueue, updateQueue, callback) {\r\n                var commitData = data.commitData,\r\n                    clearUndoRedo = data.local !== true,\r\n                    commitHash = commitData.commitObject[CONSTANTS.STORAGE.MONGO_ID];\r\n                logger.debug('hashUpdateHandler invoked. project, branch, commitHash',\r\n                    commitData.projectId, commitData.branchName, commitHash);\r\n\r\n                if (state.transactions.opened > 0) {\r\n                    logger.warn('Is in transaction, will not load in changes');\r\n                    callback(null, false); // proceed: false\r\n                    return;\r\n                }\r\n\r\n                logger.debug('loading commitHash, local?', commitHash, data.local);\r\n                loading(commitData.commitObject.root, commitHash, commitData.changedNodes, function (err, aborted) {\r\n                    if (err) {\r\n                        logger.error('hashUpdateHandler invoked loading and it returned error',\r\n                            commitData.commitObject.root, err);\r\n                        logState('error', 'hashUpdateHandler');\r\n                        callback(err, false); // proceed: false\r\n                    } else if (aborted === true) {\r\n                        logState('warn', 'hashUpdateHandler');\r\n                        callback(null, false); // proceed: false\r\n                    } else {\r\n                        logger.debug('loading complete for incoming rootHash', commitData.commitObject.root);\r\n                        logState('debug', 'hashUpdateHandler');\r\n                        //undo-redo\r\n                        addModification(commitData.commitObject, clearUndoRedo);\r\n                        self.dispatchEvent(CONSTANTS.UNDO_AVAILABLE, canUndo());\r\n                        self.dispatchEvent(CONSTANTS.REDO_AVAILABLE, canRedo());\r\n                        self.dispatchEvent(CONSTANTS.NEW_COMMIT_STATE, {\r\n                            data: data,\r\n                            uiState: typeof self.uiStateGetter === 'function' ? self.uiStateGetter() : null\r\n                        });\r\n                        callback(null, true); // proceed: true\r\n                    }\r\n                });\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Opens the given branch and closes any open branch (even though the same branch is opened)\r\n         * @param {string} branchName - name of branch to open.\r\n         * @param {function} [branchStatusHandler=getDefaultCommitHandler()] - Handles returned statuses after commits.\r\n         * @param callback\r\n         */\r\n        this.selectBranch = function (branchName, branchStatusHandler, callback) {\r\n            var prevBranchName = state.branchName;\r\n            logger.debug('selectBranch', branchName);\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n                return;\r\n            }\r\n            if (!state.project) {\r\n                callback(new Error('selectBranch invoked without an opened project'));\r\n                return;\r\n            }\r\n\r\n            if (branchStatusHandler) {\r\n                logger.warn('passing branchStatusHandler is deprecated, use addHashUpdateHandler or' +\r\n                    ' addBranchStatusHandler on the branch object instead (getProjectObject().branches[branchName]).');\r\n            }\r\n\r\n            function openBranch() {\r\n                logger.debug('openBranch, calling storage openBranch', state.project.projectId, branchName);\r\n                storage.openBranch(state.project.projectId, branchName,\r\n                    getHashUpdateHandler(), getBranchStatusHandler(),\r\n                    function (err /*, latestCommit*/) {\r\n                        if (err) {\r\n                            logger.error('storage.openBranch returned with error', err);\r\n                            self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                            callback(err);\r\n                            return;\r\n                        }\r\n\r\n                        state.viewer = false;\r\n                        state.branchName = branchName;\r\n                        self.dispatchEvent(CONSTANTS.BRANCH_OPENED, branchName);\r\n                        self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, branchName);\r\n                        logState('info', 'openBranch');\r\n                        callback(null);\r\n                    }\r\n                );\r\n            }\r\n\r\n            if (prevBranchName !== null) {\r\n                logger.debug('Branch was open, closing it first', prevBranchName);\r\n                storage.closeBranch(state.project.projectId, prevBranchName, function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems closing existing branch', err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n\r\n                    state.branchName = null;\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_CLOSED, prevBranchName);\r\n                    openBranch();\r\n                });\r\n            } else {\r\n                openBranch();\r\n            }\r\n        };\r\n\r\n        this.selectCommit = function (commitHash, callback) {\r\n            self._selectCommitFilteredEvents(commitHash, null, callback);\r\n        };\r\n\r\n        this._selectCommitFilteredEvents = function (commitHash, changedNodes, callback) {\r\n            var prevBranchName;\r\n\r\n            logger.debug('selectCommit', commitHash);\r\n            if (self.isConnected() === false) {\r\n                callback(new Error('There is no open database connection!'));\r\n                return;\r\n            }\r\n            if (!state.project) {\r\n                callback(new Error('selectCommit invoked without open project'));\r\n                return;\r\n            }\r\n\r\n            function openCommit() {\r\n                state.viewer = true;\r\n\r\n                state.project.loadObject(commitHash, function (err, commitObj) {\r\n                    if (!err && commitObj) {\r\n                        logState('info', 'selectCommit loaded commit');\r\n                        self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                        loading(commitObj.root, commitHash, changedNodes, function (err, aborted) {\r\n                            if (err) {\r\n                                logger.error('loading returned error', commitObj.root, err);\r\n                                logState('error', 'selectCommit loading');\r\n                                callback(err);\r\n                            } else if (aborted === true) {\r\n                                logState('warn', 'selectCommit loading');\r\n                                callback(new Error('Loading selected commit was aborted'));\r\n                            } else {\r\n                                logger.debug('loading complete for selectCommit rootHash', commitObj.root);\r\n                                logState('info', 'selectCommit loading');\r\n                                self.dispatchEvent(CONSTANTS.BRANCH_CHANGED, null);\r\n                                callback(null);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        logger.error('Cannot view given ' + commitHash + ' commit as it\\'s root cannot be loaded! [' +\r\n                            JSON.stringify(err) + ']');\r\n                        callback(err || new Error('commit object cannot be found!'));\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (state.branchName !== null) {\r\n                logger.debug('Branch was open, closing it first', state.branchName);\r\n                prevBranchName = state.branchName;\r\n\r\n                storage.closeBranch(state.project.projectId, prevBranchName, function (err) {\r\n                    if (err) {\r\n                        logger.error('Problems closing existing branch', err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n\r\n                    state.branchName = null;\r\n                    self.dispatchEvent(CONSTANTS.BRANCH_CLOSED, prevBranchName);\r\n                    openCommit();\r\n                });\r\n            } else {\r\n                openCommit();\r\n            }\r\n        };\r\n\r\n        this.forkCurrentBranch = function (newName, commitHash, callback) {\r\n            var self = this,\r\n                activeBranchName = self.getActiveBranchName(),\r\n                activeProjectId = self.getActiveProjectId(),\r\n                forkName;\r\n\r\n            logger.debug('forkCurrentBranch', newName, commitHash);\r\n            if (!state.project) {\r\n                callback('Cannot fork without an open project!');\r\n                return;\r\n            }\r\n            if (activeBranchName === null) {\r\n                callback('Cannot fork without an open branch!');\r\n                return;\r\n            }\r\n            forkName = newName || activeBranchName + '_' + Date.now();\r\n            storage.forkBranch(activeProjectId, activeBranchName, forkName, commitHash,\r\n                function (err, forkHash) {\r\n                    if (err) {\r\n                        logger.error('Could not fork branch:', newName, err);\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    callback(null, forkName, forkHash);\r\n                }\r\n            );\r\n        };\r\n\r\n        // State getters.\r\n        this.isConnected = function () {\r\n            return state.connection === CONSTANTS.STORAGE.CONNECTED ||\r\n                state.connection === CONSTANTS.STORAGE.RECONNECTED;\r\n        };\r\n\r\n        this.getNetworkStatus = function () {\r\n            return state.connection;\r\n        };\r\n\r\n        this.getConnectedStorageVersion = function () {\r\n            // This is the version of the server the storage is currently connected to.\r\n            return storage.serverVersion;\r\n        };\r\n\r\n        this.getBranchStatus = function () {\r\n            return state.branchStatus;\r\n        };\r\n\r\n        this.getActiveProjectId = function () {\r\n            return state.project && state.project.projectId;\r\n        };\r\n\r\n        this.getActiveProjectName = function () {\r\n            return state.project && state.project.projectName;\r\n        };\r\n\r\n        this.getActiveProjectKind = function () {\r\n            return state.projectInfo && state.projectInfo.info && state.projectInfo.info.kind;\r\n        };\r\n\r\n        this.getActiveBranchName = function () {\r\n            return state.branchName;\r\n        };\r\n\r\n        this.getActiveCommitHash = function () {\r\n            return state.commitHash;\r\n        };\r\n\r\n        this.getActiveRootHash = function () {\r\n            return state.rootHash;\r\n        };\r\n\r\n        this.isProjectReadOnly = function () {\r\n            return state.readOnlyProject;\r\n        };\r\n\r\n        this.isCommitReadOnly = function () {\r\n            // This means that a specific commit is selected w/o regards to any branch.\r\n            return state.viewer;\r\n        };\r\n\r\n        this.isReadOnly = function () {\r\n            return state.viewer || state.readOnlyProject;\r\n        };\r\n\r\n        this.getProjectAccess = function () {\r\n            return state.projectAccess;\r\n        };\r\n\r\n        this.getProjectInfo = function () {\r\n            return state.projectInfo;\r\n        };\r\n\r\n        this.getProjectObject = function () {\r\n            return state.project;\r\n        };\r\n\r\n        /**\r\n         * Creates a new core instance using the state of the client and loads the root node.\r\n         * @param {object} [options]\r\n         * @param {string} [options.commitHash=%state.commitHash%] - If a different commit-hash should be loaded.\r\n         * @param {GmeLogger} [options.logger=%clientLogger%] - Logger passed to the core instance.\r\n         * @param {function} callback\r\n         * @param {Error|null} callback.error - Non-null if failed to retrieve result.\r\n         * @param {object} callback.result - The result object\r\n         * @param {Core} callback.result.core - Newly created core instance\r\n         * @param {Core~Node} callback.result.rootNode - The root-node that was loaded.\r\n         * @param {string} callback.result.commitHash - The commitHash used as basis for loading root-node.\r\n         * @param {Project} callback.result.project - A reference to the project.\r\n         */\r\n        this.getCoreInstance = function (options, callback) {\r\n            options = options || {};\r\n            options.logger = options.logger || logger.fork('core');\r\n\r\n            var result = {\r\n                core: null,\r\n                rootNode: null,\r\n                project: state.project,\r\n                commitHash: options.commitHash || state.commitHash\r\n            };\r\n\r\n            function loadRootNode(rootHash) {\r\n                result.core = new Core(state.project, {\r\n                    globConf: gmeConfig,\r\n                    logger: options.logger\r\n                });\r\n\r\n                result.core.loadRoot(rootHash)\r\n                    .then(function (rootNode) {\r\n                        result.rootNode = rootNode;\r\n                        return result;\r\n                    })\r\n                    .nodeify(callback);\r\n            }\r\n\r\n            if (!state.project) {\r\n                callback(new Error('Cannot get a core instance without an open project.'));\r\n            } else if (options.commitHash && options.commitHash !== state.commitHash) {\r\n                state.project.loadObject(options.commitHash, function (err, commitObj) {\r\n                    if (err) {\r\n                        callback(err);\r\n                    } else if (!commitObj || commitObj.type !== CONSTANTS.STORAGE.COMMIT_TYPE) {\r\n                        callback(new Error('Object at given commit-hash is not a commit-object.'));\r\n                    } else {\r\n                        loadRootNode(commitObj.root);\r\n                    }\r\n                });\r\n            } else if (state.rootHash) {\r\n                loadRootNode(state.rootHash);\r\n            } else {\r\n                callback(new Error('No root-hash available in state.'));\r\n            }\r\n        };\r\n\r\n        this.getCommitQueue = function () {\r\n            if (state.project && state.branchName && Object.hasOwn(state.project.branches, state.branchName)) {\r\n                return state.project.branches[state.branchName].getCommitQueue();\r\n            }\r\n\r\n            return [];\r\n        };\r\n\r\n        this.downloadCommitQueue = function () {\r\n            var commitQueue = self.getCommitQueue();\r\n\r\n            if (commitQueue.length > 0) {\r\n                stateLogHelpers.downloadCommitQueue(self, commitQueue);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.downloadError = function () {\r\n            stateLogHelpers.downloadStateDump(self, state);\r\n        };\r\n\r\n        this.canUndo = function (branchName) {\r\n            return branchName === state.branchName && canUndo();\r\n        };\r\n\r\n        this.canRedo = function (branchName) {\r\n            return branchName === state.branchName && canRedo();\r\n        };\r\n\r\n        // Undo/Redo functionality\r\n        this.undo = function (branchName, callback) {\r\n            if (self.canUndo(branchName) === false) {\r\n                callback(new Error('unable to make undo'));\r\n                return;\r\n            }\r\n\r\n            state.undoRedoChain = state.undoRedoChain.previous;\r\n\r\n            logState('info', 'undo [before setBranchHash]');\r\n            storage.setBranchHash(state.project.projectId, branchName, state.undoRedoChain.commitHash, state.commitHash,\r\n                function (err, commitResult) {\r\n                    if (err) {\r\n                        //TODO do we need to handle this? How?\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    logState('info', 'undo [after setBranchHash]');\r\n                    callback(null, commitResult);\r\n                }\r\n            );\r\n\r\n        };\r\n\r\n        this.redo = function (branchName, callback) {\r\n            if (self.canRedo(branchName) === false) {\r\n                callback(new Error('unable to make redo'));\r\n                return;\r\n            }\r\n\r\n            state.undoRedoChain = state.undoRedoChain.next;\r\n\r\n            logState('info', 'redo [before setBranchHash]');\r\n            storage.setBranchHash(state.project.projectId, branchName, state.undoRedoChain.commitHash, state.commitHash,\r\n                function (err, commitResult) {\r\n                    if (err) {\r\n                        //TODO do we need to handle this? How?\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    logState('info', 'redo [after setBranchHash]');\r\n                    callback(null, commitResult);\r\n                }\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Persists all commits in commitQueue and optionally tries to fast-forward the current branch.\r\n         * If not fast-forwarding or it fails to do that - a new branch will be created.\r\n         *\r\n         * @param {commitQueue} commitQueue -\r\n         * @param {object} [options] - optional parameters\r\n         * @param {object} [options.fastForward] - If true will attempt to setBranchHash from current\r\n         * branch to last in queue.\r\n         * @param {object} [options.newBranchName=%currentBranch_time-now%] - Name of new branch if needed.\r\n         */\r\n        this.applyCommitQueue = function (commitQueue, options, callback) {\r\n            var branchName = self.getActiveBranchName(),\r\n                projectId = commitQueue[0].projectId,\r\n                firstCommitsParents = commitQueue[0].commitObject.parents,\r\n                lastCommitHash = commitQueue[commitQueue.length - 1].commitObject._id;\r\n\r\n            options = options || {};\r\n            options.newBranchName = options.newBranchName || self.getActiveBranchName() + '_' + Date.now();\r\n\r\n            function createNewBranch() {\r\n                storage.createBranch(projectId, options.newBranchName, lastCommitHash, callback);\r\n            }\r\n\r\n            storage.persistCommits(commitQueue, function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                if (options.fastForward && firstCommitsParents.indexOf(self.getActiveCommitHash()) > -1) {\r\n                    storage.setBranchHash(projectId, branchName, lastCommitHash, self.getActiveCommitHash(),\r\n                        function (err, result) {\r\n                            if (err) {\r\n                                callback(err);\r\n                            } else if (result.status !== CONSTANTS.STORAGE.SYNCED) {\r\n                                createNewBranch();\r\n                            } else {\r\n                                callback();\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    createNewBranch();\r\n                }\r\n            });\r\n        };\r\n\r\n        // REST-like functions and forwarded to storage TODO: add these to separate base class\r\n\r\n        //  Getters\r\n        this.getProjects = function (options, callback) {\r\n            var asObject;\r\n            if (self.isConnected()) {\r\n                if (options.asObject) {\r\n                    asObject = true;\r\n                    delete options.asObject;\r\n                }\r\n                storage.getProjects(options, function (err, result) {\r\n                    var i,\r\n                        resultObj = {};\r\n                    if (err) {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    if (asObject === true) {\r\n                        for (i = 0; i < result.length; i += 1) {\r\n                            resultObj[result[i]._id] = result[i];\r\n                        }\r\n                        callback(null, resultObj);\r\n                    } else {\r\n                        callback(null, result);\r\n                    }\r\n                });\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getProjectsAndBranches = function (asObject, callback) {\r\n            //This is kept for the tests.\r\n            self.getProjects({rights: true, branches: true, asObject: asObject}, callback);\r\n        };\r\n\r\n        this.getBranches = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getBranches(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getTags = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getTags(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getCommits = function (projectId, before, number, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getCommits(projectId, before, number, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getHistory = function (projectId, start, number, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getHistory(projectId, start, number, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.getLatestCommitData = function (projectId, branchName, callback) {\r\n            if (self.isConnected()) {\r\n                storage.getLatestCommitData(projectId, branchName, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        //  Setters\r\n        this.createProject = function (projectName, parameters, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createProject(projectName, parameters, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteProject = function (projectId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteProject(projectId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.transferProject = function (projectId, newOwnerId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.transferProject(projectId, newOwnerId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.duplicateProject = function (projectId, projectName, newOwnerId, callback) {\r\n            if (self.isConnected()) {\r\n                storage.duplicateProject(projectId, projectName, newOwnerId, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.createBranch = function (projectId, branchName, newHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createBranch(projectId, branchName, newHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteBranch = function (projectId, branchName, oldHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteBranch(projectId, branchName, oldHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.createTag = function (projectId, tagName, commitHash, callback) {\r\n            if (self.isConnected()) {\r\n                storage.createTag(projectId, tagName, commitHash, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.deleteTag = function (projectId, tagName, callback) {\r\n            if (self.isConnected()) {\r\n                storage.deleteTag(projectId, tagName, callback);\r\n            } else {\r\n                callback(new Error('There is no open database connection!'));\r\n            }\r\n        };\r\n\r\n        this.squashCommits = function (projectId, fromCommit, toCommitOrBranch, msg, callback) {\r\n            // logger.debug('squashing latest commits of branch: ', parameters);\r\n            storage.squashCommits(projectId, fromCommit, toCommitOrBranch, msg, callback);\r\n        };\r\n\r\n        // Watchers (used in e.g. ProjectNavigator).\r\n        /**\r\n         * Triggers eventHandler(storage, eventData) on PROJECT_CREATED and PROJECT_DELETED.\r\n         *\r\n         * eventData = {\r\n         *    etype: PROJECT_CREATED||DELETED,\r\n         *    projectId: %id of project%\r\n         * }\r\n         *\r\n         * @param {function} eventHandler\r\n         * @param {function} [callback]\r\n         */\r\n        this.watchDatabase = function (eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                if (err) {\r\n                    logger.error('Problems watching database room');\r\n                }\r\n            };\r\n            storage.watchDatabase(eventHandler, callback);\r\n        };\r\n\r\n        this.unwatchDatabase = function (eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                if (err) {\r\n                    logger.error('Problems unwatching database room');\r\n                }\r\n            };\r\n            storage.unwatchDatabase(eventHandler, callback);\r\n        };\r\n\r\n        /**\r\n         * Triggers eventHandler(storage, eventData) on BRANCH_CREATED, BRANCH_DELETED and BRANCH_HASH_UPDATED\r\n         * for the given projectId.\r\n         *\r\n         *\r\n         * eventData = {\r\n         *    etype: BRANCH_CREATED||DELETED||HASH_UPDATED,\r\n         *    projectId: %id of project%,\r\n         *    branchName: %name of branch%,\r\n         *    newHash: %new commitHash (='' when DELETED)%\r\n         *    oldHash: %previous commitHash (='' when CREATED)%\r\n         * }\r\n         *\r\n         * @param {string} projectId\r\n         * @param {function} eventHandler\r\n         * @param {function} [callback]\r\n         */\r\n        this.watchProject = function (projectId, eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                if (err) {\r\n                    logger.error('Problems watching project room', projectId);\r\n                }\r\n            };\r\n            storage.watchProject(projectId, eventHandler, callback);\r\n        };\r\n\r\n        this.unwatchProject = function (projectId, eventHandler, callback) {\r\n            callback = callback || function (err) {\r\n                if (err) {\r\n                    logger.error('Problems unwatching project room', projectId);\r\n                }\r\n            };\r\n            storage.unwatchProject(projectId, eventHandler, callback);\r\n        };\r\n\r\n        // Document handling\r\n        this.watchDocument = storage.watchDocument.bind(storage);\r\n        this.unwatchDocument = storage.unwatchDocument.bind(storage);\r\n        this.sendDocumentOperation = storage.sendDocumentOperation.bind(storage);\r\n        this.sendDocumentSelection = storage.sendDocumentSelection.bind(storage);\r\n\r\n        // Node handling\r\n        this.getNode = function (nodePath) {\r\n            return getNode(nodePath, logger, state, storeNode);\r\n        };\r\n\r\n        this.getAllMetaNodes = function (asObject) {\r\n            var result = asObject ? {} : [];\r\n            if (state && state.core && state.nodes && state.nodes[ROOT_PATH]) {\r\n                var metaNodes = state.core.getAllMetaNodes(state.nodes[ROOT_PATH].node),\r\n                    gmeNode,\r\n                    keys = Object.keys(metaNodes || {}),\r\n                    i;\r\n\r\n                for (i = 0; i < keys.length; i += 1) {\r\n                    gmeNode = self.getNode(storeNode(metaNodes[keys[i]]), logger, state, storeNode);\r\n                    if (asObject) {\r\n                        result[keys[i]] = gmeNode;\r\n                    } else {\r\n                        result.push(gmeNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.checkMetaConsistency = function () {\r\n            var result;\r\n\r\n            if (state && state.core && state.nodes && state.nodes[ROOT_PATH]) {\r\n                result = metaRules.checkMetaConsistency(state.core, state.nodes[ROOT_PATH].node);\r\n            } else {\r\n                result = [];\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        this.startTransaction = function (msg) {\r\n            if (state.core) {\r\n                state.transactions.opened += 1;\r\n                msg = typeof msg === 'string' ? msg : '[';\r\n                saveRoot(msg);\r\n            } else {\r\n                logger.error('Can not start transaction with no core available.');\r\n            }\r\n        };\r\n\r\n        this.completeTransaction = function (msg, callback) {\r\n            state.transactions.opened -= 1;\r\n            if (callback) {\r\n                state.transactions.callbacks.push(callback);\r\n            }\r\n\r\n            if (state.transactions.opened < 0) {\r\n                state.transactions.opened = 0;\r\n                logger.error(new Error('More calls to completeTransaction than transactions started!'));\r\n            }\r\n\r\n            if (state.core) {\r\n                msg = msg || ']';\r\n                saveRoot(msg, callback);\r\n            }\r\n        };\r\n\r\n        //territory functions\r\n        this.addUI = function (ui, fn, guid) {\r\n            ASSERT(fn);\r\n            ASSERT(typeof fn === 'function');\r\n            guid = guid || GUID();\r\n            state.users[guid] = {type: 'notused', UI: ui, PATTERNS: {}, PATHS: {}, SENDEVENTS: true, FN: fn};\r\n            return guid;\r\n        };\r\n\r\n        this.removeUI = function (guid) {\r\n            logger.debug('removeUI', guid);\r\n            delete state.users[guid];\r\n        };\r\n\r\n        this._removeAllUIs = function () {\r\n            // This is mainly intended for clean up during testing.\r\n            logger.debug('_removeAllUIs called');\r\n            state.users = {};\r\n        };\r\n\r\n        this.updateTerritory = function (guid, patterns) {\r\n            var loadRequestCounter = 0,\r\n                updateRequestId = GUID(),\r\n                error = null,\r\n                keys = Object.keys(patterns || {}),\r\n                i,\r\n                patternLoaded = function (err) {\r\n                    error = error || err;\r\n                    if (--loadRequestCounter === 0) {\r\n                        delete state.pendingTerritoryUpdatePatterns[updateRequestId];\r\n                        _updateTerritoryAllDone(guid, patterns, error);\r\n                        state.ongoingTerritoryUpdateCounter -= 1;\r\n                        if (state.ongoingTerritoryUpdateCounter < 0) {\r\n                            logger.error('patternLoaded callback have been called multiple times!!');\r\n                            state.ongoingTerritoryUpdateCounter = 0; //FIXME\r\n                        }\r\n                        if (canSwitchStates()) {\r\n                            switchStates();\r\n                        }\r\n                    }\r\n                };\r\n\r\n            logger.debug('updatingTerritory', {\r\n                metadata: {\r\n                    userId: guid,\r\n                    patterns: patterns\r\n                }\r\n            });\r\n\r\n            if (!state.nodes[ROOT_PATH]) {\r\n                if (state.users[guid]) {\r\n                    logger.debug('early updateTerritory for user[' + guid + ']. No loaded project state yet.');\r\n                    state.users[guid].PATTERNS = copy(patterns);\r\n                }\r\n                return;\r\n            }\r\n\r\n            //empty territory check\r\n            if (keys.length === 0) {\r\n                _updateTerritoryAllDone(guid, patterns, null);\r\n                return;\r\n            }\r\n\r\n            state.ongoingTerritoryUpdateCounter += 1;\r\n\r\n            //first we have to set the internal counter as the actual load can get synchronous :(\r\n            loadRequestCounter = keys.length;\r\n\r\n            for (i = 0; i < keys.length; i += 1) {\r\n                if (state.inLoading) {\r\n                    state.ongoingLoadPatternsCounter += 1;\r\n                    loadPatternThrottled(state.core,\r\n                        keys[i], patterns[keys[i]], state.loadNodes, loadingPatternFinished);\r\n                } else {\r\n                    //we should save the patterns to a pending directory\r\n                    state.pendingTerritoryUpdatePatterns[updateRequestId] = patterns;\r\n                }\r\n                loadPatternThrottled(state.core, keys[i], patterns[keys[i]], state.nodes, patternLoaded);\r\n            }\r\n\r\n        };\r\n\r\n        this.dispatchAddOnNotification = function (data) {\r\n            var notification = {\r\n                severity: data.notification.severity || 'info',\r\n                message: '[AddOn] ' + data.addOnName + ' - ' + data.notification.message\r\n            };\r\n\r\n            logger.debug('addOn notification', data);\r\n            self.dispatchEvent(CONSTANTS.NOTIFICATION, notification);\r\n            self.dispatchEvent(CONSTANTS.ADD_ON_NOTIFICATION, data);\r\n        };\r\n\r\n        // Constraints\r\n        this.setConstraint = function (path, name, constraintObj) {\r\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\r\n                state.core.setConstraint(state.nodes[path].node, name, constraintObj);\r\n                saveRoot('setConstraint(' + path + ',' + name + ')');\r\n            }\r\n        };\r\n\r\n        this.delConstraint = function (path, name) {\r\n            if (state.core && state.nodes[path] && typeof state.nodes[path].node === 'object') {\r\n                state.core.delConstraint(state.nodes[path].node, name);\r\n                saveRoot('delConstraint(' + path + 'name' + ')');\r\n            }\r\n        };\r\n\r\n        this.emitStateNotification = function () {\r\n            var data = {\r\n                type: CONSTANTS.STORAGE.CLIENT_STATE_NOTIFICATION,\r\n                state: null,\r\n                projectId: self.getActiveProjectId(),\r\n                branchName: self.getActiveBranchName()\r\n            };\r\n\r\n            if (!data.projectId || !data.branchName) {\r\n                // No need to send event if we're not a branch.\r\n                return;\r\n            }\r\n\r\n            if (typeof self.uiStateGetter === 'function') {\r\n                data.state = self.uiStateGetter();\r\n            }\r\n            logger.info('Sending state notification...');\r\n            storage.sendNotification(data, function (err) {\r\n                if (err) {\r\n                    logger.error('Sending state notification failed', data, err);\r\n                }\r\n\r\n                logger.info('Sending state notification succeeded');\r\n            });\r\n        };\r\n\r\n        this.dispatchConnectedUsersChanged = function (eventData) {\r\n            self.dispatchEvent(CONSTANTS.CONNECTED_USERS_CHANGED, eventData);\r\n        };\r\n\r\n        this.registerUIStateGetter = function (uiStateGetter) {\r\n            self.uiStateGetter = uiStateGetter;\r\n        };\r\n\r\n        //generic notification\r\n        this.notifyUser = function (notification) {\r\n            if (typeof notification === 'string') {\r\n                notification = {\r\n                    message: notification\r\n                };\r\n            }\r\n\r\n            notification.severity = notification.severity || 'info';\r\n\r\n            if (notification.message) {\r\n                logger.debug('generic notification', notification);\r\n                self.dispatchEvent(CONSTANTS.NOTIFICATION, notification);\r\n            } else {\r\n                logger.debug('cannot set empty notification');\r\n            }\r\n        };\r\n\r\n        this.gmeConfig = gmeConfig;\r\n\r\n        this.getUserId = function () {\r\n            return storage.userId;\r\n        };\r\n\r\n        this.getWebsocketRouterAccess = (new WebsocketRouterAccess(\r\n            logger.fork('websocketRouterAccess'),\r\n            this,\r\n            storage)).getWebsocketRouterAccess;\r\n        \r\n        \r\n        window.addEventListener('error', function (evt) {\r\n            var errorType;\r\n            state.exception = {};\r\n            if (evt.error) {\r\n                state.exception.message = evt.error.message;\r\n                state.exception.stack = evt.error.stack;\r\n                errorType = evt.error.name;\r\n            } else {\r\n                state.exception = 'No error on event - check browser';\r\n            }\r\n\r\n            if (errorType === 'CoreIllegalOperationError') {\r\n                // Do not propagate these errors (for now)\r\n                self.dispatchEvent(CONSTANTS.NOTIFICATION, {\r\n                    severity: 'error',\r\n                    message: evt.error.message\r\n                });\r\n\r\n                return true;\r\n            }\r\n\r\n            self.dispatchEvent(CONSTANTS.NETWORK_STATUS_CHANGED, CONSTANTS.UNCAUGHT_EXCEPTION);\r\n        });\r\n    }\r\n\r\n    // Inherit from the EventDispatcher\r\n    Client.prototype = Object.create(EventDispatcher.prototype);\r\n    Client.prototype.constructor = Client;\r\n\r\n    return Client;\r\n});\r\n\n",
    "/*globals define, WebGMEGlobal*/\r\n/*eslint-env node, browser*/\r\n\r\n/**\r\n * Client module for creating, monitoring executor jobs.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n * @author ksmyth / https://github.com/ksmyth\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\n\r\ndefine('executor/ExecutorClient',['superagent', 'q'], function (superagent, Q) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Client for creating, monitoring, and receiving output executor jobs.\r\n     * This client is used by the Executor Workers and some of the API calls are not\r\n     * meant to be used by \"end users\".\r\n     *\r\n     * @param {object} parameters\r\n     * @param {object} parameters.logger\r\n     * @constructor\r\n     * @alias ExecutorClient\r\n     */\r\n    var ExecutorClient = function (parameters) {\r\n        parameters = parameters || {};\r\n        if (parameters.logger) {\r\n            this.logger = parameters.logger;\r\n        } else {\r\n            /*eslint-disable no-console*/\r\n            var doLog = function () {\r\n                console.log.apply(console, arguments);\r\n            };\r\n            this.logger = {\r\n                debug: doLog,\r\n                log: doLog,\r\n                info: doLog,\r\n                warn: doLog,\r\n                error: doLog\r\n            };\r\n            console.warn('Since v1.3.0 ExecutorClient requires a logger, falling back on console.log.');\r\n            /*eslint-enable no-console*/\r\n        }\r\n\r\n        this.logger.debug('ctor', {metadata: parameters});\r\n\r\n        this.isNodeJS = (typeof window === 'undefined') && (typeof process === 'object');\r\n        this.isNodeWebkit = (typeof window === 'object') && (typeof process === 'object');\r\n        //console.log(isNode);\r\n        if (this.isNodeJS) {\r\n            this.logger.debug('Running under node');\r\n            this.server = '127.0.0.1';\r\n            this.httpsecure = false;\r\n        }\r\n\r\n        this.server = parameters.server || this.server;\r\n        this.serverPort = parameters.serverPort || this.serverPort;\r\n        this.httpsecure = (parameters.httpsecure !== undefined) ? parameters.httpsecure : this.httpsecure;\r\n        if (this.isNodeJS) {\r\n            this.http = this.httpsecure ? require('https') : require('http');\r\n        }\r\n\r\n        this.origin = '';\r\n        if (this.httpsecure !== undefined && this.server && this.serverPort) {\r\n            this.origin = (this.httpsecure ? 'https://' : 'http://') + this.server + ':' + this.serverPort;\r\n        }\r\n        if (parameters && typeof parameters.relativeUrl === 'string') {\r\n            this.relativeUrl = parameters.relativeUrl;\r\n        } else if (typeof WebGMEGlobal !== 'undefined' && WebGMEGlobal.gmeConfig &&\r\n            typeof WebGMEGlobal.gmeConfig.client.mountedPath === 'string') {\r\n            this.relativeUrl = WebGMEGlobal.gmeConfig.client.mountedPath + '/rest/executor/';\r\n        } else {\r\n            this.relativeUrl = '/rest/executor/';\r\n        }\r\n        this.executorUrl = this.origin + this.relativeUrl;\r\n\r\n        this.executorNonce = parameters.executorNonce;\r\n        this.apiToken = parameters.apiToken;\r\n        this.webgmeToken = parameters.webgmeToken;\r\n\r\n        this.logger.debug('origin', this.origin);\r\n        this.logger.debug('executorUrl', this.executorUrl);\r\n    };\r\n\r\n    /**\r\n     * Creates a new configuration object for the job execution.\r\n     *\r\n     * To make the worker post output either the outputInterval and/or outputSegmentSize must be specified.\r\n     * <br> - If both are negative (or falsy) no output will be given.\r\n     * <br> - When both are specified a timeout will be set at start (and after each posted output).\r\n     * If the number of lines exceeds outputSegmentSize during that timeout, the output will be posted and a\r\n     * new timeout will be triggered.\r\n     * <br>\r\n     * N.B. even though a short outputInterval is set, the worker won't post new output until the responses from\r\n     * previous posts have returned. Before the job returns with a \"completed\" status code, all queued outputs will be\r\n     * posted (and the responses will be ensured to have returned).\r\n     *\r\n     * @param {string} cmd - command to execute.\r\n     * @param {string[]} [args] - command arguments.\r\n     * @param {number} [outputInterval=-1] - max time [ms] between (non-empty) output posts from worker.\r\n     * @param {number} [outputSegmentSize=-1] - number of lines before new output is posted from worker. (N.B. posted\r\n     * segments can still contain more number of lines).\r\n     * @return {object}\r\n     */\r\n    ExecutorClient.prototype.getNewExecutorConfig = function (cmd, args, outputInterval, outputSegmentSize) {\r\n        var config = {\r\n            cmd: cmd,\r\n            resultArtifacts: [],\r\n            outputSegmentSize: typeof outputSegmentSize === 'number' ? outputSegmentSize : -1,\r\n            outputInterval: typeof outputInterval === 'number' ? outputInterval : -1\r\n        };\r\n\r\n        if (args) {\r\n            config.args = args;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {string} name - name of the artifact.\r\n         * @param {string[]} [patterns=[]] - inclusive pattern for files to be returned in this artifact.\r\n         */\r\n        config.defineResultArtifact = function (name, patterns) {\r\n            this.resultArtifacts.push({\r\n                name: name,\r\n                resultPatterns: patterns || []\r\n            });\r\n        };\r\n\r\n        return config;\r\n    };\r\n\r\n    /**\r\n     * Creates a new job.\r\n     *\r\n     * @param {object} jobInfo - initial information about the job must contain the hash.\r\n     * @param {object} jobInfo.hash - a unique id for the job (e.g. the hash of the artifact\r\n     * containing the executor_config.json).\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {@link JobInfo} <b>result</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    ExecutorClient.prototype.createJob = function (jobInfo, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        if (typeof jobInfo === 'string') {\r\n            jobInfo = {hash: jobInfo}; // old API\r\n        }\r\n\r\n        this.logger.debug('createJob', {metadata: jobInfo});\r\n        this.sendHttpRequestWithData('POST', this.getCreateURL(jobInfo.hash), jobInfo, function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n\r\n            self.logger.debug('createJob - result', response);\r\n\r\n            deferred.resolve(JSON.parse(response));\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.cancelJob = function (jobInfoOrHash, secret, callback) {\r\n        var deferred = Q.defer(),\r\n            hash = typeof jobInfoOrHash === 'string' ? jobInfoOrHash : jobInfoOrHash.hash,\r\n\r\n            self = this;\r\n\r\n        this.logger.debug('cancel', hash);\r\n        this.sendHttpRequestWithData('POST', this.executorUrl + 'cancel/' + hash, {secret: secret},\r\n            function (err, response) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n\r\n                self.logger.debug('cancel - result', response);\r\n                deferred.resolve(response);\r\n            }\r\n        );\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.updateJob = function (jobInfo, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        this.logger.debug('updateJob', {metadata: jobInfo});\r\n        this.sendHttpRequestWithData('POST', this.executorUrl + 'update/' + jobInfo.hash, jobInfo,\r\n            function (err, response) {\r\n                if (err) {\r\n                    deferred.reject(err);\r\n                    return;\r\n                }\r\n\r\n                self.logger.debug('updateJob - result', response);\r\n                deferred.resolve(response);\r\n            }\r\n        );\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Retrieves the current state of the job in form of a {@link JobInfo}\r\n     * @param {string} hash - unique id for the job (e.g. the hash of the artifact containing the executor_config.json).\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {@link JobInfo} <b>jobInfo</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    ExecutorClient.prototype.getInfo = function (hash, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        this.logger.debug('getInfo', hash);\r\n        this.sendHttpRequest('GET', this.getInfoURL(hash), function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n\r\n            self.logger.debug('getInfo - result', response);\r\n            deferred.resolve(JSON.parse(response));\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.getAllInfo = function (callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        this.logger.debug('getAllInfo');\r\n        this.sendHttpRequest('GET', this.executorUrl, function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n\r\n            self.logger.debug('getAllInfo - result', response);\r\n            deferred.resolve(JSON.parse(response));\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.getInfoByStatus = function (status, callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        this.logger.debug('getInfoByStatus', status);\r\n        this.sendHttpRequest('GET', this.executorUrl + '?status=' + status, function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n            self.logger.debug('getInfoByStatus - result', response);\r\n            deferred.resolve(JSON.parse(response));\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.getWorkersInfo = function (callback) {\r\n        var deferred = Q.defer(),\r\n            self = this;\r\n        this.logger.debug('getWorkersInfo');\r\n        this.sendHttpRequest('GET', this.executorUrl + 'worker', function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n                return;\r\n            }\r\n            self.logger.debug('getWorkersInfo - result', response);\r\n            deferred.resolve(JSON.parse(response));\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    /**\r\n     * Retrieves the output associated with jobHash, to limit the output pass start and/or end.\r\n     * The outputs are identified by 0, 1, 2, ...\r\n     * @param {string} hash - hash of job related to output.\r\n     * @param {number} [start] - number/id of the output segment to start from (inclusive).\r\n     * @param {number} [end] - number/id of segment to end at (exclusive).\r\n     * @param {function} [callback] - if provided no promise will be returned.\r\n     *\r\n     * @return {external:Promise}  On success the promise will be resolved with {@link OutputInfo} <b>result</b>.<br>\r\n     * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n     */\r\n    ExecutorClient.prototype.getOutput = function (hash, start, end, callback) {\r\n        var deferred = Q.defer(),\r\n            url = this.executorUrl + 'output/' + hash,\r\n            query = '';\r\n\r\n        if (typeof start === 'number') {\r\n            query += '?start=' + start;\r\n        }\r\n\r\n        if (typeof end === 'number') {\r\n            if (query) {\r\n                query += '&end=' + end;\r\n            } else {\r\n                query += '?end=' + end;\r\n            }\r\n        }\r\n\r\n        url += query;\r\n\r\n        this.logger.debug('getOutput, url=', url);\r\n\r\n        this.sendHttpRequest('GET', url, function (err, response) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n            } else {\r\n                deferred.resolve(JSON.parse(response));\r\n            }\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.sendOutput = function (outputInfo, callback) {\r\n        var deferred = Q.defer(),\r\n            url = this.executorUrl + 'output/' + outputInfo.hash;\r\n\r\n        this.logger.debug('sendOutput', outputInfo._id);\r\n\r\n        this.sendHttpRequestWithData('POST', url, outputInfo, function (err) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n            } else {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        return deferred.promise.nodeify(callback);\r\n    };\r\n\r\n    //<editor-fold desc=\"Helper methods\">\r\n    ExecutorClient.prototype.getInfoURL = function (hash) {\r\n        return this.origin + this.getRelativeInfoURL(hash);\r\n    };\r\n\r\n    ExecutorClient.prototype.getRelativeInfoURL = function (hash) {\r\n        var metadataBase = this.relativeUrl + 'info';\r\n        if (hash) {\r\n            return metadataBase + '/' + hash;\r\n        } else {\r\n            return metadataBase;\r\n        }\r\n    };\r\n\r\n    ExecutorClient.prototype.getCreateURL = function (hash) {\r\n        return this.origin + this.getRelativeCreateURL(hash);\r\n    };\r\n\r\n    ExecutorClient.prototype.getRelativeCreateURL = function (hash) {\r\n        var metadataBase = this.relativeUrl + 'create';\r\n        if (hash) {\r\n            return metadataBase + '/' + hash;\r\n        } else {\r\n            return metadataBase;\r\n        }\r\n    };\r\n\r\n    ExecutorClient.prototype.sendHttpRequest = function (method, url, callback) {\r\n        return this.sendHttpRequestWithData(method, url, null, callback);\r\n    };\r\n\r\n    ExecutorClient.prototype.sendHttpRequestWithData = function (method, url, data, callback) {\r\n        var req = new superagent.Request(method, url);\r\n        if (this.executorNonce) {\r\n            req.set('x-executor-nonce', this.executorNonce);\r\n        }\r\n        if (this.apiToken) {\r\n            req.set('x-api-token', this.apiToken);\r\n        }\r\n        if (this.webgmeToken) {\r\n            req.set('Authorization', 'Bearer ' + this.webgmeToken);\r\n        }\r\n        if (data) {\r\n            req.send(data);\r\n        }\r\n        req.end(function (err, res) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            if (res.status > 399) {\r\n                callback(res.status, res.text);\r\n            } else {\r\n                callback(null, res.text);\r\n            }\r\n        });\r\n    };\r\n\r\n    ExecutorClient.prototype._ensureAuthenticated = function (options, callback) {\r\n        //this function enables the session of the client to be authenticated\r\n        //TODO currently this user does not have a session, so it has to upgrade the options always!!!\r\n        //        if (options.headers) {\r\n        //            options.headers.webgmeclientsession = this._clientSession;\r\n        //        } else {\r\n        //            options.headers = {\r\n        //                'webgmeclientsession': this._clientSession\r\n        //            }\r\n        //        }\r\n        callback(null, options);\r\n    };\r\n    //</editor-fold>\r\n\r\n    return ExecutorClient;\r\n});\r\n\n",
    "/*globals define, GME*/\r\n/*eslint-env browser*/\r\n/*eslint no-console: 0*/\r\n\r\n/**\r\n * @author kecso / https://github.com/kecso\r\n * @author lattmann / https://github.com/lattmann\r\n * @author nabana / https://github.com/nabana\r\n * @author ksmyth / https://github.com/ksmyth\r\n * @author pmeijer / https://github.com/pmeijer\r\n */\r\n\r\ndefine('webgme.classes', [\r\n    'client/client',\r\n    'blob/BlobClient',\r\n    'executor/ExecutorClient',\r\n    'common/core/core',\r\n    'common/storage/browserstorage',\r\n    'client/logger',\r\n    'superagent',\r\n    'q',\r\n    'chance'\r\n], function (Client,\r\n             BlobClient,\r\n             ExecutorClient,\r\n             Core,\r\n             Storage,\r\n             logger,\r\n             superagent,\r\n             Q,\r\n             chance) {\r\n\r\n    'use strict';\r\n    // Setting global classes\r\n    GME.classes.Client = Client;\r\n    GME.classes.BlobClient = BlobClient;\r\n    GME.classes.ExecutorClient = ExecutorClient;\r\n    GME.classes.Core = Core;\r\n    GME.classes.Storage = Storage;\r\n    GME.classes.logger = logger;\r\n\r\n    // Exposing built in libraries\r\n    GME.utils.superagent = superagent;\r\n    GME.utils.Q = Q;\r\n    GME.utils.chance = chance;\r\n\r\n    // Pure JavaScript equivalent to jQuery's $.ready() from https://github.com/jfriend00/docReady\r\n\r\n    (function (funcName, baseObj) {\r\n        // The public function name defaults to window.docReady\r\n        // but you can pass in your own object and own function name and those will be used\r\n        // if you want to put them in a different namespace\r\n        funcName = funcName || 'docReady';\r\n        baseObj = baseObj || window;\r\n        var readyList = [];\r\n        var readyFired = false;\r\n        var readyEventHandlersInstalled = false;\r\n\r\n        // call this when the document is ready\r\n        // this function protects itself against being called more than once\r\n        function ready() {\r\n            if (!readyFired) {\r\n                // this must be set to true before we start calling callbacks\r\n                readyFired = true;\r\n                for (var i = 0; i < readyList.length; i++) {\r\n                    // if a callback here happens to add new ready handlers,\r\n                    // the docReady() function will see that it already fired\r\n                    // and will schedule the callback to run right after\r\n                    // this event loop finishes so all handlers will still execute\r\n                    // in order and no new ones will be added to the readyList\r\n                    // while we are processing the list\r\n                    readyList[i].fn.call(window, readyList[i].ctx);\r\n                }\r\n                // allow any closures held by these functions to free\r\n                readyList = [];\r\n            }\r\n        }\r\n\r\n        function readyStateChange() {\r\n            if (document.readyState === 'complete') {\r\n                ready();\r\n            }\r\n        }\r\n\r\n        // This is the one public interface\r\n        // docReady(fn, context);\r\n        // the context argument is optional - if present, it will be passed\r\n        // as an argument to the callback\r\n        baseObj[funcName] = function (callback, context) {\r\n            // if ready has already fired, then just schedule the callback\r\n            // to fire asynchronously, but right away\r\n            if (readyFired) {\r\n                setTimeout(function () {\r\n                    callback(context);\r\n                }, 1);\r\n                return;\r\n            } else {\r\n                // add the function and context to the list\r\n                readyList.push({fn: callback, ctx: context});\r\n            }\r\n            // if document already ready to go, schedule the ready function to run\r\n            if (document.readyState === 'complete') {\r\n                setTimeout(ready, 1);\r\n            } else if (!readyEventHandlersInstalled) {\r\n                // otherwise if we don't have event handlers installed, install them\r\n                if (document.addEventListener) {\r\n                    // first choice is DOMContentLoaded event\r\n                    document.addEventListener('DOMContentLoaded', ready, false);\r\n                    // backup is window load event\r\n                    window.addEventListener('load', ready, false);\r\n                } else {\r\n                    // must be IE\r\n                    document.attachEvent('onreadystatechange', readyStateChange);\r\n                    window.attachEvent('onload', ready);\r\n                }\r\n                readyEventHandlersInstalled = true;\r\n            }\r\n        };\r\n    })('docReady', window);\r\n\r\n    // See if there is handler attached to body tag when ready\r\n\r\n    var evalOnGmeInit = function () {\r\n        if (document.body.getAttribute('on-gme-init')) {\r\n            eval(document.body.getAttribute('on-gme-init'));\r\n        } else {\r\n            console.warn('To use GME, define a javascript function and set the body ' +\r\n            'element\\'s on-gme-init property.');\r\n        }\r\n    };\r\n\r\n    // wait for document.readyState !== 'loading' and getGmeConfig\r\n    var stillLoading = 2;\r\n    var somethingFinishedLoading = function () {\r\n        if (--stillLoading === 0) {\r\n            evalOnGmeInit();\r\n        }\r\n    };\r\n\r\n    if (document.readyState === 'loading') {\r\n        // eslint-disable-next-line\r\n        docReady(function () {\r\n            somethingFinishedLoading();\r\n            requestGmeConfig();\r\n        });\r\n    } else {\r\n        somethingFinishedLoading();\r\n        requestGmeConfig();\r\n    }\r\n\r\n    function requestGmeConfig() {\r\n        var http = new XMLHttpRequest(),\r\n            mountPath = '',\r\n            mountElm = document.getElementById('mounted-path'),\r\n            configUrl;\r\n\r\n        if (mountElm && mountElm.getAttribute('content')) {\r\n            mountPath = mountElm.getAttribute('content');\r\n        }\r\n\r\n        configUrl = window.location.origin + mountPath + '/gmeConfig.json';\r\n        http.onreadystatechange = function () {\r\n            if (http.readyState === 4 && http.status === 200) {\r\n                GME.gmeConfig = JSON.parse(http.responseText);\r\n                somethingFinishedLoading();\r\n            } else if (http.readyState === 4 && http.status !== 200) {\r\n                console.warn('Could not load gmeConfig at', configUrl);\r\n                somethingFinishedLoading();\r\n            }\r\n        };\r\n        http.open('GET', configUrl, true);\r\n        http.send();\r\n    }\r\n});\r\n\n",
    "\nrequire([\"webgme.classes\"]);\n",
    "}());\n"
  ]
}