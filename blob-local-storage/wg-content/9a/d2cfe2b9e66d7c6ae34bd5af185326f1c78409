{"rootHash":"#c306e1905db9bd51cf8ff6bb355606d47ea1e6f9","projectId":"guest+titoMicProject","kind":"EmptyProject","branchName":"master","commitHash":"#8566667068ab5cb03626f2f4126b20c3f7c3b4c4","hashes":{"objects":["#c306e1905db9bd51cf8ff6bb355606d47ea1e6f9","#e48c2fb1c78a847c96746ac607b46efcf6f6fa09","#5da0385e44232ab38f37ecde7ae7687bc9b94862","#f9e70446349fdeaeac93bdab4cbdb9a2172b5bf7","#dab23cf520a18b8d47112b4ebac2d63369641409","#e34d1531dd0df9db5b71af23a529bc3ed3ccb962","#2eb57701826b0d19a4f5c1e5d07485ddb0952f4b","#d3ca86d5fe6dba1de663e97d441b655a35bfb99d","#d87800b849e72d53e66ca47867a6a3d8e056788f","#f01fe7bfb2ce91e703755b919fd27b4d7eed0aef","#7b3056ffd920b5c5577bab0874e64d8d50065e6c","#9238df0ddb2b6b1ded7b17d9006abe2e03b646c8","#6ad8b9183dbdb54b5ac94f6e1a57be54497d88c8","#2f855daffaaa5cc4caf82ee0a2006d29a740dbee","#b9288910568c560d3c3e52b50f20f5002e7c5abf","#6967a2bd089eb9197062e8f7c63ed1fa06977908","#846577ca910c6cf1ae81aec7e48ebaf157d8d849","#1f81094079e1311394154ac2a182f52d2475a7f6","#0b1196b54a823aa7515f5c0bab5095fad2bfa04e","#290f25b955841bc8ac1a1861477850e0f96674b7","#81955e436bca96d21b32b2e78e1bd0e665a1f271","#fa865129fc7f712df5ede32cc5eb7812907c5017","#90cef67ea9a4b6a942c0ba9d63163877289b23a9","#5098474825064e7225208ee6856388a2e7516fcf","#9fb57142d77849514494c9e57338bdea5d9a2ec7","#8100197b3df1fcd38e04a4bf549f71b82335d378","#7392597d50a129036c40ba103356e24434f9766c","#ff5c28d01748b60c8c25e876e15e863b9caab3f6","#40ac993d6375249a2ee45d7b3850737b50f3120b","#23eeeb9b675cfff257c79dbddc04bd8950f034f0","#74383d5e925cf005e4d0cde1ff035e2799977f97","#c8a9003ae7844fa2f84fb057433c333de31a6311","#b08a93bde2de3fc7c9f8ca1e78244067f1fd2e68","#7b98024cc4004dbbda0b074082ae5da203061616","#17f584b208ba8fc30890f3d8ba63a2d0901e4839","#035c499a135fd6f265488c757861beddb40023bc","#28f03bdc4734fecda197ea0a73c9b7bbb9ba9829","#8eaca7fa8c84d2da640c7968f04e9ff1c3fda540","#86b8b7ad8f81d890600b0607f3af2212d538fbc9","#f20ddfd137f61fa893bf6517e086b0e82c26e733","#6026876a29e8780ba939666b97b4bf502ec1c112","#2e4ede191a443520bd62c3c79aec5bbc553d6e99","#078201e59ed95cbe6d8c607eca36bae589644342","#15bed3f1f8d3bffe785bc70a588d4c9007a4aa95","#af15c260c8d6bc5d70d72c2db9a79404e14ba240","#adc6477152789cc092b0467fb1d7c0d1358b767c","#444265aaa5fe7437e460ce8b77eafb45165c8478","#3c0e3bbbd852ce9991cac31f2806dbf68938a931","#9dd0ec6aca503170096ff41efee7394a063ae1a3","#2892f247d7b1db49a2ec8666aed7ed8b8fdc9afd","#6e18396be876037f7929a42b6b887731fbc5e6a0","#e33ae1e79c56e4ca4517a571a713eef46e7d3c3d","#1c578c9babd6a7fdd84db708901876e32a5c69b0","#3fd90773102cbcbf0455774c611ab51ccfe25e0f","#44c94f585f6716d32a421333d9194adbe6cc49e2","#5dc03dd9281fcf38a5df19e42f04832e27f0459b","#a5ee95e013e6984803d452321ea180ba462a71d3","#44e08a11fee5f7f8eb0b15b65e67168c7afd6bcf","#c9d50b72e8c315fe0ae3a067be5f9d2f5746e22a","#ed049f89d9e3364040121c1960d3bb726e715b88","#e8fd6f8b7b91d7f80eb79378e129ccbc8c44d789","#cea41bc99285e26b1bebfd2bf78555487e3c9a7b","#e2fe1292b7fdd99836f39cc3d6a2fb6cdb04e9a2","#6b6ba56f3f8bcfc2bf60e8e3b96875daeed7064d","#9323977a63eef12da549aeeb356d29944a28ba7d","#3fd5a02b9a1654a5f05ef36c183a399795509f55","#f20a3eebe648e8c43a87ee793fea2bc97dcde7e0","#79ab2f863252955aff1f66aeb79a1bbdb967408f","#0bd37db5e9559001d87362456e67e85aa44f4c0c","#3f656bc645f0472027cf25c5f68f2b4ab2a48e8f","#1b5da3692f9a5356dfb4e1b2847f6146d8eec1ff","#4e9b5586127e1a3efe9a88853b046476e6cf0567","#a861896612c354368d08a1dba306e568532b8d60","#95d87e2065a94368bd1ddb4c10f030141a1d5019","#e641860e5e90cc879ee49f81b6cdc3ea7ab04a92","#904b43cb273e34296cb62254786aa8e83f447771","#0651498cd46a89a48afdec9ee242ad4ffc244c3e","#2c5288d82adee5b7b95a8332f43b68aaffb1fc8c","#52f715a620ce93765a6f95a5d2eb07983e630351","#6a5ee16d9323f1ff0f50141eac973f78d0063e86","#542d311040c718ea079daf0f0d7c6c23d5001d15","#027c27da65ca89d1933692b9abdc28d9a2cf3879","#f8ef3a769079d1b4409b438b1285417c978727d4","#61c4fc7325b1dbf664f1b458bc375f06490e3d92","#129ebdc1123c11f84132d601b32eb3e25b7e1ac0","#53d61a9ec4003b9d335673a4b68ed9e0676ad748","#d4128364dd297979c3817ef5f31192587f6e3a39","#1d0de3ef5a53e0870fd4b1a14374b06657c3b4e0","#e62450e95f70c018e8ba47e63be20ccd642a50a1","#3c0411a015d693f705a76bedb789f80636a57898","#fd95f038f09ebf8f2dacc93066e55f1766e15329","#0281cef5f21cff776f3efc889a71d9945e3ce1bd","#6270bcc05388aa69b0edc264d421c1bf3310c350","#70b448e047200f90afbe422a29958e48ffb383d7","#460af5660237c709f37afdf7fc29b94298327b64","#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","#75e709f4444c354fc28b17f4d38e3c85fdb473e8","#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","#c969d48894f791370b838a6d40d2127f03769f65","#b82e7bb033e7051d762d7f932a83db54df638e89","#410a1e7254a75f90323fe521981ad444f761e30f","#9e1861b16799beb8e0718832cb2410424fae295e","#c1de8796460d55280ca75ec40f3948d255ac660e","#6a90274f4e72da054270515625a6c3cc0248b565","#b33844fc50d9fe9cc8cc8af706bbbcd71814ffb4","#ba318edb77cc00ebb4f3fa0526baa9282cd1951c","#56792e1665bdc9b3619410a386ac89d070c28db5","#91cdba05e71f6a8b17e3799ef3a5d2f98c0ca6fa","#c61b0b692ab6bc12a81bb90faa4f87fcca10669d","#424ebe071b6ec5e64d12d0acc1433b4851778739","#67a1ff7b6af35ba58bbe4f898b8009b3f782164b","#e1ab00a1aeae5606ee36eef2398f5e271828e2af","#03fbc7e300a2d8f214521e7e13703795d6d00862","#e9bf1d0a3f57225db17cfe8249e0268a06182b7e","#c6425a55cec4fc2f832d9224c2628791fd152884","#6eae4dce368285c31781a720126b00e7be24da34","#ff675bf0fb1df8285345be1fc9808aa410896632","#53c83e26e8400260f1da48fc083e2f88a9ab7664","#694c9e6ba054d1e5c5f02c9f1d4537264f60443e","#471440e46ec3330f854fdf6868d3cc129a895f5b","#bff5cff5f5c055f7ee5e1665372317a9c59d76b0","#768fea2ca2c4964c141fe2170c0f90f5ea2a9db5","#7a05e4c86819a273ff34e60b68abd6ab7cfe99f0","#07ebd729884939d74b2d79ebd8669d2d7748700a","#45ed917e9eb162df47884c2be2053c37c8cea9e8","#57d4a5d5bcb23cfd7b7d7bd2a712ada0cc831149","#e2fbe3ccc51426c3c969803f7c0ebec74d84939c"],"assets":[]},"objects":[{"1":"#e48c2fb1c78a847c96746ac607b46efcf6f6fa09","_id":"#c306e1905db9bd51cf8ff6bb355606d47ea1e6f9","_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"base":"/_nullptr"},"/_sets/MetaAspectSet/1133782405":{"member":"/1"},"/_sets/MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d/125899614":{"member":"/1"},"/_meta/children/_sets/items/302362349":{"member":"/1"},"/n":{"base":"/1"},"/_sets/MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d/OTTYuK":{"member":"/n"},"/_sets/MetaAspectSet/dGpFTX":{"member":"/n"},"/n/_meta/children/_sets/items/i71PGo":{"member":"/1"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/wVrxG5":{"member":"/n/q"},"/_sets/MetaAspectSet/Sz1GWb":{"member":"/n/q"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/HUdIYv":{"member":"/n/O"},"/_sets/MetaAspectSet/VpagN9":{"member":"/n/O"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/uvhtpR":{"member":"/n/u"},"/_sets/MetaAspectSet/8I4Ima":{"member":"/n/u"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/hQ35Nc":{"member":"/n/0"},"/_sets/MetaAspectSet/oBC5qT":{"member":"/n/0"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/hctkx0":{"member":"/n/L"},"/_sets/MetaAspectSet/atUNgJ":{"member":"/n/L"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/bfsb0f":{"member":"/n/H"},"/_sets/MetaAspectSet/A7PKyb":{"member":"/n/H"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/bmDugI":{"member":"/n/v"},"/_sets/MetaAspectSet/4mu4iW":{"member":"/n/v"},"/n/O":{"base":"/1"},"/n/q":{"base":"/1"},"/n/L":{"base":"/1"},"/n/0":{"base":"/1"},"/n/H":{"base":"/1"},"/n/u":{"base":"/1"},"/_sets/MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45/CkdBRL":{"member":"/n/3"},"/_sets/MetaAspectSet/iqATrZ":{"member":"/n/3"},"/n/3":{"base":"/1"},"/J":{"base":"/n/3"},"/J/9":{"base":"/n/v"},"/J/9/z/N/M":{"base":"/n/L"},"/J/9/z/y":{"base":"/n/H"},"/J/9/z/Gv":{"base":"/n/H"},"/J/9/z/ev":{"base":"/n/H"},"/J/S/z/N/M":{"base":"/n/L"},"/J/S":{"base":"/n/v"},"/J/S/z/5/8":{"base":"/n/L"},"/J/S/z/UX":{"base":"/n/H"},"/J/C/z/N/M":{"base":"/n/L"},"/J/C/z/y":{"base":"/n/H"},"/J/C/z/Gv":{"base":"/n/H"},"/J/C/z/ev":{"base":"/n/H"},"/J/C":{"base":"/n/v"},"/J/C/z/5/N":{"base":"/n/L"},"/J/N/z/N/M":{"base":"/n/L"},"/J/N/z/y":{"base":"/n/H"},"/J/N/z/Gv":{"base":"/n/H"},"/J/N/z/ev":{"base":"/n/H"},"/J/N/z/5/N":{"base":"/n/L"},"/J/N":{"base":"/n/v"},"/J/N/z/kp/m":{"base":"/n/L"},"/J/V/z/N/M":{"base":"/n/L"},"/J/V/z/y":{"base":"/n/H"},"/J/V/z/Gv":{"base":"/n/H"},"/J/V/z/ev":{"base":"/n/H"},"/J/V/z/5/N":{"base":"/n/L"},"/J/V/z/kp/m":{"base":"/n/L"},"/J/V":{"base":"/n/v"},"/J/V/z/4/B":{"base":"/n/L"}},"atr":{"_relguid":"03d360729e097866cb4ed0a36ff825f6","name":"ROOT"},"reg":{"MetaSheets":[{"SetID":"MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d","order":0,"title":"META"},{"SetID":"MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45","order":1,"title":"OthelloGames"},{"SetID":"MetaAspectSet_0b2cc6ca-4e52-a3b4-8528-52d99ba5ce0a","order":2,"title":"New sheet"}],"ProjectRegistry":{"FCO_ID":"/1"},"_sets_":62,"validVisualizers":"ModelEditor METAAspect"},"_sets":{"MetaAspectSet":{"1133782405":{"reg":{"_":"_","position":{"x":100,"y":100}}},"reg":{"_":"_"},"dGpFTX":{"reg":{"_":"_","position":{"x":265,"y":184}}},"Sz1GWb":{"reg":{"_":"_","position":{"x":253,"y":84}}},"VpagN9":{"reg":{"_":"_","position":{"x":431,"y":253}}},"8I4Ima":{"reg":{"_":"_","position":{"x":216,"y":326}}},"oBC5qT":{"reg":{"_":"_","position":{"x":513,"y":380}}},"atUNgJ":{"reg":{"_":"_","position":{"x":277,"y":523}}},"A7PKyb":{"reg":{"_":"_","position":{"x":121,"y":384}}},"4mu4iW":{"reg":{"_":"_","position":{"x":541,"y":68}}},"iqATrZ":{"reg":{"_":"_","position":{"x":64,"y":49}}}},"_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"MetaAspectSet":"/_nullptr","MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d":"/_nullptr","MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45":"/_nullptr","MetaAspectSet_0b2cc6ca-4e52-a3b4-8528-52d99ba5ce0a":"/_nullptr"}},"MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d":{"125899614":{"reg":{"_":"_","position":{"x":100,"y":100}}},"reg":{"_":"_"},"OTTYuK":{"reg":{"_":"_","position":{"x":265,"y":184}}}},"MetaAspectSet_cbb73169-83bb-6b44-8bb8-65287ae6da45":{"reg":{"_":"_"},"wVrxG5":{"reg":{"_":"_","position":{"x":253,"y":84}}},"HUdIYv":{"reg":{"_":"_","position":{"x":447,"y":196}}},"uvhtpR":{"reg":{"_":"_","position":{"x":119,"y":210}}},"hQ35Nc":{"reg":{"_":"_","position":{"x":511,"y":380}}},"hctkx0":{"reg":{"_":"_","position":{"x":277,"y":523}}},"bfsb0f":{"reg":{"_":"_","position":{"x":121,"y":384}}},"bmDugI":{"reg":{"_":"_","position":{"x":541,"y":68}}},"CkdBRL":{"reg":{"_":"_","position":{"x":64,"y":49}}}},"MetaAspectSet_0b2cc6ca-4e52-a3b4-8528-52d99ba5ce0a":{"reg":{"_":"_"}}},"_meta":{"atr":{"name":{"type":"string"}},"children":{"_sets":{"items":{"302362349":{"reg":{"_":"_"},"atr":{"min":-1,"max":-1}},"reg":{"_":"_"}},"_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"items":"/_nullptr"}}},"reg":{"_sets_":4}}},"__v":"1.2.0","n":"#5da0385e44232ab38f37ecde7ae7687bc9b94862","J":"#f9e70446349fdeaeac93bdab4cbdb9a2172b5bf7"},{"_id":"#e48c2fb1c78a847c96746ac607b46efcf6f6fa09","_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"base":"/_nullptr"}},"atr":{"_relguid":"de5a7e097ce3914f3d834f0c20e7e5b3","name":"FCO"},"reg":{"DisplayFormat":"$name","position":{"x":80,"y":70},"validVisualizers":"ModelEditor METAAspect ICore"},"_meta":{"atr":{"name":{"type":"string"}}},"__v":"1.2.0","_minlenrelid":3},{"0":"#dab23cf520a18b8d47112b4ebac2d63369641409","3":"#e34d1531dd0df9db5b71af23a529bc3ed3ccb962","_id":"#5da0385e44232ab38f37ecde7ae7687bc9b94862","atr":{"_relguid":"dac4f0fa60e2aad11608e81ff3f50195","name":"OthelloGames"},"reg":{"position":{"x":79,"y":110},"SVGIcon":"Locker-lock.svg","isAbstract":true},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"i71PGo":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}}}},"reg":{"_sets_":4}}},"O":"#2eb57701826b0d19a4f5c1e5d07485ddb0952f4b","q":"#d3ca86d5fe6dba1de663e97d441b655a35bfb99d","ovr":{"/q/_meta/children/_sets/items/HO2NoJ":{"member":"/O"},"/q/_meta/_p_currentMove/_sets/items/CMVf77":{"member":"/L"},"/0/_meta/children/_sets/items/u7YUbI":{"member":"/L"},"/O/_meta/children/_sets/items/qhTWNm":{"member":"/0"},"/H/_meta/_p_src/_sets/items/kMPUZR":{"member":"/L"},"/H/_meta/_p_dst/_sets/items/JWsQxk":{"member":"/L"},"/O/_meta/children/_sets/items/8cJ3lz":{"member":"/H"},"/v/z":{"base":"/O"},"/v":{"base":"/q"},"/v/z/K/o":{"base":"/L"},"/v/z/f/2":{"base":"/L"},"/v/z/L/k":{"base":"/L"},"/v/z/V/o":{"base":"/L"},"/v/z/0":{"base":"/0"},"/v/z/p":{"base":"/0"},"/v/z/n":{"base":"/0"},"/v/z/O":{"base":"/0"},"/v/z/s":{"base":"/0"},"/v/z/H":{"base":"/0"},"/v/z/b":{"base":"/0"},"/v/z/8":{"base":"/0"},"/v/z/g":{"base":"/0"},"/v/z/3":{"base":"/0"},"/v/z/d":{"base":"/0"},"/v/z/T":{"base":"/0"},"/v/z/F":{"base":"/0"},"/v/z/7":{"base":"/0"},"/v/z/q":{"base":"/0"},"/v/z/w":{"base":"/0"},"/v/z/I":{"base":"/0"},"/v/z/x":{"base":"/0"},"/v/z/a":{"base":"/0"},"/v/z/N":{"base":"/0"},"/v/z/0m":{"base":"/0"},"/v/z/Q":{"base":"/0"},"/v/z/4":{"base":"/0"},"/v/z/E":{"base":"/0"},"/v/z/B":{"base":"/0"},"/v/z/m":{"base":"/0"},"/v/z/o8":{"base":"/0"},"/v/z/L":{"base":"/0"},"/v/z/v":{"base":"/0"},"/v/z/K":{"base":"/0"},"/v/z/W":{"base":"/0"},"/v/z/6":{"base":"/0"},"/v/z/Z":{"base":"/0"},"/v/z/U":{"base":"/0"},"/v/z/5":{"base":"/0"},"/v/z/f":{"base":"/0"},"/v/z/Y":{"base":"/0"},"/v/z/A":{"base":"/0"},"/v/z/V":{"base":"/0"},"/v/z/FR":{"base":"/0"},"/v/z/8z":{"base":"/0"},"/v/z/DG":{"base":"/0"},"/v/z/2":{"base":"/0"},"/v/z/ef":{"base":"/0"},"/v/z/2C":{"base":"/0"},"/v/z/kp":{"base":"/0"},"/v/z/fk":{"base":"/0"},"/v/z/c":{"base":"/0"},"/v/z/z":{"base":"/0"},"/v/z/t":{"base":"/0"},"/v/z/G":{"base":"/0"},"/v/z/R":{"base":"/0"},"/v/z/Fd":{"base":"/0"},"/v/z/j":{"base":"/0"},"/v/z/Sv":{"base":"/0"},"/v/z/r":{"base":"/0"},"/v/z/z0":{"base":"/0"},"/v/z/1":{"base":"/0"},"/v/z/nI":{"base":"/0"},"/v/z/i":{"base":"/0"},"/v/z/fl":{"base":"/0"},"/v/z/gR":{"base":"/0"},"/v/z/S":{"base":"/0"},"/v/z/ng":{"base":"/0"},"/q/_meta/children/_sets/items/Qs0QO6":{"member":"/u"},"/q/_meta/_p_currentPlayer/_sets/items/ou7RHY":{"member":"/u"},"/v/M":{"base":"/u"},"/v/Y":{"base":"/u"},"/3/_meta/children/_sets/items/gFbMQ5":{"member":"/q"}},"L":"#d87800b849e72d53e66ca47867a6a3d8e056788f","H":"#f01fe7bfb2ce91e703755b919fd27b4d7eed0aef","v":"#7b3056ffd920b5c5577bab0874e64d8d50065e6c","u":"#9238df0ddb2b6b1ded7b17d9006abe2e03b646c8"},{"9":"#6ad8b9183dbdb54b5ac94f6e1a57be54497d88c8","_id":"#f9e70446349fdeaeac93bdab4cbdb9a2172b5bf7","atr":{"_relguid":"a4555f66a67e2afb0d74da6ae74672cf","name":"Games","pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(active_node)\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n    logger.info(states)\n\n      \n   \n","global_counter":0},"reg":{"position":{"x":80,"y":213},"icore-python-modules":""},"__v":"1.2.0","S":"#2f855daffaaa5cc4caf82ee0a2006d29a740dbee","C":"#b9288910568c560d3c3e52b50f20f5002e7c5abf","N":"#6967a2bd089eb9197062e8f7c63ed1fa06977908","V":"#846577ca910c6cf1ae81aec7e48ebaf157d8d849"},{"_id":"#dab23cf520a18b8d47112b4ebac2d63369641409","atr":{"_relguid":"ca7021e91bbbae879f2a49ed008d0640","name":"Tile","column":0,"row":0,"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row][column] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.isValidMove()\n    self.makeNewState()\n    \n  def isValidMove(self):\n    self.is_tile_valid = False\n    self.valid_tiles_to_flip =[]\n    possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n    directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n    current_move_color = core.get_attribute(current_move,'color')\n    next_move_color = possible_next_moves[current_move_color]\n    state_path = game_state[\"nodePath\"]\n    for state in self.states:\n      if state_path == state[\"path\"]:\n        board_ref = state[\"board\"]\n        column = core.get_attribute(current_node,'column')\n        row = core.get_attribute(current_node,'row')\n        if board_ref[row][column]['color'] == None:\n          for direction in directions:\n            tiles_to_flip =[]\n            if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n              tiles_to_flip = [(row + direction[0], column+ direction[1])]\n              multiplier = 2\n              while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 8) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<8):\n                if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                  end_position = (row+direction[0]*multiplier, column +(direction[1]*multiplier))\n                  for position in tiles_to_flip:\n                    self.valid_tiles_to_flip.append(position)\n       \n                  self.is_tile_valid = True\n                tiles_to_flip.append((row+direction[0]*multiplier, column +(direction[1]*multiplier)))\n                multiplier += 1\n    return\n    \n    \n  def makeNewState(self):\n    if not self.is_tile_valid:\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n      return\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    current_name = core.get_attribute(game_state,'name')\n    original_name = 'newGameState'\n    new_number = 0\n    if '_' in current_name:\n      new_number = int(current_name[-1:])+1\n      base_name = current_name[:-2]\n    else:\n      base_name = original_name\n      new_number = 1\n    new_name = f\"{base_name}_{new_number}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n          \n      #Create Piece\n      if(core.is_instance_of(node,META['Board'])):\n        tile_paths = core.get_children_paths(node)\n        for tile_p in tile_paths:\n          tile_node = core.load_by_path(self.root_node,tile_p)\n          if(core.is_instance_of(tile_node,META['Tile'])):\n            tile_node_row = core.get_attribute(tile_node, 'row')\n            tile_node_column = core.get_attribute(tile_node,'column')\n            if(tile_node_row == self.row and tile_node_column == self.column):\n              created_piece = core.create_node({'parent':tile_node,'base':META['Piece']})\n              core.set_attribute(created_piece, \"color\", opposite_color[current_player_color])\n              core.set_pointer(new_game_state,'currentMove',created_piece)\n            elif(tile_node_row, tile_node_column) in self.valid_tiles_to_flip:\n              current_piece_path = core.get_children_paths(tile_node)[0]\n              current_piece = core.load_by_path(self.root_node,current_piece_path)\n              core.set_attribute(current_piece,\"color\", opposite_color[current_player_color])\n              \n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"},"reg":{"position":{"x":569,"y":270},"color":"#0000ff","textColor":"#ffff33","icore-python-modules":""},"__v":"1.2.0","_meta":{"atr":{"column":{"type":"integer","min":0,"max":7,"isPassword":false},"row":{"type":"integer","min":0,"max":7,"isPassword":false}},"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"u7YUbI":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":7}}},"_minlenrelid":2},{"_id":"#e34d1531dd0df9db5b71af23a529bc3ed3ccb962","atr":{"_relguid":"9c57fcd756920c957f8750b5c6ea7c26","name":"GameFolder"},"reg":{"position":{"x":862,"y":58},"SVGIcon":"Folder.svg","validVisualizers":"ModelEditor METAAspect OthelloViz"},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"gFbMQ5":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}}}},"reg":{"_sets_":4}}},"_minlenrelid":2},{"_id":"#2eb57701826b0d19a4f5c1e5d07485ddb0952f4b","atr":{"_relguid":"a70d58970ad6b7acc870f8c88f6e44b1","name":"Board"},"reg":{"position":{"x":244,"y":108},"SVGIcon":"Map.svg"},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"qhTWNm":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":64,"max":64}},"8cJ3lz":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}}}},"reg":{"_sets_":10}}},"_minlenrelid":3},{"_id":"#d3ca86d5fe6dba1de663e97d441b655a35bfb99d","atr":{"_relguid":"299e8ba568b607f2ee87befa9a5648df","name":"GameState"},"reg":{"position":{"x":556,"y":110},"validVisualizers":"ModelEditor METAAspect ICore"},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"HO2NoJ":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":1,"max":1}},"Qs0QO6":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":2,"max":2}}}},"reg":{"_sets_":13}},"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"currentMove":"/_nullptr","currentPlayer":"/_nullptr"}},"_hasownrelation":true,"_p_currentMove":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"CMVf77":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}},"_p_currentPlayer":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"ou7RHY":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}}},"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"currentMove":"/_nullptr","currentPlayer":"/_nullptr"}},"_minlenrelid":2},{"_id":"#d87800b849e72d53e66ca47867a6a3d8e056788f","atr":{"_relguid":"85d7bcc770a93a843b8132242c6e9e83","name":"Piece","color":"white"},"reg":{"position":{"x":384,"y":263},"color":"#000000","decorator":"SVGDecorator","SVGIcon":"Circle.svg","DisplayFormat":"$color","isPort":true,"PortOrientation":"E"},"__v":"1.2.0","_meta":{"atr":{"color":{"type":"string","enum":["white","black"],"isPassword":false}}}},{"_id":"#f01fe7bfb2ce91e703755b919fd27b4d7eed0aef","atr":{"_relguid":"4e3e9277dfba390d9a6f416a6acd9afa","name":"mightFlip"},"reg":{"position":{"x":310,"y":385},"DisplayFormat":"","lineEndArrow":"open-xwide-xlong"},"__v":"1.2.0","_meta":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}},"_hasownrelation":true,"_p_src":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"kMPUZR":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}},"_p_dst":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"JWsQxk":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}}},"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}}},{"_id":"#7b3056ffd920b5c5577bab0874e64d8d50065e6c","atr":{"_relguid":"7a431ed94883998eb43cd428db460111","name":"OthelloGameState"},"reg":{"position":{"x":856,"y":192}},"__v":"1.2.0","z":"#1f81094079e1311394154ac2a182f52d2475a7f6","M":"#0b1196b54a823aa7515f5c0bab5095fad2bfa04e","Y":"#290f25b955841bc8ac1a1861477850e0f96674b7","ovr":{"":{"currentPlayer":"/M"}},"_minlenrelid":2},{"_id":"#9238df0ddb2b6b1ded7b17d9006abe2e03b646c8","atr":{"_relguid":"90a4de06bd1503d62551d38f40cb129d","name":"Player","color":"white"},"reg":{"position":{"x":727,"y":390},"SVGIcon":"<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 320 512\"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d=\"M112 48a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zm40 304V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l58.3 97c9.1 15.1 4.2 34.8-10.9 43.9s-34.8 4.2-43.9-10.9L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152z\"/></svg>"},"__v":"1.2.0","_meta":{"atr":{"color":{"type":"string","enum":["black","white"],"isPassword":false}}}},{"_id":"#6ad8b9183dbdb54b5ac94f6e1a57be54497d88c8","atr":{"_relguid":"0b98ec72c1c6953f56cba62fb8faa7b2","name":"Example"},"reg":{"position":{"x":120,"y":81}},"__v":"1.2.0","z":"#81955e436bca96d21b32b2e78e1bd0e665a1f271","ovr":{"":{"currentMove":"/z/N/M"}},"M":"#fa865129fc7f712df5ede32cc5eb7812907c5017"},{"_id":"#2f855daffaaa5cc4caf82ee0a2006d29a740dbee","atr":{"_relguid":"51e3b9d513f43c71ab457ce9908dd795","name":"Other"},"reg":{"position":{"x":118,"y":129}},"__v":"1.2.0","z":"#90cef67ea9a4b6a942c0ba9d63163877289b23a9","ovr":{"":{"currentMove":"/z/5/8","currentPlayer":"/Y"}},"M":"#fa865129fc7f712df5ede32cc5eb7812907c5017","Y":"#5098474825064e7225208ee6856388a2e7516fcf"},{"_id":"#b9288910568c560d3c3e52b50f20f5002e7c5abf","atr":{"_relguid":"095e04bafb54f9eae28bf0bc7df3523e","name":"newGameState_1"},"reg":{"position":{"x":120,"y":81}},"__v":"1.2.0","z":"#9fb57142d77849514494c9e57338bdea5d9a2ec7","ovr":{"":{"currentMove":"/z/5/N","currentPlayer":"/Y"}},"M":"#fa865129fc7f712df5ede32cc5eb7812907c5017","Y":"#8100197b3df1fcd38e04a4bf549f71b82335d378"},{"_id":"#6967a2bd089eb9197062e8f7c63ed1fa06977908","atr":{"_relguid":"388eca189d80175aae8f1680b5b39552","name":"newGameState_2"},"reg":{"position":{"x":120,"y":81}},"__v":"1.2.0","z":"#7392597d50a129036c40ba103356e24434f9766c","ovr":{"":{"currentMove":"/z/kp/m","currentPlayer":"/M"}},"M":"#ff5c28d01748b60c8c25e876e15e863b9caab3f6","Y":"#8100197b3df1fcd38e04a4bf549f71b82335d378"},{"_id":"#846577ca910c6cf1ae81aec7e48ebaf157d8d849","atr":{"_relguid":"530ca8b45a5f82652f9a9be1804e752c","name":"newGameState_3"},"reg":{"position":{"x":120,"y":81}},"__v":"1.2.0","z":"#40ac993d6375249a2ee45d7b3850737b50f3120b","ovr":{"":{"currentMove":"/z/4/B","currentPlayer":"/Y"}},"M":"#ff5c28d01748b60c8c25e876e15e863b9caab3f6","Y":"#8100197b3df1fcd38e04a4bf549f71b82335d378"},{"0":"#23eeeb9b675cfff257c79dbddc04bd8950f034f0","1":"#74383d5e925cf005e4d0cde1ff035e2799977f97","2":"#c8a9003ae7844fa2f84fb057433c333de31a6311","3":"#b08a93bde2de3fc7c9f8ca1e78244067f1fd2e68","4":"#7b98024cc4004dbbda0b074082ae5da203061616","5":"#17f584b208ba8fc30890f3d8ba63a2d0901e4839","6":"#035c499a135fd6f265488c757861beddb40023bc","7":"#28f03bdc4734fecda197ea0a73c9b7bbb9ba9829","8":"#8eaca7fa8c84d2da640c7968f04e9ff1c3fda540","_id":"#1f81094079e1311394154ac2a182f52d2475a7f6","atr":{"_relguid":"664a0536afd4b51e2becd71c5607293d"},"reg":{"position":{"x":217,"y":111}},"__v":"1.2.0","p":"#86b8b7ad8f81d890600b0607f3af2212d538fbc9","n":"#f20ddfd137f61fa893bf6517e086b0e82c26e733","O":"#6026876a29e8780ba939666b97b4bf502ec1c112","s":"#2e4ede191a443520bd62c3c79aec5bbc553d6e99","H":"#078201e59ed95cbe6d8c607eca36bae589644342","b":"#15bed3f1f8d3bffe785bc70a588d4c9007a4aa95","g":"#af15c260c8d6bc5d70d72c2db9a79404e14ba240","d":"#adc6477152789cc092b0467fb1d7c0d1358b767c","T":"#444265aaa5fe7437e460ce8b77eafb45165c8478","F":"#3c0e3bbbd852ce9991cac31f2806dbf68938a931","q":"#9dd0ec6aca503170096ff41efee7394a063ae1a3","w":"#2892f247d7b1db49a2ec8666aed7ed8b8fdc9afd","I":"#6e18396be876037f7929a42b6b887731fbc5e6a0","x":"#e33ae1e79c56e4ca4517a571a713eef46e7d3c3d","a":"#1c578c9babd6a7fdd84db708901876e32a5c69b0","N":"#3fd90773102cbcbf0455774c611ab51ccfe25e0f","0m":"#44c94f585f6716d32a421333d9194adbe6cc49e2","Q":"#5dc03dd9281fcf38a5df19e42f04832e27f0459b","E":"#a5ee95e013e6984803d452321ea180ba462a71d3","B":"#44e08a11fee5f7f8eb0b15b65e67168c7afd6bcf","m":"#c9d50b72e8c315fe0ae3a067be5f9d2f5746e22a","o8":"#ed049f89d9e3364040121c1960d3bb726e715b88","L":"#e8fd6f8b7b91d7f80eb79378e129ccbc8c44d789","v":"#cea41bc99285e26b1bebfd2bf78555487e3c9a7b","K":"#e2fe1292b7fdd99836f39cc3d6a2fb6cdb04e9a2","W":"#6b6ba56f3f8bcfc2bf60e8e3b96875daeed7064d","Z":"#9323977a63eef12da549aeeb356d29944a28ba7d","U":"#3fd5a02b9a1654a5f05ef36c183a399795509f55","f":"#f20a3eebe648e8c43a87ee793fea2bc97dcde7e0","Y":"#79ab2f863252955aff1f66aeb79a1bbdb967408f","A":"#0bd37db5e9559001d87362456e67e85aa44f4c0c","V":"#3f656bc645f0472027cf25c5f68f2b4ab2a48e8f","FR":"#1b5da3692f9a5356dfb4e1b2847f6146d8eec1ff","8z":"#4e9b5586127e1a3efe9a88853b046476e6cf0567","DG":"#a861896612c354368d08a1dba306e568532b8d60","ef":"#95d87e2065a94368bd1ddb4c10f030141a1d5019","2C":"#e641860e5e90cc879ee49f81b6cdc3ea7ab04a92","kp":"#904b43cb273e34296cb62254786aa8e83f447771","fk":"#0651498cd46a89a48afdec9ee242ad4ffc244c3e","c":"#2c5288d82adee5b7b95a8332f43b68aaffb1fc8c","z":"#52f715a620ce93765a6f95a5d2eb07983e630351","t":"#6a5ee16d9323f1ff0f50141eac973f78d0063e86","G":"#542d311040c718ea079daf0f0d7c6c23d5001d15","R":"#027c27da65ca89d1933692b9abdc28d9a2cf3879","Fd":"#f8ef3a769079d1b4409b438b1285417c978727d4","j":"#61c4fc7325b1dbf664f1b458bc375f06490e3d92","Sv":"#129ebdc1123c11f84132d601b32eb3e25b7e1ac0","r":"#53d61a9ec4003b9d335673a4b68ed9e0676ad748","z0":"#d4128364dd297979c3817ef5f31192587f6e3a39","nI":"#1d0de3ef5a53e0870fd4b1a14374b06657c3b4e0","i":"#e62450e95f70c018e8ba47e63be20ccd642a50a1","fl":"#3c0411a015d693f705a76bedb789f80636a57898","gR":"#fd95f038f09ebf8f2dacc93066e55f1766e15329","S":"#0281cef5f21cff776f3efc889a71d9945e3ce1bd","ng":"#6270bcc05388aa69b0edc264d421c1bf3310c350","_minlenrelid":3},{"_id":"#0b1196b54a823aa7515f5c0bab5095fad2bfa04e","atr":{"_relguid":"b86010eb4f88e7515102047b8254c8e1","name":"PlayerBlack","color":"black"},"reg":{"position":{"x":42,"y":90},"color":"#666666"},"__v":"1.2.0"},{"_id":"#290f25b955841bc8ac1a1861477850e0f96674b7","atr":{"_relguid":"d5638bbad76cdde81ee4304c091efaa0","name":"PlayerWhite"},"reg":{"position":{"x":38,"y":197},"color":"#ffffff"},"__v":"1.2.0"},{"4":"#70b448e047200f90afbe422a29958e48ffb383d7","5":"#460af5660237c709f37afdf7fc29b94298327b64","_id":"#81955e436bca96d21b32b2e78e1bd0e665a1f271","N":"#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","__v":"1.2.0","y":"#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","K":"#75e709f4444c354fc28b17f4d38e3c85fdb473e8","ovr":{"/y":{"src":"/N/M","dst":"/K/o"},"/Gv":{"src":"/N/M","dst":"/f/2"},"/ev":{"src":"/N/M","dst":"/L/k"}},"Gv":"#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","f":"#c969d48894f791370b838a6d40d2127f03769f65","ev":"#b82e7bb033e7051d762d7f932a83db54df638e89","L":"#410a1e7254a75f90323fe521981ad444f761e30f","reg":{"position":{"x":220,"y":109}},"x":"#9e1861b16799beb8e0718832cb2410424fae295e","d":"#c1de8796460d55280ca75ec40f3948d255ac660e","a":"#6a90274f4e72da054270515625a6c3cc0248b565"},{"_id":"#fa865129fc7f712df5ede32cc5eb7812907c5017","reg":{"position":{"x":40,"y":89}},"__v":"1.2.0"},{"4":"#70b448e047200f90afbe422a29958e48ffb383d7","5":"#b33844fc50d9fe9cc8cc8af706bbbcd71814ffb4","_id":"#90cef67ea9a4b6a942c0ba9d63163877289b23a9","N":"#ba318edb77cc00ebb4f3fa0526baa9282cd1951c","__v":"1.2.0","K":"#75e709f4444c354fc28b17f4d38e3c85fdb473e8","f":"#56792e1665bdc9b3619410a386ac89d070c28db5","L":"#91cdba05e71f6a8b17e3799ef3a5d2f98c0ca6fa","reg":{"position":{"x":221,"y":110}},"UX":"#c61b0b692ab6bc12a81bb90faa4f87fcca10669d","ovr":{"/UX":{"src":"/5/8","dst":"/f/2"}}},{"_id":"#5098474825064e7225208ee6856388a2e7516fcf","reg":{"position":{"x":44,"y":203}},"__v":"1.2.0","_hasownrelation":true},{"4":"#70b448e047200f90afbe422a29958e48ffb383d7","5":"#424ebe071b6ec5e64d12d0acc1433b4851778739","_id":"#9fb57142d77849514494c9e57338bdea5d9a2ec7","N":"#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","__v":"1.2.0","y":"#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","K":"#75e709f4444c354fc28b17f4d38e3c85fdb473e8","ovr":{"/y":{"src":"/N/M","dst":"/K/o"},"/Gv":{"src":"/N/M","dst":"/f/2"},"/ev":{"src":"/N/M","dst":"/L/k"}},"Gv":"#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","f":"#67a1ff7b6af35ba58bbe4f898b8009b3f782164b","ev":"#b82e7bb033e7051d762d7f932a83db54df638e89","L":"#410a1e7254a75f90323fe521981ad444f761e30f","reg":{"position":{"x":220,"y":109}},"x":"#9e1861b16799beb8e0718832cb2410424fae295e","d":"#c1de8796460d55280ca75ec40f3948d255ac660e","a":"#6a90274f4e72da054270515625a6c3cc0248b565"},{"_id":"#8100197b3df1fcd38e04a4bf549f71b82335d378","_hasownrelation":true,"__v":"1.2.0"},{"4":"#70b448e047200f90afbe422a29958e48ffb383d7","5":"#424ebe071b6ec5e64d12d0acc1433b4851778739","_id":"#7392597d50a129036c40ba103356e24434f9766c","N":"#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","__v":"1.2.0","y":"#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","K":"#75e709f4444c354fc28b17f4d38e3c85fdb473e8","ovr":{"/y":{"src":"/N/M","dst":"/K/o"},"/Gv":{"src":"/N/M","dst":"/f/2"},"/ev":{"src":"/N/M","dst":"/L/k"}},"Gv":"#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","f":"#e1ab00a1aeae5606ee36eef2398f5e271828e2af","ev":"#b82e7bb033e7051d762d7f932a83db54df638e89","L":"#410a1e7254a75f90323fe521981ad444f761e30f","reg":{"position":{"x":220,"y":109}},"x":"#9e1861b16799beb8e0718832cb2410424fae295e","d":"#c1de8796460d55280ca75ec40f3948d255ac660e","a":"#6a90274f4e72da054270515625a6c3cc0248b565","kp":"#03fbc7e300a2d8f214521e7e13703795d6d00862"},{"_id":"#ff5c28d01748b60c8c25e876e15e863b9caab3f6","reg":{"position":{"x":40,"y":89}},"__v":"1.2.0","_hasownrelation":true},{"4":"#e9bf1d0a3f57225db17cfe8249e0268a06182b7e","5":"#424ebe071b6ec5e64d12d0acc1433b4851778739","_id":"#40ac993d6375249a2ee45d7b3850737b50f3120b","N":"#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","__v":"1.2.0","y":"#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","K":"#c6425a55cec4fc2f832d9224c2628791fd152884","ovr":{"/y":{"src":"/N/M","dst":"/K/o"},"/Gv":{"src":"/N/M","dst":"/f/2"},"/ev":{"src":"/N/M","dst":"/L/k"}},"Gv":"#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","f":"#e1ab00a1aeae5606ee36eef2398f5e271828e2af","ev":"#b82e7bb033e7051d762d7f932a83db54df638e89","L":"#6eae4dce368285c31781a720126b00e7be24da34","reg":{"position":{"x":220,"y":109}},"x":"#9e1861b16799beb8e0718832cb2410424fae295e","d":"#c1de8796460d55280ca75ec40f3948d255ac660e","a":"#6a90274f4e72da054270515625a6c3cc0248b565","kp":"#03fbc7e300a2d8f214521e7e13703795d6d00862"},{"_id":"#23eeeb9b675cfff257c79dbddc04bd8950f034f0","atr":{"_relguid":"93050a20f5d34fffe847a4bc57bd8f76"},"reg":{"position":{"x":52,"y":118}},"__v":"1.2.0"},{"_id":"#74383d5e925cf005e4d0cde1ff035e2799977f97","atr":{"_relguid":"c95b72b9b9cfd7736b894bec3d2ee024","row":6},"reg":{"position":{"x":63,"y":458}},"__v":"1.2.0"},{"_id":"#c8a9003ae7844fa2f84fb057433c333de31a6311","atr":{"_relguid":"079b97a26061d78ef0634c86637585a1","column":7,"row":5},"reg":{"position":{"x":1033,"y":408}},"__v":"1.2.0"},{"_id":"#b08a93bde2de3fc7c9f8ca1e78244067f1fd2e68","atr":{"_relguid":"8a9b8a69378577b723a35c4d930a4af0","column":1,"row":1},"reg":{"position":{"x":191,"y":181}},"__v":"1.2.0"},{"_id":"#7b98024cc4004dbbda0b074082ae5da203061616","atr":{"_relguid":"23412e0db81b959916fb9c5a84d6531b","column":4,"row":2},"reg":{"position":{"x":616,"y":231}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#17f584b208ba8fc30890f3d8ba63a2d0901e4839","atr":{"_relguid":"db34853d754813db9a0a985aab24941d","column":2,"row":4},"reg":{"position":{"x":333,"y":348}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#035c499a135fd6f265488c757861beddb40023bc","atr":{"_relguid":"d7e6a1373c1c590bfd3c8d26efb34aff","column":1,"row":3},"reg":{"position":{"x":196,"y":291}},"__v":"1.2.0"},{"_id":"#28f03bdc4734fecda197ea0a73c9b7bbb9ba9829","atr":{"_relguid":"b36571ffe53b557aaad333b8d79636ea","column":5,"row":1},"reg":{"position":{"x":751,"y":181}},"__v":"1.2.0"},{"_id":"#8eaca7fa8c84d2da640c7968f04e9ff1c3fda540","atr":{"_relguid":"3c602f586059a8722567029e88c2a5ff","column":7},"reg":{"position":{"x":1030,"y":117}},"__v":"1.2.0"},{"_id":"#86b8b7ad8f81d890600b0607f3af2212d538fbc9","atr":{"_relguid":"c16dc2505194558cd913cf1e660bce4a","column":1},"reg":{"position":{"x":192,"y":118}},"__v":"1.2.0"},{"_id":"#f20ddfd137f61fa893bf6517e086b0e82c26e733","atr":{"_relguid":"65d1f30c655545d8a7798002e014d137","column":2},"reg":{"position":{"x":328,"y":122}},"__v":"1.2.0"},{"_id":"#6026876a29e8780ba939666b97b4bf502ec1c112","atr":{"_relguid":"75ba0f823c746eebe4a9a1e373a8155c","column":3},"reg":{"position":{"x":465,"y":118}},"__v":"1.2.0"},{"_id":"#2e4ede191a443520bd62c3c79aec5bbc553d6e99","atr":{"_relguid":"17ee31a1ad46afa7d05bf671702f4ecc","column":4},"reg":{"position":{"x":610,"y":117}},"__v":"1.2.0"},{"_id":"#078201e59ed95cbe6d8c607eca36bae589644342","atr":{"_relguid":"c80e963d91f6060f3f369716c9b10fbe","column":5},"reg":{"position":{"x":750,"y":117}},"__v":"1.2.0"},{"_id":"#15bed3f1f8d3bffe785bc70a588d4c9007a4aa95","atr":{"_relguid":"d17d9d5c54ead6f7f0f05a121a5fed4e","column":6},"reg":{"position":{"x":890,"y":117}},"__v":"1.2.0"},{"_id":"#af15c260c8d6bc5d70d72c2db9a79404e14ba240","atr":{"_relguid":"045de758d25b7d97e60188bd4c55fd7e","row":1},"reg":{"position":{"x":51,"y":181}},"__v":"1.2.0"},{"_id":"#adc6477152789cc092b0467fb1d7c0d1358b767c","atr":{"_relguid":"a1779651260fea72f77210b53de99691","column":2,"row":1},"reg":{"position":{"x":331,"y":181}},"__v":"1.2.0"},{"_id":"#444265aaa5fe7437e460ce8b77eafb45165c8478","atr":{"_relguid":"a0f1d671002f37985c0125fb6278c09c","column":3,"row":1},"reg":{"position":{"x":471,"y":181}},"__v":"1.2.0"},{"_id":"#3c0e3bbbd852ce9991cac31f2806dbf68938a931","atr":{"_relguid":"8f764cd7d1720772b71eb2b238868a70","column":6,"row":1},"reg":{"position":{"x":891,"y":181}},"__v":"1.2.0"},{"_id":"#9dd0ec6aca503170096ff41efee7394a063ae1a3","atr":{"_relguid":"b29094effe820ff7ce41b1e96f9fe233","column":4,"row":1},"reg":{"position":{"x":611,"y":181}},"__v":"1.2.0"},{"_id":"#2892f247d7b1db49a2ec8666aed7ed8b8fdc9afd","atr":{"_relguid":"b4d878213a4d722305983f75c6460be9","column":7,"row":1},"reg":{"position":{"x":1031,"y":181}},"__v":"1.2.0"},{"_id":"#6e18396be876037f7929a42b6b887731fbc5e6a0","atr":{"_relguid":"e167d9bb84ec86ffaa762cbe34404e48","row":2},"reg":{"position":{"x":56,"y":231}},"__v":"1.2.0"},{"_id":"#e33ae1e79c56e4ca4517a571a713eef46e7d3c3d","atr":{"_relguid":"d8e26fa1107e9c19b57494b73d346105","column":1,"row":2},"reg":{"position":{"x":196,"y":231}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#1c578c9babd6a7fdd84db708901876e32a5c69b0","atr":{"_relguid":"8cfb2a09459bad8780bfbb749a1f1357","column":2,"row":2},"reg":{"position":{"x":336,"y":231}},"__v":"1.2.0"},{"_id":"#3fd90773102cbcbf0455774c611ab51ccfe25e0f","atr":{"_relguid":"64ae1953ee0620dc3d56ed5a61a1d31e","column":3,"row":2},"reg":{"position":{"x":476,"y":231}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#44c94f585f6716d32a421333d9194adbe6cc49e2","atr":{"_relguid":"a7cbbccc3a5a1a8b20b094f97d6fb27d","column":6,"row":2},"reg":{"position":{"x":896,"y":231}},"__v":"1.2.0"},{"_id":"#5dc03dd9281fcf38a5df19e42f04832e27f0459b","atr":{"_relguid":"789c51560e1b9086988d25a409c958d3","column":5,"row":2},"reg":{"position":{"x":756,"y":231}},"__v":"1.2.0"},{"_id":"#a5ee95e013e6984803d452321ea180ba462a71d3","atr":{"_relguid":"72185ad70f31e019a22e2e663efd89ab","column":7,"row":2},"reg":{"position":{"x":1036,"y":231}},"__v":"1.2.0"},{"_id":"#44e08a11fee5f7f8eb0b15b65e67168c7afd6bcf","atr":{"_relguid":"609a4cc589d7a86bf8ad10810ae06acc","column":2,"row":3},"reg":{"position":{"x":336,"y":291}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#c9d50b72e8c315fe0ae3a067be5f9d2f5746e22a","atr":{"_relguid":"b5ea59b267cd0873b07f9af4f708f2aa","row":3},"reg":{"position":{"x":56,"y":291}},"__v":"1.2.0"},{"_id":"#ed049f89d9e3364040121c1960d3bb726e715b88","atr":{"_relguid":"d62eab8938af6094f606f15a551ae63b","column":7,"row":3},"reg":{"position":{"x":1036,"y":291}},"__v":"1.2.0"},{"_id":"#e8fd6f8b7b91d7f80eb79378e129ccbc8c44d789","atr":{"_relguid":"793e6dbb398bb2d72b05839a7633b948","column":4,"row":3},"reg":{"position":{"x":616,"y":291}},"__v":"1.2.0","k":"#ff675bf0fb1df8285345be1fc9808aa410896632","_minlenrelid":2},{"_id":"#cea41bc99285e26b1bebfd2bf78555487e3c9a7b","atr":{"_relguid":"efed97eef7968ab9bcc5a0699ec74a17","column":6,"row":3},"reg":{"position":{"x":896,"y":291}},"__v":"1.2.0"},{"_id":"#e2fe1292b7fdd99836f39cc3d6a2fb6cdb04e9a2","atr":{"_relguid":"5d71233d6b906514bc630c553df66700","column":3,"row":3},"reg":{"position":{"x":476,"y":291}},"__v":"1.2.0","o":"#53c83e26e8400260f1da48fc083e2f88a9ab7664","_minlenrelid":2},{"_id":"#6b6ba56f3f8bcfc2bf60e8e3b96875daeed7064d","atr":{"_relguid":"fedfbfb2be557627a6f7af99c5bc1667","column":5,"row":3},"reg":{"position":{"x":756,"y":291}},"__v":"1.2.0"},{"_id":"#9323977a63eef12da549aeeb356d29944a28ba7d","atr":{"_relguid":"46998c807cc87d81d923ee2fc808e9f3","row":4},"reg":{"position":{"x":53,"y":348}},"__v":"1.2.0"},{"_id":"#3fd5a02b9a1654a5f05ef36c183a399795509f55","atr":{"_relguid":"3588b70dad86c3e9f0a71a2c9b8feff6","column":1,"row":4},"reg":{"position":{"x":193,"y":348}},"__v":"1.2.0"},{"2":"#694c9e6ba054d1e5c5f02c9f1d4537264f60443e","_id":"#f20a3eebe648e8c43a87ee793fea2bc97dcde7e0","atr":{"_relguid":"977e25598ef373513045a35a44490dba","column":3,"row":4},"reg":{"position":{"x":473,"y":348}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#79ab2f863252955aff1f66aeb79a1bbdb967408f","atr":{"_relguid":"5902dc5bf1d67d58081720c19d663c4d","column":6,"row":4},"reg":{"position":{"x":893,"y":348}},"__v":"1.2.0"},{"_id":"#0bd37db5e9559001d87362456e67e85aa44f4c0c","atr":{"_relguid":"51d85e24c1aaa1c24cc898640a04a2e4","column":5,"row":4},"reg":{"position":{"x":753,"y":348}},"__v":"1.2.0"},{"_id":"#3f656bc645f0472027cf25c5f68f2b4ab2a48e8f","atr":{"_relguid":"7d539aff8c9c0a232635fc14f315feda","column":4,"row":4},"reg":{"position":{"x":613,"y":348}},"__v":"1.2.0","o":"#471440e46ec3330f854fdf6868d3cc129a895f5b"},{"_id":"#1b5da3692f9a5356dfb4e1b2847f6146d8eec1ff","atr":{"_relguid":"0569b99d8a18ad74ba175f85ab3c064d","column":7,"row":4},"reg":{"position":{"x":1033,"y":348}},"__v":"1.2.0"},{"_id":"#4e9b5586127e1a3efe9a88853b046476e6cf0567","atr":{"_relguid":"21e6aa9d2a3a7587e51a1305d71928c3","column":2,"row":5},"reg":{"position":{"x":333,"y":408}},"__v":"1.2.0"},{"_id":"#a861896612c354368d08a1dba306e568532b8d60","atr":{"_relguid":"beb623b57d91aaaf22a0ca42587def72","row":5},"reg":{"position":{"x":53,"y":408}},"__v":"1.2.0"},{"_id":"#95d87e2065a94368bd1ddb4c10f030141a1d5019","atr":{"_relguid":"45c795c7fb6f87a60aab2c4b3efff395","column":4,"row":5},"reg":{"position":{"x":613,"y":408}},"__v":"1.2.0"},{"_id":"#e641860e5e90cc879ee49f81b6cdc3ea7ab04a92","atr":{"_relguid":"3a38ced0c0e863ab3c7edb41ebd6b75d","column":6,"row":5},"reg":{"position":{"x":893,"y":408}},"__v":"1.2.0"},{"_id":"#904b43cb273e34296cb62254786aa8e83f447771","atr":{"_relguid":"ad8d24dfbcc807cb508db6d2fd3e832c","column":3,"row":5},"reg":{"position":{"x":473,"y":408}},"__v":"1.2.0","_minlenrelid":2},{"_id":"#0651498cd46a89a48afdec9ee242ad4ffc244c3e","atr":{"_relguid":"1347dd00e6dfcbb0aa56ebe350cfdd7e","column":5,"row":5},"reg":{"position":{"x":753,"y":408}},"__v":"1.2.0"},{"_id":"#2c5288d82adee5b7b95a8332f43b68aaffb1fc8c","atr":{"_relguid":"0f5e349f0fd76c5bc29096858b001e62","column":1,"row":5},"reg":{"position":{"x":193,"y":408}},"__v":"1.2.0"},{"_id":"#52f715a620ce93765a6f95a5d2eb07983e630351","atr":{"_relguid":"536525ed5d6ecacdb90ea3a36d9df2c7","column":7,"row":7},"reg":{"position":{"x":1043,"y":518}},"__v":"1.2.0"},{"_id":"#6a5ee16d9323f1ff0f50141eac973f78d0063e86","atr":{"_relguid":"c33e8c998b582243329327229531e684","row":7},"reg":{"position":{"x":63,"y":518}},"__v":"1.2.0"},{"_id":"#542d311040c718ea079daf0f0d7c6c23d5001d15","atr":{"_relguid":"916159b908477b9054f27ab6f4d96dc1","column":2,"row":7},"reg":{"position":{"x":343,"y":518}},"__v":"1.2.0"},{"_id":"#027c27da65ca89d1933692b9abdc28d9a2cf3879","atr":{"_relguid":"da1019bb86fc46a5d0806b543f904336","column":7,"row":6},"reg":{"position":{"x":1043,"y":458}},"__v":"1.2.0"},{"_id":"#f8ef3a769079d1b4409b438b1285417c978727d4","atr":{"_relguid":"899c66dc6e6a55b5b59a65771bc8f5fa","column":5,"row":6},"reg":{"position":{"x":763,"y":458}},"__v":"1.2.0"},{"_id":"#61c4fc7325b1dbf664f1b458bc375f06490e3d92","atr":{"_relguid":"3d175dad8472605bd86cd8e18ee20ba3","column":6,"row":6},"reg":{"position":{"x":903,"y":458}},"__v":"1.2.0"},{"_id":"#129ebdc1123c11f84132d601b32eb3e25b7e1ac0","atr":{"_relguid":"3a0fc756bb1fc84fa3af16be4b557f52","column":3,"row":6},"reg":{"position":{"x":483,"y":458}},"__v":"1.2.0"},{"_id":"#53d61a9ec4003b9d335673a4b68ed9e0676ad748","atr":{"_relguid":"7cc1c3ca1b280f01f161c76db012a79f","column":2,"row":6},"reg":{"position":{"x":343,"y":458}},"__v":"1.2.0"},{"_id":"#d4128364dd297979c3817ef5f31192587f6e3a39","atr":{"_relguid":"81f490857efe48f94b5ff43ccfd480ac","column":1,"row":6},"reg":{"position":{"x":203,"y":458}},"__v":"1.2.0"},{"_id":"#1d0de3ef5a53e0870fd4b1a14374b06657c3b4e0","atr":{"_relguid":"1be8c98e1b8fe7e34b31d15ad3d99d52","column":5,"row":7},"reg":{"position":{"x":763,"y":518}},"__v":"1.2.0"},{"_id":"#e62450e95f70c018e8ba47e63be20ccd642a50a1","atr":{"_relguid":"5b1476fb15a0c49708045d32e8b90593","column":3,"row":7},"reg":{"position":{"x":483,"y":518}},"__v":"1.2.0"},{"_id":"#3c0411a015d693f705a76bedb789f80636a57898","atr":{"_relguid":"54f9ecb573b858d0c8e5280c4e96510b","column":6,"row":7},"reg":{"position":{"x":903,"y":518}},"__v":"1.2.0"},{"_id":"#fd95f038f09ebf8f2dacc93066e55f1766e15329","atr":{"_relguid":"0a285699e694dcc508b2e99edc775c29","column":4,"row":7},"reg":{"position":{"x":623,"y":518}},"__v":"1.2.0"},{"_id":"#0281cef5f21cff776f3efc889a71d9945e3ce1bd","atr":{"_relguid":"4d0db12b29409d6bf1d09a88450f29e5","column":1,"row":7},"reg":{"position":{"x":203,"y":518}},"__v":"1.2.0"},{"_id":"#6270bcc05388aa69b0edc264d421c1bf3310c350","atr":{"_relguid":"055207b4309a9b71678b2dd56b699261","column":4,"row":6},"reg":{"position":{"x":623,"y":458}},"__v":"1.2.0"},{"_id":"#70b448e047200f90afbe422a29958e48ffb383d7","__v":"1.2.0"},{"_id":"#460af5660237c709f37afdf7fc29b94298327b64","reg":{"icore-python-modules":""},"__v":"1.2.0"},{"_id":"#4813fdbc17b5fccdce676a9b5c9aebc5309f1beb","M":"#bff5cff5f5c055f7ee5e1665372317a9c59d76b0","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n    if(self.isValidMove()!= True):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    name_counter = 0\n    name_counter += 1\n    new_name = f\"new_game_state_{name_counter}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Current Move to Newly Placed Piece\n    current_move_path = core.get_pointer_path(new_game_state,'currentMove')\n    current_move = core.load_by_path(self.root_node, current_move_path)\n    core.set_pointer(new_game_state,'currentMove',current_move)\n    \n      \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n    \n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":""}},{"_id":"#85f2d41d5fb82aca3e0f6e8744656ec9954eeffd","atr":{"_relguid":"dd4ece6409ed0617e98af8c318570502"},"reg":{"position":{"x":480,"y":260}},"__v":"1.2.0"},{"_id":"#75e709f4444c354fc28b17f4d38e3c85fdb473e8","o":"#768fea2ca2c4964c141fe2170c0f90f5ea2a9db5","__v":"1.2.0"},{"_id":"#40a9ee951fa819a4fd7fda3244a0b0cb3edba93b","atr":{"_relguid":"9e2300182b8501fbe6af7d107f55d9a5"},"reg":{"position":{"x":475,"y":290}},"__v":"1.2.0"},{"2":"#8100197b3df1fcd38e04a4bf549f71b82335d378","_id":"#c969d48894f791370b838a6d40d2127f03769f65","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n    logger.info(states)\n    self.states = states\n    logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    logger.info(self.makeNewState())\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n  if(self.isValidMove()!= True):\n     return 'IS NOT A VALID MOVE'\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    #Current Player Path\n    currentPlayer_path = core.get_pointer_path(current_node,'currentPlayer')\n    newGameState = core.copy_nodes(game_state,game_folder)\n    newGameState_name = core.get_attribute(newGameState, 'newState')\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n    \n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":"","position":{"x":470,"y":351}}},{"_id":"#b82e7bb033e7051d762d7f932a83db54df638e89","atr":{"_relguid":"232d44ace5cf90d452790e8ea8f6ac9a"},"reg":{"position":{"x":550,"y":260}},"__v":"1.2.0"},{"_id":"#410a1e7254a75f90323fe521981ad444f761e30f","k":"#8100197b3df1fcd38e04a4bf549f71b82335d378","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n    if(self.isValidMove()!= True):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    name_counter = 0\n    name_counter += 1\n    new_name = f\"new_game_state_{name_counter}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Current Move to Newly Placed Piece\n    current_move_path = core.get_pointer_path(new_game_state,'currentMove')\n    current_move = core.load_by_path(self.root_node, current_move_path)\n    core.set_pointer(new_game_state,'currentMove',current_move)\n    \n      \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n    \n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":"","position":{"x":620,"y":289}}},{"_id":"#9e1861b16799beb8e0718832cb2410424fae295e","reg":{"icore-python-modules":""},"__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n    self.is_tile_valid = False\n    self.valid_tiles_to_flip =[]\n    possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n    directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n    current_move_color = core.get_attribute(current_move,'color')\n    next_move_color = possible_next_moves[current_move_color]\n    state_path = game_state[\"nodePath\"]\n    for state in self.states:\n      if state_path == state[\"path\"]:\n        board_ref = state[\"board\"]\n        column = core.get_attribute(current_node,'column')\n        row = core.get_attribute(current_node,'row')\n        if board_ref[row][column]['color'] == None:\n          for direction in directions:\n            valid_tiles_to_flip =[]\n            if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n              valid_tiles_to_flip = [(row + direction[0], column+ direction[1])]\n              multiplier = 2\n              while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 8) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<8):\n                if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                  end_position = (row+direction[0]*multiplier, column +(direction[1]*multiplier))\n                  for position in valid_tiles_to_flip:\n                    self.valid_tiles_to_flip.append(position)\n                  self.is_tile_valid = True\n                  valid_tiles_to_flip.append((row+direction[0]*multiplier, column +(direction[1]*multiplier)))\n                multiplier += 1\n    \n    \n  def makeNewState(self):\n    self.isValidMove()\n    if (not self.is_tile_valid):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n      return \n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    original_name = 'newGameState'\n    if '_' in original_name:\n      new_number = int(original_name[-1:])+1\n      base_name = original_name[:-2]\n    else:\n      base_name = original_name\n      new_number = 1\n    new_name = f\"{base_name}_{new_number}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n          \n      #Create Piece\n      if(core.is_instance_of(node,META['Board'])):\n        tile_paths = core.get_children_paths(node)\n        for tile_p in tile_paths:\n          tile_node = core.load_by_path(self.root_node,tile_p)\n          if(core.is_instance_of(tile_node,META['Tile'])):\n            tile_node_row = core.get_attribute(tile_node, 'row')\n            tile_node_column = core.get_attribute(tile_node,'column')\n            if(tile_node_row == self.row and tile_node_column == self.column):\n              created_piece = core.create_node({'parent':tile_node,'base':META['Piece']})\n              core.set_attribute(created_piece, \"color\", opposite_color[current_player_color])\n              core.set_pointer(new_game_state,'currentMove',created_piece)\n            elif(tile_node_row,tile_node_column) in self.valid_tiles_to_flip:\n              current_piece_path = core.get_children_paths(tile_node)[0]\n              current_piece = core.load_by_path(self.root,current_piece_path)\n              core.set_attribute(current_piece,\"color\",opposite_color)\n              \n            \n\n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"}},{"_id":"#c1de8796460d55280ca75ec40f3948d255ac660e","reg":{"icore-python-modules":""},"__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    tiles_toflip =[]\n    is_tile_valid = False\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n    possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n    directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n    current_move_color = core.get_attribute(current_move,'color')\n    next_move_color = possible_next_moves[current_move_color]\n    state_path = game_state[\"nodePath\"]\n    for state in self.states:\n      if state_path == state[\"path\"]:\n        board_ref = state[\"board\"]\n        column = core.get_attribute(current_node,'column')\n        row = core.get_attribute(current_node,'row')\n        if board_ref[row][column]['color'] == None:\n          for direction in directions:\n            if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n              multiplier = 2\n              while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 8) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<8):\n                if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                  return True\n                multiplier += 1\n      return False\n    \n    \n  def makeNewState(self):\n    if(self.isValidMove()!= True):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    original_name = 'newGameState'\n    if '_' in original_name:\n      new_number = int(original_name[-1:])+1\n      base_name = original_name[:-2]\n    else:\n      base_name = original_name\n      new_number = 1\n    new_name = f\"{base_name}_{new_number}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n          \n      #Create Piece\n      if(core.is_instance_of(node,META['Board'])):\n        tile_paths = core.get_children_paths(node)\n        for tile_p in tile_paths:\n          tile_node = core.load_by_path(self.root_node,tile_p)\n          if(core.is_instance_of(tile_node,META['Tile'])):\n            tile_node_row = core.get_attribute(tile_node, 'row')\n            tile_node_column = core.get_attribute(tile_node,'column')\n            if(tile_node_row == self.row and tile_node_column == self.column):\n              created_piece = core.create_node({'parent':tile_node,'base':META['Piece']})\n              core.set_attribute(created_piece, \"color\", opposite_color[current_player_color])\n              core.set_pointer(new_game_state,'currentMove',created_piece)\n              break\n\n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"}},{"_id":"#6a90274f4e72da054270515625a6c3cc0248b565","reg":{"icore-python-modules":""},"__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n    self.is_tile_valid = False\n    self.valid_tiles_to_flip =[]\n    possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n    directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n    current_move_color = core.get_attribute(current_move,'color')\n    next_move_color = possible_next_moves[current_move_color]\n    state_path = game_state[\"nodePath\"]\n    for state in self.states:\n      if state_path == state[\"path\"]:\n        board_ref = state[\"board\"]\n        column = core.get_attribute(current_node,'column')\n        row = core.get_attribute(current_node,'row')\n        if board_ref[row][column]['color'] == None:\n          for direction in directions:\n            valid_tiles_to_flip =[]\n            if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n              valid_tiles_to_flip = ([row+direction[0]][column+direction[1]])\n              multiplier = 2\n              while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 8) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<8):\n                if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                  end_position = (row+direction[0]*multiplier, column +(direction[1]*multiplier))\n                  for position in valid_tiles_to_flip:\n                    self.valid_tiles_to_flip.append(position)\n                  self.is_tile_valid = True\n                  valid_tiles_to_flip.append((row+direction[0]*multiplier, column +(direction[1]*multiplier)))\n                multiplier += 1\n    \n    \n  def makeNewState(self):\n    self.isValidMove()\n    if (not self.is_tile_valid):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n      return \n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    original_name = 'newGameState'\n    if '_' in original_name:\n      new_number = int(original_name[-1:])+1\n      base_name = original_name[:-2]\n    else:\n      base_name = original_name\n      new_number = 1\n    new_name = f\"{base_name}_{new_number}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n          \n      #Create Piece\n      if(core.is_instance_of(node,META['Board'])):\n        tile_paths = core.get_children_paths(node)\n        for tile_p in tile_paths:\n          tile_node = core.load_by_path(self.root_node,tile_p)\n          if(core.is_instance_of(tile_node,META['Tile'])):\n            tile_node_row = core.get_attribute(tile_node, 'row')\n            tile_node_column = core.get_attribute(tile_node,'column')\n            if(tile_node_row == self.row and tile_node_column == self.column):\n              created_piece = core.create_node({'parent':tile_node,'base':META['Piece']})\n              core.set_attribute(created_piece, \"color\", opposite_color[current_player_color])\n              core.set_pointer(new_game_state,'currentMove',created_piece)\n            elif(tile_node_row,tile_node_column) in self.valid_tiles_to_flip:\n              current_piece_path = core.get_children_paths(tile_node)[0]\n              current_piece = core.load_by_path(self.root,current_piece_path)\n              core.set_attribute(current_piece,\"color\",opposite_color)\n              \n            \n\n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"}},{"8":"#7a05e4c86819a273ff34e60b68abd6ab7cfe99f0","_id":"#b33844fc50d9fe9cc8cc8af706bbbcd71814ffb4","reg":{"position":{"x":333,"y":351}},"__v":"1.2.0"},{"_id":"#ba318edb77cc00ebb4f3fa0526baa9282cd1951c","M":"#bff5cff5f5c055f7ee5e1665372317a9c59d76b0","__v":"1.2.0"},{"2":"#8100197b3df1fcd38e04a4bf549f71b82335d378","_id":"#56792e1665bdc9b3619410a386ac89d070c28db5","__v":"1.2.0"},{"_id":"#91cdba05e71f6a8b17e3799ef3a5d2f98c0ca6fa","k":"#8100197b3df1fcd38e04a4bf549f71b82335d378","__v":"1.2.0"},{"_id":"#c61b0b692ab6bc12a81bb90faa4f87fcca10669d","atr":{"_relguid":"e5a20e6acb1ee4ce7f95da6f66edb257"},"reg":{"position":{"x":400,"y":350}},"__v":"1.2.0"},{"_id":"#424ebe071b6ec5e64d12d0acc1433b4851778739","reg":{"icore-python-modules":""},"__v":"1.2.0","N":"#07ebd729884939d74b2d79ebd8669d2d7748700a"},{"2":"#45ed917e9eb162df47884c2be2053c37c8cea9e8","_id":"#67a1ff7b6af35ba58bbe4f898b8009b3f782164b","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n    logger.info(states)\n    self.states = states\n    logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    logger.info(self.makeNewState())\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n  if(self.isValidMove()!= True):\n     return 'IS NOT A VALID MOVE'\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    #Current Player Path\n    currentPlayer_path = core.get_pointer_path(current_node,'currentPlayer')\n    newGameState = core.copy_nodes(game_state,game_folder)\n    newGameState_name = core.get_attribute(newGameState, 'newState')\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n    \n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":"","position":{"x":470,"y":351}}},{"2":"#768fea2ca2c4964c141fe2170c0f90f5ea2a9db5","_id":"#e1ab00a1aeae5606ee36eef2398f5e271828e2af","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n    logger.info(states)\n    self.states = states\n    logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    logger.info(self.makeNewState())\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n  if(self.isValidMove()!= True):\n     return 'IS NOT A VALID MOVE'\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    #Current Player Path\n    currentPlayer_path = core.get_pointer_path(current_node,'currentPlayer')\n    newGameState = core.copy_nodes(game_state,game_folder)\n    newGameState_name = core.get_attribute(newGameState, 'newState')\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n    \n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":"","position":{"x":470,"y":351}}},{"_id":"#03fbc7e300a2d8f214521e7e13703795d6d00862","m":"#57d4a5d5bcb23cfd7b7d7bd2a712ada0cc831149","__v":"1.2.0"},{"_id":"#e9bf1d0a3f57225db17cfe8249e0268a06182b7e","__v":"1.2.0","B":"#e2fbe3ccc51426c3c969803f7c0ebec74d84939c"},{"_id":"#c6425a55cec4fc2f832d9224c2628791fd152884","o":"#45ed917e9eb162df47884c2be2053c37c8cea9e8","__v":"1.2.0"},{"_id":"#6eae4dce368285c31781a720126b00e7be24da34","k":"#45ed917e9eb162df47884c2be2053c37c8cea9e8","__v":"1.2.0","atr":{"pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    self.namespace = None\n    global_counter = core.set_attribute(core.get_parent(core.get_parent(core.get_parent(active_node))),'global_counter',0)\n    META = self.META\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    nodesList = core.load_sub_tree(core.get_parent(core.get_parent(core.get_parent(active_node))))\n    nodes = {}\n    states=[]\n    \n    \n    for node in nodesList:\n      nodes[core.get_path(node)] = node\n      self.nodes = nodes\n      \n    for path in nodes:\n      node = nodes[path]\n      game_state={}\n      \n      if (core.is_instance_of(node, META['GameState'])):\n        game_state['name'] = core.get_attribute(node, 'name')\n        game_state['path'] = path\n        states.append(game_state)\n        \n        #currentPlayer Path\n        currentPlayer_path = core.get_pointer_path(node,'currentPlayer')\n        player = nodes[currentPlayer_path]\n        game_state['currentPlayer'] = core.get_attribute(player, 'currentPlayer')\n        \n        #currentPlayer Color\n        currentPlayer_color = core.get_attribute(player, 'color')\n        #logger.info(currentPlayer_color)\n        \n        #currentPlayer Move\n        currentPlayer_move = core.get_pointer_path(node, 'currentMove')\n        curr = nodes[currentPlayer_move]\n        currentMove = {}\n        currentMove['color'] = core.get_attribute(curr, 'color')\n        currentMove['row'] = core.get_attribute(curr, 'row')\n        currentMove['column']= core.get_attribute(curr, 'column')\n        game_state['currentPlayerMove'] = currentMove\n        \n        rows = 8\n        columns = 8\n        board = [[0 for _ in range(columns)] for _ in range(rows)]\n        game_state['board'] = board\n        \n      if (core.is_instance_of(node, META['Tile'])):\n        for game_state in states:\n          if game_state[\"path\"][:4] == path[:4]:\n            row = core.get_attribute(node, 'row')\n            column = core.get_attribute(node, 'column')\n            children = core.get_children_paths(node)\n            flips = []\n            childColor = None\n            childPath = None\n            if len(children) > 0:\n              childPath = children[0]\n              childColor = core.get_attribute(nodes[childPath], 'color')\n              for ePaths in nodes:\n                eNode = nodes[ePaths]\n                if(core.is_instance_of(eNode, META['mightFlip'])):\n                  srcTile = core.get_parent(nodes[core.get_pointer_path(eNode,'src')])\n                  dstTile = core.get_parent(nodes[core.get_pointer_path(eNode,'dst')])\n                  dstInfo = {'column': core.get_attribute(dstTile,'column'),'row': core.get_attribute(dstTile,'row')}\n                  if node == srcTile:\n                    flips.append(dstInfo)\n                    \n            game_state[\"board\"][row-1][column-1] = {\"color\":childColor, 'flips':flips} \n        \n   # logger.info(states)\n    self.states = states\n    #logger.info(\"Valid Move: {}\".format(self.isValidMove()))\n    self.makeNewState()\n    \n  def isValidMove(self):\n      possible_next_moves = {\"black\":\"white\",\"white\":\"black\"}\n      directions = [(0,0),(0,1),(1,0),(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]\n      logger = self.logger\n      core = self.core\n      current_node = self.active_node\n      META = self.META\n      board = core.get_parent(current_node)\n      game_state = core.get_parent(board)\n      current_move = self.nodes[core.get_pointer_path(game_state,\"currentMove\")]\n      current_move_color = core.get_attribute(current_move,'color')\n      next_move_color = possible_next_moves[current_move_color]\n      state_path = game_state[\"nodePath\"]\n      for state in self.states:\n        if state_path == state[\"path\"]:\n          board_ref = state[\"board\"]\n          column = core.get_attribute(current_node,'column')\n          row = core.get_attribute(current_node,'row')\n          if board_ref[row][column]['color'] == None:\n            for direction in directions:\n              if board_ref[row+direction[0]][column+direction[1]]['color'] == current_move_color:\n                multiplier = 2\n                while(row + (direction[0]*multiplier) > 0 and row + (direction[0]*multiplier) < 9) and (column + (direction[1]*multiplier) >0 and column + (direction[1]*multiplier)<9):\n                  if board_ref[row + direction[0]*multiplier][column + (direction[1]*multiplier)]['color'] == next_move_color:\n                     return True\n                     multiplier += 1\n      return False\n  def makeNewState(self):\n    if(self.isValidMove()!= True):\n      self.logger.error('THIS IS NOT A VALID MOVE')\n      self.create_message(self.active_node, 'THIS IS NOT A VALID MOVE')\n    \n    logger = self.logger\n    core = self.core\n    current_node = self.active_node\n    META = self.META\n    board = core.get_parent(current_node)\n    \n    \n    # Make new Game State\n    game_state = core.get_parent(board)\n    game_folder = core.get_parent(game_state)\n    self.row = core.get_attribute(current_node, 'row')\n    self.column = core.get_attribute(current_node, 'column')\n    new_game_state = core.copy_node(game_state,game_folder)\n    name_counter = 0\n    name_counter += 1\n    new_name = f\"new_game_state_{name_counter}\"\n    core.set_attribute(new_game_state, \"name\", new_name)\n    \n    #Current Move to Newly Placed Piece\n    current_move_path = core.get_pointer_path(new_game_state,'currentMove')\n    current_move = core.load_by_path(self.root_node, current_move_path)\n    core.set_pointer(new_game_state,'currentMove',current_move)\n    \n      \n    #Children of new Game State\n    children_new_state = core.get_children_paths(new_game_state)\n    \n    \n    #Switch Player\n    opposite_color = {\"black\":\"white\",\"white\":\"black\"}\n    current_player_path = core.get_pointer_path(new_game_state,'currentPlayer')\n    current_player = core.load_by_path(self.root_node, current_player_path)\n    current_player_color = core.get_attribute(current_player, 'color')\n    logger.info(current_player_color)\n    \n    for path in children_new_state:\n      node = core.load_by_path(self.root_node, path)\n      if(core.is_instance_of(node,META['Player'])):\n        current_node_color = core.get_attribute(node,'color')\n        if(current_node_color == opposite_color[current_player_color]):\n          logger.info(current_node_color)\n          core.set_pointer(new_game_state,'currentPlayer',node)\n    \n\n    self.util.save(self.root_node,self.commit_hash, self.branch_name)\n\n    \n      \n\n      \n\n\n      \n   \n\n"},"reg":{"icore-python-modules":"","position":{"x":620,"y":289}}},{"_id":"#ff675bf0fb1df8285345be1fc9808aa410896632","atr":{"_relguid":"a87f98d2863fc730057a749f86355325","color":"black"},"reg":{"position":{"x":384.44444444444446,"y":236.66666666666666}},"__v":"1.2.0"},{"_id":"#53c83e26e8400260f1da48fc083e2f88a9ab7664","atr":{"_relguid":"5dd82262e9c3e540c2c7a61bce2f524b"},"reg":{"position":{"x":301.1111111111111,"y":260}},"__v":"1.2.0"},{"_id":"#694c9e6ba054d1e5c5f02c9f1d4537264f60443e","atr":{"_relguid":"674218b312737ba2c4fda01cdb6f863c","color":"black"},"reg":{"position":{"x":277.77777777777777,"y":185.55555555555554}},"__v":"1.2.0"},{"_id":"#471440e46ec3330f854fdf6868d3cc129a895f5b","atr":{"_relguid":"ba818650e8cafdf65bb2a01c249d5096"},"reg":{"position":{"x":441,"y":250}},"__v":"1.2.0"},{"_id":"#bff5cff5f5c055f7ee5e1665372317a9c59d76b0","atr":{"_relguid":"61c9a37b00c42036a4df21b44454e5c3","color":"black"},"reg":{"position":{"x":313,"y":99}},"__v":"1.2.0"},{"_id":"#768fea2ca2c4964c141fe2170c0f90f5ea2a9db5","_hasownrelation":true,"__v":"1.2.0","atr":{"color":"black"}},{"_id":"#7a05e4c86819a273ff34e60b68abd6ab7cfe99f0","atr":{"_relguid":"09afeaa7bbceaa21b480bea8115bc335"},"reg":{"position":{"x":267.5,"y":212}},"__v":"1.2.0"},{"_id":"#07ebd729884939d74b2d79ebd8669d2d7748700a","atr":{"_relguid":"3190eb099a3d18ab049909e3a871e2f2","color":"white"},"__v":"1.2.0"},{"_id":"#45ed917e9eb162df47884c2be2053c37c8cea9e8","_hasownrelation":true,"__v":"1.2.0","atr":{"color":"white"}},{"_id":"#57d4a5d5bcb23cfd7b7d7bd2a712ada0cc831149","atr":{"_relguid":"aa9c0bc3b0e0ebd0349acb3608eb2431","color":"black"},"__v":"1.2.0"},{"_id":"#e2fbe3ccc51426c3c969803f7c0ebec74d84939c","atr":{"_relguid":"68cbc6cee740ec01e4a59f81ad8bffdb","color":"white"},"__v":"1.2.0"}]}